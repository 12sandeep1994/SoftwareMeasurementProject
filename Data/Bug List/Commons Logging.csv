Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Due Date,Votes,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Blocker),Outward issue link (Duplicate),Outward issue link (Reference),Outward issue link (Regression),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Colour),Custom field (Epic Link),Custom field (Epic Name),Custom field (Epic Status),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Add Automatic-Module-Name Manifest Header for Java 9 compatibility,LOGGING-165,13104503,Improvement,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,,,leon_a,leon_a,23/Sep/17 11:01,01/Mar/18 13:48,07/Apr/19 20:35,,1.2,,,,,,,,,1.2.1,,0,,," Ading modularity headers so that other module can import it

[My project|https://github.com/leonchen83/redis-replicator] using commons-logging as dependency. 
When I use maven build my project. shows following warning:

[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ redis-replicator ---
[WARNING] ********************************************************************************************************************
[WARNING] * Required filename-based automodules detected. Please don't publish this project to a public artifact repository! *
[WARNING] ********************************************************************************************************************

The root cause is commons-logging-1.2 is not a standard java 9 module(miss module-info.java). 

Env:
java version ""9""
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-23 18:25:03.593,,,false,,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 01 13:48:18 UTC 2018,,,,,,0|i3kg9z:,9223372036854775807,,,,,,,,23/Sep/17 18:25;b.eckenfels;Care to elaborate what this is about? Is that about adding modularity headers or are code changes needed?,24/Sep/17 01:21;leon_a;Sorry. I added description about this issue.,26/Sep/17 14:56;britter;I'll add the Automatic-Module-Name header as a first fix and see if that is enough to fix this for the reporter.,26/Sep/17 15:12;britter;This looks like it will get complicated. See https://lists.apache.org/thread.html/cc12dd872e25335eda054da2c995672e33ffd9c4764270485d346b4d@%3Cdev.commons.apache.org%3E,"26/Sep/17 21:04;britter;{code}
~/w/a/c/commons-logging > svn ci -m ""LOGGING-165: Add Automatic-Module-Name Manifest Header for Java 9 compatibility.""
Sending        pom.xml
Sending        src/changes/changes.xml
Transmitting file data ..done
Committing transaction...
Committed revision 1809785.
{code}

Please check out whether the jar build from trunk works for you.","09/Oct/17 02:53;leon_a;Thanks. I will check this jar later.
But how do you solve the following jar package conflict.
commons-logging.jar
commons-logging-adapters.jar
commons-logging-api.jar
","09/Oct/17 07:45;leon_a;Hi 
I tested the jar build from trunk.
This is works for me.
I cant see the maven warning now.","01/Mar/18 08:04;leon_a;hi 
Is there any plan to upload 1.2.1 to maven central?","01/Mar/18 13:48;b.eckenfels;Yes, we distribute all releases also as ready built binaries to maven central. But there is no fixed time between releases, happens whenever a committer has time and volunteers as release manager.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomStringUtils' random method infinite loop,LOGGING-164,13020015,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Invalid,,anedumar,anedumar,11/Nov/16 03:42,11/Nov/16 03:43,07/Apr/19 20:35,11/Nov/16 03:43,,,,,,,,,,,,0,,,"The following code goes into an infinite loop.

RandomStringUtils.random(1, 0, 0, false, true, new char[] { 'a' })

I know it doesn't make sense to pass letters=false and then an array, but a bug in the caller will fall into this trap.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 11 03:43:42 UTC 2016,,,,,,0|i367g7:,9223372036854775807,,,,,,,,11/Nov/16 03:43;anedumar;Sorry raised in the wrong component.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BufferedReader is not closed properly,LOGGING-163,13012880,Bug,Resolved,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,garydgregory,kal0ian,kal0ian,17/Oct/16 14:30,26/Sep/17 14:59,07/Apr/19 20:35,17/Oct/16 17:28,1.1.1,1.2,,,,,,,,1.2.1,,0,,,"In LogFactory class at line 552 there is BufferedReader that is not closed properly. For example if rd.readLine(); throw an exception then the Reader will remain open.
{code}
 BufferedReader rd;
try {
    rd = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
 } catch (java.io.UnsupportedEncodingException e) {
     rd = new BufferedReader(new InputStreamReader(is));
}

String factoryClassName = rd.readLine();
rd.close();
{code}

In SimpleLog class at line 163 there is InputStream that is not closed properly. 

{code}
        InputStream in = getResourceAsStream(""simplelog.properties"");
        if(null != in) {
            try {
                simpleLogProps.load(in);
                in.close();
            } catch(java.io.IOException e) {
                // ignored
            }
        }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-17 17:28:54.059,,,false,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 17 17:28:54 UTC 2016,,,,,,0|i34zgn:,9223372036854775807,,,,,,,,"17/Oct/16 17:28;garydgregory;Thank you for the report.

Fix in SVN trunk.

{noformat}
commit -m ""[LOGGING-163] BufferedReader is not closed properly."" -N E:/vcs/svn/apache/commons/trunks-proper/logging/src/main/java/org/apache/commons/logging/LogFactory.java E:/vcs/svn/apache/commons/trunks-proper/logging/src/main/java/org/apache/commons/logging/impl/SimpleLog.java E:/vcs/svn/apache/commons/trunks-proper/logging/src/changes/changes.xml
    notify.commit.modified
    notify.commit.modified
    notify.commit.modified
    notify.commit.transmit
    Unknown action received: commit finalizing
    Committed revision 1765341.
{noformat}

You can test from SVN trunk or a SNAPSHOT build from https://repository.apache.org/content/repositories/snapshots/

Note that Log4j 2 is what some of us consider a much better logging API and superseding Commons Logging.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.commons.discovery.DiscoveryException,LOGGING-162,12904100,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Not A Problem,,vijendra07kulhade,vijendra07kulhade,12/Oct/15 07:12,26/Feb/18 18:52,07/Apr/19 20:35,26/Feb/18 18:52,1.0.4,,,,,,,,,,,0,newbie,,org.apache.commons.discovery.DiscoveryException: Class org.apache.commons.logging.impl.SLF4JLogFactory does not implement org.apache.commons.logging.LogFactory,Tomcat 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-12 09:00:14.715,,,false,,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 12 09:00:14 UTC 2015,,,,,,0|i2mvh3:,9223372036854775807,,,,,,,,"12/Oct/15 07:15;vijendra07kulhade;I am using slf4j in my application. During Axis client call I am getting above exception.
<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
            <version>1.7.12</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
            <version>1.7.12</version>
		</dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
            <version>1.7.12</version>
        </dependency>","12/Oct/15 07:26;vijendra07kulhade;I tried adding 

<dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.5.11</version>
        </dependency>
 After adding this I am getting below Exception from Spring.

org.springframework.web.context.ContextLoaderListener
java.lang.NoSuchMethodError: org.slf4j.spi.LocationAwareLogger.log(Lorg/slf4j/Marker;Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V


Please Help.","12/Oct/15 09:00;joehni;The error messaqe is a result of the initialization of Apache Commons Logging. However, the message clearly states, that it cannot find an implementation. Slf4j is an independent project and does not belong to Apache. You have to consult slf4j's documentation, how to substitute properly Apache Commons Logging.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
commons-logging-adapters on Central lacks a pom.xml,LOGGING-161,12780876,Bug,Resolved,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,cvrebert,cvrebert,10/Mar/15 14:50,10/Mar/15 20:40,07/Apr/19 20:35,10/Mar/15 20:40,1.1.0,,,,,,,,,,,0,,,"{{commons-logging-adapters}} version {{1.1}}, as published on Maven Central, is currently missing a {{pom.xml}}.
See https://repo1.maven.org/maven2/commons-logging/commons-logging-adapters/1.1/ and http://search.maven.org/#artifactdetails%7Ccommons-logging%7Ccommons-logging-adapters%7C1.1%7CN%2FA

Per the ""Sufficient Metadata"" section of http://central.sonatype.org/pages/requirements.html , the artifact is required to have a {{pom.xml}}. Also, the lack of a {{pom.xml}} seems to cause problems for some build tools (Ivy/sbt in my case).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-10 15:12:25.257,,,false,,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 10 20:40:41 UTC 2015,,,,,,0|i26l0v:,9223372036854775807,,,,,,,,"10/Mar/15 15:12;joehni;That GAV is bogus anyway. Use a newer release, the artifact is now available as attached artifact with the standard GAV and the classifier ""adapters"".","10/Mar/15 16:51;cvrebert;Thanks for the info. It's unfortunately a dependency of a dependency for me, but I've forwarded your advice and filed a bug in the dependency: https://github.com/validator/validator/issues/57",10/Mar/15 20:40;tn;Can't be fixed as outlined by Joerg. The problem is anyway solved as the project in question updated its logging dependency.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1.2,LOGGING-160,12759567,New Feature,Resolved,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Invalid,,ChuBa,ChuBa,05/Dec/14 01:57,07/Jan/15 21:12,07/Apr/19 20:35,07/Jan/15 21:12,1.2,,,,,,,,,,,0,,,,,,,,,,,,,PIG-3600,LUCENE-5111,HADOOP-3485,XALANC-701,HBASE-10122,ZOOKEEPER-2000,ANY23-66,HBASE-6110,HDFS-5960,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-08 01:53:30.337,,,false,,,,,,,,,,,,,,,9223372036854775807,,,Wed Jan 07 21:12:59 UTC 2015,,,,,,0|i232vz:,9223372036854775807,,,,,,,,08/Dec/14 01:53;garydgregory;[~ChuBa]: What is this issue about?,07/Jan/15 21:12;tn;Closing as invalid.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExternalFonts uses classloader of class in font-box,LOGGING-159,12742063,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Invalid,,c.hoeflake,c.hoeflake,17/Sep/14 07:42,17/Sep/14 08:15,07/Apr/19 20:35,17/Sep/14 08:15,2.0,,,,,,,,,,,0,,,"ExternalFonts loads some default fonts via the org.apache.fontbox.util.ResourceLoader. That resourceloader uses it's own classloader (ResourceLoader.class.getClassLoader()) for loading the given resource.
The problem is that the resource is in the PDFBox project and the ResourceLoader in the FontBox. In an OSGI environment this is a problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 17 08:15:21 UTC 2014,,,,,,0|i20587:,9223372036854775807,,,,,,,,"17/Sep/14 08:15;c.hoeflake;Sorry, wrong project.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Replace WeakHashtable with WeakHashMap,LOGGING-158,12723960,Improvement,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,,,tn,tn,26/Jun/14 20:33,26/Jun/14 20:56,07/Apr/19 20:35,,,,,,,,,,,2.0,,0,,,When dropping support for Java 1.1 we could also replace the custom WeakHashtable that is used internally with a WeakHashMap which is supported since Java 1.2. This would also allow to clean up some deprecated code as a Hashtable does not allow null keys.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,402145,,,Thu Jun 26 20:56:10 UTC 2014,,,,,,0|i1x7vj:,402210,,,,,,,,26/Jun/14 20:56;tn;Moving to 2.0 as it will not be possible in the 1.x branch due to b/c issues.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix javadoc 1.8 errors and some warnings,LOGGING-157,12692651,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,scop,scop,01/Feb/14 10:17,09/Jul/14 20:14,07/Apr/19 20:35,26/Jun/14 20:13,,,,,,,,,,1.2,,0,patch,,,,,,,,,,,,,,,,,,,,,,,,01/Feb/14 10:17;scop;0001-Fix-Javadoc-1.8-errors-and-some-warnings.patch;https://issues.apache.org/jira/secure/attachment/12626466/0001-Fix-Javadoc-1.8-errors-and-some-warnings.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-06-26 20:13:18.742,,,false,,,,,,,,,,,,,,,371246,,,Thu Jun 26 20:13:18 UTC 2014,,,,,,0|i1rzd3:,371549,,,,,,,,"26/Jun/14 20:13;tn;Applied patch with some minor additions in r1605899.

Thanks for the patch and report!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SecurityAllowedTestCase is failing,LOGGING-156,12690778,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,mizdebsk,mizdebsk,23/Jan/14 14:54,09/Jul/14 20:14,07/Apr/19 20:35,27/Jun/14 09:38,2.0,,,,,,,,,1.2,,0,,,"{{SecurityAllowedTestCase}} fails randomly, which could indicate either a bug in the test case or in the implementation.

On some random condition the call to {{log.info(""testing"");}} in the test case results in  security exceptions, which are recorded by {{MockSecurityManager}} causing the test case to fail.  Adding a call to {{Thread.sleep}} just before or just after the call to {{log.info}} helps with reproducing the problem.

The path leading to SecurityException being thrown is:
{code:a=none}
java.lang.SecurityException: Untrusted code [testcase] found
	at org.apache.commons.logging.security.MockSecurityManager.checkPermission(MockSecurityManager.java:126)
	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1529)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:305)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	at java.util.ResourceBundle$RBClassLoader.loadClass(ResourceBundle.java:450)
	at java.util.ResourceBundle$Control.newBundle(ResourceBundle.java:2566)
	at java.util.ResourceBundle.loadBundle(ResourceBundle.java:1436)
	at java.util.ResourceBundle.findBundle(ResourceBundle.java:1400)
	at java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:1296)
	at java.util.ResourceBundle.getBundle(ResourceBundle.java:721)
	at java.util.logging.Level.getLocalizedLevelName(Level.java:259)
	at java.util.logging.SimpleFormatter.format(SimpleFormatter.java:161)
	at java.util.logging.StreamHandler.publish(StreamHandler.java:196)
	at java.util.logging.ConsoleHandler.publish(ConsoleHandler.java:105)
	at java.util.logging.Logger.log(Logger.java:610)
	at java.util.logging.Logger.doLog(Logger.java:631)
	at java.util.logging.Logger.logp(Logger.java:747)
	at org.apache.commons.logging.impl.Jdk14Logger.log(Jdk14Logger.java:87)
	at org.apache.commons.logging.impl.Jdk14Logger.info(Jdk14Logger.java:176)
	at org.apache.commons.logging.security.SecurityAllowedTestCase.testAllAllowed(SecurityAllowedTestCase.java:115)
{code}","Maven 3.1.1, OpenJDK 1.7 (IcedTea 2.4.4), Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-06-27 09:38:33.444,,,false,,,,,,,,,,,,,,,369516,,,Fri Jun 27 09:38:33 UTC 2014,,,,,,0|i1rot3:,369821,,,,,,,,"27/Jun/14 09:38;tn;Fixed in r1606000.

The reason for the test error was because OpenJDK loads some ResourceBundles without calling AccessController#doPrivileged().

Our test setup assumed that this was an unprivileged access and thus reported the error, but this is wrong imho.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Please delete old releases from mirroring system,LOGGING-155,12681348,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Invalid,,sebb@apache.org,sebb@apache.org,26/Nov/13 19:38,26/Nov/13 20:00,07/Apr/19 20:35,26/Nov/13 20:00,,,,,,,,,,,,0,,,"To reduce the load on the ASF mirrors, projects are required to delete old releases [1]

Please can you remove all non-current releases?

Thanks!

[Note that older releases are always available from the ASF archive server]

[1] http://www.apache.org/dev/release.html#when-to-archive
","http://www.apache.org/dist/logging/log4j/
http://www.apache.org/dist/logging/log4net/binaries/
http://www.apache.org/dist/logging/log4php/",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-11-26 19:45:44.504,,,false,,,,,,,,,,,,,,,360613,,,Tue Nov 26 20:00:31 UTC 2013,,,,,,0|i1q5wv:,360912,,,,,,,,"26/Nov/13 19:45;tn;wrong project ;-)

There seems to be no Apache Logging TLP on jira, otherwise I would have moved it already.
Maybe move it to Log4J2?","26/Nov/13 20:00;sebb@apache.org;Oops!
See:  LOG4J2-456  LOG4NET-410  LOG4PHP-212",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
New attributes to be added in common logger manifest,LOGGING-154,12663605,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,hgusain,hgusain,14/Aug/13 10:15,09/Jul/14 20:14,07/Apr/19 20:35,14/Aug/13 13:05,,,,,,,,,,,,0,,,"Hi ,

We are using Commons logging  jar by apache.
But, due to new java 7 releases by oracle our applet starts throwing the new prompts they introduced for mixed code in their java 7 update 21 release<http://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html>.
Now to remove these prompts I have to add the Trusted-Library: true attribute into the Manifest.mf of all the jars we are using.
We also want to add the attribute Permissions: all-permissions to the manifest of the commons logging jar as per java 7 update 25<http://www.oracle.com/technetwork/java/javase/7u25-relnotes-1955741.html>.
Can you please provide a jar containing the two attributes in their Manifest.mf.

Regards
Himanshu Gusain
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-14 13:05:10.075,,,false,,,,,,,,,,,,,,,343606,,,Wed Aug 14 13:05:10 UTC 2013,,,,,,0|i1n98n:,343910,,,,,,,,"14/Aug/13 13:05;sebb@apache.org;As per the reply to the similar request for HttpClient [1]

'Trusted-Library' attribute is Applet runtime specific attribute. We do not distribute signed version of the HttpClient jars and therefore are not in a position to declare the library trusted. This is a responsibility of those who package and sign HttpClient jars as a part of an Applet distribution.

Same goes for RIA environments and the 'Permissions' attribute. Without specifying a 'Codebase' we are not in a position to set permission level to 'all-permissions'

[1] https://issues.apache.org/jira/browse/HTTPCLIENT-1386",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add .entry() and .exit(),LOGGING-153,12652841,New Feature,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,lathspell,lathspell,14/Jun/13 09:31,09/Jul/14 20:14,07/Apr/19 20:35,15/Jul/13 21:08,1.1.2,,,,,,,,,,,0,,,"While playing around with log4j 2.x I found the log.entry() and log.exit() functions quite handy. They are just small wrappers around log.trace(""entering"") resp. log.trace(""exiting"") but still... would you mind to include those as well?
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-14 13:01:49.839,,,false,,,,,,,,,,,,,,,333164,,,Tue Jul 16 19:55:40 UTC 2013,,,,,,0|i1lh1r:,333492,,,,,,,,"14/Jun/13 13:01;garydgregory;Granted it is in beta, but why not plan on migrating to Log4J2 with the logging back-end of your choice?",14/Jun/13 13:20;lathspell;My project uses other packages that already use commons-logging so I wanted log4j2 as the backend and use commons-logging as facade in case I want to switch to something different. Therefore I do not want to depend on the log4j2 API.,"14/Jun/13 14:10;garydgregory;I am suggesting you can use Log4J2 as the facade and SLF4J as the back-end.

Feel free to provide a patch to commons-logging though ;)","18/Jun/13 13:14;lathspell;Inspired by your comment I read a bit about the various loggers and switched from commons logging to SLF4J (with logback), so you might as well close this wishtlist bug :-)","15/Jul/13 21:08;tn;Changes on the Log interface are not going to happen.
As suggested, better alternatives exist.",16/Jul/13 19:55;ebourg;This could be technically possible with Java 8 though.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Helper class that redirects OutputStream to Log,LOGGING-152,12646986,Improvement,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,,,dma_k,dma_k,10/May/13 08:25,10/May/13 08:33,07/Apr/19 20:35,,1.1.1,,,,,,,,,,,0,,,"Some libraries accept {{PrintStream}} or {{OutputStream}} as a target for debug messages to be printed to. The attached class acts as a bridge between {{OutputStream}} and {{org.apache.commons.logging.Log}}.

Example of usage:
{code}
PrintStream loggingPrintStream = new PrintStream(new LoggingOutputStream(logger, LoggingOutputStream.LogLevel.INFO, ""[XJC] ""));

com.sun.tools.xjc.Driver.run(opts, loggingPrintStream, loggingPrintStream);
{code}

Also has some overlap with LOGGING-110.",,,,,,,,,,,,,,,,,,,,,,10/May/13 08:30;dma_k;LoggingOutputStream.java;https://issues.apache.org/jira/secure/attachment/12582595/LoggingOutputStream.java,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,327343,,,2013-05-10 08:25:10.0,,,,,,0|i1kh9z:,327687,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Invalid OSGi bundle id,LOGGING-151,12641526,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,kdaniel,kdaniel,09/Apr/13 06:31,20/May/13 17:22,07/Apr/19 20:35,15/Apr/13 18:48,1.1.2,,,,,,,,,1.1.3,,1,,,"Version 1.1.2 got a Manifest.mf that supports OSGi. Unfortunately, the bundle id specified there is incorrect. According to http://wiki.osgi.org/wiki/Bundle-SymbolicName ""A BSN often takes the form of a reverse domain name. "" So the proper and expected name would be org.apache.commons.logging .",,,,,,,,,,,,,,,,,,,,LOGGING-124,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-09 07:37:48.392,,,false,,,,,,,,,,,,,,,321942,,,Mon Apr 15 18:48:00 UTC 2013,,,,,,0|i1jjpb:,322287,,,,,,,,"09/Apr/13 07:37;tn;The same page also states:

{noformat}
If automatically generated via Maven Bundle Plugin, takes the form ${pom.groupId}.${pom.artifactId}, or ${pom.artifactId} if it already starts with ${pom.groupId}. 
{noformat}

and this is what has been used as the groupId/artifactId is still commons-logging.","09/Apr/13 08:19;kdaniel;Yes, I'm aware of that. I'd question the existing groupId/artifactId, too, if only had not it been used for such a long time in its current form.
The same wiki page provides an example which is in the form of a reverse domain name notation. Also, commons-logging is a widely distributed as an OSGI bundle in Eclipse, which wraps it as org.apache.commons.logging (according to http://wiki.eclipse.org/index.php/Naming_Conventions). 

Maven conventions (https://maven.apache.org/guides/mini/guide-naming-conventions.html) suggest groupId on a project level (org.apache.commons is listed as an example), so a natural consequence would be naming a jar logging.jar and getting ${pom.groupId}.${pom.artifactId} resolved to org.apache.commons.logging.

This is of course a very drastic change to the whole community, and I don't want to insist on it (although it would be nice).

I'm, however, using this package in Fedora, and it has been osgified there, and in Eclipse, for a long time, with org.apache.commons.logging id. Current name (commons-logging) is a breaker for me, and I'll have to patch it otherwise.","09/Apr/13 08:28;ebourg;For the record, Commons Collection which is still in the old commons-collections groupId has been OSGified with:

{code}Bundle-SymbolicName: org.apache.commons.collections{code}

Same thing with Commons Lang.","09/Apr/13 08:28;tn;The next release will update the groupId to org.apache.commons and we will also update the symbolic name accordingly.

Edit: prior to the 1.1.2 release the symbolic name was already changed to org.apache.commons.logging, but was reverted to commons-logging based on a patch from an Apache Felix committer (see LOGGING-124).",09/Apr/13 08:33;ebourg;If the next release has a new groupId that means it will be binary incompatible and live in a different package. That leaves the 1.1.x line with broken OSGi metadata forever.,11/Apr/13 18:33;tn;If everybody agrees that this is the right thing to do we can also do a quick 1.1.3 release which contains only this change.,11/Apr/13 21:57;garydgregory;I like following in [lang] and [collections]'s footsteps and a more conventional BSN.,"15/Apr/13 18:48;tn;BSN changed to ""org.apache.commons.logging"" in r1468180.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add documentation on how to use commons logging in OSGi environments,LOGGING-149,12634479,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,britter,britter,britter,27/Feb/13 20:10,20/May/13 17:22,07/Apr/19 20:35,21/Mar/13 08:50,1.1.1,,,,,,,,,,,0,,,"As pointed out on the commons dev ML [1] and felix dev ML [2] it does not seem to be possible to make commons logging ready for OSGi.

There are some alternatives (repackaged bundles, using pax logging) to using commons logging directly in OSGi. This should be documented on the website.

[1] http://markmail.org/message/277c5mrpdpcfj4wr
[2] http://www.mail-archive.com/dev%40felix.apache.org/msg28887.html",,,,,,,,,,,,,,,,,,,,LOGGING-124,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,314972,,,Thu Mar 21 08:50:59 UTC 2013,,,,,,0|i1icp3:,315316,,,,,,,,27/Feb/13 20:23;britter;This should better be added to the FAQ (http://wiki.apache.org/commons/Logging/FrequentlyAskedQuestions) in the wiki.,27/Feb/13 20:54;britter;I've added a new subsection to http://wiki.apache.org/commons/Logging/FrequentlyAskedQuestions. Please comment!,21/Mar/13 08:50;britter;Closing this issue as discussed on the ML: http://markmail.org/message/i7knxxfmp5f24alk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFactory.diagnosticPrefix and diagnosticsStream could be final,LOGGING-148,12599313,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,18/Jul/12 18:31,20/Mar/13 20:11,07/Apr/19 20:35,18/Jul/12 23:48,1.1.1,,,,,,,,,1.1.2,,0,,,"The static fields LogFactory.diagnosticPrefix and diagnosticsStream could be final.

This would require inlining the code for the private method initDiagnostics() which is only called from the static{} block.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,252758,,,Wed Jul 18 23:48:44 UTC 2012,,,,,,0|i0d7fr:,74981,,,,,,,,"18/Jul/12 23:48;sebb@apache.org;Proved easier to inline part of the method and keep the rest.

URL: http://svn.apache.org/viewvc?rev=1363177&view=rev
Log:
LOGGING-148 - LogFactory.diagnosticPrefix and diagnosticsStream could be final

Modified:
    commons/proper/logging/trunk/RELEASE-NOTES.txt
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/LogFactory.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SimpleLog.log - unsafe update of shortLogName,LOGGING-147,12599310,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,sebb@apache.org,sebb@apache.org,18/Jul/12 18:23,20/Mar/13 20:11,07/Apr/19 20:35,18/Jul/12 23:31,1.1.1,,,,,,,,,1.1.2,,0,,,"shortLogName is lazily updated, but:

1) field is not volatile, so is not safely published
2) fiels is written twice, so if log is called by two threads, one might get a partial update.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,252759,,,Wed Jul 18 23:31:47 UTC 2012,,,,,,0|i0d7fz:,74982,,,,,,,,"18/Jul/12 23:31;sebb@apache.org;Used temporary string to avoid possible update window.
Does not matter so much that the field is not volatile, as the worst that can happen is the field is updated twice.

URL: http://svn.apache.org/viewvc?rev=1363173&view=rev
Log:
LOGGING-147 - SimpleLog.log - unsafe update of shortLogName

Modified:
    commons/proper/logging/trunk/RELEASE-NOTES.txt
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/SimpleLog.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFactory.nullClassLoaderFactory is not properly synchronized,LOGGING-146,12599303,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,sebb@apache.org,sebb@apache.org,18/Jul/12 17:34,20/Mar/13 20:11,07/Apr/19 20:35,18/Jan/13 12:56,1.1.1,,,,,,,,,1.1.2,,0,,,"Not all accesses to the protected static mutable field LogFactory.nullClassLoaderFactory are synch. using the same lock.

This is necessary to ensure safe publication of mutable fields.

As far as I can tell, the field is only required because a Hashtable cannot hold a null key. So it's not clear why the field is protected rather than private.

Also, it ought to be possible to replace the field with a dummy key object which can then be used in the Hashtable. That would simplify the code.
However, any subclasses that relied on the field contents might break.

If LogFactory is not intended to be part of the public API, then the field could be replaced by the dummy key approach.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-18 12:56:16.032,,,false,,,,,,,,,,,,,,,252760,,,Fri Jan 18 12:56:16 UTC 2013,,,,,,0|i0d7g7:,74983,,,,,,,,"18/Jan/13 12:56;tn;Made field volatile and deprecated in r1435122.

With the next major release the use of this field should be changed according to sebb's suggestions.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFactoryImpl.setAttribute - possible NPE,LOGGING-145,12599277,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,18/Jul/12 14:47,20/Mar/13 20:11,07/Apr/19 20:35,18/Jul/12 16:08,1.1.1,,,,,,,,,1.1.2,,0,,,"LogFactoryImpl.setAttribute will throw NPE for the following call:

setAttribute(LogFactory.TCCL_KEY, null);",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,252761,,,Wed Jul 18 16:08:55 UTC 2012,,,,,,0|i0d7gf:,74984,,,,,,,,"18/Jul/12 16:08;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1362996&view=rev
Log:
LOGGING-145 - LogFactoryImpl.setAttribute - possible NPE

Modified:
    commons/proper/logging/trunk/RELEASE-NOTES.txt
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFactory/LogFactoryImpl ingore Throwable,LOGGING-144,12599272,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,sebb@apache.org,sebb@apache.org,18/Jul/12 14:25,20/Mar/13 20:11,07/Apr/19 20:35,22/Feb/13 14:49,1.1.1,,,,,,,,,1.1.2,,0,,,"The code in LogFactory/LogFactoryImpl catches and ignores Throwable in several places.

This is a bad idea, as some Throwables (e.g. ThreadDeath) should never be ignored.",,,,,,,,,,,,,,,,,,,,,,18/Jan/13 15:18;tn;LOGGING-144.patch;https://issues.apache.org/jira/secure/attachment/12565482/LOGGING-144.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-13 19:28:30.609,,,false,,,,,,,,,,,,,,,252762,,,Fri Feb 22 14:49:51 UTC 2013,,,,,,0|i0d7gn:,74985,,,,,,,,"13/Jan/13 19:28;tn;Ok, but what should happen in such a case?","14/Jan/13 18:23;sebb@apache.org;Either don't catch everything, or rethrow those throwables that should not be caught.","18/Jan/13 15:18;tn;First bunch of changes, please review.

Missing is the catch in LogFactoryImpl.createLogFromClass which calls then handleFlawedDiscovery.","21/Feb/13 18:17;sebb@apache.org;The patch changes the code to how it should have been written originally.

However, it means that the code may potentially throw some additional unchecked exceptions, whereas previously the code would log them and continue.

If that is not acceptable, then the alternative approach is to use a method such as

org.apache.tomcat.util.ExceptionUtils.handleThrowable(Throwable t) [1]

For example:

{code}
} catch (Throwable t) {
    handleThrowable(t); // may not return
    logDiagnostic(...);
}
{code}

[1] http://svn.apache.org/repos/asf/tomcat/trunk/java/org/apache/tomcat/util/ExceptionUtils.java","21/Feb/13 18:37;tn;Thanks for the pointer, this looks cleaner compared to my patch.

Although, if I understand it correctly, this will also throw additional unchecked exceptions (ThreadDeath & VirtualMachineError) that where swallowed and logged before?","21/Feb/13 20:00;sebb@apache.org;bq. this will also throw additional unchecked exceptions (ThreadDeath & VirtualMachineError) that where swallowed and logged before?

Well, yes, but those exceptions should never have been swallowed.","21/Feb/13 20:22;tn;Ok fine, I will then update the patch with your suggestion.

Thanks again!",22/Feb/13 14:49;tn;Done in r1449064.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Update dependency on avalon-framework,LOGGING-143,12504875,Improvement,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,,,sochotnicky,sochotnicky,21/Apr/11 10:09,14/Nov/13 10:26,07/Apr/19 20:35,,1.1.1,,,,,,,,,2.0,,0,build,patch,Commons logging currently uses avalon-framework 4.1.3 while 4.3 exists and provides a nice split between api and implementation. Attached is a patch updating dependency to new version.,,,,,,,,,,,,,,,,,,,,,,21/Apr/11 10:10;sochotnicky;commons-logging-avalon-update.patch;https://issues.apache.org/jira/secure/attachment/12476984/commons-logging-avalon-update.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,148318,,,Thu Apr 21 10:10:33 UTC 2011,,,,,,0|i0sp7j:,165561,,,,,,,,21/Apr/11 10:10;sochotnicky;Patch updating avalon-framework to 4.3 with split to api and impl.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Log4JLogger uses deprecated static members of Priority such as INFO,LOGGING-142,12502592,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,yaojingguo,yaojingguo,28/Mar/11 15:00,20/Mar/13 20:11,07/Apr/19 20:35,18/Jul/12 16:16,1.1.1,,,,,,,,,1.1.2,,0,,,"In version 1.1.1, Log4JLogger uses deprecated static members of Priority such as INFO to construct LoggingEvent. In version 1.0.4, static members from Level are used rather than from Priority. I think that this is a regression.",,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,28/Mar/11 15:24;yaojingguo;LOGGING-142.patch;https://issues.apache.org/jira/secure/attachment/12474781/LOGGING-142.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-18 16:15:31.963,,,false,,,,,,,,,,,,,,,43709,,,Wed Jul 18 16:16:32 UTC 2012,,,,,,0|i0d7gv:,74986,,,,,,,,28/Mar/11 15:24;yaojingguo;Patch available.,"18/Jul/12 16:15;sebb@apache.org;In 1.0.4, the code used both Level and Priority.

The reason for this was that it was thought that log4j 1.3 was likely to change Level so it no longer extended Priority.
However, 1.3 never really happened; 1.3 was only released as alpha code.","18/Jul/12 16:16;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1362982&view=rev
Log:
Replace deprecated field references

Modified:
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/Log4JLogger.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Getting NoClassDefFoundError,LOGGING-141,12498086,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Blocker,Invalid,,palani12kumar,palani12kumar,09/Feb/11 06:40,09/Feb/11 12:22,07/Apr/19 20:35,09/Feb/11 12:22,1.1.1,,,,,,,,,1.1.1,,0,logging,,"Getting the following exception while implementing DWR2.0 to the existing application. The commons-logging.jar is there in the classpath, but still, facing this issue. 

java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory
        at org.directwebremoting.dwrp.PollHandler.<clinit>(PollHandler.java:443)
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:141)
        at org.directwebremoting.impl.ContainerUtil.class$(ContainerUtil.java:97)
        at org.directwebremoting.impl.ContainerUtil.setupDefaults(ContainerUtil.java:150)
        at org.directwebremoting.impl.ContainerUtil.setupDefaultContainer(ContainerUtil.java:125)
        at org.directwebremoting.servlet.DwrServlet.init(DwrServlet.java:73)
        at weblogic.servlet.internal.ServletStubImpl$ServletInitAction.run(ServletStubImpl.java:1028)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)
        at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121)
        at weblogic.servlet.internal.ServletStubImpl.createServlet(ServletStubImpl.java:904)
        at weblogic.servlet.internal.ServletStubImpl.createInstances(ServletStubImpl.java:883)
        at weblogic.servlet.internal.ServletStubImpl.prepareServlet(ServletStubImpl.java:822)
        at weblogic.servlet.internal.ServletStubImpl.getServlet(ServletStubImpl.java:535)
        at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:373)
        at weblogic.servlet.internal.ServletStubImpl.invokeServlet(ServletStubImpl.java:315)
        at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:6718)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)
        at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:121)
        at weblogic.servlet.internal.WebAppServletContext.invokeServlet(WebAppServletContext.java:3764)
        at weblogic.servlet.internal.ServletRequestImpl.execute(ServletRequestImpl.java:2644)
        at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:219)
        at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:178)


Please let me know the possible solution as soon as possible. its blocking the work flow for the past two days.","Weblogic 8, DWR2.0, Java 1.4/1.5, WindowsXP",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-09 07:30:15.855,,,false,,,,,,,,,,,,,,,148317,,,Wed Feb 09 12:22:55 UTC 2011,,,,,,0|i0d7h3:,74987,,,,,,,,09/Feb/11 07:30;joehni;You have obviously multiple commons-logging implementations in your classpath and this is the normal error for such a case (not specific to commons-logging).,09/Feb/11 09:09;palani12kumar;Thanks for the comment. Got cleared.,"09/Feb/11 12:22;joehni;Fine, but in this case you could have closed th issue yourself. Please ask next time first on the user's list if you have a problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Request of source code of ,LOGGING-140,12480210,Wish,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Invalid,,abcindia,abcindia,17/Nov/10 11:47,20/Mar/13 20:11,07/Apr/19 20:35,17/Nov/10 12:08,,,,,,,,,,,,0,,,Can you please tell us the from where we can download the common.Logging.Log4Net - 1.2,.Net 2008,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-17 12:08:51.97,,,false,,,,,,,,,,,,,,,148316,,,Wed Nov 17 12:08:51 UTC 2010,,,,,,0|i0sp7r:,165562,,,,,,,,"17/Nov/10 12:08;sebb@apache.org;There is no such product as Commons Logging Log4Net.

Perhaps you meant Apache log4Net? See:

http://logging.apache.org/log4net/index.html

and follow the links.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Show stacktrace for flawed discovery in diagnostic messages,LOGGING-138,12477410,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,vicaya,vicaya,14/Oct/10 23:16,20/Mar/13 20:11,07/Apr/19 20:35,20/Feb/13 11:40,1.1.0,1.1.1,,,,,,,,1.1.2,,0,,,"It looks like since 1.1, if a custom log appender throws an exception the stack trace is not shown in diagnostic messages, making it harder (than 1.0.4) to find out the root cause of the log initialization problem.

Here is a simple patch against the trunk to address the issue.",,,,,,,,,,,,,,,,,,,,,,14/Oct/10 23:18;vicaya;logging-138-trunk-v1.patch;https://issues.apache.org/jira/secure/attachment/12457207/logging-138-trunk-v1.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-20 11:40:12.644,,,false,,,,,,,,,,,,,,,148315,,,Wed Feb 20 11:40:12 UTC 2013,,,,,,0|i0sp7z:,165563,,,,,,,,"20/Feb/13 11:40;tn;Added in r1448097.
Used a StringWriter instead of your patch, thanks for the report!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFactory.getLog(),LOGGING-137,12471073,New Feature,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,,,dougbateman,dougbateman,08/Aug/10 18:51,19/Aug/10 02:44,07/Apr/19 20:35,,1.1.2,,,,,,,,,,,0,,,"Presently, in Apache Commons, the most common way to get a logger is to do something like:

public class MyClass {
    private static Log log = LogFactory.getLog(MyClass.class);
}

Notice how MyClass.class (or alternatively a string name) is passed as a parameter.  The annoying aspect of this is that sometimes the class name doesn't get updated when doing copy/paste operations.  A desirable alternative might be:

public class MyClass {
    private static Log log = LogFactory.getLog(); //class name inferred from call stack
}


With such an approach there are two possible concerns I can foresee:

    * Call stack inspection isn't terribly fast.  However since Loggers are generally initialized only once, when the class is first loaded, performance isn't likely to be a major problem.
    * Commons-logging is Java 1.1 compatible.  Thus care must be taken to ensure compatibility isn't broken.
    * Commons-logging doesn't depend on commons-lang, and thus the utilities in commons-lang cannot be used.

In Java 1.4, the call stack is easily obtained using Thread.getCallStack().  Prior to Java 1.4, the only way to obtain the call stack is to inspect the stack trace of an exception.",,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,11/Aug/10 02:57;dougbateman;CallStackTestCase.java;https://issues.apache.org/jira/secure/attachment/12451740/CallStackTestCase.java,11/Aug/10 02:56;dougbateman;CallStackUtil.java.0;https://issues.apache.org/jira/secure/attachment/12451737/CallStackUtil.java.0,11/Aug/10 02:56;dougbateman;CallStackUtil.java.1;https://issues.apache.org/jira/secure/attachment/12451738/CallStackUtil.java.1,11/Aug/10 02:56;dougbateman;CallStackUtil.java.2;https://issues.apache.org/jira/secure/attachment/12451739/CallStackUtil.java.2,09/Aug/10 04:52;dougbateman;LogFactory.java;https://issues.apache.org/jira/secure/attachment/12451562/LogFactory.java,,,,,,,,,,,,,5.0,,,,,,,,,,,,,,,,,,,2010-08-09 02:41:54.064,,,false,,,,,,,,,,,,,,,148314,,,Thu Aug 19 02:44:01 UTC 2010,,,,,,0|i0sp87:,165564,,,,,,,,08/Aug/10 18:52;dougbateman;Attached is a sample implementation.,"08/Aug/10 22:54;dougbateman;Updated sample implementation.

Addresses Sebb's input that Thread.getStackTrace() requires Java 1.5 where as Throwable.getStackTrace() requires Java 1.4.

Also fixes a typo at isAtLeastJava14 = true;",08/Aug/10 23:10;dougbateman;Updated to include the proper Apache license header.,"08/Aug/10 23:11;dougbateman;Same thing, as a patch file.","08/Aug/10 23:12;dougbateman;And now making sure I check the ""Grant License"" box.","09/Aug/10 02:41;sebb@apache.org;The patch file contains a spurious update to svn:ignore.

The .java files appear to duplicate the content of the patch files.

Also, the static fields in CallStackUtil need to be final, apart from isAtLeastJava14 which needs to be volatile for safe publication across threads.

It would be useful to use Thread.getStackTrace() if available, as that is likely to be quicker.

The Javadoc needs to document that the returned classname can be null.
What happens to the logger in this case?

It's not immediately obvious why the getCallerJava14 method needs to scan the stack trace twice.
Surely one can just add a fixed offset to the depth to find the caller stack frame?

Also, Commons generally does not use @author tags, as ASF code is a collaborative effort.
Attribution can be added to the <contributors> section of the POM instead, and/or release notes.","09/Aug/10 03:54;dougbateman;Hey Sebastian,

Yeah, the patch file does have a spurious update to svn:ignore.  It adds "".settings/"" to the list.  Eclipse complains and that directory has been included in commons-lang and commons-io, but overlooked in commons-logging.  However, you're right, that's really a separate issue.  So consider it gone.

The .java files do duplicate the .patch file.  Normally I'd just give the .patch file, but since we were having a discussion in channel I included the .java files too for ease of reading.  For the update, which would you prefer... Java files for patch files?

I'll remove the @author tag.  I was about to take it out, but noticed all the other files still had them.

Regarding the null return by CallStackUtil, it's really a non-issue since it can never happen.  The only place getCallerClassName(1) is used is inside of LogFactory.getLog().  And LogFactory.getLog() is guaranteed to have an immediate caller (depth=1), otherwise it never would have been called in the first place.  Nobody else can use CallStackUtil because it is package scope... It didn't seem relevant to the public API for logging... and if it was ever to be published, it probably should be in commons-lang.  I suppose I could have just made private methods inside of LogFactory, but I didn't want to add the clutter and package scope seemed appropriate.  That aside, the JavaDoc does actually discuss meaning of a null return, however I'll update the docs to make it a bit more obvious.

The non-final fields were strictly a matter of simplicity, since the compiler objects to a possible double assignment to the file in the try and again in the catch.  It objects even when using separate try/catch blocks for each set.  However, I can work around that by using local variables in the initializer, so that's what I'll do.

CallStackUtil.getCallerJava14() doesn't actually scan the trace twice.  The i counter only ever increases.  First it scans to find the invocation to the ""CallStackUtil"" methods on the stack (to skip past the reflection calls), and then it scans further until it's past the ""CallStackUtil"" methods.  Leaving the interesting part of the call stack, which is then read at the requested depth.  getCallerJava10() actually works the same way.  It just uses ""stackTrace.lastIndexOf()"" to accomplish this, since it's reading the stack as a string.

I too wanted to use Thread.getStackTrace().  However I noticed in the JavaDoc that it can throw SecurityExceptions, while Throwable.getStackTrace() does not.  I have no idea why they decided to allow that in one but not the other.  And of course Thread.getStackTrace() isn't available until Java 5.0 instead of 1.4.  So following the ""keep it simple"" rule, I decided to use Throwable.getStackTrace().  I don't imagine the performance difference is measurable since Throwable.getStackTrace() likely uses the exact same native code underneath.  And the extra object allocation is insignificant in comparison to the use of Java reflection.  If after all this, you still think I should add support for Java 5.0's Thread.getStackTrace() I'm happy to do add it.

I made isAtLeastJava14 non-volatile deliberately as well.  In actuality, it could probably be made final, since I cant imagine a case where those catch blocks would ever be hit, except maybe in the case of a SecurityException.  I had simply decided to make the implementation fault tolerant in the event I was wrong.  I didn't make it volatile because I wanted to avoid the memory flush.  If a thread has a stale copy of the flag no harm is done... that stale copy would always have the value true (from the static initializer which is synchronized by the classloader).  And that just means the catch blocks would be hit again, and that thread would catch the exception and set it's cached copy to false as well... no memory flush required.  I should probably comment that though, since it is unintuitive.

I'll submit an update.  Would you prefer it as java files or a single patch file?
","09/Aug/10 04:49;dougbateman;Attached is a revised version, with the changes discussed above.",09/Aug/10 04:52;dougbateman;Attached is a copy of the Java files.  They duplicate what's in the CallStackUtil.patch.  They are included strictly for ease of reading.  Feel free to remove these is they aren't desirable.,"09/Aug/10 12:32;sebb@apache.org;Thanks for the revised files.

It was not clear originally why there were two copies of the changes, but you have explained that now so no need to delete the .java files.

It's a pity that the getCallerJava14 method has to scan the stack at all.
But the reflection implementation may vary in nesting depth between releases and JVMs.
However one could perhaps optimise the code by skipping the first few stack frames which are known to be present.

BTW, Thread#getStackTrace() uses Throwable#getStackTrace() for the current thread (at least in Sun Java 1.5) so you are correct that there is no point using the Thread method.","10/Aug/10 22:09;sebb@apache.org;One could further optimise the code by calculating the index depth once.
Even if it varies between JVMs, it will remain constant for a given run.","11/Aug/10 02:56;dougbateman;Based on your feedback, here are 3 new versions available for you to choose.

Version 0 is basically what you've seen before.  I fixed a few comments.
Version 1 scans the call stack once, and then stores the indexes as constants.
Version 2 simply asserts it should drop 2 stack frames and avoids much of the scanning.

Good news is reflection stopped being an issue once we replaced the reflection call to Thread.getStackTrace() with the non-reflection call to Throwable.fillInStackTrace().  This is what makes version 2 possible.

However, I'm not sure how standard Throwable.fillInStackTrace() and Throwable.printStackTrace(err) are across JVM versions and vendors.  For example, are either ""fillInStackTrace() or ""printStackTrace()"" included?  Generally no.  But could there be a JVM out there which did?  Was the exact behavior clearly defined as early as Java 1.1?  Hence I worry about Version 2 making too many assumptions and prefer version 1.","11/Aug/10 03:02;dougbateman;P.S. I'm not certain how much performance when scanning is really an issue when it comes to getting the logger.  After all, reflection is still used to invoke StackTraceElement.getClassName() for Java 1.4+.  Simplicity should probably count for a little here too.  (Although I'm not convinced any of the implementations are truly simpler than the others.)","18/Aug/10 17:02;dougbateman;I forgot to test the latest code I sent you using Java 1.3 and below.  The stack trace parsing isn't correct as a result of my having parsing aggressively rather than lazily.  I will fix it and repost along with a corresponding upgrade to my test cases.

Meanwhile, which of the 3 styles I posted do you prefer?  That will allow me to focus my energy on the one you choose.","18/Aug/10 18:57;sebb@apache.org;As far as I can tell, reflection is not now used to generate the stack trace, so the depth of the stack frame should be fixed and therefore does not need to be calculated.

The only code that depends on Java1.4+ is the code that uses Throwable.getStackTrace() to make it easier to parse the stack frames.

So I think the code can be simplified further:

1) generate the trace (at known stack depth offset)
2) extract the class name using whatever methods are available to the running code.","18/Aug/10 20:02;dougbateman;It's not quite that simple, because the output of Throwable.printStackTrace(stream) isn't standard.  For one thing, it varies based on the availability of line numbers.  So it is very important that the length of the header be calculated dynamically, at least once.

Doing that calculation in getStackHeaderCharCount() doesn't work, because that method signature doesn't match getCallerJava11(int).  So what it means is that I've got to call ""public static int getCallerJava11(depth)"" itself to calculate the stack size up front.... and that means I'm using that public function even before the final field STACK_HEADER_CHAR_COUNT is even initialized.  It's messy.

However, fortunately I think it's still workable.  I can rely on the fact that static-initializers are synchronized by the class loader, so I need not worry about race conditions caused by having a public static method reading a static field prior to initialization.  And I can rely on the non-initialized field having the default value zero prior to it's initialization.  Otherwise it would be a real nightmare.

Anyway, I've got to finish installing these updates.  For the Java 1.4 version, I take it you prefer Example CallStackUtil.java.2 where I simply assert STACK_HEADER_FRAME_COUNT=2, (e.g. drop 2 frames and then read at depth) rather than doing any dynamic calculations.  Is that correct?","18/Aug/10 20:23;dougbateman;The other concern I have that even the Java 1.4 approach of using Throwable.getStackTrace() may have variations across JVMs.  Hence I feel it's better to calculate once rather than assume a hard coded constant.

Specifically, the Java 1.4.2 JavaDoc for Throwable.getStackTrace() reads:

     ""Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this throwable is permitted to return a zero-length array from this method. Generally speaking, the array returned by this method will contain one element for every frame that would be printed by printStackTrace. ""

And even Throwable.fillInStackTrace() doesn't specify what is considered the top of the call stack.  It only takes one JVM vendor to do things differently to throw a wrench in the works.  For example, a JVM vendor might include Throwable.fillInStackTrace() itself in the call stack returned, even though the Sun JRE does not.

This is why I prefer the approach of actually calculating it once in a static initializer.  It avoids the issue.  However, we could do the simple approach by waiting to see if it becomes a reported issue before introducing added complexity.  And developers encountering problems can always revert to using the Logger.getLogger(name) approach.","18/Aug/10 22:37;sebb@apache.org;As I read it, the dropped frames are not due to getStackTrace() per se, but that fillInStackTrace() may drop frames at run-time - which of course affects getStackTrace().

Also, dropped frames are a run-time issue, so although the static initialisation may store the correct offset, the run-time frame may be too short.
This means that the code should be able to handle this, e.g. by returning the string ""*UNKNOWN*"" rather than the null string, which may cause an NPE.

The static initialiser only needs to count the number of frames for a known stack trace - it does not need to analyse their content.
The method getStackHeaderFrameCount() can be simplified a lot.",19/Aug/10 02:44;dougbateman;I still don't know which of the 3 versions you're reading.,,,,,,,,,,,,,,,,,,,
"API Enhancements: 'String.format(String, Object...)' Functionality & Delegate Convenience Methods",LOGGING-136,12462686,Improvement,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,,,dansiviter,dansiviter,21/Apr/10 16:56,16/Jul/16 11:44,07/Apr/19 20:35,,1.1.1,,,,,,,,,2.0,,2,api,api-addition,"Improvements to the API to allow convenience methods for performing {{String.format(String, Object...)}} and allow access to the internal logging delegate.

Firstly, to add the {{String#format(String, Object...)}} functionality modify the methods (note: only {{#trace(...)}} shown):

{{void trace(Object message, Object... args);}}
{{void trace(Object message, Throwable t, Object... args);}}

This would allow compatiblity with previous versions of the API (although I believe they would still require a re-compile) and help tidy up code.

Secondly, to obtain access to the internal instance of a logger the addition of a {{#getDeletegate()}} method.

I can supply the code if required.",N/A,14400,14400,,0%,14400,14400,,,,,,,,,,,,,,,04/Jun/10 06:28;pagadala1;commons-logging-1.1.1-src.rar;https://issues.apache.org/jira/secure/attachment/12446329/commons-logging-1.1.1-src.rar,04/Jun/10 06:28;pagadala1;commons-logging-1.1.1.jar;https://issues.apache.org/jira/secure/attachment/12446330/commons-logging-1.1.1.jar,04/Jun/10 06:28;pagadala1;site.rar;https://issues.apache.org/jira/secure/attachment/12446331/site.rar,,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2010-06-04 06:28:41.968,,,false,,,,,,,,,,,,,,,148313,,,Sat Jul 16 11:44:06 UTC 2016,,,,,,0|i0sp8f:,165565,,,,,,,,"04/Jun/10 06:28;pagadala1;I have implemented this change and compiled the code using maven and generated the java doc.
This can be merged with main branch, this code is compatible with  Java5
","13/Jul/16 15:04;sbrannen;Dear Commons Logging Team,

I think I speak for the entire community when I say that having to write code like the following in 2016 (especially on Java 8) is more than painful.

{code:java}
if (logger.isDebugEnabled()) {
    logger.debug(String.format(""Delegating to %s to process context configuration %s."",
        name(loader), configAttributes));
}
{code}

The above could be replaced with something along the lines of what the reporter suggested:

{code:java}
logger.debug(""Delegating to %s to process context configuration %s."",
    name(loader), configAttributes);
{code}

And if you'd like to be kind to the Java 8+ community (which is growing daily), it would be great if you introduced support for lambda expressions as well, like the following:

{code:java}
logger.debug(() -> String.format(""Delegating to %s to process context configuration %s."",
    name(loader), configAttributes));
{code}

The above would naturally work with a functional interface that is not physically annotated with {{@FunctionalInterface}}, thereby supporting Java 6 or Java 7; any single abstract method interface will suffice.

Is there any chance you will release Commons Logging 2.0 in 2016 with updated, modern APIs?

Thanks in advance for your consideration!

Sam Brannen","13/Jul/16 15:13;garydgregory;I think Commons Logging should be deprecated in favor of Apache's own Log4j 2 logging API, which supports Java 8 lambda calls (but only requires Java 7): I would use Log4j 2's {{log4-api}} module and pick an suitable implementation (like Log4j's own {{log4j-core}}). Log4j 2 provides separation between the API and different plugin implementations. Please see https://logging.apache.org/log4j/2.x/

With Log4j 2, you can say:
{code:java}
logger.trace(""Some long-running operation returned {}"", () -> expensiveOperation());
{code}

See https://logging.apache.org/log4j/2.x/manual/api.html and https://logging.apache.org/log4j/2.x/log4j-api/apidocs/index.html

If you want to try it, use the following in your POM instead of Commons Logging:

{code:xml}
<dependencies>
  <dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-api</artifactId>
    <version>2.6.2</version>
  </dependency>
  <dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.6.2</version>
  </dependency>
</dependencies>
{code}",13/Jul/16 15:35;mgrigorov;+1 to deprecate commons-logging and recommend users to move to LOG4J2 or SLF4J.,14/Jul/16 01:56;ralph.goers@dslextreme.com;SLF4J does not support lambda expressions and does not support the printf style expressions Sam showed above. The Log4j API supports both.,"14/Jul/16 16:54;ceki@qos.ch;SLF4J version 2.0 will support lambda expressions and much more. Just as importantly, slf4j-api has about a dozen independent implementations.",16/Jul/16 11:44;remkop@yahoo.com;+1 to deprecate commons-logging and recommend users to move to the Log4j 2 API. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Thread-safety improvements,LOGGING-135,12455662,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,sebb@apache.org,sebb@apache.org,08/Feb/10 18:00,20/Mar/13 20:11,07/Apr/19 20:35,20/Feb/13 12:31,,,,,,,,,,1.1.2,,0,,,"The LogKitLogger.logger field is not final or volatile so changes are not guaranteed to be published.
This includes calls to getLogger(), so two different threads using the same instance can theoretically both create the logger.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-13 18:04:31.649,,,false,,,,,,,,,,,,,,,148312,,,Wed Feb 20 12:31:14 UTC 2013,,,,,,0|i0d7hb:,74988,,,,,,,,"18/Jul/12 18:33;sebb@apache.org;Other problem fields include:

AvalonLogger.defaultLogger

SimpleLog - most fields

Log4JLogger.logger","13/Jan/13 18:04;tn;Can this really happen, as the logger field is set in the constructor?
A second thread would only be able to use the LogKitLogger object after it has been created.","14/Jan/13 18:21;sebb@apache.org;If thread A creates the class and passes it to thread B (which already exists) there is no guarantee that thread B will see the same value as written by thread A (this is a consequence of the Java memory model, which allows for lots of hardware optimisations).

Furthermore, the field is protected, so it can be changed at any later time. Unless the writer and reader threads synchronise on the same lock (or the field is made volatile), there is no guarantee that thread B will see what thread A wrote.","15/Jan/13 10:07;tn;I do not think the respective logger will be created multiple times, but retrieved from the underlying logging system.
In case the underlying system is flawed (e.g. not returning the same instance everytime it is called with the same name), this may create problems in the commons-logging wrapper, but otherwise the synchronisation may be a bottleneck.

This only relates to the logger fields, SimpleLog may be a different case.","15/Jan/13 11:44;sebb@apache.org;I agree it's unlikely to occur, however that does not mean it cannot occur.
And if it does cause problems, debugging is likely to be extremely difficult.

It may well be that all logger implementations return a singleton.
But writing to the protected logger field can still cause issues.

At the very least the issue should be clearly documented.

Making the variable volatile would solve the publication issue.
Ideally the variables should be private and final, but that would break compatibility.

If logging is ever rewritten, it should use immutable classes as far as possible, and certainly no mutable protected or public fields.","15/Jan/13 13:07;tn;Yes I agree, also it is not clear why it is protected in the first place.
Some of the wrappers have it private (log4j, avalon), while others have it private.
Imho, there should be no reason to make it protected, and this should be fixed in future releases.","18/Jan/13 11:39;tn;Looking at the Log4JLogger, wouldn't it be better to always set the underlying logger in the constructor, and change the getLogger method in a way to just return the logger (similar to the AvalonLogger)?

The null check looks unnecessary, as it should always be set in the constructor (its missing in the standard ctor, but could be added there too).

The only thing that comes to my mind is that at creation time, the underlying log system may return null, but this would be odd anyway.","18/Jan/13 12:47;tn;Applied first bunch of changes in r1435115:

 * SimpleLog:
 ** made fields logName and shortLogName volatile -> should become private final in next major version
 ** made modifiable field currentLogLevel volatile
 ** made protected static fields showLogName, showShortName, showDateTime and dateTimeFormat volatile -> should become private in next major version with static getters?

 * AvalonLogger:
 ** made static field defaultLogger volatile: there is already a static setter, so this should be fine

Open:

  * Log4JLogger: logger field
  * LogKitLogger: logger field

I would prefer to change the logger to a final field (Log4JLogger), always set the logger in the ctors and change the getLogger to just return the field. For LogKitLogger we can not set it final as it is a protected field, so adding volatile for now, and postpone for the next major version to change it to private.","20/Jan/13 08:34;tn;I missed that the loggers are serializable, thus the logic in the getLogger() makes sense (no need to re-initialize the transient logger fields in a readObject method, as it will be checked each access to getLogger).
","20/Feb/13 12:31;tn;Applied the double-checked locking idiom from Josh Bloch (Item 71) for Log4JLogger and LogKitLogger (and changing the logger variable to volatile).

This is not working reliably for pre-1.5 java but at least better than before.
We could also make the getLogger() methods synchronized, but this may have a negative effect on performance in certain environments.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
No AccessControll on getClassLoader operations,LOGGING-134,12444307,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Trivial,Duplicate,,baranowb,baranowb,29/Dec/09 13:27,29/Dec/09 23:19,07/Apr/19 20:35,29/Dec/09 23:19,1.1.1,,,,,,,,,,,0,,,"Problem is that commons logging performs some operations (atleast getClassLoader) which requiere access permissions. Since commons do not encapsulate calls to class loader getters in ""doPriviledged"" initialization of loggers fail.
This would not be a big deal if it wasnt about loggers - which usually are declared ""static final"" and usually poeple dont use ""static{}"" to init logger like:

{code}
private final static Logger log;
static
{

   log=AccessController.doPriviledged(new PriviledgedAction<Logger>()
  {
     public Object run()
          {
             return Logger.getLogger(class); 
               
             }

     });

}
{code}

Example fail log  on 1.1.1:

Caused by: org.apache.commons.logging.LogConfigurationException: java.security.AccessControlException: access denied (java.lang.RuntimePermission getClassLoader) (Caused by java.security.AccessControl
Exception: access denied (java.lang.RuntimePermission getClassLoader))
        at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:637)
        at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:336)
        at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:310)
        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685)
        at org.jboss.cache.commands.write.RemoveNodeCommand.<clinit>(RemoveNodeCommand.java:45)
        ... 22 more
Caused by: java.security.AccessControlException: access denied (java.lang.RuntimePermission getClassLoader)
        at java.security.AccessControlContext.checkPermission(Unknown Source)
        at java.security.AccessController.checkPermission(Unknown Source)
        at java.lang.SecurityManager.checkPermission(Unknown Source)
        at java.lang.ClassLoader.getParent(Unknown Source)
        at org.apache.commons.logging.impl.LogFactoryImpl.getLowestClassLoader(LogFactoryImpl.java:1327)
        at org.apache.commons.logging.impl.LogFactoryImpl.getBaseClassLoader(LogFactoryImpl.java:1247)
        at org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass(LogFactoryImpl.java:1048)
        at org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:858)
        at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:604)
        ... 26 more","JDK1.6, WinXP SP2. Ran under JBoss 5.1.GA, mobicents 2.0.B2, ",,,,,,,,,,,,,,,,,,LOGGING-130,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,148311,,,2009-12-29 13:27:36.0,,,,,,0|i0sp8n:,165566,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Allow subclassing of Jdk14Logger,LOGGING-133,12440561,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,arren,arren,12/Nov/09 23:08,20/Mar/13 20:11,07/Apr/19 20:35,20/Feb/13 09:20,1.1.1,,,,,,,,,1.1.2,,0,,,"Hi,

It would be nice if
 private void log( Level level, String msg, Throwable ex )
in Jdk14Logger was protected rather than private, allowing one to use that as a base class for other arbitrary loggers based on Jdk14.

S.
",All,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-13 19:28:03.036,,,false,,,,,,,,,,,,,,,148310,,,Wed Feb 20 09:20:25 UTC 2013,,,,,,0|i0sp8v:,165567,,,,,,,,"13/Jan/13 19:28;tn;Sounds reasonable, and other wrappers/loggers do the same, e.g. SimpleLog, or Log4JLogger.",20/Feb/13 09:20;tn;Changed in r1448053.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jdk14Logger wrapper does not respect logger name,LOGGING-132,12438830,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,nathann@objectfx.com,nathann@objectfx.com,22/Oct/09 18:16,20/Mar/13 20:11,07/Apr/19 20:35,20/Feb/13 10:02,1.0,1.0.1,1.0.2,1.0.3,1.0.4,1.1.0,1.1.1,1.1.2,Nightly Builds,1.1.2,,0,,,"The JDK14 wrapper implementation logs using the callers class name instead of the configured logger name. This prevents the ability to use named loggers for applications and subsystems. Also, the log message name does not match the JDK logger name so user don't know what name to use to configure the logger. It is also problematic for obfuscated code and private parts of an application or library.

Example:
I have a class named com.myco.product.subsysa.ClassX.InnerClassY and I create logger LogFactory.getLog(""SubSystemA"").

With the other log wrappers, if I log a message I always get something like:

    Oct 21, 2009 5:03:26 PM
    [INFO] SubSystemA start - My log message

With the JDK log wrapper, I get something like:

    Oct 21, 2009 5:03:26 PM com.myco.product.subsysa.ClassX$InnerClassY start
    INFO: My log message

Or worse yet with obfuscated code and the JDK log wrapper, I get something like:

    Oct 21, 2009 5:03:26 PM com.myco.product.subsysa.ClassX$_oOOO.o00000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000
    INFO: My log message

The fix:

In the calls to logger.logp(...), replace cname with this.name. Loggers created with the class name will still get the class name.

{code}
    private void log( Level level, String msg, Throwable ex ) {

        Logger logger = getLogger();
        if (logger.isLoggable(level)) {
            // Hack (?) to get the stack trace.
            Throwable dummyException=new Throwable();
            StackTraceElement locations[]=dummyException.getStackTrace();
            // Caller will be the third element
            String cname=""unknown"";
            String method=""unknown"";
            if( locations!=null && locations.length >2 ) {
                StackTraceElement caller=locations[2];
                cname=caller.getClassName();
                method=caller.getMethodName();
            }
            if( ex==null ) {
                logger.logp( level, cname, method, msg );
            } else {
                logger.logp( level, cname, method, msg, ex );
            }
        }

    }
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-29 23:16:33.026,,,false,,,,,,,,,,,,,,,148309,,,Wed Feb 20 10:02:07 UTC 2013,,,,,,0|i0d7hj:,74989,,,,,,,,"29/Dec/09 23:16;dennisl@apache.org;I tried your suggestion, but there were a lots of test failures.
So changing this will have a larger impact than you thought.","27/Jan/10 15:34;nathann@objectfx.com;If there is a major impact, it's because there are a lot of bad tests. ;-)

The real impact will be that the logger implementation adheres to the contract set forth in the JDK and Commons logging documentation. The logger is created with a specified string name (not a class name), configured using the specified name, and logs using the specified name. Nothing in the LogFactory uses an object instances class name to retrieve a logger or change its configuration.

I should also note that the Jdk13LumberjackLogger appears to have a similar defect. The implementation of its log method is different but it creates a LogRecord and never calls setLoggerName(this.name).

The Avalon and Log4J loggers use the Logger class and which correctly sets the logger name on the log record. SimpleLog also correctly uses the log name.","27/Jan/10 21:38;dennisl@apache.org;Removing 2.0 as ""Affects version/s"" again. That is only a placeholder for ideas at this time, so this issue can't have an effect that version.",20/Feb/13 10:02;tn;Applied change in r1448063 for the Jdk14Logger.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HTML Appender format,LOGGING-131,12424793,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Invalid,,lindhardt,lindhardt,07/May/09 08:03,07/May/09 14:11,07/Apr/19 20:35,07/May/09 14:11,,,,,,,,,,,,0,,,"It would be nice if the HTM Formatter replaced ""newlinw"" in the message with <BR>",All os,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-05-07 13:42:08.282,,,false,,,,,,,,,,,,,,,87741,,,Thu May 07 14:11:45 UTC 2009,,,,,,0|i0sp93:,165568,,,,,,,,"07/May/09 13:42;dennisl@apache.org;Which ""HTM Formatter"" are you referring to?",07/May/09 14:04;lindhardt;Sorry this is not commons logging but log4j HTMLLayout...,07/May/09 14:11;dennisl@apache.org;Log4J uses Bugzilla at https://issues.apache.org/bugzilla/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential missing privileged block for class loader,LOGGING-130,12424662,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,mpdelbuono,mpdelbuono,06/May/09 01:56,20/Mar/13 20:11,07/Apr/19 20:35,18/Jul/12 15:21,1.1.1,,,,,,,,,1.1.2,,0,,,"When attempting to instantiate a HttpClient, a call to LogFactory.getLog() is made. Going deeper, Commons Logging later attempts to make an unprivileged call to java.lang.ClassLoader.getParent(). Under systems with an installed SecurityManager (like mine), this may be forbidden.

In particular, this call will require the RuntimePermission getClassLoader. In my particular case, I am attempting to sandbox specific segments of code, and thus cannot grant this permission to the user of HttpClient (and, thus, Commons Logging). However, I feel that Commons Logging should be able to trust itself to make a self-checked call to ClassLoader.getParent().

The stack trace for my situation (trimmed off to assist you) is as follows:

Caused by: org.apache.commons.logging.LogConfigurationException: java.lang.SecurityException: Cannot request this permission from a tainted execution path (Caused by java.lang.SecurityException: Cannot request this permission from a tainted execution path)
	at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:637)
	at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:336)
	at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:310)
	at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685)
	at org.apache.commons.httpclient.HttpClient.<clinit>(HttpClient.java:66)
	... 11 more
Caused by: java.lang.SecurityException: Cannot request this permission from a tainted execution path
	at com.mmoui.manager.MinionSecurityManager.verifyUntainted(MinionSecurityManager.java:507)
	at com.mmoui.manager.MinionSecurityManager.checkPermission(MinionSecurityManager.java:263)
	at com.mmoui.manager.MinionSecurityManager.checkPermission(MinionSecurityManager.java:474)
	at java.lang.ClassLoader.getParent(ClassLoader.java:1233)
	at org.apache.commons.logging.impl.LogFactoryImpl.getLowestClassLoader(LogFactoryImpl.java:1327)
	at org.apache.commons.logging.impl.LogFactoryImpl.getBaseClassLoader(LogFactoryImpl.java:1247)
	at org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass(LogFactoryImpl.java:1048)
	at org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:914)
	at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:604)
	... 15 more


I feel that LogFactoryImpl.getLowestClassLoader's call to java.lang.ClassLoader.getParent() should be wrapped by AccessController.doPrivileged(). I can't think of any reason not to do this currently. This would allow my application to trust Commons Logging and not have to grant the RuntimePermission getClassLoader to the users of HttpClient.","Windows 7 under Sun JRE 6 Update 13, 64-bit
Running Commons HttpClient 3,1 w/ Commons Logging 1.1.1",,,,,,,,,,,,,,,,,,,,,29/Dec/09 23:04;dennisl@apache.org;LOGGING-130.patch;https://issues.apache.org/jira/secure/attachment/12429101/LOGGING-130.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-12-29 23:04:12.939,,,false,,,,,,,,,,,,,,,148308,,,Wed Jul 18 15:21:05 UTC 2012,,,,,,0|i0d7hr:,74990,,,,,,,,"06/May/09 04:44;mpdelbuono;I should clarify, the reason for the ""tainted execution path"" is due to the fact that the caller of HttpClient.<clinit> (hidden by ""... 11 more"") is untrusted (non-apache) code which I am trying to sandbox. None of the code in org.apache.** nor com.mmoui.manager.** nor java.** can contribute to this concept of ""taint"" as it is all trusted. ",29/Dec/09 23:04;dennisl@apache.org;Proposed patch that makes use of getParentClassLoader(ClassLoader) that already uses an AccessController.,"18/Jul/12 15:21;sebb@apache.org;Applied patch; same code was already used elsewhere to handle the same situation.

URL: http://svn.apache.org/viewvc?rev=1362978&view=rev
Log:
LOGGING-130 - Potential missing privileged block for class loader

Modified:
    commons/proper/logging/trunk/RELEASE-NOTES.txt
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WebLogic 10.1 and Apache XML security and commons logging compatibility issue,LOGGING-129,12423373,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Incomplete,,raghu_27,raghu_27,21/Apr/09 14:21,29/Dec/09 23:37,07/Apr/19 20:35,29/Dec/09 23:37,1.0.4,,,,,,,,,,,0,,,"WebLogic 10.1, Java 5 & XML security compatibility issue. We have confirmed that we have the commons-logging-1.0.4.jar which has the LogFactory class in the WEB-INF/Lib directory.

Fails with the below error in the WL10.1/JDK 1.5_11 environment -

java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory
	at org.apache.xml.security.Init.<clinit>(Unknown Source)
	at com.chase.treasury.ezpay.apps.efunds.topup.handlers.openSAMLSSOHandler.process(openSAMLSSOHandler.java:68)
	at com.chase.treasury.ezpay.apps.efunds.servlets.SSOServlet.dispatch(SSOServlet.java:231)
	at com.chase.treasury.ezpay.apps.efunds.servlets.SSOServlet.doPost(SSOServlet.java:79)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at weblogic.servlet.internal.StubSecurityHelper$ServletServiceAction.run(StubSecurityHelper.java:226)
	at weblogic.servlet.internal.StubSecurityHelper.invokeServlet(StubSecurityHelper.java:124)
	at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:283)
	at weblogic.servlet.internal.ServletStubImpl.execute(ServletStubImpl.java:175)
	at weblogic.servlet.internal.WebAppServletContext$ServletInvocationAction.run(WebAppServletContext.java:3395)
	at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)
	at weblogic.security.service.SecurityManager.runAs(Unknown Source)
	at weblogic.servlet.internal.WebAppServletContext.securedExecute(WebAppServletContext.java:2140)
	at weblogic.servlet.internal.WebAppServletContext.execute(WebAppServletContext.java:2046)
	at weblogic.servlet.internal.ServletRequestImpl.run(ServletRequestImpl.java:1366)
	at weblogic.work.ExecuteThread.execute(ExecuteThread.java:200)
	at weblogic.work.ExecuteThread.run(ExecuteThread.java:172) 

",Windows and Solaris 10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-04-21 17:15:57.179,,,false,,,,,,,,,,,,,,,148307,,,Tue Dec 29 23:37:24 UTC 2009,,,,,,0|i0d7hz:,74991,,,,,,,,"21/Apr/09 17:15;joehni;And then, why don't you use version 1.1.1 ?","29/Dec/09 23:37;dennisl@apache.org;No response from the author whether this works in  1.1.1 or not.

Please reopen if the problem exists in 1.1.1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Static analysis suggests a number of potential improvements,LOGGING-128,12412700,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Trivial,Fixed,,peter.lawrey,peter.lawrey,18/Jan/09 12:49,20/Mar/13 20:11,07/Apr/19 20:35,18/Jul/12 18:01,,,,,,,,,,1.1.2,,0,,,"Improvements include;
- final fields where possible
- static methods where possible.
- simplifying code to improve clarity.",,7200,7200,,0%,7200,7200,,,,,,,,,,,,,,,18/Jan/09 12:50;peter.lawrey;commons-logging-static-analysis.patch;https://issues.apache.org/jira/secure/attachment/12398180/commons-logging-static-analysis.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-07-18 18:01:39.875,,,false,,,,,,,,,,,,,,,148306,,,Wed Jul 18 18:01:39 UTC 2012,,,,,,0|i0sp9b:,165569,,,,,,,,"18/Jul/12 18:01;sebb@apache.org;Thanks, applied, apart from a few places where strings were being changed to characters. Also did not replace StringBuffer manipulation with String concatenation where not all input was fixed strings.

URL: http://svn.apache.org/viewvc?rev=1363030&view=rev
Log:
LOGGING-128 - Static analysis suggests a number of potential improvements

Modified:
    commons/proper/logging/trunk/RELEASE-NOTES.txt
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/LogFactory.java
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/LogSource.java
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/Log4JLogger.java
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/ServletContextCleaner.java
    commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/WeakHashtable.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
don't use setDefaultUseCaches() but setUseCaches() in LogFactory.getProperties() ,LOGGING-127,12404789,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,skitching,jcsahnwaldt,jcsahnwaldt,20/Sep/08 11:16,29/Dec/09 17:14,07/Apr/19 20:35,20/Sep/08 16:40,2.0,Nightly Builds,,,,,,,,1.1.2,,0,,,"The fix for LOGGING-126 introduced a call to URLConnection.setDefaultUseCaches() in LogFactory.getProperties(). This call should be changed to URLConnection.setUseCaches(), because URLConnection.setDefaultUseCaches() sets a static variable whose value affects the whole system, while URLConnection.setUseCaches() only affects its target instance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-20 16:40:46.621,,,false,,,,,,,,,,,,,,,148305,,,Sat Sep 20 16:40:46 UTC 2008,,,,,,0|i0d7i7:,74992,,,,,,,,"20/Sep/08 16:40;skitching;Fix committed. Thanks for pointing that out!

By the way: what a wierd API - a non-static method that controls a static flag. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Within Tomcat 5.x implementation, under Windows ONLY Commons-logging forbids hot deployment due to JAR locking ",LOGGING-126,12404170,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,skitching,pmouawad,pmouawad,11/Sep/08 15:04,29/Dec/09 17:13,07/Apr/19 20:35,15/Sep/08 09:05,1.0,1.0.1,1.0.3,1.0.4,1.1.0,1.1.1,,,,1.1.2,,0,,,"To reproduce the problem:
Create a WAR that contains a JAR that contains commons-logging.properties.
Deploy this WAR to TOMCAT 5.x
Try to redeploy it, it will fail

This is due to the fact that LogFactory uses url.openStream to open this file , thus URLConnection will use an internal cache and this will provoke a lock on the file from Window.
",Windows only,,,,,,,,,,,,,,,,,,,,,11/Sep/08 15:05;pmouawad;Patch.txt;https://issues.apache.org/jira/secure/attachment/12389935/Patch.txt,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-09-14 12:28:26.773,,,false,,,,,,,,,,,,,,,148304,,,Sat Sep 20 16:34:48 UTC 2008,,,,,,0|i0sp9j:,165570,,,,,,,,11/Sep/08 15:05;pmouawad;This patch solves the issue by disabling the URLConnection cache.,"14/Sep/08 12:28;skitching;Thanks very much for the report and patch; well spotted! I've applied your patch with a couple of minor modifications.

Could you please test logging trunk (or a nightly build)? If it works for you, please mark this issue as resolved - or just add a comment.","15/Sep/08 09:05;pmouawad;I tested OK for me.
Thanks for taking into account my contribution.
Philippe",20/Sep/08 16:34;skitching;See LOGGING-127 for a followup patch to this patch..,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
where the log file is stored ,LOGGING-125,12404154,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Invalid,,shreenath.giri,shreenath.giri,11/Sep/08 11:03,04/Nov/08 19:19,07/Apr/19 20:35,11/Sep/08 11:40,,,,,,,,,,,,0,,,"How to configure log file, on default where the log file is stored 
",C#.Net,2400,2400,,0%,2400,2400,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-11 11:40:52.074,,,false,,,,,,,,,,,,,,,148303,,,Thu Sep 11 11:40:52 UTC 2008,,,,,,0|i0d7if:,74993,,,,,,,,"11/Sep/08 11:40;skitching;I have no idea what you mean here.

1) This is a bug tracking system, not a help forum.
2) apache commons-logging is a java.-only library, and has nothing to do with c#
3) commons-logging does not configure logging systems

Therefore, closing this as INVALID. Please do NOT post any further comments against this particular issue entry.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Commons logging does not work in an osgi environment,LOGGING-124,12402506,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,chris@die-schneider.net,chris@die-schneider.net,16/Aug/08 17:47,09/Apr/13 16:50,07/Apr/19 20:35,05/Mar/13 18:22,1.1.1,,,,,,,,,1.1.2,,3,,,"Commons logging should provide Manifest information for using it as an OSGI bundle. Eventually detection of logging engines and loading of configs should also be changed to make commons-logging osgi ready.

I have given this problem the critical priority as currently many people are working on osgi projects and as many open source libs use commons-logging this is an important thing to solve.",,,,,,,,,,,,,,,,,,,,,,23/Feb/13 08:12;chris@die-schneider.net;LOGGING-124.patch;https://issues.apache.org/jira/secure/attachment/12570617/LOGGING-124.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-08-16 20:22:20.607,,,false,,,,,,,,,,,,,,,148302,,,Tue Mar 05 18:22:04 UTC 2013,,,,,,0|i0sp9r:,165571,,,,,,,,"16/Aug/08 20:22;niallp;See the Note on the Commons OSGi wiki page re commons logging:
    http://wiki.apache.org/commons/CommonsOsgi","16/Aug/08 22:48;chris@die-schneider.net;Ok .. I read the thread on the mailing list. But this will not really help. The last mail says : Please don´t support OSGI as it won´t work with commons-logging anyway. Personally I think this is quite counter productive. We have an urgent problem here. Many Open Source libraries use commons-logging and when they move to osgi the users of these libraries have problems. I do not think the answer can be: let all people switch to pax-logging (or yet another logging framework). I think either commons-logging should make the move to osgi or be discontinued. If things stay as they are people will only move away from commons-logging over time and the problems will continue to exist over a long time. 

The minimal thing would be to explain in the commons-logging documentation what people have to do to make their apps work. The better thing would be to provide a commons-logging jar that simply works in osgi. I am sure the bootstrapping and detection of frameworks can be changed in a way that is not as problematic as today.

",16/Aug/08 23:08;chris@die-schneider.net;I have read some more about the different logging engines. As it seems people agree that commons-logging has many class loading issues. What is the opinion of the people here on the project? Should people switch to slf4j and use the commons-logging compatibility or is it better to solve the classloading issues in commons-logging?,22/Apr/09 06:01;joehni;A lot of people writing about classloader issues with commons-logging actually do use or did use an older version at that time. There's a reason why 1.1.1 is around.,"22/Apr/09 06:06;jochen@apache.org;If Niall's comment above applies, then there is indeed a problem: As OSGI is more and more important, we should clearly reconsider the commons-logging intialization. If it cannot be made OSGI compliant now, then that needs to be changed.
","08/May/09 11:24;sslavic;Doesn't SpringSource already have OSGi ready version of commons-logging in their enterprise bundle repository (See [1]) ?

Wouldn't just adding OSGi related metadata (e.g. by using existing ones from SpringSource release) to MANIFEST.MF be enough?


[1]
http://www.springsource.com/repository/app/bundle/version/detail?name=com.springsource.org.apache.commons.logging&version=1.1.1&searchType=bundlesByName&searchQuery=logging","26/Oct/10 21:47;zilatica;The commons http client uses logging 1.1.1.  Now there is no way for me to make use of it on my OSGI stack.  Here is the direct path that I'm now roadblocked at.  I add httpclient to my list of OSGI dependencies:
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient-osgi</artifactId>
            <version>4.0.1</version>
        </dependency>

I try to interact with httpcomponents on my equinox osgi stack and discover the manifest to httpclient looks like:
Import-Package: javax.crypto,javax.crypto.spec,javax.net.ssl,javax.sec
 urity.auth.x500,org.apache.commons.logging;version=""1.1.1"",org.apache
 ...

Since there is a direct dependency to 1.1.1 of commons logging, which no longer supports OSGI, I'm now torn with either regressing to the old httpclient 3.0.1 or trying to wrap up the commons logging myself.

Yuck.
",03/Feb/12 13:29;chris@die-schneider.net;Switched to slf4j,03/Feb/12 16:36;joehni;What has slf4j to do with jcl? Nothing has changed.,03/Feb/12 16:53;chris@die-schneider.net;Yes. But I wanted to express that I lost patience with commons logging and found a better solution :-),"03/Feb/12 19:49;simone.tripodi;JIRA the ASF issue tracker not a MailingList neither a Forum, so marking an Issue closed because you switched somewhere else, is a nonsense.
The issue continues to exist, slf4j doesn't fix JCL OSGi issue.",03/Feb/12 22:51;chris@die-schneider.net;Well honestly I opened the issue so I think it was not completely nonsense that I closed it. Of course I know there are other people waiting for this. So I have no issue with it being reopened. ,"04/Feb/12 11:52;simone.tripodi;If someone opens an issue, he has the reporter role, not the owner. If you resolved your own issue with a different approach, commons-logging will continue be affected by the same problem.","04/Feb/12 12:44;sebb@apache.org;If someone can provide the appropriate meta-information, then I don't see why we should not be able to provide an additional OSGI jar which bundles the binary with the meta-data.

If it (mostly) then works in OSGI that would be a worthwhile improvement.

If another binary release is ever done, then we could consider adding the metadata to the jar itself.
Or I suppose we could release 1.1.2 which is 1.1.1 + OSGI metadata.

However, if it turns out that Logging only works in a few OSGI environments, it may not be worth the extra work of repackaging - and dealing with complaints that it does not work in situation x.y.z.","23/Feb/13 08:12;chris@die-schneider.net;Patch to add the maven bundle plugin to the build. The imports and exports look good.

I found a strange thing though. The build creates three jars from the same source. API, adapters and the normal commons-logging jar. Strangely the api and the normal jar both seem to contain the impl package. Is that intended.
","23/Feb/13 13:49;tn;Hi Christian,

thanks for your patch:

 * change the Bundle-SymbolicName to commons-logging is ok
 * update the packaging to bundle: why? what benefit does it bring?

Regarding your question:

The different jar versions do include a different set of classes:

 * full: everything
 * api: only the Log interface + core classes + SimpleLog + NoLog
 * adapters: only the adapters to actual Log implementations, e.g. Log4JLogger

now some of the things in the api also reside in the impl package which may look weird, but thats the way it was before and can not change for 1.1.2.

Thomas","23/Feb/13 14:42;chris@die-schneider.net;About the symbolic name. I was just setting it so you can see how to do it. It may be a good idea to leave it on the default value which I think is groupId.artifactId.
Packaging bundle allows the bundle plugin to tap into more lifecycle phases. I am not sure if it is absolutely necessary but it is the recommended way to run the bundle plugin.

With the several packagings we may have some problems if a package is exported by e.g api and full. So the better way would be to have API and impl jars that have no common packages. In OSGi a package of a certain version can only come from one bundle. Of course it is not a good idea to change the packaging in a bugfix release but perhaps this could be considered for the next minor or majpr release.","23/Feb/13 14:54;tn;Thanks for the clarification, I do not know if changing the packaging will have an effect on other plugins, so if the osgi metadata is correctly set, I would prefer to keep it as is for now.

Regarding the symbolic name, I have read the page here: http://wiki.osgi.org/wiki/Bundle-SymbolicName

The current groupId/artifactId is still commons-logging, but the exported packages do correspond to org.apache.commons.logging, so I guess we have to make a choice ;-)

Considering that in the future the groupId will change to org.apache.commons, it may be better to already use that as the symbolicName?","23/Feb/13 18:22;tn;As mentioned in this thread http://www.mail-archive.com/dev%40felix.apache.org/msg28887.html
providing a full OSGi compliant logging service will involve more than just correcting the bundle metadata information.

It was suggested that we add a reference to the pax logging system to our documentation, so that users that want/have to use commons logging in an OSGi environment have a working solution at hand.

Edit:

reading again all the messages here, I understand that the situation with commons-logging is not satisfying, but we want to make a bugfix release 1.1.2 soon and the question is if adding the bundle info is of any use? As other people have pointed out, there are several re-packaged bundles from spring / felix, which add these infos, so they must be used in some way or another. Could you or somebody point to usage examples of these repackaged bundles?",27/Feb/13 20:12;britter;I've created LOGGING-149 for documenting the use of commons logging in OSGi environments.,"05/Mar/13 18:22;tn;Finally applied your patch wrt symbolicName to match the current maven groupId/artifactId in r1452934.

Closing this now for the 1.1.x branch. If there will ever be a 1.2 or 2.0 version of commons-logging, proper OSGi support has to be taken into account from the beginning.",,,,,,,,,,,,,,,,,
"Add a LogLevel enum with the usual suspects (FATAL,ERROR,WARN,INFO,DEBUG,TRACE)",LOGGING-123,12395634,New Feature,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Trivial,Duplicate,,sashkap,sashkap,08/May/08 15:40,29/Dec/09 23:34,07/Apr/19 20:35,29/Dec/09 23:34,,,,,,,,,,,,0,,,"It is sometimes convenient to setup logging level dynamically.

For example if you implement Command object pattern. Some of the command require very detailed in your face logging (say at INFO, or even WARN levels), for others DEBUG or even TRACE would do fine.

With the current methods on Log interface you either have to do it through different boolean settings, which quickly lead to a mess.

More elegant solution is to define a log level object and just examine it when doing logging.

here is the use case

{code:title=Sample Usage |borderStyle=solid}

final static Log LOGGER = ...;

public class Command
{
  final LogLevel _log_level;

  public Command ( final boolean is_logging_enabled )
  {
    LogLevel log_level = LogLevel.TRACE;

    if ( is_logging_enabled )
    {
      log_level = LogLevel.INFO;
    }

    if ( ! log_level.isEnabledIn( LOGGER ) )
    {
      log_level = null;
    } 

    _log_level = log_level;
  }

  public void doCommand ( )
  {
    if ( _log_level != null )
    {
      _log_level.log( LOGGER, ""Running command"" );
    }
  }
}
{code}

The proposed solution is all done through the inversion of control, so it does not require to change a single line in org.apache.commons.logging.Log interface, although it might be useful to add these 3 methods:

boolean isEnabledFor ( final LogLevel level );

void log ( final LogLevel level, final String message );

void log ( final LogLevel level, final String message, final Throwable t );

Attached is a full listing of proposed LogLevel.java


",N/A,,,,,,,,,,,,,,,,,,LOGGING-110,,,08/May/08 15:44;sashkap;LogLevel.java;https://issues.apache.org/jira/secure/attachment/12381689/LogLevel.java,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,148301,,,Fri May 09 15:35:57 UTC 2008,,,,,,0|i0sp9z:,165572,,,,,,,,08/May/08 15:44;sashkap;More readable version of LogLevel.java,08/May/08 15:53;sashkap;Removed malformatted listing from the description,09/May/08 15:35;sashkap;Added markup for sample code formatting,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jdk1.4 logger doesn't respect jdk per-class configuration,LOGGING-122,12393474,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Not A Problem,,bmargulies,,09/Apr/08 01:09,29/Dec/09 14:06,07/Apr/19 20:35,29/Dec/09 14:06,1.1.1,,,,,,,,,,,0,,,"I've enabled the JDK 1.4 logger, and global configuration (the .level=foo line in the file) works fine.

Per logger config, on the other hand, doesn't work at bit for messages that arrive through c.u.l. 

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-04-09 01:43:15.41,,,false,,,,,,,,,,,,,,,148300,,,Wed Apr 09 01:43:15 UTC 2008,,,,,,0|i0d7in:,74994,,,,,,,,09/Apr/08 01:43;bimargulies;Pilot error.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extend the org.apache.commons.logging.Log interface for suitable use,LOGGING-121,12393115,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Duplicate,,flsusp,flsusp,04/Apr/08 12:02,29/Dec/09 23:29,07/Apr/19 20:35,29/Dec/09 23:29,1.1.1,,,,,,,,,,,0,,,"For getting better source code legibility, I propose the extension of the org.apache.commons.logging.Log interface adding the methods above:

void trace(String message, Object... params);
void trace(String message, Throwable t, Object... params);
void debug(String message, Object... params);
void debug(String message, Throwable t, Object... params);
void info(String message, Object... params);
void info(String message, Throwable t, Object... params);
void warn(String message, Object... params);
void warn(String message, Throwable t, Object... params);
void error(String message, Object... params);
void error(String message, Throwable t, Object... params);
void fatal(String message, Object... params);
void fatal(String message, Throwable t, Object... params);

An example usage:

log.debug(""This is the debug message number {0}!"", 1);

The implementation of this methods can use java.text.MessageFormat for translating the message and the parameters on the resultant log message, with low cost. An example implementation can be:

public void debug(String message, Object... params) {
	if (isDebugEnabled()) {
		debug(MessageFormat.format(message, params));
	}
}
",Demands Java 1.5,,,,,,,,,,,,,,,,,,LOGGING-89,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-29 23:29:13.24,,,false,,,,,,,,,,,,,,,148299,,,Tue Dec 29 23:29:13 UTC 2009,,,,,,0|i0spa7:,165573,,,,,,,,29/Dec/09 23:29;dennisl@apache.org;See A2 in LOGGING-89.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Support kind of isPriorityEnabled / log(Priority) on org.apache.commons.logging.Logger,LOGGING-120,12390261,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Duplicate,,maxxyme,maxxyme,05/Mar/08 15:48,29/Dec/09 23:31,07/Apr/19 20:35,29/Dec/09 23:31,1.0,1.0.1,1.0.3,1.0.4,1.1.0,1.1.1,,,,,,0,,,"Related to what's be done in library LogKit in class org.apache.log.Logger
 - check http://excalibur.apache.org/apidocs/org/apache/log/Logger.html#isPriorityEnabled(org.apache.log.Priority)
(former log tool in Apache Excalibur...)

... as well as what's available in library Log4j in class org.apache.log4j.Logger (extending by org.apache.log4j.Category)
 - check http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Category.html#isEnabledFor(org.apache.log4j.Priority)

Would it be possible to support a kind of priority-level test method which support a Priority as a param??



Same thing for the logging method log(Priority, message)
- check http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Category.html#log(org.apache.log4j.Priority,%20java.lang.Object)
",,,,,,,,,,,,,,,,,,,LOGGING-110,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,148298,,,Wed Mar 05 15:49:15 UTC 2008,,,,,,0|i0spaf:,165574,,,,,,,,05/Mar/08 15:49;maxxyme;Details + fix title.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
deadlock on re-registration of logger,LOGGING-119,12387466,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,nniv,nniv,30/Jan/08 12:38,07/Dec/13 09:20,07/Apr/19 20:35,18/Jan/13 10:56,1.1.1,,,,,,,,,1.1.2,,3,,,"Reached a deadlock inside common-logging while concurrently re-deploying 2 WARs.
In each WAR there is an attempt to get a logger:

private final Log logger = LogFactory.getLog(ContextLoader.class);


Thread dump:

[deadlocked thread] Thread-96:
-----------------------------
Thread 'Thread-96' is waiting to acquire lock 'java.lang.ref.ReferenceQueue@5266e0' that is held by thread 'Thread-102'
Stack trace:
------------
        org.apache.commons.logging.impl.WeakHashtable.purge(WeakHashtable.java:323)
        org.apache.commons.logging.impl.WeakHashtable.rehash(WeakHashtable.java:312)
        java.util.Hashtable.put(Hashtable.java:414)
        org.apache.commons.logging.impl.WeakHashtable.put(WeakHashtable.java:242)
        org.apache.commons.logging.LogFactory.cacheFactory(LogFactory.java:1004)
        org.apache.commons.logging.LogFactory.getFactory(LogFactory.java:657)
        org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685)
        org.springframework.web.context.ContextLoader.<init>(ContextLoader.java:145)
 
[deadlocked thread] Thread-102:
------------------------------
Thread 'Thread-102' is waiting to acquire lock 'org.apache.commons.logging.impl.
WeakHashtable@1e02138' that is held by thread 'Thread-96'
Stack trace:
------------
        java.util.Hashtable.remove(Hashtable.java:437)
        org.apache.commons.logging.impl.WeakHashtable.purgeOne(WeakHashtable.java:338)
        org.apache.commons.logging.impl.WeakHashtable.put(WeakHashtable.java:238)
        org.apache.commons.logging.LogFactory.cacheFactory(LogFactory.java:1004)
        org.apache.commons.logging.LogFactory.getFactory(LogFactory.java:657)
        org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685)
        org.springframework.web.context.ContextLoader.<init>(ContextLoader.java:145)
","Java 1.5, Windows",,,,,,,,,,,,,,,,,,,,HADOOP-10147,15/Sep/08 11:23;pmouawad;BugDeadlock.java;https://issues.apache.org/jira/secure/attachment/12390106/BugDeadlock.java,15/Sep/08 11:24;pmouawad;Patch-WeakHashtable-1.1.1.txt;https://issues.apache.org/jira/secure/attachment/12390107/Patch-WeakHashtable-1.1.1.txt,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2008-09-15 11:23:34.034,,,false,,,,,,,,,,,,,,,148297,,,Tue Apr 16 17:55:39 UTC 2013,,,,,,0|i0d7iv:,74995,,,,,,,,"15/Sep/08 11:23;pmouawad;Here is a Test case to reproduce it.
I launch it on a JDK1.6 and it deadlocks each 6 to 10 run.","15/Sep/08 11:24;pmouawad;Here is a patch to the deadlock bug.
Philippe.
www.ubik-ingenierie.com","15/Sep/08 11:31;pmouawad;The bug is due to 2 different ways of taking locks :

Purge or purgeOne:
1) locks queue
2) lock this through super.remove

Put the calls super.put()
1) lock this through super.put()
2) call to rehash in super.put()
3) rehash calls purge (which locks queue) => YOU GOT THE DEAD LOCK

The solution is to call super#remove in purge and purgeOne outside of the synchronized (queue) lock.

","29/Dec/09 22:53;dennisl@apache.org;I've tested the Test Case, but it runs without deadlock for me on Java 1.4, 1.5 and 1.6 on Windows.","30/Dec/09 00:34;ralph.goers@dslextreme.com;I also ran the test case on OSX 10.6 with Java 1.6 and can't don't get a deadlock. I also upped the number of threads and the loop count to try to make it happen but was still unable to reproduce it.  Of course, that doesn't mean the bug isn't valid.","27/Mar/12 14:39;aorapal;Has anyone been able to reliably reproduce the issue.  Or get a patch working?  We appear to be experiencing this issue as well and need a fix.  will upgrading commons-logging.jar fix the issue?

All threads get blocked waiting for the WeakHashTable object.  The thread holding the object is this:
""btpool0-193"" prio=10 tid=0x00002aaabc7e7800 nid=0x468 waiting for monitor entry [0x0000000050a7d000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at org.apache.commons.logging.impl.WeakHashtable.purge(WeakHashtable.java:323)
        - waiting to lock <0x00000006e37d3a18> (a java.lang.ref.ReferenceQueue)
        at org.apache.commons.logging.impl.WeakHashtable.rehash(WeakHashtable.java:312)
        at java.util.Hashtable.put(Hashtable.java:412)
        - locked <0x00000006e37cf4d0> (a org.apache.commons.logging.impl.WeakHashtable)

Note that it is waiting to lock a ReferenceQueue object.  The ReferenceQueue object is held by:

""btpool0-229"" prio=10 tid=0x00002aaac0c69800 nid=0x6b07 waiting for monitor entry [0x0000000043fd2000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at java.util.Hashtable.remove(Hashtable.java:435)
        - waiting to lock <0x00000006e37cf4d0> (a org.apache.commons.logging.impl.WeakHashtable)
        at org.apache.commons.logging.impl.WeakHashtable.purgeOne(WeakHashtable.java:338)
        - locked <0x00000006e37d3a18> (a java.lang.ref.ReferenceQueue)

Note that this one is waiting to lock the WeakHashTable object, so the thread lock will never break, and all the other btpool threads will back up behind it.","17/Jul/12 09:09;stefan.eissing;I can confirm that this issue happens together with a 1.4 java runtime (tested on WinXP). I am unable to reproduce this with a Java6 runtime (on WinXP and OS X). 

The attached patch fixes this issue for me.","17/Jul/12 09:54;sebb@apache.org;@Stefan 

What code did you use to show the error? 
Which version of Java was it exactly?","17/Jul/12 10:02;stefan.eissing;@Sebb I used the code attached to this ticket. Run it from the shell in an endless loop. Process deadlocked for me about once every 80 invocations. Host: WinXP on Parallels, Java VM 1.4.2_17-b06 (yeah, I know it's antique). 

Customer experienced the deadlock on his production system, running 1.4 VM on Solaris (don't know the exact version).
","17/Jul/12 10:16;sebb@apache.org;@Stefan

Thanks.

I've been able to reproduce the error now as well using a slightly modified version of the test code and Java 1.4.2_19-b04.
I'll tidy up my test code and add to SVN later.","18/Jul/12 01:57;sebb@apache.org;Fails on my WinXP system with Java 1.4/1.5/1.6/1.7.

Also tried a test on Jenkins (ubuntu) that failed too.

However, so far the Continuum builds don't seem to tigger the problem.

It remains to be seen how Gump reacts.","18/Jul/12 13:19;sebb@apache.org;An alternative fix would be to drop the direct synch on queue, and synchronise the methods that call it.

Eclipse complains about many of the methods, for example:

The method WeakHashtable.get(Object) is overriding a synchronized method without being synchronized

I don't think there are any issues here, but most of the methods don't do much except delegate to the super method, at which point the synch. lock will be acquired anyway. So the additional synch. code would be minimal.

Fixing the Eclipse warnings leaves the following methods that call purge without being synchronized:

entrySet()
keySet()
values()
rehash()

Synchronising these methods seems unlikely to adversely affect performance compared with synchronising just the queue.
There is not much additional code included in the synch. block.

In the case of rehash(), it is only called by Hashtable#put() which is synch. anyway.

==

It's not clear to me that the existing patch is 100% thread-safe.
There is a window between removing the item from the reference queue (poll) and removing the referenced item from the hash table.
If another thread modifies the hashtable between the poll and the remove, can that cause any problems?
Also, not all references to the queue field are protected by the same lock; the put() method references the queue without first aquiring the queue lock. Potentially this can cause a data publication issue due to the Java Memory Model.",19/Jul/12 19:46;sebb@apache.org;Also fails on Gump.,"20/Dec/12 13:29;radai;i've managed to reproduce the issue on my machine (windows 7 x64 java 6u33 x64) with the trunk version of commons-logging (checked out of svn).
i can also confirm the attached patch resolves the issue.
i did have to add a few zeros to the thread count and per-thread try count in the test-case to reproduce reliably though.","15/Jan/13 10:44;tn;Looking at the patch, the original deadlock problem should be fixed by it, but there are other flaws in WeakHashtable that should be addressed:

* put and remove have the following code snippet:

{noformat}
        // for performance reasons, only purge every
        // MAX_CHANGES_BEFORE_PURGE times
        if (changeCount++ > MAX_CHANGES_BEFORE_PURGE) {
            purge();
            changeCount = 0;
        }
        // do a partial purge more often
        else if (changeCount % PARTIAL_PURGE_COUNT == 0) {
            purgeOne();
        }
{noformat}

which is not-synchronized, thus the changeCount check may be successful for two concurrent threads at the same time, calling purge / purgeOne multiple times.

* the underlying Hashtable is synchronized, while none of the overriden methods are
","18/Jan/13 10:56;tn;Applied a modified patch in r1435077.

The following changes have been made:

 * synchronize the put and remove methods to prevent issues with changeCount and the actual bug wrt purge / purgeOne. The call to super.put() will be synchronized anyway, so there should be no performance hit. This already solves the bug.
 * apply the idea from the patch to the purge method, as it is also used in non-synchronized methods like values(), elements(). These methods are not actually used in commons-logging, but this has been added to prevent any future problems in case this changes. The method purgeOne has been kept as is, as it is only used in the now synchronized put and remove methods.","19/Feb/13 21:12;jglick@netbeans.org;Since this is a serious bug, and it has apparently been over five years since the last release, what about releasing {{1.1.2-beta-1}} or similar?",19/Feb/13 21:16;p.mouawad@ubik-ingenierie.com;+1,"19/Feb/13 21:23;tn;just fyi: the release is in the pipeline for the coming days / weeks, but we have to first sort out our site publish procedure (has changed the last weeks).

Please discuss / follow-up such requests on the dev mailinglist, as this will reach a bigger audience.","21/Feb/13 14:09;jglick@netbeans.org;FYI, affects Jenkins with embedded Maven: https://issues.jenkins-ci.org/browse/JENKINS-15846; might affect command-line Maven but the trigger conditions may not be present.

Two points related to this bug:

- Why does {{LogFactory}} require the value of its {{….LogFactory.HashtableImpl}} property to be a {{Hashtable}} rather than simply a {{Map}}?
- If the answer to the first question is “no good reason”, why do you not simply use {{java.util.WeakHashMap}} (possibly with a synchronization wrapper) rather than writing your own {{WeakHashtable}}?","21/Feb/13 14:26;tn;commons-logging was created and still targets for JDK 1.1. Map and WeakHashMap did not yet exist at the time, so there was a need for an own implementation of a WeakHashtable.

It was decided to keep the compatibility settings as is for the 1.1.2 bugfix release, especially to keep binary compatibility.
Changing the internal factories to a Map would break compatibility.

What will happen after 1.1.2 is unclear. Either commons-logging will die, or we will modernize it and release a non binary compatible version 2.",21/Feb/13 14:49;olamy;jdk 1.1 target ? really in 2013 ?,"21/Feb/13 15:00;garydgregory;and it's February 2013! ;)

I think we can bump the target to 1.4 without controversy.

The super conservative route would be to
# release 1.1.2 as is, no platform changes.
# update the platform requirement to whatever we agree on for 1.2, Java 1.4, 5, 6, or 7.

","21/Feb/13 16:14;tn;Well, for 1.1.2 it does not make much of a difference if we change the target. We have to stick to Hashtables for now to keep binary compatibility. The problem here should be solved, and for future versions (1.2?, 2.0) we will surely use existing stuff like WeakHashMap.","16/Apr/13 17:55;jglick@netbeans.org;1.1.2 seems to be released, thanks. Will be in Wagon: https://jira.codehaus.org/browse/WAGON-394",,,,,,,,,,,,,
Generate source and binary archives,LOGGING-118,12382829,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,dennisl@apache.org,sebb@apache.org,sebb@apache.org,19/Nov/07 23:27,21/Nov/07 22:54,07/Apr/19 20:35,21/Nov/07 22:54,,,,,,,,,,1.1.1,,0,,,"To follow is a patch to create binary and source archives.

Not fully tested, but seems to work for my limited testing",,,,,,,,,,,,,,,,,,,,,,19/Nov/07 23:28;sebb@apache.org;bin.xml;https://issues.apache.org/jira/secure/attachment/12369832/bin.xml,19/Nov/07 23:28;sebb@apache.org;pom.patch;https://issues.apache.org/jira/secure/attachment/12369831/pom.patch,19/Nov/07 23:28;sebb@apache.org;src.xml;https://issues.apache.org/jira/secure/attachment/12369833/src.xml,,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2007-11-21 22:54:54.575,,,false,,,,,,,,,,,,,,,148296,,,Wed Nov 21 22:54:54 UTC 2007,,,,,,0|i0span:,165575,,,,,,,,19/Nov/07 23:28;sebb@apache.org;Patch for pom.xml and files for src/assembly,"21/Nov/07 22:54;dennisl@apache.org;I didn't use the attached assembly files. Instead I created new ones that replicate the behavior of the previous release as closely as possible.

The source assembly includes everything from a clean subversion export, but packaged in a directory with ""-src"" added at the end.

The binary assembly includes all jar files and the generated site. It also includes LICENSE*, NOTICE* and RELEASE-NOTES* files.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unit tests fail on linux with java16,LOGGING-117,12382287,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,skitching,skitching,skitching,11/Nov/07 11:25,11/Nov/07 11:56,07/Apr/19 20:35,11/Nov/07 11:56,1.1.1,,,,,,,,,1.1.1,,0,,,"When running ""mvn install"", the unit tests fail.

The problem is with the tests in the jdk14 directory, ie those that test commons-logging forwarding to a java.util.logging implementation.
The same tests works fine with java15 on linux. Others have reported that the tests work fine with java16 on Windows.

The problem seems to be that somehow java.util.logging is not registering our dummy LogHandler implementation that the unit test uses to then verify that the messages have correctly been forwarded.

Note that this is likely just a problem with the *unit test*. It is believed that the real commons-logging code actually works fine.

It appears that the problem has something to do with the tests in the ""noop"" directory. Changing the pom to do this:
              <excludes>
                <exclude>**/noop/*TestCase.java</exclude>
              </excludes>
 
makes the jdk14 tests run fine.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,148295,,,Sun Nov 11 11:56:52 UTC 2007,,,,,,0|i0d7j3:,74996,,,,,,,,"11/Nov/07 11:56;skitching;Ok, found the problem and fixed it with r593871: clear system properties set by the NoOpLogTestCase after test completes.
This is possibly not the best fix; it would be better to fix this in some central point so it applies to all unit tests. Or have unit tests clear this in their own setUp methods.
However this patch does the job.

It's still not entirely clear why this affected only java16, but as it is only a unit test it is not worth spending more time on.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Duplicate classes between api and adapters,LOGGING-116,12381839,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Invalid,,tuomas_kiviaho,tuomas_kiviaho,05/Nov/07 13:14,14/Nov/07 22:38,07/Apr/19 20:35,05/Nov/07 16:35,1.1.0,1.1.1,,,,,,,,,,0,,,"Using commons-logging-api.jar and commons-logging-adapters.jar together leads to duplicate classes. Jdk14, noop and simple logs are also in the adapters archive which prevents some tools from working properly. Would it be possible to remove these classes from adapters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-11-05 16:35:28.624,,,false,,,,,,,,,,,,,,,148294,,,Wed Nov 14 22:38:49 UTC 2007,,,,,,0|i0d7jb:,74997,,,,,,,,"05/Nov/07 16:35;skitching;It's not *likely* that this will be changed, but it can certainly be discussed.

However the bug-tracker is not an appropriate place for a discussion of these issues. Please subscribe to the mail list users@commons.apache.org and post a message there describing what problems you are encountering.

There is some info about commons-logging packaging here:
  http://commons.apache.org/logging/commons-logging-1.1/guide.html","14/Nov/07 22:38;dennisl@apache.org;Remove fix version, as the issue hasn't been fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE thrown due to exception message logging,LOGGING-115,12381313,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,yandosh,yandosh,27/Oct/07 23:56,10/Nov/07 17:46,07/Apr/19 20:35,10/Nov/07 17:46,1.1.0,,,,,,,,,1.1.1,,0,,,"NullPointerException is thrown in more catch blocks while building a log message. Eg. in class LogFactory there can be found construction Exception.getMessage().trim() (lines 470, 484 and 547) but there is no check for null message which could happen as written in java doc.",Java 1.6u2 on Windows XP Professional,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-11-10 17:46:35.247,,,false,,,,,,,,,,,,,,,148293,,,Sat Nov 10 17:46:35 UTC 2007,,,,,,0|i0d7jj:,74998,,,,,,,,"10/Nov/07 17:46;skitching;Thanks very much for the report!

This has now been fixed (r593798), and will be in the 1.1.1 release.
Note that this problem could only occur when diagnostics are enabled.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Silent Swallowing of NoClassDefFoundError,LOGGING-114,12373318,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Duplicate,dennisl@apache.org,mcleaton,mcleaton,09/Jul/07 15:31,23/Aug/07 16:36,07/Apr/19 20:35,23/Aug/07 16:36,1.1.0,,,,,,,,,1.1.1,,0,,,"Hi. I'm using commons logging with log4j; my team ship a library which uses log4j, and some of our clients use it with commons-logging.

If commons-logging is in its default configuration, and log4j is present but fails to load its configuration with an unhandled exception, the results are pretty nasty:

- commons-logging silently swallows the exception and logs with something else. If diagnostics are turned on, the message is:
    Could not instantiate Log 'org.apache.commons.logging.impl.Log4JLogger' -- java.lang.reflect.InvocationTargetException: null

- future attempts to use log4j directly get a pretty unhelpful error:
    java.lang.NoClassDefFoundError at org.apache.log4j.Logger.getLogger(Logger.java:117).

I realise you're trying to deal with a very large number of cases in this code, but it does seem like something better could be done here. If nothing else is possible, at least recognising the InvocationTargetException and pulling out the target exception for the diagnostic log would have helped with tracking this one down.","Various OSs, in combination with log4j 1.2.14.",,,,,,,,,,,,,,,,,,LOGGING-111,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-07-10 20:07:00.608,,,false,,,,,,,,,,,,,,,148292,,,Thu Aug 23 07:56:35 UTC 2007,,,,,,0|i0d7jr:,74999,,,,,,,,"10/Jul/07 20:07;dennisl@apache.org;It is not the job of commons-logging to report on errors regarding the underlying logging implementations failure to configure itself.

Commons-logging tries its best to send the messages, that the author of a library wants to log, to the logging implementation. Which logging implementation commons-logging sends these messages to is either
A. configured in commons logging explicitly or
B. found dynamically

There is no way for the underlying logging implementation to ""tell"" commons-logging anything. So if the underlying logging implementation cannot configure itself correctly, as I understand is your situation here, commons-logging can't do much about it. It is the job of log4j, in this case, to tell you that it cannot load its configuration and from my experience it usually does.","11/Jul/07 09:21;mcleaton;Hi Dennis.

Yes, log4j does usually tell you when it cannot load its configuration. In this case it tells me through a NoClassDefFoundError when runtime dependencies fail to load during configuration loading. If commons-logging is not in use, the error is easy to understand and quickly fixed.

Unfortunately, if commons-logging is the first to try to load log4j, the error is swallowed silently. Since it is a problem during the clinint of the LogManager class, log4j is now broken internally and will not give good errors again - any future use gets incomprehensible errors. What's more, if commons-logging diagnostics are enabled, the diagnostic error is logged with most of the information missing. But I'm repeating myself here, all this is in the bug report, along with the actual messages involved.

To understand my problem, imagine the other side of it, which will probably shortly be happening - imagine my attempts to file a bug in log4j on the basis that, if a class can't be found during configuration loading, they simply allow the NoClassDefFoundError to propagate. How is that wrong?

But if you're adamant that silently swallowing this error is also not wrong, it's not their problem and it's not your problem. Where does that leave the user? I guess it's just my problem.","11/Jul/07 10:13;joehni;IMHO this is really a JCL problem. It detects log4j and tries to use it. It is fine that it searches for something else if log4j is not present. But here it even suppresses a thrown Error that indicates also a problem for JCL. From user's PoV either the presence of log4j was not expected at all, he failed to configure to Log4J or he failed to configure JCL. In any case he must realize that something is not working as expected.","11/Jul/07 20:21;skitching;JCL has adopted the principle that logging problems should never stop an app from running. In the past exceptions from logging libs were allowed through JCL in some cases and there were loud user complaints. In many cases, the users didn't actually *want* logging output anyway, and didn't know how to fix the logging problems because they were complex and involved classloaders with different classpaths etc. So now, JCL *never* fails to init. In particular, if log4j is present but cannot be initialised (eg due to classloader problems) JCL quite deliberately ignores this problem and lets the app start.

If someone really does want logging output but aren't getting what they expect *then* they can turn on JCL diagnostic output to see what's happening. 

I don't think there is likely to be agreement for any change to JCL's behaviour for this.

Writing problems stuff to stdout etc is also unacceptable when diagnostics are not enabled. Again, this can cause problems for users who don't actually care about logging output anyway.

However I would agree that when diagnostics are enabled, JCL should write out the message from the original exception. If it's not doing this then I would call that a bug.
","11/Jul/07 21:45;dennisl@apache.org;Malcolm,

Just so I understand your setup fully:

Do you configure commons-logging in any way? Either via a system property or through the use of a commons-logging.properties file? If yes, please tell us how.

Do you get any message from log4j, saying that it couldn't find its configuration file? If yes, what does it say.

Are you sure that your code that uses commons logging is the one that causes log4j to be loaded? Or could it be that the other library of yours, that use log4j directly, is the first user?","12/Jul/07 08:20;mcleaton;Dennis: Commons-logging is entirely in its default configuration, no properties are provided. Yes, I'm sure commons-logging is the first to initialize log4j. log4j doesn't print any messages, but it's not the case that it can't find its configuration file. It finds the file, and fails with a NoClassDefFoundError while trying to instantiate the appenders specified in the file. The log4j code doesn't handle this error, so it doesn't print anything, just allows the error to propagate.

Simon: Yes, I agree that's probably the only fix you can make, although it's unfortunate that this means the JCL dynamic discovery mechanism can leave anything it fails to load in a broken state, causing very difficult debugging later on. In our case, JCL was being used by our client for very basic logging, so the fact that their logging of our startup error was coming out of the jdk 1.4 logging library rather than log4j made almost no visible difference and was not noticed. Once we'd ruled out the famous classloader problems early on, it took quite a while before JCL came back under suspicion - we didn't realise it could also cause this kind of problem. Better information in the diagnostic log would indeed be an improvement - but once we'd turned on diagnostics and had that exception with the bad message, we were very near the end of our debugging journey.

I've also raised a bug on log4j, suggesting that, since they already print on stderr when there's no logging configuration, they could also do so when the clinit of LogManager is about to die: http://issues.apache.org/bugzilla/show_bug.cgi?id=42855.","02/Aug/07 10:48;dennisl@apache.org;I'm going to try to set up a test case for this issue. Do you think that this setup would reproduce this problem:

* Create a small java class that uses commons logging
* Put log4j in the class path
* Put a valid configuration for log4j in the class path, that tries to use an smtp appender, which requires activation.jar and mail.jar to be present in the class path
* Do not put activation.jar and mail.jar in the class path
* Log a message using commons logging

After this do I also need to
* call log4j directly?","02/Aug/07 11:00;mcleaton;Yes.

Your steps should successfully reproduce a situation where log4j is screwed up, but you won't see any errors until you try to exercise it. In order to exercise it you'll have to do it directly, as commons logging will have given up on log4j and be using something else by now.

Just creating a log4j logger with Logger.getLogger should do it. But make sure not to do this until after logging something with commons logging.
","03/Aug/07 08:21;skitching;Rather than use smtp appender, presumably the log4j config file could also just reference an appender that doesn't exist, eg ""example.no.such.appender"".

However why should log4j be called directly? I thought the problem is that when JCL is called directly and log4j is not yet initialised, this causes log4j to auto-initialise which then fails.
JCL then *silently* selects a different logging system where it should at least write a message to the diagnostics.

Presumably this test would need to catch stderr (ie the diagnostics output) and search that output text for a message stating that log4j was not selected because it failed to initialise.

The test will need to be careful to restore stderr to its original destination in all situations; it would be awkward if the unit test left stderr redirected ;-)

Another useful test might be to check what happens when the commons-logging.properties file explicitly selects log4j and it fails. I don't actually know what we do in that case (will check...)","03/Aug/07 08:27;mcleaton;No, the case of an appender which does not exist is handled differently by log4j. It has to be an appender which exists but causes an Error when created, the most common of which is a NoClassDefFoundError when dependent classes are missing. However, any error will do, so an alternative way to test would be to create a trivial appender which raises an error whenever instantiated.

Yes, if you just want to check that JCL is writing an appropriate error when log4j configuration fails, there's no need to exercise log4j to test this, obviously. Exercising log4j directly is only necessary if you want to reproduce the original problem.","03/Aug/07 13:34;dennisl@apache.org;OK, I've set up a small test project to test this. Here is the java file:

{code}
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.Logger;

public class TestLogging
{
    public static void main(String[] args) {
        Log log = LogFactory.getLog(TestLogging.class);
        log.info(""commons-logging logs something"");
        Logger logger = Logger.getLogger(""myLog4jLogger"");
        logger.info(""log4j logs something"");
    }
}
{code}


Log4j is present in the classpath along with commons-logging 1.1 or 1.1.1-SNAPSHOT (I tried both) and there is a commons-logging.properties file that tells commons-logging to use log4j. There is also a log4j.xml file that configures a DailyRollingFileAppender and an SMTPAppender. Neither activation.jar or mail.jar is present.

However, when I run this I get the following output on the console (with or without Diagnostic Logging):

{code}
Exception in thread ""main"" org.apache.commons.logging.LogConfigurationException: User-specified log class 'org.apache.commons.logging.impl.Log4JLogger' cannot be found or is not useable.
        at org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:798)
        at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:601)
        at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:333)
        at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:307)
        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:645)
        at TestLogging.main(TestLogging.java:25)
{code}

Is that not good enough or am I missing something here?

If I comment out the SMTPAppender in the configuration file everything works and two log entries are output to the file every time the program runs.","03/Aug/07 13:45;mcleaton;> there is a commons-logging.properties file that tells commons-logging to use log4j

This is the difference. In my case there was no such commons-logging.properties file. I suspect this is what causes a visible error when log4j is unusable.","03/Aug/07 14:22;dennisl@apache.org;If I remove the commons-logging.properties file I get this output on the console (same with or without Diagniostic Logging)

{code}
2007-aug-03 16:18:19 TestLogging main
INFO: commons-logging logs something
Exception in thread ""main"" java.lang.NoClassDefFoundError
        at org.apache.log4j.Logger.getLogger(Logger.java:104)
        at TestLogging.main(TestLogging.java:27)
{code}

You can see here that commons-logging is using java.util.logging instead. But I do get an exception telling me that log4j is missing some class. Is this the message that you are getting as well?","03/Aug/07 14:26;mcleaton;Yes, that's the one. We were getting java.lang.NoClassDefFoundError at org.apache.log4j.Logger.getLogger(Logger.java:117), but I believe that difference is just using a class rather than a string to create the Logger, it's the same underlying error.","03/Aug/07 15:00;dennisl@apache.org;Yea, I get line 117 as well if I switch to use a Class.

With Diagnostic Logging turned on I get the following output, which states that commons-logging was unable to instantiate the log4j logging implementation due to a NoClassDefFoundError: javax/mail/Multipart

{code}
[LogFactoryImpl@18426253 from sun.misc.Launcher$AppClassLoader@5487165] Attempting to instantiate 'org.apache.commons.logging.impl.Log4JLogger'
[LogFactoryImpl@18426253 from sun.misc.Launcher$AppClassLoader@5487165] Trying to load 'org.apache.commons.logging.impl.Log4JLogger'
  from classloader sun.misc.Launcher$AppClassLoader@5487165
[LogFactoryImpl@18426253 from sun.misc.Launcher$AppClassLoader@5487165] Class 'org.apache.commons.logging.impl.Log4JLogger' was found at
  'jar:file:/G:/test/LOGGING-114/target/commons-logging-1.1.1-SNAPSHOT.jar!/org/apache/commons/logging/impl/Log4JLogger.class'
[LogFactoryImpl@18426253 from sun.misc.Launcher$AppClassLoader@5487165] Could not instantiate Log 'org.apache.commons.logging.impl.Log4JLogger' --
  java.lang.reflect.InvocationTargetException: null
[LogFactoryImpl@18426253 from sun.misc.Launcher$AppClassLoader@5487165] ... InvocationTargetException: java.lang.NoClassDefFoundError: javax/mail/Multipart
{code}",22/Aug/07 17:55;bayard;Is this issue going to be a 'WONTFIX' then?,"22/Aug/07 20:25;dennisl@apache.org;That is my current standpoint.
I was hoping to hear back from Malcolm before closing this as won't fix.","23/Aug/07 07:56;mcleaton;Sorry, distracted.

Yes, I see that the bad reporting of the InvocationTargetException we set out to fix here is in fact a duplicate of LOGGING-111. I attempted to verify that the latest code exhibited the same behaviour before reporting the problem, but obviously I've suffered a brainfart there, as it's been fixed for some time. Apologies for wasting time with a duplicate issue.",,,,,,,,,,,,,,,,,,,,
pom.xml in maven repository does not list dependencies as optional,LOGGING-113,12370130,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,maxberger,maxberger,24/May/07 11:39,25/May/07 14:48,07/Apr/19 20:35,25/May/07 14:48,1.1.0,,,,,,,,,1.1.1,,0,,,"Dear Commons Logging Developers,

I don't  know if this is the right place, but I have a problem with the maven 2 artifact for commons-logging, available at:

ftp://ibiblio.org/pub/packages/maven2/commons-logging/commons-logging/1.1/
ftp://ibiblio.org/pub/packages/maven2/commons-logging/commons-logging/1.1/commons-logging-1.1.pom

The pom lists avalon-framework, servlet-api, junit, log4j, logkit as REQUIRED dependencies, while instead they should be optional dependencies.

How to fix:
add  <optional>true</optional> to all dependencies that are optional, e.g. 
<dependency>
<groupId>log4j</groupId>
<artifactId>log4j</artifactId>
<version>1.2.12</version>
<optional>true</optional>
</dependency>

Thanks",maven 2,,,,,,,,,,,,,,,,,,LOGGING-105,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-05-25 14:48:12.464,,,false,,,,,,,,,,,,,,,148291,,,Fri May 25 14:48:12 UTC 2007,,,,,,0|i0spav:,165576,,,,,,,,"25/May/07 14:48;bayard;This has been fixed in HEAD (the version that has been published is not allowed to be edited).

Just a question of a 1.1.1 release being made - c-logging releases seem pretty painful to do and no one is volunteering currently.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Commons Logging in SLF4J flavour,LOGGING-112,12365692,Improvement,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,,,boris.unckel.mlg@gmx.net,boris.unckel.mlg@gmx.net,23/Mar/07 18:50,14/Nov/13 10:15,07/Apr/19 20:35,,2.0,,,,,,,,,2.0,,2,,,"There were some related discussions on the dev mailing list about a possible JCL 2.0.0.
I have created a first draft version of JCL in SLF4J (http://www.slf4j.org/) flavour.

It is based on Maven 2 and a clean separation of API and implementations, without any fallback for an implementation
in runtime. It still consists of the same Log Wrappers as 1.1.x with one jar each.

The source lacks on documentation and the JUnits are not ported yet.

This code is intended to show that an improved implementation has worth in discussing and use.

It has been tested with Apache Tomcat 5.5.23 and JDK 6.0 on Windows Vista.

Please send your comments to the mailing list and not in the JIRA.",Systems supporting JRE version 1.3 and above.,,,,,,,,,,,,,,,,,,,,,23/Mar/07 18:51;boris.unckel.mlg@gmx.net;jcl-2.0.0.zip;https://issues.apache.org/jira/secure/attachment/12354110/jcl-2.0.0.zip,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,148290,,,Fri Mar 23 18:51:57 UTC 2007,,,,,,0|i0spb3:,165577,,,,,,,,"23/Mar/07 18:51;boris.unckel.mlg@gmx.net;The complete project including POMs and sources.
Use mvn clean install
to build files or
mvn eclipse:eclipse
to create project files for eclipse.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Small patch to make debugging easier,LOGGING-111,12356053,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,skitching,lblaze,lblaze,18/Nov/06 01:35,14/Nov/07 22:40,07/Apr/19 20:35,20/Nov/06 07:31,1.1.0,,,,,,,,,1.1.1,,0,,,"During the last few days I had major problems trying to configure Commons-Logging + Log4j on Glassfish.
It turned out to be related to Log4j UDPAppender, but it took me needlessly long time to verify the problem was indeed in Log4j and not in Commons-Logging, Glassfish or something else. Now, why am I posting it here then - I made a small modification which logs Log4j failures more precisely, instead of just:

[LogFactoryImpl@14810083 from org.apache.catalina.loader.WebappClassLoader@1904280] Could not instantiate Log 'org.apache.commons.logging.impl.Log4JLogger' -- java.lang.reflect.InvocationTargetException: null

which explains, basically, nothing, you get for example:

[LogFactoryImpl@14810083 from org.apache.catalina.loader.WebappClassLoader@1904280] Could not instantiate Log 'org.apache.commons.logging.impl.Log4JLogger' -- java.lang.reflect.InvocationTargetException: null
[LogFactoryImpl@14810083 from org.apache.catalina.loader.WebappClassLoader@1904280] ... InvocationTargetException: java.lang.ExceptionInInitializerError: null
[LogFactoryImpl@14810083 from org.apache.catalina.loader.WebappClassLoader@1904280] ... ExceptionInInitializerError: java.lang.IllegalStateException: Property layout must be set for UDPAppender named appenderLocalhostUdp

which states clearly that Log4j was indeed loaded, and the problem was in its configuration.
All it does is expand those two exceptions if they occurred. It could be more general and more elegant, but this code should work in pre-1.4 Java.

Could you please include it in next build of Commons-Logging?

Attaching the patch text below.

Greetings, Lilianne E. Blaze

Index: LogFactoryImpl.java
*** D:\Work\Projects\Apache\commons-logging-custom\src\org\apache\commons\logging\impl\LogFactoryImpl.java Base (BASE)
--- D:\Work\Projects\Apache\commons-logging-custom\src\org\apache\commons\logging\impl\LogFactoryImpl.java Locally Modified (Based On LOCAL)
***************
*** 1362,1369 ****
--- 1362,1388 ----
                       + logAdapterClassName + ""' -- ""
                       + discoveryFlaw.getClass().getName() + "": ""
                       + discoveryFlaw.getLocalizedMessage());
+            +             if ( discoveryFlaw instanceof InvocationTargetException ) {
+                 InvocationTargetException ite = (InvocationTargetException)discoveryFlaw;
+                 Throwable cause = ite.getTargetException();
+                 logDiagnostic(""... InvocationTargetException: "" +
+                         cause.getClass().getName() + "": "" +
+                         cause.getLocalizedMessage());
+                +                 if( cause instanceof ExceptionInInitializerError ) {
+                     ExceptionInInitializerError eiie = (ExceptionInInitializerError)cause;
+                     Throwable cause2 = eiie.getException();
+                     logDiagnostic(""... ExceptionInInitializerError: "" +
+                             cause2.getClass().getName() + "": "" +
+                             cause2.getLocalizedMessage());
+                                     }
                +             }
+            +         }
+                 if (!allowFlawedDiscovery) {
             throw new LogConfigurationException(discoveryFlaw);
         }

Index: Log4JLogger.java
*** D:\Work\Projects\Apache\commons-logging-custom\src\org\apache\commons\logging\impl\Log4JLogger.java Base (BASE)
--- D:\Work\Projects\Apache\commons-logging-custom\src\org\apache\commons\logging\impl\Log4JLogger.java Locally Modified (Based On LOCAL)
***************
*** 77,84 ****
--- 77,86 ----
     // ------------------------------------------------------------

     static {
+
         if (!Priority.class.isAssignableFrom(Level.class)) {
             // nope, this is log4j 1.3, so force an ExceptionInInitializerError
+             // note - it still works with log4j 1.3.8-alpha
             throw new InstantiationError(""Log4J 1.2 not available"");
         }
        ***************
*** 112,117 ****
--- 114,124 ----
     /** For use with a log4j factory.
      */
     public Log4JLogger(Logger logger ) {
+      +         if( logger == null ) {
+             throw new IllegalArgumentException(""Warning - logger == null, possible Log4j misconfiguration?"");
+         }
+               this.name = logger.getName();
         this.logger=logger;
     } ",Commons-Logging + Log4j,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-11-19 09:03:05.0,,,false,,,,,,,,,,,,,,,148289,,,Mon Nov 20 07:31:11 UTC 2006,,,,,,0|i0spbb:,165578,,,,,,,,"19/Nov/06 09:03;skitching;Looks good to me. I've committed this patch (with a couple of extra checks for null causes).
Thanks very much for your contribution.

SVN commit: 476772 (LogFactoryImpl), 476774 (Log4JLogger).

Could you please check that this works fine for you?

Note for others: InvocationTargetException.getTargetException and ExceptionInInitializerError.getException both exist in jdk1.2.2 (supported platform for JCL).",20/Nov/06 07:29;skitching;Original poster has confirmed the patch works for her.,"20/Nov/06 07:31;skitching;correct ""applies to"" version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implement a Level class and a generic log method in Log,LOGGING-110,12356007,New Feature,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,,,svanerk,svanerk,17/Nov/06 16:51,29/Dec/09 23:30,07/Apr/19 20:35,,,,,,,,,,,2.0,,0,,,"The Log API does not have a generic log method and there is no generic Level class. Since the levels which commons logging provides are fixed and since it would not break backwards compatibiliy I would like to suggest that these are added. To be more specific, I would like to see the following methods added:

 void 	log(Level level, Object message)
           Log a message with the specified log level.

 void 	log(Level level, Object message, Throwable t)
           Log a message and exception with the specified log level.

 boolean isEnabled(Level level)
           Is the specified logging level currently enabled?

As an extra feature of the level class one could have string and integer conversions to and from log levels.

These features would allow one to use commons logging in more complex situations without have to rely on specific logging implementations.",,,,,,,,,,,,,,,,,,,,,,09/May/08 15:55;sashkap;LogLevel.java;https://issues.apache.org/jira/secure/attachment/12381774/LogLevel.java,09/May/08 15:55;sashkap;TestLogLevel.java;https://issues.apache.org/jira/secure/attachment/12381775/TestLogLevel.java,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2006-11-17 22:17:12.0,,,false,,,,,,,,,,,,,,,148288,,,Fri May 09 15:55:45 UTC 2008,,,,,,0|i0spbj:,165579,,,,,,,,"17/Nov/06 22:17;skitching;I agree it would be convenient to have a log level that can be queried and a generic log method that takes a level.

However there are logging libraries that don't have this info available; it would therefore not be possible for commons-logging to implement this when wrapping those libraries. In particular, the Avalon framework's Logger class does not suport this. Ok, this particular log lib is now rather obsolete but we don't know how many other logging libs out there are like this.

Although you state that this ""would not break backwards compatibility"", it seems to me that it does; remember that users can write their own logging adapters.  Compiling an old logging class against the new API would fail. Running an old binary logging class with the new API would work until someone called one of the new methods at which time a MethodNotFound exception would occur.

An alternative might be to write a LogUtils class:
  Log log = LogFactory.getLog(""someCategory"");
  if (LogUtils.isEnabled(log, Priority.WARN)) {
      LogUtils.log(log, Priority.WARN, ""a message"")
  }
Where LogUtils has stuff like:
  public boolean isEnabled(Log log, Priority p) {
    if (p == Priority.DEBUG) {
      return log.isDebugEnabled();
    } else ....
  }
This would have a performance impact, however, that would probably not make it worthwhile using.

I'm not sure what code would make use of this new functionality anyway. Any code that is targetted at java 1.4 or later should probably use the jdk14 logging API directly (with an alternate underlying implementation plugged in to replace the pathetic default implementation). And application code should know what logging lib it is distributed with and code to that lib directly. So the only user of this stuff would be new framework or library code targetted at java 1.3 or earlier; there's not a lot of that around I would expect...","18/Nov/06 09:34;svanerk;I don't understand how this is something that cannot be implemented for certain libraries (such as Avalon), since the API would require no more information than it needs now.

For example, one could easily implement the log and isEnable methods in the spirit of your LogUtils methods by using ONLY the commons logging API (and no extra information):

public boolean isEnabled(Priority p) {
  switch (p) {
    case Priority.WARN: return isWarnEnabled();
    ...
}

Note that if you make it possible to use a switch on the priority (in Java 1.5 this could be done with enums, but in 1.4 and less one could use a byte repesentation of the priority) I don't think the performance would take a big hit (I don't know how good the JIT optimizer is, but a switch can be implemented with a jump table; however even without a jump table it hardly compares to the CPU cycles required to do the actual logging).

Thus one can implement the extra methods in the interface using only the logging API itself. 


About the backwards compatibilty, I really meant application code and library code that is currently using commons logging. I did not mean Log implementations. I guess it would be possible to put it in a next ""big"" release (i.e. 1.2) if it is really a big deal. However, the API is so tiny I think it would be really easy for developers to upgrade their Log implementations to be usable with the new release.


Finally, about the jdk14 logging API in java 1.4 code: I'm developing library code for java 1.5. But I like the API of commons logging; the log levels are much cleaner (no such things as FINE, FINER, and FINEST), and the application code looks really clean. Also I like giving the option of people using my code to choose their logging implementation of their choice. Even for application code that runs in a servlet container it is nice to give the user the choice of which logging library to user. So I still see a use for commons logging even though java 1.4 has its own logging API.

To summarize: I think for a ""bigger"" release (version jump) it's ok to break the backwards compatibility with the Log implementations. All application and library will still work fine without any changes, and nobody is required to upgrade. I think the extension is useful even for modern java versions (I can't imagine commons logging being obsolete for JDK1.4 and higher). And I don't think the change will impact people using JDK 1.3 or lower because I seriously doubt they will even upgrade their commons logging by more than a minor version for bugfixes.

","18/Nov/06 09:47;svanerk;One more comment on the implementation using only the commons logging API itself: this need only be done for libraries that do NOT support these methods natively (which are in the minority I would think).

For log4j for example, you would just need a static mapping from commons log priorities to log4j log levels, which can be implemented efficiently with an array:

Level levels[] = new Level[] { Level.TRACE, Level.DEBUG, ... }

and one can just call the underlying Logger.log(levels[priority.byteValue()], message) or something like that.

This would not be much of a performance hit at all.","19/Nov/06 09:41;skitching;You're right; sorry I got a little mixed up; trying to juggle too many things :0). What avalon doesn't support is getLogLevel(), which you are NOT proposing.

As you say, all the functionality *can* be implemented for all underlying libs. The implementation for things that don't expose isEnabled(level) and log(level,msg) methods (eg Avalon) isn't terribly elegant but works, and is only a minor performance hit. For the primary targets, an extra array lookup or similar is all that's needed.

The fact that introducing a new method is an incompatibility with existing external logging adapters is the biggest concern. The commons project takes compatibility very seriously; yes it's a pain but the commons libs are very widely used.

Note that it should be possible to write adapters from Jdk14 logging to other libs (eg log4j), meaning that your app can use jdk14 logging as its api while still allowing users of the code to map that to whatever logging lib they prefer. It's not as easy to write such an adapter as it is for JCL due to the dumb design of jdk logging but I believe it's possible.

So while I agree your proposal is sensible, I'd currently vote -0 on making this change to JCL due to compatibility issues, even on a 1.2 release. If there's enthusiasm for writing a 2.x release that has a new package name logging2 then that would avoid all compatibility issues, but I just can't see many people bothering to use such a thing.

Let's see if any other commons developers have an opinion on this","03/Jan/07 01:16;skitching;As there appears to be no enthusiasm for pushing this into the current release, assign for consideration in 2.0 ","09/May/08 15:52;sashkap;I am transfering some notes here from the duplicate LOGGER-123 issue that I have created.

I have created and tested LogLevel class that does not require any changes to the current Log interface ( it is all done through the inversion of control).
Therefore the LogLevel class can be dropped into a maintanance release at any point.

Here is a sample usage of the LogLevel object in implementing Command class

{code:title=Sample LogLevel Usage|borderStyle=solid}
final static Log LOGGER = ...;

public class Command
{
  final LogLevel _log_level;

  public Command ( final boolean is_logging_enabled )
  {
    LogLevel log_level = LogLevel.TRACE;

    if ( is_logging_enabled )
    {
      log_level = LogLevel.INFO;
    }

    if ( ! log_level.isEnabledIn( LOGGER ) )
    {
      log_level = null;
    } 

    _log_level = log_level;
  }

  public void doCommand ( )
  {
    if ( _log_level != null )
    {
      _log_level.log( LOGGER, ""Running command"" );
    }
  }
}
{code}

For the next feature release 3 proposed methods ( isEnabled(), log(l, o), log(l,o,t) ) can be added to the Log interface and implemented through the generic base class:

{code:title=LoggerBase.java|borderStyle=solid}
public abstract class LoggerBase implements Log
{
    public final boolean isEnabledFor (
            final LogLevel level
        )
    {
        return level.isEnabledIn( this );
    }
    
    public final void log (
            final LogLevel level,
            final Object message
        )
    {
        level.log( this, message );
    }
    
    public final void log (
            final LogLevel level,
            final Object message,
            final Throwable t
        )
    {
        level.log( this, message, t );
    }
}
{code}

Then all the supported loggers can extend from this base class and have these 3 methods defined for them
{code:title=AvalonLogger.java|borderStyle=solid}
// currently ""public class AvalonLogger implements Log""
public class AvalonLogger extends LoggerBase {
    ...
}
{code}

I am attaching the source code for LogLevel and a unit test for it.
The unit test is using JMock 1.1.0 framework for mocking Log interface.
Feel free to rewrite the test case with the mock framework of your choice.
",09/May/08 15:55;sashkap;Implementation and a unit test of LogLevel enumeration,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implement TRACE level for Log4JLogger,LOGGING-109,12350155,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Duplicate,,dicr,dicr,18/Sep/06 13:05,18/Sep/06 20:17,07/Apr/19 20:35,18/Sep/06 20:17,,,,,,,,,,,,0,,,"Currently Log4JLogger map TRACE level to DEBUG level for Log4J
Log4J now added a new log level - TRACE.",,,,,,,,,,,,,,,,,,,LOGGING-9,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-09-18 17:35:51.0,,,false,,,,,,,,,,,,,,,148287,,,Mon Sep 18 20:17:14 UTC 2006,,,,,,0|i0spbr:,165580,,,,,,,,"18/Sep/06 17:35;boris.unckel.mlg@gmx.net;Hi,

have a look at
http://svn.apache.org/viewvc/jakarta/commons/proper/logging/trunk/src/java/org/apache/commons/logging/impl/Log4JLogger.java?view=markup
which should correspond to actual JCL 1.1 released code.

--> Reject issue.

Regards
Boris
",18/Sep/06 20:17;dennisl@apache.org;This was fixed in the 1.1 release.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Classloader reference leak on Tomcat 5.5.17 with log4j in webapp,LOGGING-108,12345066,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,taras.tielkes,taras.tielkes,28/Jun/06 01:47,03/Jan/07 01:21,07/Apr/19 20:35,03/Jan/07 01:21,1.1.0,,,,,,,,,,,0,,,"Some Tomcat Jasper implementation classes are initialized (that mean static fields and static initializer) when the current thread has the webapp classloader set as the context classloader.

An example of this is org.apache.jasper.runtime.PageContextImpl

If the first JSP page rendered on a freshly started Tomcat 5.5.17 is for a webapp that contains the configuration described in the ""Environment"" section above, a leak will occur:

The class PageContextImpl (loader by CL above Webapp classloader in delegation chain) stays loaded for the duration of the JVM
The ""log"" field in this class refers to a class loaded from a WebappClassloader.

This produces a classloader reference leak to the webapp, even after undeployment.




","JDK 1.5.0_07, Tomcat 5.5.17
commons-logging-api-1.1.jar is configured for the Tomcat bootstrap
commons-logging-adapters-1.1.jar is deployed with a webapp
log4j-1.2.11 is deployed with webapp

This is the configuration specifically described in the release notes for 1.1:

"" New jar file commons-logging-adapters-xxx.jar is now provided. This can be
  used to resolve class cast conflicts where parts of commons-logging are
  deployed via different classloaders. It is not expected to be frequently
  used; it is only necessary in situations where a container has deployed
  commons-logging-api.jar and a webapp wants to bind to a third-party
  logging implementation such as log4j. In this case, the webapp can
  experience problems if it deploys commons-logging.jar as this causes
  duplicates of the core commons-logging classes, but commons-logging-adapters
  can be safely used.""",,,,,,,,,,,,,,,,,,,,,28/Jun/06 01:55;taras.tielkes;path.gif;https://issues.apache.org/jira/secure/attachment/12336015/path.gif,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2006-07-21 01:37:21.0,,,false,,,,,,,,,,,,,,,148286,,,Wed Jan 03 01:21:33 UTC 2007,,,,,,0|i0d7jz:,75000,,,,,,,,"28/Jun/06 01:55;taras.tielkes;Screenshot from commercial JVMTI tool (YourKit) showing the reference graph from a GC, through the leak described, to the user deployed classes.

JVMTI memory snapshot was taken after application undeployment (otherwise you see more GC roots)","28/Jun/06 01:56;taras.tielkes;Last comment (screenshot description) should read: ...showing the reference graph from a GC root, through...","28/Jun/06 01:59;taras.tielkes;Last comment: in this case I need to load the log4j adapter classes from WEB-INF\lib, and cannot use ""use_tccl=false"" (I think)","30/Jun/06 16:21;taras.tielkes;Here's some proof this is happening.

Change the following code (package org.apache.jasper.runtime):
----------------------
    // Logger
    private static Log log = LogFactory.getLog(PageContextImpl.class);
----------------------

to this:

----------------------
    // Logger
    private static Log log;
	    
    static {
	System.err.println("">> CCL loader: "" + Thread.currentThread().getContextClassLoader().getClass().getCanonicalName());
	System.err.println("">> our loader: "" + PageContextImpl.class.getClassLoader().getClass().getCanonicalName());
	log = LogFactory.getLog(PageContextImpl.class);
	System.err.println("">> log loader: "" + log.getClass().getClassLoader().getClass().getCanonicalName());
    }
----------------------

You'll see the following output (on the console) the first time a JSP page is rendered:
----------------------
...
>> CCL loader: org.apache.catalina.loader.WebappClassLoader
>> our loader: org.apache.catalina.loader.StandardClassLoader
>> log loader: org.apache.catalina.loader.WebappClassLoader
...
----------------------
You can see that the current class (PageContextImpl) was loaded by a container classloader (above the webapp CL).
You also see that commons-logging 1.1 used the context classloader to find an implementation of Log.

Since the PageContextImpl class will never be unloaded while Tomcat runs, a WebappClassLoader leak is the result.
","21/Jul/06 01:37;skitching;Thanks for reporting this. Your analyis is excellent, thanks.

however I think this is really the responsibility of the tomcat/jasper team to fix, though. As you say, jasper classes present in the container classpath contain static references to Log objects, and this is just plain wrong:
  http://wiki.apache.org/jakarta-commons/Logging/StaticLog

Any sane logging library is going to have problems if this is done. The fix is probably to make that Log member non-static.

One solution is to remove all commons-logging libs from the webapp completely (and ensure log4j is deployed at the container level). In this setup, the only log4j adapter class (Log4JLogger) is the one loaded by the container classloader so its existence won't lock the webapp classloader. However that does mean you lose the ability to configure your logging per-webapp.

Actually, log4j does have its own approach to providing per-webapp configurability, even when only one instance of log4j is in the classpath. See:
  http://www.qos.ch/logging/sc.jsp
Here's another example using log4j's hierachy stuff:
  http://wiki.jboss.org/wiki/Wiki.jsp?page=Log4jRepositorySelector

In both cases, the code doesn't look quite right to me; It holds a HashMap keyed by context classloader, so that will effectively lock the webapp classloader :-). A weak hashmap should do the trick though, in most cases. Or a ContextListener in your webapp that calls a method on the selector class to clear out the entry for the webapp classloader.
","03/Jan/07 01:21;skitching;As no responses were received on my last comment, closing as wontfix (tomcat/jasper issue, not JCL issue).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AccessController use,LOGGING-107,12344659,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,skitching,skitching,skitching,20/Jun/06 18:50,14/Nov/07 22:39,07/Apr/19 20:35,19/Nov/06 09:19,1.1.0,,,,,,,,,1.1.1,,0,,,"A problem has been reported with 1.1 by Aaron Bruegl on 6/6/06. An AccessControlException is being thrown in an applet invoked from javascript even when the logging lib has been signed and granted permissions.

LogFactoryImpl.java:1250 in the 1.1 release has this line:
            // try the parent classloader
            currentCL = currentCL.getParent();
which does seem to be a likely cause for the exception.

This code should be executed under an AccessController, so that granting the logging jar the appropriate permissions can fix the problem; without this, all calling code also needs to have that permission.

Maybe we should wrap method discoverLogImplementation in an AccessController, covering all cases like this?

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,148285,,,2006-06-20 18:50:28.0,,,,,,0|i0d7k7:,75001,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
AccessControlException when loading LogFactory class without system properties permission,LOGGING-106,12344658,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,skitching,skitching,20/Jun/06 18:20,19/Nov/06 09:09,07/Apr/19 20:35,19/Nov/06 09:09,1.1.0,,,,,,,,,1.1.1,,0,,,"The LogFactory static initializer calls createFactoryStore which calls System.getProperty. If the class doesn't have access rights to see system properties (eg when in an applet) then the LogFactory class cannot load, and hence the app is completely stuffed.

I think the system property access should be wrapped in a try/catch, with any access failure behaving as if the propery is not set.

In addition, we might want to use an AccessController in the static block so that a signed logging jar can be granted system property access [without having to grant all its callers that permission too].",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,148284,,,Sun Nov 19 09:08:37 UTC 2006,,,,,,0|i0d7kf:,75002,,,,,,,,"19/Nov/06 09:08;skitching;Fixed by SVN r423654.

Re the last paragraph above, using an AccessController too broadly is a security risk so this should not be done.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Implementation dependencies should be set to runtime scope,LOGGING-105,12343735,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Duplicate,,michaelh@sptech.com,michaelh@sptech.com,31/May/06 23:30,02/Jan/08 07:48,07/Apr/19 20:35,01/Jun/06 23:46,1.1.0,,,,,,,,,,,0,,,"The logkit, log4j, and avalon-framework dependencies listed in the commons-logging-1.1.pom Maven2 POM should have their scopes set to runtime  or otherwise be set to optional.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-06-01 23:46:31.0,,,false,,,,,,,,,,,,,,,148283,,,Thu Jun 01 23:46:31 UTC 2006,,,,,,0|i0d7kn:,75003,,,,,,,,01/Jun/06 23:46;robertburrelldonkin;JCL does not fit nicely into the Maven2 dependency management scheme so this creating a good POM difficult. The Commons team does not maintain the Maven2 POMs for JCL.  Please add any comments you have to http://jira.codehaus.org/browse/MEV-392.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] enhancement : add support for ant task logger,LOGGING-104,12342627,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,ndeloof,ndeloof,13/Oct/05 17:09,09/Jul/14 20:14,07/Apr/19 20:35,15/Jul/13 21:12,1.0.4,,,,,,,,,,,0,,,"I've created an ant task for a project-specific tool that uses commons-logging.
I expected ant console logs to show my commons-logging logs, but it is
incompatible. I have made my and Task implement Log and tried to setup a custom
LogFactory to always return this instance, witohout success.

It would be great (IMHO) if commons-logging had support for ant logs, perhaps
using a CommonsLoggingAwareTask as parent.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37067.0,,,2005-10-23 00:30:33.0,,,false,,,,,,,,,,,,,,,148282,,,Mon Jul 15 21:12:32 UTC 2013,,,,,,0|i0spbz:,165581,,,,,,,,"23/Oct/05 00:30;rdonkin@apache.org;Anyone care to submit a patch :)

Robert","15/Jul/13 21:12;tn;No patch in 8 years, so this is unlikely to happen.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Add method enter() and exit() methods to public Log API,LOGGING-103,12340268,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,jsdever@sympatico.ca,jsdever@sympatico.ca,15/Jul/02 10:09,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"Provide  enter() and exit() methods to the Log interface.  These would be used
for fined grained trace logging of method entry and exit points:

For example:
> > public interface Log
> > {
> >    public void enter(Object[] params);
> >    pubilc void enter(Object param);
> >    public void enter();
> >    public void exit(Object returnValue);
> >    public void exit()
> > }
> >
> > An example of using these new logging methods:
> >
> > public class SomeClass
> > {
> >    static Log = LogFactory.getLog(className);
> >
> >    public void method1()
> >    {
> >        logger.enter();
> >        //... do stuff
> >        logger.exit();
> >    }
> >
> >    public Object method2(Object param1, Object param2)
> >    {
> >        logger.enter(new Object[]{param1, param2});
> >        Object returnValue = null;
> >        //... do stuff
> >        logger.exit(returnValue);
> >        return returnValue;
> >    }
> > }
> >
> > There should be little problem implementing this functionality in the
> > logging.impl wrappers.  Some of them already support this functionality
> > directly (log4j, jdk1.4) which is part of the motivation for this
> > suggestion.  For example, implementing the methods in the Jdk14logger
> > could be as simple as:
> >
> > public class Jdk14logger implements Log
> > {
> >    public void enter(Object[] params)
> >    {
> >       //use similar introspection technique to find className and
> > methodName
> >       //as log() already does
> >       logger.enter(className, methodName, params)
> >    }
> >
> >    // and so on for the other enter() and exit() functions
> > }
> >
> > I beleive that this would add quite a bit of utility to those wishing to
> > use commons-logging that like to use entry and exit trace calls.  At the
> > same time it maintains backwards compatibility with the existing
> > interface and does not add any extra overhead for those not using the
> > enter/exit logging methods.
> >

Have the logging statements come out at the TRACE level.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,10818.0,,,2002-07-17 23:44:17.0,,,false,,,,,,,,,,,,,,,148281,,,Sun Mar 07 05:11:47 UTC 2004,,,,,,0|i0spc7:,165582,,,,,,,,17/Jul/02 23:44;rsitze@apache.org;Perhaps we can update/break the interface for 2.0...,07/Apr/03 16:37;rdonkin@apache.org;commons-logging 1.0.3 released,"07/Mar/04 05:11;craig.mcclanahan@sun.com;For 1.0.x, I'm closing this as a WONTFIX because of the backwards compatibility
implementations.  Implementing this would also start blurring the line between
being a wrapper and being a logging implementation, because it would have to do
some sort of convincing simulation of enter() and exit() for underlying logging
implementations that do not support this capability natively.

Look how hard it has been to get the Log4J folks to even think about adding
trace level support (which c-l currently has to simulate) :-).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[logging] Provide better error message than ""No suitable Log implementation""",LOGGING-102,12342804,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,ralfhauser,ralfhauser,19/Dec/05 01:41,29/Dec/09 16:52,07/Apr/19 20:35,29/Dec/09 16:52,,,,,,,,,,1.1.0,,0,,,"when trying to do a totally different ant task, I got with debug the following
exception

...\build.xml:3125: java.lang.ExceptionInInitial
izerError
        at
org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:114)
        at org.apache.tools.ant.Task.perform(Task.java:365)
        at org.apache.tools.ant.Target.execute(Target.java:356)
        at org.apache.tools.ant.Target.performTasks(Target.java:384)
        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1236)
        at org.apache.tools.ant.Project.executeTarget(Project.java:1205)
        at
org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)
        at org.apache.tools.ant.Project.executeTargets(Project.java:1088)
        at org.apache.tools.ant.Main.runBuild(Main.java:676)
        at org.apache.tools.ant.Main.startAnt(Main.java:195)
        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:265)
        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:87)
Caused by: java.lang.ExceptionInInitializerError
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:242)
        at org.apache.tools.ant.taskdefs.Definer.addDefinition(Definer.java:551)
        at org.apache.tools.ant.taskdefs.Definer.execute(Definer.java:221)
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)
        at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at
org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:104)
        ... 11 more
Caused by: org.apache.commons.logging.LogConfigurationException: No suitable Log
implementation
        at
org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:748)
        at
org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:556)
        at
org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:307)
        at
org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:281)
        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:560)
        at org.apache.jasper.JspC.<clinit>(JspC.java:90)
        ... 20 more
--- Nested Exception ---
java.lang.ExceptionInInitializerError
        at java.lang.Class.forName0(Native Method)
        at java.lang.Class.forName(Class.java:242)
        at org.apache.tools.ant.taskdefs.Definer.addDefinition(Definer.java:551)
        at org.apache.tools.ant.taskdefs.Definer.execute(Definer.java:221)
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:275)
        at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at
org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:104)
        at org.apache.tools.ant.Task.perform(Task.java:365)
        at org.apache.tools.ant.Target.execute(Target.java:356)
        at org.apache.tools.ant.Target.performTasks(Target.java:384)
        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1236)
        at org.apache.tools.ant.Project.executeTarget(Project.java:1205)
        at
org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:40)
        at org.apache.tools.ant.Project.executeTargets(Project.java:1088)
        at org.apache.tools.ant.Main.runBuild(Main.java:676)
        at org.apache.tools.ant.Main.startAnt(Main.java:195)
        at org.apache.tools.ant.launch.Launcher.run(Launcher.java:265)
        at org.apache.tools.ant.launch.Launcher.main(Launcher.java:87)
Caused by: org.apache.commons.logging.LogConfigurationException: No suitable Log
implementation
        at
org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:748)
        at
org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:556)
        at
org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:307)
        at
org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:281)
        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:560)
        at org.apache.jasper.JspC.<clinit>(JspC.java:90)
        ... 20 more

Total time: 13 secondsClass org.apache.commons.logging.impl.LogFactoryImpl
loaded from ant loader (parentFirst)
Class java.lang.ExceptionInInitializerError loaded from parent loader (parentFirst)



looking at the CVS head, there might be some relief:

""User-specified log class "" + specifiedLogClassName
                        + "" cannot be found or is not useable.""

but still, it would be really helpful to know what was missing from an admin
point of view, so on top of the particular class name, it would be very useful,
to get a hint at 
1) which jar (log4j.jar) that ""specifiedLogClassName"" most likely is included in? 
2) Or whether the config file was missing (log4j.properties?) and in 
3) which directories/jar files it was searched for...
4) and what ""logCategory"" was being aimed for...","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37954.0,,,2005-12-19 03:01:04.0,,,false,,,,,,,,,,,,,,,148280,,,Wed Jan 18 13:08:09 UTC 2006,,,,,,0|i0spcf:,165583,,,,,,,,"19/Dec/05 02:04;ralfhauser;looking at the ant debug a little bit more, it might be that the issue was that
it attempted to use log4j1.3

Finding class org.apache.jasper.JspC
Loaded from C:\usr\local\jakarta-tomcat\curr\common\lib\jasper-compiler.jar
org/apache/jasper/JspC.class
Finding class org.apache.jasper.Options
Loaded from C:\usr\local\jakarta-tomcat\curr\common\lib\jasper-compiler.jar
org/apache/jasper/Options.class
Class java.lang.Object loaded from parent loader (parentFirst)
Class org.apache.jasper.Options loaded from ant loader (parentFirst)
Class org.apache.jasper.JspC loaded from ant loader (parentFirst)
Class java.lang.Throwable loaded from parent loader (parentFirst)
Class java.io.IOException loaded from parent loader (parentFirst)
Class java.lang.RuntimeException loaded from parent loader (parentFirst)
Class java.lang.ClassLoader loaded from parent loader (parentFirst)
Class java.net.URLClassLoader loaded from parent loader (parentFirst)
Class java.net.MalformedURLException loaded from parent loader (parentFirst)
Class java.io.OutputStream loaded from parent loader (parentFirst)
Class java.io.PrintStream loaded from parent loader (parentFirst)
Finding class javax.servlet.ServletContext
Loaded from C:\usr\local\jakarta-tomcat\curr\common\lib\servlet-api.jar
javax/servlet/ServletContext.class
Class javax.servlet.ServletContext loaded from ant loader (parentFirst)
Class java.io.Writer loaded from parent loader (parentFirst)
Class java.io.FileWriter loaded from parent loader (parentFirst)
Class java.lang.Exception loaded from parent loader (parentFirst)
Finding class org.apache.jasper.JasperException
Loaded from C:\usr\local\jakarta-tomcat\curr\common\lib\jasper-runtime.jar
org/apache/jasper/JasperException.class
Finding class javax.servlet.ServletException
Loaded from C:\usr\local\jakarta-tomcat\curr\common\lib\servlet-api.jar
javax/servlet/ServletException.class
Class javax.servlet.ServletException loaded from ant loader (parentFirst)
Class org.apache.jasper.JasperException loaded from ant loader (parentFirst)
Class java.io.Reader loaded from parent loader (parentFirst)
Class java.io.FileReader loaded from parent loader (parentFirst)
Class java.lang.NumberFormatException loaded from parent loader (parentFirst)
Class java.lang.ClassNotFoundException loaded from parent loader (parentFirst)
Class java.lang.NoClassDefFoundError loaded from parent loader (parentFirst)
Class java.lang.Class loaded from parent loader (parentFirst)
Finding class org.apache.commons.logging.LogFactory
Loaded from
C:\usr\local\jakarta-tomcat\curr\shared\lib\commons-logging-1.1-dev.jar_050915_forLog4j13.jar
org/apache/com
mons/logging/LogFactory.class
Class org.apache.commons.logging.LogFactory loaded from ant loader (parentFirst)
Class java.lang.SecurityException loaded from parent loader (parentFirst)
Class java.io.FileOutputStream loaded from parent loader (parentFirst)
Class java.security.PrivilegedAction loaded from parent loader (parentFirst)
Finding class org.apache.commons.logging.LogConfigurationException
Loaded from
C:\usr\local\jakarta-tomcat\curr\shared\lib\commons-logging-1.1-dev.jar_050915_forLog4j13.jar
org/apache/com
mons/logging/LogConfigurationException.class
Class org.apache.commons.logging.LogConfigurationException loaded from ant
loader (parentFirst)
Class java.lang.NoSuchMethodException loaded from parent loader (parentFirst)
Class java.lang.reflect.InvocationTargetException loaded from parent loader
(parentFirst)
Class java.lang.IllegalAccessException loaded from parent loader (parentFirst)
Class java.lang.reflect.Method loaded from parent loader (parentFirst)
Class java.lang.ClassCastException loaded from parent loader (parentFirst)
Class java.io.UnsupportedEncodingException loaded from parent loader (parentFirst)
Class java.io.InputStream loaded from parent loader (parentFirst)
Class java.lang.String loaded from parent loader (parentFirst)
Class java.io.InputStreamReader loaded from parent loader (parentFirst)
Class java.lang.System loaded from parent loader (parentFirst)
Finding class org.apache.commons.logging.impl.WeakHashtable
Class java.util.Hashtable loaded from parent loader (parentFirst)
Finding class org.apache.commons.logging.LogFactory$1
Loaded from
C:\usr\local\jakarta-tomcat\curr\shared\lib\commons-logging-1.1-dev.jar_050915_forLog4j13.jar
org/apache/com
mons/logging/LogFactory$1.class
Class org.apache.commons.logging.LogFactory$1 loaded from ant loader (parentFirst)
Class java.security.AccessController loaded from parent loader (parentFirst)
Class java.lang.Thread loaded from parent loader (parentFirst)
Class java.lang.StringBuffer loaded from parent loader (parentFirst)
Finding class org.apache.commons.logging.LogFactory$3
Loaded from
C:\usr\local\jakarta-tomcat\curr\shared\lib\commons-logging-1.1-dev.jar_050915_forLog4j13.jar
org/apache/com
mons/logging/LogFactory$3.class
Class org.apache.commons.logging.LogFactory$3 loaded from ant loader (parentFirst)
Finding class org.apache.commons.logging.LogFactory$2
Loaded from
C:\usr\local\jakarta-tomcat\curr\shared\lib\commons-logging-1.1-dev.jar_050915_forLog4j13.jar
org/apache/com
mons/logging/LogFactory$2.class
Class org.apache.commons.logging.LogFactory$2 loaded from ant loader (parentFirst)
Finding class org.apache.commons.logging.impl.LogFactoryImpl
Loaded from
C:\usr\local\jakarta-tomcat\curr\shared\lib\commons-logging-1.1-dev.jar_050915_forLog4j13.jar
org/apache/com
mons/logging/impl/LogFactoryImpl.class
Class org.apache.commons.logging.impl.LogFactoryImpl loaded from ant loader
(parentFirst)
Class java.lang.ExceptionInInitializerError loaded from parent loader (parentFirst)","19/Dec/05 03:01;dennisl@apache.org;As you have already noted the error messages have been improved in the code
currently in SVN. There is also a new internal diagnostics feature. From the
release notes:

* added internal diagnostics feature. If commons-logging is behaving in an
  unexpected manner, you can now set system property
    org.apache.commons.logging.diagnostics.dest
  to the value STDOUT, STDERR or a filename. As commons-logging initialises
  itself for each new contextClassLoader it detects, useful information will
  be output about which logging library is bound to and why.

1. Guessing in which jar the specifiedLogClassName is included in, is a tricky
thing to do. Since anyone can write their own Log implementation and package it
any way they see fit.
2. If the underlying logging system is not configured properly, I would say that
it is up to that system to report what might be wrong.
3. Searching is done using the classpath of the classloader that loaded
commons-logging
4. Not sure what you mean here...
","18/Jan/06 13:08;skitching;New diagnostics feature improve output for this situation. As described, the
specific info requested cannot be provided by JCL.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Add CLDC support,LOGGING-101,12341589,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,nathann@objectfx.com,nathann@objectfx.com,23/Jul/04 01:14,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,Refactor commons-logging to work in MIDP environments.,"Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,23/Jul/04 20:09;ebourg;ASF.LICENSE.NOT.GRANTED--cldc-errors.txt;https://issues.apache.org/jira/secure/attachment/12333000/ASF.LICENSE.NOT.GRANTED--cldc-errors.txt,23/Jul/04 17:04;ebourg;ASF.LICENSE.NOT.GRANTED--compile-errors.txt;https://issues.apache.org/jira/secure/attachment/12332999/ASF.LICENSE.NOT.GRANTED--compile-errors.txt,03/Jun/05 00:54;nathann@objectfx.com;ASF.LICENSE.NOT.GRANTED--midp_logging.zip;https://issues.apache.org/jira/secure/attachment/12333001/ASF.LICENSE.NOT.GRANTED--midp_logging.zip,,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,30268.0,,,2004-07-23 02:41:07.0,,,false,,,,,,,,,,,,,,,148279,,,Tue Jun 21 14:22:28 UTC 2005,,,,,,0|i0spcn:,165584,,,,,,,,"23/Jul/04 02:41;craig.mcclanahan@sun.com;It would help those of us not familiar with MIDP to get some explanation of what
makes commons-logging not work today, and/or some possible suggestions for how
to fix that.
","23/Jul/04 17:01;ebourg;Actually the MIDP profile is of no help for implementing a J2ME version of
commons-logging, it only defines classes for building simple GUIs on a mobile
device.

What you are looking for is an implementation working with the CLDC core
environnement, that's a trimmed down version of the JDK 1.1.

I tried to compile commons-logging with the CLCD API 1.1, I'll attach the result.","23/Jul/04 17:04;ebourg;Created an attachment (id=12200)
Compile errors with CLDC 1.1
",23/Jul/04 20:02;nathann@objectfx.com;MIDP 2.0 is based on CLDC 1.0 so compiling against CLDC 1.0 would be a requirement.,"23/Jul/04 20:09;ebourg;Created an attachment (id=12202)
Compile errors with CLDC 1.1 (fixed)
","23/Jul/04 20:13;ebourg;I don't think LogFactory can be easily adapted to work on a CLDC device. A
solution would be to write an alternate implementation of LogFactory and build a
special package for J2ME.","23/Jul/04 20:19;nathann@objectfx.com;Another goal is being able to have a single core code set that works across all
""platforms"" (e.g., for us MIDP 2.0, PP 1.0, J2SE, and J2EE). We don't want to
have to strip out logging from or core classes just to get them to run on MIDP.

Also, on CLDC, I think it would makes sense for the default logger to be the no
op logger. Application errors that the user cares about should be caught and
handled by the app. I don't think you'd want to be logging to a record store
unless you were trying to debug something during development.","02/Jun/05 18:21;skitching;I agree with the statement that a custom LogFactory implementation should be
used on CLDC systems. A commons-logging.properties file can be used on CLDC
systems to specify a custom LogFactory class should be used (note: LogFactory,
not Log).

This solution does not require libraries to be modified. This also allows the
application developer (or even the user) to specify that the no-op logger should
be the default.

LogFactory.java should be able to run on all platforms. If there are specific
problems with running the LogFactory class on CLDC, then please raise another
bugreport including specific details of what functions LogFactory uses that are
not supported.","03/Jun/05 00:54;nathann@objectfx.com;Created an attachment (id=15266)
MIDP Logging Impl

I attached the implementation we used get logging working on midp. It's been a
while but I think we thought there might be a need for LogFactory to be an
interface or abstract class that loads a LogFactoryImpl or LogFactoryCLDCImpl.
Anyway, the zip file contains a the source, with a JUnit test, and some sample
property files. This CLDC implementation is used and configured the same as the
J2SE version except that you need to use a stripped down
commons-logging-api.jar containing only the Log.class and
LogConfigurationException.class.

Sorry for the delay in posting this. Our MIDP project was put on hold.
","03/Jun/05 01:04;nathann@objectfx.com;...""you need to use a stripped down commons-logging-api.jar""...

> When deploying.
","03/Jun/05 08:50;skitching;Hi Nathan,

I'll rephrase comment #8:

What stopped you from simply defining a system property or entry in a
commons-logging.properties file with name
""org.apache.commons.logging.LogFactory"" and value pointing to a custom class
that *subclasses* LogFactory?

This would be a whole lot easier than bundling a *replacement* for LogFactory.","21/Jun/05 03:05;nathann@objectfx.com;(In reply to comment #11)

I beleive we had to replace LogFactory because it is not MIDP/CLDC compliant. I
think is why I thought in #9 that there needed to be 2 implementations of
LogFactory.","21/Jun/05 14:22;skitching;Sorry, but this problem description is just too vague to make any progress on.
If you have any specific issues (ie you can indicate a particular line of code
in LogFactory.java that isn't useable in a MIDP/CDLC/whatever environment then
please raise a new enhancement request with that information in it.",,,,,,,,,,,,,,,,,,,,,,,,,
Access to underlying native logging provider missing,LOGGING-100,12340395,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,ch@ipin.com,ch@ipin.com,01/Nov/02 13:34,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0,,,,,,,,,,,0,,,"Currently only class org.apache.commons.logging.impl.Jdk14Logger provides access
to the underlying logging provider through the method 'getLogger()'. It would be
extremely helpful if the interface org.apache.commons.logging.Log would specify
that in a way like 'Object getLogger();', so that all implementing classes would
have to allow access to the underlying logging provider.

The reason why this is very important to me (and I could imagine to a growing
number of users out there?) is that we dynamically configure the underlying
logging provider at runtime (e.g. usage of setLevel() in JDK 1.4 logger and
Log4j). Why that? Quite simple, we want to make the logging configuration
available through JMX.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14155.0,,,2002-11-02 00:44:36.0,,,false,,,,,,,,,,,,,,,148278,,,Wed Apr 21 00:41:05 UTC 2004,,,,,,0|i0spcv:,165585,,,,,,,,01/Nov/02 13:36;ch@ipin.com;*** COM-243 has been marked as a duplicate of this bug. ***,"02/Nov/02 00:44;craig.mcclanahan@sun.com;I've got a question about this.

Since you already know you're using a particular logging implementation (JDK 1.4
in your case), can't you just ask that logging API for the appropriate instances
using the native APIs, and configure them directly?  The only thing you need to
know is the name of the loggers that will be used by the library methods you're
calling -- which information, IMHO, really should be in the docs for every
package anyway, so people know what they need to statically configure their
logging implementations.","02/Nov/02 00:55;ch@ipin.com;
You are hitting the exact issue. We've been bundling Log4j into our software 
until recently, but the customers would like to be able to choose the native 
logging implementation themselves. Commons-logging exactly allows to choose the 
logging provider at runtime. But it does not work well in our software, because 
we use JMX to configure the logging system(s) dynamically and for that we are 
missing access to the native logging provider.
","02/Nov/02 01:48;craig.mcclanahan@sun.com;But that's my point ...

Even if the method you wanted was present, the object you get back would have to
be cast to a Log4J Category (or whatever), so that you can configure it.  In
that scenario, why don't you just ask Log4J to give you a Category instance for
exactly the same name?  It's supposed to give you the same instance that
commons-logging will be wrapping.  Therefore, you should be able to access the
appropriate Category object without the proposed new method.
","02/Nov/02 03:11;ch@ipin.com;If I understand you right, you mean to do something like that:

Log log = LogFactory.getLog(""foobar"");

Class logProviderClass = log.getClass();
if (logProviderClass instanceof Jdk14Logger) {

   java.util.logging.Logger nativeLogProv = 
     java.util.logging.Logger.getLogger(""foobar"");

   // do configuration for JDK 1.4 logging API

} else if (logProviderClass instanceof Log4JCategoryLog) {

   org.apache.log4j.Logger nativeLogProv =
     org.apache.log4j.Logger.getLogger(""foobar"");

   // do configuration for Log4j

}


I believe that could work ok under most circumstances, and is probably 
sufficient on the short-term. However, one issue I can think of where this 
might not work is if the customer has their own native logging provider which 
is not implemented using the singleton pattern. Altogether I think this is a 
good workaround, and I will evaluate it.

On a different level, is there a specific reason not to give access to the 
native logging provider through the commons implementation? ","02/Nov/02 03:41;craig.mcclanahan@sun.com;> On a different level, is there a specific reason not to give access to the 
> native logging provider through the commons implementation? 

My concern is four-fold:

* It violates the layering that is implicit in the facade
  design pattern, and ultimately ties your application logic to
  an underlying native implementation -- the whole thing that
  commons-logging was designed to protect you against.  If you're
  going to do that, you might as well program to the native
  logging interfaces directly.

* There might not be any such thing as a ""native logging provider"",
  especially for apps that simply provide their own app-specific
  implementation that happens to be programmed to the c-l APIs.

* There might be more than one ""native logging provider"" if the
  Log instance is doing dispatching or routing to multiple underlying
  logging environments.  There's no obvious way to decide which one
  should be returned.

* There might be different ""native logging provider"" instances at
  different times -- for example, an implementation of Log in a
  ""high availability"" environment might support transparently creating
  a new native logging provider instance if it ran into problems
  logging to the old one for some reason.
 
I don't really like the fact that getLogger() exists on Jdk14Logger, but it's
there now.  I suppose I wouldn't mind if we implemented something like
getCategory() on the corresponding Log4J implementation class.  But I really
don't think this belongs on the general o.a.c.l.Log interface.
","23/Nov/02 11:26;craig.mcclanahan@sun.com;Based on the prior discussion, I'm going to mark this WONTFIX with respect to
adding a getLogger() method to the o.a.c.l.Log interface.  However, I did add a
getCategory() method to Log4JCategoryLog, to be consistent with
JDK14Logger.getLogger().  This should make it possible to dynamically manipulate
the underlying logging configuration if you know that you're using Log4J.
","21/Apr/04 00:41;pbwest@powerup.com.au;I think the discussion here about access to the native logger misses the point.
 Chris Hagman wanted to be able to setLevel().  Because setLevel() is not in the
logging interface or implementations (except SimpleLog), he had to resort to
accessing the native logger.  Everything Craig says about the evils of using the
native logging implementation are correct.  However, the point is not made that
the requirement (for Chris and others) would not exist if setLevel were
available in comms-loggin, as it is in Log4J, 1.4 logging, Lumberjack (I
presume), and even in the humble SimpleLog.  (Why in SimpleLog?  For
consistency, shouldn't SimpleLog have been restricted to external configuration,
including its logging level?)

When others are browsing for solutions to the same problem, they should be made
aware that the ""correct"" solution, if they do require setLevel() is to subclass
the interface and the logging implementations mentioned above.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Allow logging additional fields to database,LOGGING-99,12342032,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,fsweng@bass.com.my,fsweng@bass.com.my,02/Feb/05 17:22,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"Instead of current only allow log.info(String message, Throwable t) being
logged. I'm wondering can we have new feature to allow logging additional fields
data i.e. user id, log timestamp, activity done etc via commons-logging<-->log4j
to database for audit log trail purposes?","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,33347.0,,,2005-02-09 07:25:18.0,,,false,,,,,,,,,,,,,,,148277,,,Mon May 23 11:21:56 UTC 2005,,,,,,0|i0spd3:,165586,,,,,,,,"09/Feb/05 07:25;rdonkin@apache.org;The future shape of the JCL component interface is currently under develpment.
Will anyone who cares about this please join the commons-dev mailing list and
champion it.","23/May/05 11:21;skitching;No existing logging library I am aware of takes parameters for specific pieces
of data such as userid; logging libraries (java.util.logging, log4j, avalon)
just deal in string messages and priorities.

And as commons-logging is intended to be a simple lowest-common-denominator
wrapper over other logging libraries, commons-logging is not the appropriate
place for such features.

I think this problem is best addressed separately from ""logging"" in the sense
that all the above mentioned libraries use the term.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging][PATCH] Improvements to LogFactoryImpl,LOGGING-98,12342211,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,b_stansberry@hotmail.com,b_stansberry@hotmail.com,28/Apr/05 14:33,29/Dec/09 14:17,07/Apr/19 20:35,29/Dec/09 14:17,,,,,,,,,,1.1.0,,0,,,"Attached is a draft version of a proposed rework of the LogFactoryImpl discovery
mechanism.  This work is based on recent discussions on the commons-dev mailing
list.  

The prime difference between the proposal and the existing class is that when
the new discovery process ""discovers"" a potential Log implementation, it
immediately attempts to create a Log instance.  Only if an instance is
successfully created is the implementation consider ""discovered.""  The existing
LogFactoryImpl considers an Log implementation to be discovered if it can load
its class, but if there are any subsequent problems actually instantiating an
object, the discovery process is already over and the code has no choice but to
throw an exception.

This proposed approach allows implementation of a couple of ideas Robert Burrell
Donkin proposed on the dev list:

1) If discovery is able to load an implementation class using the TCCL, but
instantiation fails, discovery continues with an attempt to load and instantiate
the class using LogFactoryImpl's classloader. 

2) If an implementation cannot be instantiated, no exception is thrown, but
rather discovery continues to try other implementations, beginning with
java.util.logging. 

In addition, the proposed code will write diagnostic messages to System.out and
System.err if a Log class can be loaded but not instantiated.  This is to help
users understand why their desired Log implementation was not used.  Some users
may prefer to have JCL throw an exception.  How this is handled could be made
configurable; the proposed code at this point does not include this feature but
it could be added.

The intent of the attachment is to promote discussion/seek review, and since its
a pretty significant refactor I've attached a complete file rather than a diff.
 To ease comparison the file includes a fair amount of commented out code from
the prior version.

Any comments or suggestions would be most appreciated.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,02/Jun/05 14:58;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LoadTest.diff;https://issues.apache.org/jira/secure/attachment/12333491/ASF.LICENSE.NOT.GRANTED--LoadTest.diff,30/May/05 15:36;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.diff;https://issues.apache.org/jira/secure/attachment/12333484/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.diff,30/May/05 15:29;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.diff;https://issues.apache.org/jira/secure/attachment/12333483/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.diff,29/Apr/05 15:14;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.diff;https://issues.apache.org/jira/secure/attachment/12333479/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.diff,30/May/05 13:13;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java;https://issues.apache.org/jira/secure/attachment/12333482/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java,29/Apr/05 15:15;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java;https://issues.apache.org/jira/secure/attachment/12333480/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java,28/Apr/05 14:35;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java;https://issues.apache.org/jira/secure/attachment/12333478/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java,30/May/05 13:11;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl4.diff;https://issues.apache.org/jira/secure/attachment/12333481/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl4.diff,31/May/05 14:30;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl4a.diff;https://issues.apache.org/jira/secure/attachment/12333487/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl4a.diff,31/May/05 14:32;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl4b.diff;https://issues.apache.org/jira/secure/attachment/12333488/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl4b.diff,01/Jun/05 15:03;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl5a.diff;https://issues.apache.org/jira/secure/attachment/12333489/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl5a.diff,02/Jun/05 14:56;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl5b.diff;https://issues.apache.org/jira/secure/attachment/12333490/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl5b.diff,05/Jun/05 04:49;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl6a.diff;https://issues.apache.org/jira/secure/attachment/12333492/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl6a.diff,12/Jun/05 09:05;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl7c.diff;https://issues.apache.org/jira/secure/attachment/12333493/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl7c.diff,12/Jun/05 09:19;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl8c.diff;https://issues.apache.org/jira/secure/attachment/12333494/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl8c.diff,30/May/05 15:41;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImplC.diff;https://issues.apache.org/jira/secure/attachment/12333485/ASF.LICENSE.NOT.GRANTED--LogFactoryImplC.diff,30/May/05 15:48;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImplD.diff;https://issues.apache.org/jira/secure/attachment/12333486/ASF.LICENSE.NOT.GRANTED--LogFactoryImplD.diff,17.0,,,,,,,,,,,,,,,,34661.0,,,2005-04-29 06:23:17.0,,,false,,,,,,,,,,,,,,,148276,,,Thu Jul 07 17:50:58 UTC 2005,,,,,,0|i0spdb:,165587,,,,,,,,"28/Apr/05 14:35;b_stansberry@hotmail.com;Created an attachment (id=14866)
LogFactoryImpl.java
","29/Apr/05 06:23;rdonkin@apache.org;Thanks for the patch

Setting asside the obvious minor issues (those commented out protected methods
need to be added back in for backwards compatibility), my first impressions are
positive. Need more time to really go through the code in detail, though, it'll
probably be Sunday before I get a chance. Adding a tidied up diff (no comments)
would also be useful (it would be good to have both): a diff would help me to
track down all the changes and understand them more easily.

Might even create some documentation describing the control flow in each case.

Robert","29/Apr/05 15:14;b_stansberry@hotmail.com;Created an attachment (id=14880)
diff to LogFactoryImpl

OK, had a chance to clean up some; attached is a diff.	The code could still
stand to simmer on the stove a while; I particularly want to check through the
exception handling.

Thanks for pointing out the protected methods; they've been uncommented.  I
changed their implementation to be more consistent with the way the new
discovery works.  This means they will behave differently than the current
implementation.  I could have left the old code (in which case they would be
completely backwards compatible).  Not sure what the right approach is.

For now I've left all the new methods I wrote private; some could certainly be
protected if we decide we want to expose them.

I'll attach a new copy of the class (non-diff) in a moment.

If I get a chance I'll try to come up with something to doc the code flow, but
might be a while.","29/Apr/05 15:15;b_stansberry@hotmail.com;Created an attachment (id=14881)
LogFactoryImpl.java rev2

source file to match previous diff","29/Apr/05 15:25;b_stansberry@hotmail.com;Neglected to add in last comment:  Using the attached code, the LoadTest test
case fails at line 114.  I believe this is because the test case expects failure
if the  TCCL is the system classloader.  Need to look further into this.","30/May/05 13:11;b_stansberry@hotmail.com;Created an attachment (id=15207)
diff to LogFactoryImpl rev 3

Attached is a considerably cleaned up and revised version of the previous
patches.  Major changes are:

1) Incorporates the internal diagnostics Simon Kitching recently added to SVN
trunk.
2) Adds configuration property ""org.apache.commons.logging.FailOnException"",
configurable either as a system property or in a commons-logging.properties
file.  If set to true, JCL will fail with a LogConfigurationException if a Log
adapter and its associated logging library are discovered but an instance
cannot be created.  This situation is referred to as a ""flawed discovery"".  If
the property is false or unset, flawed discoveries will be logged using
whatever log adapter is eventually discovered.
3) Lots and lots of comments.
4) General tightening up of the code, fixing of subtle issues, etc.
5) Protected methods that are no longer invoked by the class are marked as
deprecated (wouldn't mind chopping them out -- this class now exceeds 1000
lines).

Using this class all the unit tests invoked by the build.xml test target pass. 
There is a problem with the LoadTest unit test found in the src/test tree; I've
posted on commons-dev about this.

Using this class all 32 cases listed in Robert's demonstration document work as
expected.  To see examples of how the logging of ""flawed discovery"" works, run
cases 20, 24 and 28.

Need to test what happens if I turn on the ""FailOnException"" switch, but
thought it would be good to let others have a look.

Will follow with an attachment of the complete source file in case its easier
to read.","30/May/05 13:13;b_stansberry@hotmail.com;Created an attachment (id=15208)
LogFactoryImpl.java rev 3

full java file to match diff I just attached","30/May/05 15:29;b_stansberry@hotmail.com;Created an attachment (id=15210)
diff to LogFactoryImpl rev 3a

Beginning a series of 4 progressive patches that subdivide the changes between
the previously attached Rev 3 and the version in trunk.

The attached is a patch to trunk that incorporates the basic idea of requiring
the  discovery process to actually instantiate a Log object before considering
an adapter to be discovered.

All tests called by the test target in build.xml pass with this version. 
LoadTest also passes (which I regard as a negative -- means discovery can't
handle a misconfigured TCCL).  Robert's demonstration tests pass except Nos.
20, 24, 28 and 32 which fail with an LCE.","30/May/05 15:36;b_stansberry@hotmail.com;Created an attachment (id=15211)
diff to LogFactoryImpl rev 3b

This is a patch to the file that would result from applying the previous 3a.

Adds the feature whereby if an adapter and associated logger are loaded via the
TCCL but log instantiation fails, an attempt is made to reload the classes
using LogFactoryImpl's classloader.

With this patch, all unit tests in build.xml pass.  LoadTest fails, which I
regard as a positive, as it shows the patch allows LogFactoryImpl to handle a
misconfigured TCCL.  Results on Robert's demonstration tests are the same as
for 3a, except for some reason case 24 succeeds.  This deserves more attention.","30/May/05 15:41;b_stansberry@hotmail.com;Created an attachment (id=15212)
diff to LogFactoryImpl rev 3c

This is a patch to the file that would result from applying the previous 3a and
3b.

Adds the ability to continue discovery following a ""flawed discovery"" (i.e.
adapter and logger can be loaded but instantiation fails).  Provides a
configuration property to control whether this feature is enabled.  It is by
default.

Passes all unit tests in build.xml.  LoadTest fails, which I regard as a
postive.  All tests in Robert's demonstration setup pass.","30/May/05 15:48;b_stansberry@hotmail.com;Created an attachment (id=15213)
diff to LogFactoryImpl rev 3d

This is a patch to the file that would be created by applying 3a-c.

Adds a feature whereby if there is a ""flawed discovery"" and JCL isn't
configured to immediately fail, the Throwable that represents the ""flaw"" is
cached.  If another Log implementation is subsequently instantiated, that
implementation class is used to log the cached throwable as a warning.	This
provides greater visibility to the end user.

All units tests in build.xml pass.  LoadTest fails, which I regard as a
positive. All of Robert's demonstration cases pass, and for cases 20, 28 and 32
the above described WARN message is recorded.

Good night!","30/May/05 16:27;skitching;re patch 3a:

In discoverLogImplementation, when the user has specified an explicit log class
then we shouldn't do any discovery, yes? We should just load that logging class
or fail. But I'm not sure that is what the code is doing. If
handleFlawedDiscovery returns, then the flow drops down into the discovery part,
right? So maybe the code needs a throw new LogConfiguratioException after the
last handleFlawedDiscovery? And then the log4j discovery doesn't need to be in
an else, as that if-statement never exits out the bottom.

When testing for the jdk14 logger, I'm not sure that the code to check that java
1.4 is actually available belongs here. I'm surprised that it would be possible
to instantiate a Jdk14Logger in a pre-1.4 JVM at all, as the class does have
parameters with types only available in java1.4. However if java's ""lazy
linking"" is so advanced that it doesn't even resolve those types until needed,
then we can simply fix that by having a static block in Jdk14Logger that
references Level.class or similar. It seems to me to be cleaner for Logger
classes to be responsible for validating whether they can run or not than
putting this in the LogFactoryImpl class.

I think there's a copy-and-paste error in the comments for the Lumberjack test

Method createLogFromClass has side-effects: it sets a number of instance
variables as well as returning the Log object. But the isXXXAvailable methods
also call createLogFromClass - meaning that if anyone called one of those and it
succeeded, then this would ""reset"" the logConstructor and related members.
Possibly createLogFromClass could be split into two parts, with only the
side-effect-free part being called from the isXXXAvailable methods, but I would
prefer to simply do away with the isXXXAvailable methods completely.

The comments on handleFlawedDiscovery still reference #FAILURE_PROPERTY, though
I presume the actual code is in a different patch.","31/May/05 00:40;b_stansberry@hotmail.com;(In reply to comment #12)
> re patch 3a:
> 
> In discoverLogImplementation, when the user has specified an explicit log class
> then we shouldn't do any discovery, yes? We should just load that logging class
> or fail. But I'm not sure that is what the code is doing. If
> handleFlawedDiscovery returns, then the flow drops down into the discovery part,
> right? 

Arggh.  Good catch.  In this version handleFlawedDiscovery always throws a
LogConfigurationException, but still discoverLogImplementation shouldn't count
on that fact.

> 
> When testing for the jdk14 logger, I'm not sure that the code to check that java
> 1.4 is actually available belongs here. I'm surprised that it would be possible
> to instantiate a Jdk14Logger in a pre-1.4 JVM at all, as the class does have
> parameters with types only available in java1.4. However if java's ""lazy
> linking"" is so advanced that it doesn't even resolve those types until needed,
> then we can simply fix that by having a static block in Jdk14Logger that
> references Level.class or similar. It seems to me to be cleaner for Logger
> classes to be responsible for validating whether they can run or not than
> putting this in the LogFactoryImpl class.
> 
+1.

I don't like that stuff in here either, and your static initializer idea removes
any remote justification for it.

> I think there's a copy-and-paste error in the comments for the Lumberjack test
>

???
 
> Method createLogFromClass has side-effects: it sets a number of instance
> variables as well as returning the Log object. But the isXXXAvailable methods
> also call createLogFromClass - meaning that if anyone called one of those and it
> succeeded, then this would ""reset"" the logConstructor and related members.
> Possibly createLogFromClass could be split into two parts, with only the
> side-effect-free part being called from the isXXXAvailable methods, but I would
> prefer to simply do away with the isXXXAvailable methods completely.
> 

Haven't thought carefully but this could perhaps be handled with a simple ""if
(logConstructor == null)"" test around the code that sets instance variables.  I
too would prefer to see the isXXXAvailable methods go, even more so now that
you've pointed out the can have side effects.

> The comments on handleFlawedDiscovery still reference #FAILURE_PROPERTY, though
> I presume the actual code is in a different patch.

Yes.  Will fix.

Thanks for the careful review.","31/May/05 01:02;b_stansberry@hotmail.com;Please ignore previous comment about ""if (logConstructor == null)"" test; that
only works properly if isXXXAvailable was called after getInstance.

Passing a boolean arg to createLogFromClass could be a simple fix, but it smells
bad.  Let's try to reach a consensus on whether the unused protected methods
should remain.","31/May/05 14:30;b_stansberry@hotmail.com;Created an attachment (id=15221)
diff to LogFactoryImpl rev 4a

Replaces previous rev 3a addressing the issues discussed above.

The ""else"" clause around the attempt to load log4j remains for now, since if we
ever get to diff c it will have to go back in.	If not we can take it out. 
Starting to get a bit nuts keeping these correct, so want to change as little
as possible between versions.","31/May/05 14:32;b_stansberry@hotmail.com;Created an attachment (id=15222)
diff to LogFactoryImpl rev 4b

Replacement for 3b reflecting comments above.

I won't generate a 4c until everyone has had a chance to comment on these.","31/May/05 14:49;skitching;I still don't understand that bit with the else around the log4j discovery.

If someone has specified an explicit logclass, ie
  if (specifiedLogClassName != null)
is true then surely:
 * we create an instance of the specified class and return it, or
 * we fail with an exception

I don't think we should *ever* fall back to discovery mode if
specifiedLogClassName is not null. So I would write this:

if (specifiedLogClassName != null) {
  try {
    // note: createLogClass never returns null..
    result = createLogClass(...);
    return result;
  } catch(LogConfigurationException ex) {
    // this type of exception means we've alread output diagnostics
    // about this issue, etc.; just pass it on
    throw ex;
  } catch(Throwable t) {
    // log problem, and potentially throw an exception if the user
    // doesn't want recovery from flawed discovery
    handleFlawedDiscovery(..);

    // even if configuration info states that we should recover from
    // flawed logging classes, we *never* recover from a flawed log
    // which was explicitly specified by the user...
    throw new LogConfigurationException(t);
  }

  // this if-statement never exits!
}

// test for log4j
try {
   result = .....","31/May/05 15:18;skitching;(In reply to comment #17)

PS: and this code would remain the same whatever future changes are made to
createLogClass or handleFlawedDiscovery...
","01/Jun/05 00:43;b_stansberry@hotmail.com;(In reply to comment #18)
> (In reply to comment #17)
> 
> PS: and this code would remain the same whatever future changes are made to
> createLogClass or handleFlawedDiscovery...
> 

You're right.  I was resisting the approach of returning after the call to 
createLogClass() because I generally don't like a bunch of return statements in 
a method.  But I realize now I was thinking in terms of returning after _every_ 
call to createLogClass(), which would add a bunch of returns.  This is not 
necessary and not what you're suggesting; adding a return for the one special 
case of specifiedLogClassName makes sense and clarifies the code.

Thanks.","01/Jun/05 15:03;b_stansberry@hotmail.com;Created an attachment (id=15238)
diff to LogFactoryImpl 5a

Updated to reflect comments above.  Some of the code comments differ from what
you wrote, Simon, as this patch does not yet include the option to recover from
flawed discovery.

Also replaced the rest of the silly ""if (t instanceof
LogConfigurationException)"" stuff with normal catch blocks.  Couple of comment
fixes too.","02/Jun/05 14:56;b_stansberry@hotmail.com;Created an attachment (id=15259)
diff to LogFactoryImpl rev 5b

Patch to LogFactoryImpl in trunk, following recent commit of patch 5a -- thanks
Simon :)

Description of the patch is as per comment #9 above.

Had a chance to think about why case Robert's 24 succeeds with this patch
applied, and it is as expected.  Case 20 and 24 both have the caller in the
parent loader with the TCCL set to the child.  In both cases JCL is in both the
parent and child.  In 20 Log4j is in the child; in 24 it is in both parent and
child.	Initial discovery fails in both cases because the Log discovered by the
TCCL is incompatible with the LogFactory bound to the caller.  Case 24 succeeds
with this patch because when an attempt is made to load Log4jLogger using the
parent loader, log4j.jar is visible to the parent loader, so discovery
succeeds.","02/Jun/05 14:58;b_stansberry@hotmail.com;Created an attachment (id=15260)
diff to LoadTest

If patch 5b is applied, LoadTest will fail.  As discussed on the dev list, it's
not part of the standard test suite, but in the interest of not having a test
that fails in the codebase, attached is a simple fix that recognizes
LogFactoryImpl should not throw an exception with a misconfigured TCCL.","02/Jun/05 15:12;skitching;I'm opposed to attempting to load a specific adapter from the parent classpath
if one is found in the child classpath which doesn't work. If the user has the
lib in the child classpath, then:
* there's no guarantee it is the same version of the lib as in the parent, and
* the one in the parent will behave quite differently anyway, as it wont see
  config files in the child etc.

I think this situation should be regarded as a *failed discovery*, which is
exactly what the existing code does. Invisibly failing over to the lib in the
parent could cause the user major confusion.","02/Jun/05 16:51;skitching;Hi Brian,

As part of your patch to add a configurable ""ignore flawed discovery"" feature,
could you please consider handing the cast to Log in this line:
            logAdapter = (Log) constructor.newInstance(params);
separately from the other exceptions?

Currently, the code catches all throwables and passes the exception down to
handleFlawedDiscovery, which then assumes that a ClassCastException was due to
casting the result to Log. This isn't necessarily true. I think it would be nice
if the return value from constructor.newInstance was initially treated as an
Object. Casting could then be done in a separate try/catch clause, and only
ClassCastException in *that* block would mean calling reportInvalidLogAdapter.

Anyway, I think it's worth considering...and as I know you're already working on
these methods it didn't seem wise for me to be working on the same code at the
same time :).

PS: When affectState is false, do wewant to call handleFlawedDiscovery? I
suspect not..","02/Jun/05 18:54;skitching;(In reply to comment #23)
> I'm opposed to attempting to load a specific adapter from the parent classpath
> if one is found in the child classpath which doesn't work.

Sorry, I got confused. This is only going to happen when getLog is called from
code in the parent classpath. And there just isn't any other solution anyway.

I'll have a look at the patch (#21) now.
","03/Jun/05 00:56;b_stansberry@hotmail.com;(In reply to comment #25)
> (In reply to comment #23)
> > I'm opposed to attempting to load a specific adapter from the parent 
classpath
> > if one is found in the child classpath which doesn't work.
> 
> Sorry, I got confused. This is only going to happen when getLog is called from
> code in the parent classpath. And there just isn't any other solution anyway.
> 
> I'll have a look at the patch (#21) now.
> 

Actually, I'm glad you raised this point, as it got me thinking how to respond, 
and I thought of a couple issues.  Was thinking in shower and car, so may be off 
a bit, but:

1) This logic should only be invoked in cases of ClassCastException, not 
InvocationTargetException, etc.
2) What if there is a commons-logging.properties in the child?  There will be 
some strange interactions here:
 a) If the Log adapter specified by commmons-logging.properties CAN be loaded by 
the parent, it will be, even if that's not what would be normally discovered at 
the parent level.
 b) If the Log adapter specified by commmons-logging.properties CANNOT be loaded 
by the parent, JCL will fail, as we do not allow normal discovery to proceed.

","03/Jun/05 14:02;skitching;(In reply to comment #26)
> 
> 1) This logic should only be invoked in cases of ClassCastException, not 
> InvocationTargetException, etc.

Actually, only when ClassCastException happens when trying to convert to Log..

(2a) This sounds ok to me. The user wanted that logging lib, and they didn't
specify FailOnHierarchyError (or whatever we call it)
(2b) This sounds ok to me. The user didn't want discovery..


On related matters, I would prefer not to take the approach:
 * try context
 * try classloader of the LogFactoryImpl.

I think it would be better to start at the context classloader and walk up the
classloader inheritance tree until reaching the classloader that loaded the
LogFactoryImpl. I've been playing with various ways of achieving this, but it
isn't easy when you also need to treat exceptions as fatal or recoverable along
the way. Opinions?","05/Jun/05 04:49;b_stansberry@hotmail.com;Created an attachment (id=15301)
diff to LogFactoryImpl 6a

Restore handling of ClassNotFoundException to discovery process.  This got
inadvertently dropped in the code cleanup, and without it Robert's
demonstration cases 9, 10, 13, 14 and 26 fail.

BTW Robert, huge kudos to you on your effort setting up the demonstration
harness.  Using it is making this work so much easier, both in terms of finding
problems and in understanding theoretically why some things work and some
don't.","05/Jun/05 09:56;b_stansberry@hotmail.com;(In reply to comment #27)
> (In reply to comment #26)
> 
> On related matters, I would prefer not to take the approach:
>  * try context
>  * try classloader of the LogFactoryImpl.
> 
> I think it would be better to start at the context classloader and walk up the
> classloader inheritance tree until reaching the classloader that loaded the
> LogFactoryImpl. I've been playing with various ways of achieving this, but it
> isn't easy when you also need to treat exceptions as fatal or recoverable along
> the way. Opinions?
(In reply to comment #27)
> (In reply to comment #26)
>
> On related matters, I would prefer not to take the approach:
>  * try context
>  * try classloader of the LogFactoryImpl.
> 
> I think it would be better to start at the context classloader and walk up the
> classloader inheritance tree until reaching the classloader that loaded the
> LogFactoryImpl. I've been playing with various ways of achieving this, but it
> isn't easy when you also need to treat exceptions as fatal or recoverable along
> the way. Opinions?

I'm not sure there is a situation where trying _any_ other classloader will work
better.  I think there are four possible relationships between the thead context
classsloader (hereafter called TCCL) and LogFactoryImpl's classloader (hereafter
called LFICL).

1) TCCL is a child of LFICL.

In this case, no Log adapter class defined by any intermediate classloader
between TCCL and LFICL will be compatible with LFI.  Log adapter must be defined
by LFICL or a parent of LFICL.

No logging library class defined by any intermediate classloader between TCCL
and LFICL will be compatible with any compatible Log adapter.  Logging adapter
must be defined by the log adapter's classloader or a parent of it.

Therefore, no class defined by any intermediate classloader between TCCL and
LFICL will be useful.  Falling back to discovery using LFICL is the most
efficient next step if TCCL fails.

2) TCCL is a parent of LFICL.

In this situation, the only reason discovery using the TCCL would have failed is
if LFICL or an intermediate loader between it and TCCL uses child-first loading
and loaded a different version of Log directly.

It is possible to walk _down_ the classloader hierarchy from TCCL to LFICL,
trying to find a classloader that works, but in the end you'll get the same
result as if you'd just tried LFICL.  So, again falling back to discovery using
LFICL is the most efficient next step if TCCL fails.

3) TCCL is LFICL.

Not much we can do here ;)

4) TCCL is a sibling or cousin of LFICL.

The only other classloader that could possibly work is a classloader that is a
common parent of both TCCL and LFICL.  But, classes loaded by such a classloader
will only be compatible if there is no intermediate loader between it and LFICL
that uses child-first loading and can load a different version of Log directly.
 Trying to find such a ""common-parent"" classloader is possible, but in the end
you'll get the same result as if you'd just tried LFICL.  So, again falling back
to discovery using LFICL is the most efficient next step if TCCL fails.


I believe most of the above is outside the scope of what you'd mentioned, but
thought it might be useful to cover all the cases.","06/Jun/05 19:43;skitching;Thanks for patch 6a - committed.

Re scenario (1) of comment#29: Consider tomcat's classloader hierarchy:
  http://jakarta.apache.org/tomcat/tomcat-5.5-doc/class-loader-howto.html

Log/LogFactory/LogFactoryImpl is deployed at the ""system"" level (this is
standard out-of-the-box configuration for tomcat).

Now if someone deploys JCL at the ""shared"" level *and* at the shared level
deploys Log4JLog+log4j but not Log, then you have a situation where:
 * TCCL fails (Log duplicated)
 * parent of TCCL succeeds (and is *not* LFICL).","06/Jun/05 19:52;skitching;(In reply to comment #30)
oops - small but critical typo. I'll try again...

Re scenario (1) of comment#29: Consider tomcat's classloader hierarchy:
  http://jakarta.apache.org/tomcat/tomcat-5.5-doc/class-loader-howto.html
 
Log/LogFactory/LogFactoryImpl is deployed at the ""system"" level (this is
standard out-of-the-box configuration for tomcat).
 
Now if someone deploys JCL at the ""webapp"" level *and* at the shared or common
level deploys Log4JLog+log4j but not Log, then you have a situation where:
  * TCCL [webapp] fails (Log duplicated)
  * parent of TCCL [shared] succeeds (and is *not* LFICL).","12/Jun/05 09:05;b_stansberry@hotmail.com;Created an attachment (id=15377)
patch to allowFlawed/.../LogFactoryImpl 7c

(Attached patch is to the LogFactoryImpl now on the ""allowFlawed' branch.)

1) Invocation of constructor in createLogFromClass catches
InvocationTargetException and rethrows its target.  This handles the situation
where underlying problems we wish to ignore (e.g. NoClassDefFoundError) are not
surfaced until we invoke the constructor. In some experimentation I'm doing I
found that this situation occurs with LogKitLogger.

2) Main try/catch block in createLogFromClass specifically catches and rethrows
LCE.  Otherwise LCE thrown by handleFlawedHierarchy will needlessly be wrapped
by another LCE in the final ""catch Throwable"" block.","12/Jun/05 09:19;b_stansberry@hotmail.com;Created an attachment (id=15378)
patch to allowFlawed/.../LogFactoryImpl 8c

(Attached is a patch to the file that would result from applying the previous
""7c"" patch to the LogFactoryImpl now on the ""allowFlawed' branch.)

I was concerned that there might be pretty significant differences in JCL
behavior depending on whether a user included a commons-logging.properties
file, so I played with the demonstration harness to see what would happen. 
Basically here's what I did:

-- Added a parallel test case for each of the 32 existing cases.
-- In each parallel case, replaced any usage of log4j.jar with logkit.jar.
-- In each parallel case, added to the child loader classpath a
commons-logging.properties file specifying logkit.

I then recorded the differences in results between the parallel cases.	There
were 3 kinds of differences:

1) (Cases 5, 6, 17, 21, 22, 25, 29)  Here the original case discovered log4j
and the parallel case discovered JDK logging.  This is simply because in these
cases the TCCL is the system classloader, so LogFactory cannot find
commons-logging.properties.  Within the scope of what I'm testing here (cases
where code deployed in a child loader is trying to configure JCL), I don't
regard this as a ""fixable"" problem.

2) (Cases 3 and 4)  Here the original case discovers JDK logging but in the
parallel case JCL fails with an LCE.  This is because in these cases
LogKitLogger is defined by parent, logkit.jar by child, so LogKitLogger  cannot
resolve logkit.jar.  The LCE seems fairly legitimate to me, particularly in
case 3 where the caller is defined by the child loader. The user stated the log
library they want, which can't be loaded.  This can easily be remedied by
adding logkit.jar to the parent classpath as cases 7 and 8 show.

3) (Cases 20, 28 and 32) Again the original case discovers JDK logging but in
the parallel case JCL fails with an LCE.  But here the problem is the
incompatible Log interface problem.  In these cases, I don't think it is valid
for JCL to _always_ throw an LCE.  If the user wants an LCE thrown, they can
set the ALLOW_FLAWED_HIERARCHY_PROPERTY to false.  The current behavior
penalizes users who want to run logkit, avalon, etc. by leaving them no way to
avoid the LCE.

I can think of 3 approaches to handling the 2nd and 3rd category problems.  The
first is simply to strip out the throwing of an LCE from
discoverLogImplementation -- just let normal discovery proceed if the user
specified class can't be instantiated.	This approach prevents LCEs in the 2nd
and 3rd category cases.  However, it doesn't allow failure when it might be
appropriate.

The attached patch takes the 2nd approach. It has handleFlawedDiscovery and
handleFlawedHierarchy set a flag if they are invoked but are configured to
ignore the flaw.  If this flag is set, discoverLogImplementation knows the
specified adapter was loaded but there was a problem the user wants to ignore.
In that case, it allows normal discovery to proceed.  This approach only
resolves the 3rd category problems.  Cases 3 and 4 still fail with LCEs.

A 3rd approach would build on the attached patch.  It would add another
ALLOW_...._PROPERTY letting the user specify what they want to happen in cases
3 and 4.

Any thoughts?","12/Jun/05 12:21;skitching;(In reply to comment #32)
> 1) Invocation of constructor in createLogFromClass

I think this should be fixed in LogKitLogger rather than in LogFactoryImpl.

The issue is telling the difference between a logging implementation *not being
available* and the logging implementation being available but broken. When the
logging impl is not available, discovery should continue. But I think that when
it is available but broken we should throw an exception rather than mysteriously
redirecting output to another logging implementation.

It's difficult to tell these apart, but I would suggest specifying (in the Log
interface javadoc) that a NoClassDefFound or an ExceptionInInitializerError
should indicate ""not available"" while an InvocationTargetException indicates
available-but-broken. This is the approach that I took with Jdk14Logger, where
there is a dummy variable that forces an ExceptionInInitializerError if
java.util.logging.Level is not available. I expect a similar thing could be done
with LogKitLogger...

Thoughts?

> 
> 2) Main try/catch block in createLogFromClass specifically catches and rethrows
> LCE.  Otherwise LCE thrown by handleFlawedHierarchy will needlessly be wrapped
> by another LCE in the final ""catch Throwable"" block.

Well spotted. I'll commit this ASAP","12/Jun/05 12:38;b_stansberry@hotmail.com;(In reply to comment #33)
<snip>
> 
> I then recorded the differences in results between the parallel cases.	There
> were 3 kinds of differences:
> 
> 1) (Cases 5, 6, 17, 21, 22, 25, 29)  Here the original case discovered log4j
> and the parallel case discovered JDK logging.  This is simply because in these
> cases the TCCL is the system classloader, so LogFactory cannot find
> commons-logging.properties.  Within the scope of what I'm testing here (cases
> where code deployed in a child loader is trying to configure JCL), I don't
> regard this as a ""fixable"" problem.

I wanted to follow up on this a bit, to see what would happen if
commons-logging.properties were at the parent level instead of the child. 
(Rather than changing the code, I cheated a bit and had the run target in the
ant file set a JVM property; this should have the same effect, but if I'm
thinking wrong please let me know).

I tested against a class that reflects my recent patches.  11 cases (Nos. 1-4,
9, 10, 13, 14, 18, 26 and 30) fail with an LCE.  In all these cases, in Robert's
original version JDK logging is discovered.

These results tell me that users who are forced to set the LOG_PROPERTY to get a
library other than log4j or jdk discovered will have significantly different
behavior from those who can just put log4j.jar on the classpath.  I don't think
such a big difference is right; I'm thinking the 3rd approach mentioned above is
the way to go.

BTW, in getConfigurationValue() there is a cut-and-paste bug in the system
property check where the LOG_PROPERTY constant is checked instead of the
property passed to the method.  I'd submit a patch, but don't want to confuse
things with the other two patches just submitted.","12/Jun/05 12:40;b_stansberry@hotmail.com;(In reply to comment #34)
> (In reply to comment #32)
> > 1) Invocation of constructor in createLogFromClass
> 
> I think this should be fixed in LogKitLogger rather than in LogFactoryImpl.
> 
<snip>
> 
> It's difficult to tell these apart, but I would suggest specifying (in the Log
> interface javadoc) that a NoClassDefFound or an ExceptionInInitializerError
> should indicate ""not available"" while an InvocationTargetException indicates
> available-but-broken. This is the approach that I took with Jdk14Logger, where
> there is a dummy variable that forces an ExceptionInInitializerError if
> java.util.logging.Level is not available. I expect a similar thing could be done
> with LogKitLogger...
> 
> Thoughts?

+1.  I was about 65% of that opinion when I added that big comment in the patch :)","14/Jun/05 20:20;skitching;Re the InvocationTargetException for LogKitLogger:

Does it actually matter whether ExceptionInInitializerError or
InvocationTargetException occurs for LogKitLogger? It does for logadapters that
are part of auto-discovery as we want to continue discovery in the former case
but not the latter. But LogKitLogger is not part of auto-discovery, and
obviously no out-of-tree logger will be. So the only way LogFactoryImpl will
ever try these loggers is when specificLogClassName != null - but in that case,
we throw an LCE regardless of whether ExceptionInInitializerError or
InvocationTargetException occurred, yes?

And all the auto-discovered loggers should now be working as expected. So I
think (hope) things are ok as they are..

Re comment #33 point 3:

Yep, I pretty much agree with your analysis. However there is another option:
just choose not to support this, and make the users fix their problem properly.
Most of the problems reported against JCL are by users who are trying to use JCL
""out of the box"" and are confused it doesn't work. And I sympathise with them -
they don't *want* to use JCL, it just came with a library and they just want it
to shut up and not interfere with them running their app.

I think people who are explicitly specifying logadapters via
commons-logging.properties files are generally likely to be able to fix their
classpath problems. And the next release of JCL should include a separate
adapters-only jar which is the *correct* solution to this problem.

So I'm inclined to just ignore this problem. People who specify a log class will
be no worse off than JCL 1.0.4 if they throw commons-logging.jar in their
webapp, and won't have any problems at all if they use
commons-logging-adapters.jar (or whatever we choose to call it).


Comments?

NB: I think it would be a good idea to wind up this bugzilla entry sometime
soon. It's getting rather clumsy to read/navigate. We could start another entry
for the next topic - or just move to the mailing list until we need to start
attaching new patches.

PS: thanks a lot for your comments/discussion of logging. It's really making me
think :-). For such a small project this really is quite difficult isn't it?!","07/Jul/05 17:50;skitching;All the relevant bits from this ticket have long been merged into
commons-logging so I'm going to close this."
Jndi configurable Log4j logger,LOGGING-97,12341622,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,paulsp,paulsp,09/Aug/04 11:35,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.4,,,,,,,,,,,0,,,"I have create Log4j logger that is configured, in a limited way, via JNDI.  The
configuration is limited to setting the log4j configuration file and how often
to check the file for updates.  As documented in the javadocs, this is very
useful in an web application environment when the war is not unpacked.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,09/Aug/04 11:38;paulsp;ASF.LICENSE.NOT.GRANTED--JndiConfigLog4JLogger.java;https://issues.apache.org/jira/secure/attachment/12333033/ASF.LICENSE.NOT.GRANTED--JndiConfigLog4JLogger.java,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,30531.0,,,2004-08-09 11:54:37.0,,,false,,,,,,,,,,,,,,,148275,,,Tue Aug 10 10:19:53 UTC 2004,,,,,,0|i0spdj:,165588,,,,,,,,"09/Aug/04 11:38;paulsp;Created an attachment (id=12365)
org.apache.commons.logging.impl.JndiConfigLog4JLogger
","09/Aug/04 11:54;craig.mcclanahan@sun.com;This seems like a *very* useful enhancement for Log4J.  What I'm having a harder
time understanding is why it would belong in commons-logging -- where
configuration of the underlying logging system is *explicitly* out of scope?  No
matter how you might configure a (Log4J implemented) logger named ""foo.bar.baz"",
the commons-logging standard implementation will utilize it, with no special
behavior needed, right?","09/Aug/04 20:08;paulsp;This logger is not configuring Log4j,  it is passing the name of the
configuration file and an option check interval to Log4j.  What Log4j does with
the information is outside the scope of the logger.  This logger is a wrapper to
the existing Log4jLogger.  It only provides constructors that get the file and
interval value from JNDI and pass them to Log4j.  It the JNDI configuration is
missing, then the ""default"" behavior is defined by Log4j.


I am aware of the previous ""discussion"" around the Log4jLogger when it was
defining appenders instead of allowing the default behavior of Log4j.  I do not
believe this implementation crosses that line.

As to you questions:

1) Why does this belong in Commons-logging, instead of Log4j?

The default behavior of Log4j is controlled, in part, by system properties.  In
a servlet container environment, i.e. Tomcat, their are many application but
only 1 set of system properties.  Thus you can not configure th application
webapp_a to use webappA_log4j.xml and webapp_b to use webapppB_log4j.xml.  This
logger is only passing the name of the configuration file and an optional check
interval to Log4j.  

2) No matter how you might configure a (Log4J implemented) logger named
""foo.bar.baz"", the commons-logging standard implementation will utilize it, with
no special behavior needed, right?

The logger is only passing the name of the configuration file and an optional
check interval to Log4j when they exist.  It is not affecting the default
behavior of Log4j.  This the behavior logger ""foo.bar.baz"" is not affected by
this logger.  The behavior is defined and maintained by Log4j.","09/Aug/04 22:42;craig.mcclanahan@sun.com;Thanks for the further explanation -- it makes the correct resolution clear.

> This logger is not configuring Log4j,  it is passing the name
> of the configuration file and an option check interval to Log4j.
> What Log4j does with the information is outside the scope of the logger.

Regardless of the attempt at creative terminology :-), this is an attempt to
play the role of managing configuration of the underlying logging
implementation.  That is not what Commons-Logging is for.  You should use the
standard facilities of Log4J for that purpose.

> The default behavior of Log4j is controlled, in part, by system
> properties.  In a servlet container environment, i.e. Tomcat,
> their are many application but only 1 set of system properties.

I am not a Log4J expert, but my understanding is that the latter sentence is
definitely not true (the Log4J docco and user list would have more information
-- you could, for example, write a ServletContextListener containing the guts of
your setupLog4J() method, without changing anything about Commons Logging).

Regardless, however, whether you call this ""configuration"" or ""setup"" it should
be done directly using the APIs that Log4J provides for that purpose.  Commons
Logging is about abstracting the *use* of the loggers, not their setup.","10/Aug/04 10:19;paulsp;Thanks you for the suggestion to use ServletContextListener.  I ended up using
the ContextParameters instead of JNDI.  This is a better solution.

You may close this bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Include class loader information when LogFactoryImpl throws LogConfigurationException.,LOGGING-96,12342434,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,steve@stephen-smith.co.uk,steve@stephen-smith.co.uk,05/Aug/05 22:19,29/Dec/09 16:52,07/Apr/19 20:35,29/Dec/09 16:52,1.0.4,,,,,,,,,1.1.0,,0,,,"LogFactoryImpl#getLogConstructor throws a LogConfigurationException when the
same class is detected in multiple class loaders. The error message is as follows:

""Invalid class loader hierarchy. You have more than one version of <class-name>
visible, which is not allowed.""

We could improve the usefulness of the error message by including classloader
details such as ClassLoader#getClass, etc. It would greatly reduce the time
spent hunting down multiple copies of Commons Logging (which can frequently
occur when deploying to application servers such as JBoss and WebLogic, as they
often have a version of Commons Logging stowed away in their own class path).","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36041.0,,,2005-08-08 15:12:43.0,,,false,,,,,,,,,,,,,,,148274,,,Wed Jan 18 12:55:53 UTC 2006,,,,,,0|i0spdr:,165589,,,,,,,,"08/Aug/05 15:12;b_stansberry@hotmail.com;The current trunk version of commons-logging includes the ability to generate a
great deal of diagnostic information about what it's doing internally.  If
commons-logging is behaving in an unexpected manner, you can now set system
property org.apache.commons.logging.diagnostics.dest to the value STDOUT, STDERR
or a filename and you'll get detailed diagnostics.

Specifically, if an incompatible Log problem occurs, you would get a diagnostic
message like the following:

""Class org.apache.commons.logging.impl.Log4J12Logger was found in classloader  
com.x.y.z.WebAppLoader@123456. It is bound to a Log interface which is not     
                  the one loaded from classloader
com.x.y.z.ContainerClassLoader@654321.""

Prior to this message there would be other diagnostic info showing how
commons-logging came to be using WebAppLoader@123456 and
ContainerClassLoader@654321.","20/Nov/05 07:14;dennisl@apache.org;Stephen, are you happy with the solution that Brian has presented? Is it OK to
close this issue?","18/Jan/06 12:55;skitching;Closing issue as there has been no feedback. Hopefully this is resolved by the
new Diagnostics support.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Extended API: getChildLogger(String),LOGGING-95,12342443,Improvement,Open,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,,,joerg@j-hohwiller.de,joerg@j-hohwiller.de,07/Aug/05 06:45,14/Nov/13 17:36,07/Apr/19 20:35,,,,,,,,,,,2.0,,0,,,"This is a feature request for the commons-logging API already discussed on the mailing list. The idea is to have an extended interface rather than Log that adds additional methods (getChildLogger and getName) that have already been requested for a long while. The suggested approach does not break compatibility of JCL. The existing Log interface is not touched and shall esp. not be deprecated. The new interface may only be used as needed but aims to prevent having even more additional logging APIs in future. The suggestion is to change the implementation in a way that all classes that implement Log shall implement Logger and fullfill the contract of the additional methods. In my request I still leave it open what happens to LogFactory but my suggestion is to leave it untouched (except for javadoc updates). Further I recomment to add an abstract class to the ""impl"" package that implements the Logger interface but does not implement any methods. The Logger interface may then recommend in its javadoc to extend the abstract class rather than directly implementing the interface. This would allow to have less trouble if -however- in future an additional feature request for the Logger API arises.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,07/Aug/05 06:47;joerg@j-hohwiller.de;ASF.LICENSE.NOT.GRANTED--Logger.java;https://issues.apache.org/jira/secure/attachment/12333697/ASF.LICENSE.NOT.GRANTED--Logger.java,01/Oct/05 09:01;joerg@j-hohwiller.de;ASF.LICENSE.NOT.GRANTED--getChildLogger.diff;https://issues.apache.org/jira/secure/attachment/12333698/ASF.LICENSE.NOT.GRANTED--getChildLogger.diff,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,36062.0,,,2013-11-14 17:36:01.126,,,false,,,,,,,,,,,,,,,148273,,,Thu Nov 14 17:36:01 UTC 2013,,,,,,0|i0spdz:,165590,,,,,,,,"07/Aug/05 06:47;joerg@j-hohwiller.de;Created an attachment (id=15939)
Suggested Logger interface

Improvements to the interface (javadoc) are most welcome.","01/Oct/05 09:01;joerg@j-hohwiller.de;Created an attachment (id=16567)
Full Patch for the suggested Issue (Rev 292879)
",14/Nov/13 17:36;garydgregory;I want that API in Log4J 2 ;) ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Proposal: Support for Ugli as published in Log4j 1.3alpha,LOGGING-94,12342137,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,boris.unckel.mlg@gmx.net,boris.unckel.mlg@gmx.net,26/Mar/05 19:02,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"At first it seems strange to wrap a wrapper.
If log4j 1.3alpha is released as it is, the org.apache.log4j.Logger will
implement ULogger. So the JCL adaptor will wrap the native log4j Logger
and additionally an other Configuration in log4j.

Hopefully both development teams can reach a unique interface, respecting
backward compatibilty. I will post a sample of a JCL factory for this case in
[At first it seems strange to wrap a wrapper.
If log4j 1.3alpha is released as it is, the org.apache.log4j.Logger will
implement ULogger. So the JCL adaptor will wrap the native log4j Logger
and additionally an other Configuration in log4j.

Hopefully both development teams can reach a unique interface, respecting
backward compatibilty. I will post a sample of a JCL factory for this case in
[Bug 34185] which contains demo code for this case.] which contains demo code for this case.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,26/Mar/05 19:03;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--UgliLogger.java;https://issues.apache.org/jira/secure/attachment/12333430/ASF.LICENSE.NOT.GRANTED--UgliLogger.java,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,34188.0,,,2005-03-26 19:27:29.0,,,false,,,,,,,,,,,,,,,148272,,,Thu Jun 02 18:25:32 UTC 2005,,,,,,0|i0spe7:,165591,,,,,,,,"26/Mar/05 19:03;boris.unckel.mlg@gmx.net;Created an attachment (id=14567)
UgliLogger implements Serializable, Log
","26/Mar/05 19:27;rdonkin@apache.org;Hi Boris

A few little niggles:

1. Could you please supply unit test code and a documentation patch?
2. Has UGLI been fully released yet?
3. You have included the ASF license text. This needs to be there to demonstrate
that you intend this to be included as part of an ASF license product.

TIA ","02/Jun/05 18:25;skitching;Log4J is still debating whether they will support UGLI/SLF4J.

This patch is not needed for log4j anyway, as we support log4j natively.
And no other logging library in existence yet supports UGLI or SLF4J.

So I'm going to close this as WONTFIX.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Broken link report (eight 404s),LOGGING-93,12340826,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,janekdb@yahoo.co.uk,janekdb@yahoo.co.uk,30/Jun/03 17:46,29/Dec/09 14:14,07/Apr/19 20:35,29/Dec/09 14:14,1.0.3,,,,,,,,,1.0.4,,0,,,"ht://Check (http://htcheck.sf.net/) detected 8 broken links in the logging
section. These broken links are listed below in this format:

Referencing URL
    Referenced URL (Broken link)

http://jakarta.apache.org/commons/logging/userguide.html
	http://jakarta.apache.org/commons/logging/impl/Log4JLogger.html

http://jakarta.apache.org/commons/logging/userguide.html
        http://jakarta.apache.org/commons/logging/impl/Jdk14Logger.html

http://jakarta.apache.org/commons/logging/userguide.html
        http://jakarta.apache.org/commons/logging/impl/SimpleLog.html

http://jakarta.apache.org/commons/logging/
	http://jakarta.apache.org/commons/logging/images/logo.jpg

http://jakarta.apache.org/commons/logging/
	http://jakarta.apache.org/commons/logging/$context.toolbox.devProcess

http://jakarta.apache.org/commons/logging/maven-reports.html
	http://jakarta.apache.org/commons/logging/changes.html

http://jakarta.apache.org/commons/logging/maven-reports.html
	http://jakarta.apache.org/commons/logging/tasks.html

http://jakarta.apache.org/commons/logging/maven-reports.html
	http://jakarta.apache.org/commons/logging/task-list.html","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,21181.0,,,2004-01-07 10:42:33.0,,,false,,,,,,,,,,,,,,,148271,,,Sun Feb 15 17:41:42 UTC 2004,,,,,,0|i0spef:,165592,,,,,,,,"07/Jan/04 10:42;dennisl@apache.org;The first three links are already fixed in CVS on Oct 13 by rdonkin.

The remaining five are from the maven-generated site at
http://jakarta.apache.org/commons/logging/

Is the maven generated site official? I couldn't find any links to it from
either http://jakarta.apache.org/commons/ or
http://jakarta.apache.org/commons/logging.html. Judging by the copyright notice
in the lower left corner (2001-2002), it has been a while since they were generated.

I ran ""maven site"" on the source from CVS today and all links but the logo seems
fixed one way or the other.","15/Feb/04 17:41;rdonkin@apache.org;Committed new logo (thanks Tim!).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"LogFactoryImpl javadoc says default NoOpLog, but really SimpleLog",LOGGING-92,12340420,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,dmkarr@earthlink.net,dmkarr@earthlink.net,15/Nov/02 05:17,29/Dec/09 14:13,07/Apr/19 20:35,29/Dec/09 14:13,1.0.1,,,,,,,,,1.0.3,,0,,,"The javadoc for the ""LogFactoryImpl"" class says that the default logger is
""NoOpLog"".  However, the code clearly shows that it uses ""SimpleLog"", not
""NoOpLog"" (changed by costin in revision 1.4).  I prefer it falling back to
SimpleLog, so I consider this a documentation bug, not a code bug.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14571.0,,,2002-11-23 11:09:44.0,,,false,,,,,,,,,,,,,,,148270,,,Sat Nov 23 11:09:44 UTC 2002,,,,,,0|i0spen:,165593,,,,,,,,"23/Nov/02 11:09;craig.mcclanahan@sun.com;Fixed in nightly build 20021123.  I updated the remaining documentation
references to reflect the actual functionality that SimpleLog is the default.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Convenience methods for cleaner application code,LOGGING-91,12341945,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,bob.tarling@gmail.com,bob.tarling@gmail.com,14/Dec/04 19:55,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"I wonder if the commons-logging guys could take a look at this log4j issue -
http://issues.apache.org/bugzilla/show_bug.cgi?id=16229

If commons-logging could provide the API that Linus suggests then it would add 
cleaner logging code to our applications and allow us to continue to use Log4J 
or whatever else as the underlying logger.

I really don't know why the Log4J guys did nothing with this (even though they 
marked as fixed/resolved). It seems quite a reasonable request.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,32691.0,,,2004-12-14 20:12:48.0,,,false,,,,,,,,,,,,,,,148269,,,Thu Jun 09 16:31:55 UTC 2005,,,,,,0|i0spev:,165594,,,,,,,,"14/Dec/04 20:12;ebourg;You mean the methods for parameterized messages, right ? Or the methods with
messages chunks to be concatenated ?","14/Dec/04 20:28;bob.tarling@gmail.com;This is some slight adjustments to Linus original suggestion


    void debug(Object mess1, Object mess2) {
        if (isDebugEnabled()) {
            debug(new StringBuffer(mess1).append(mess2));
        }
    }
    void debug(Object mess1, Object mess2, Object mess3) {
        if (isDebugEnabled()) {
            debug(new StringBuffer(mess1).append(mess2).append(mess3));
        }
    }
    void debug(Object mess1, Object mess2, Object mess3, Object mess4) {
        if (isDebugEnabled()) {
            debug(new StringBuffer(mess1).append(mess2).append(mess3).append
(mess4));
        }
    }
    void debug(Object mess1, Object mess2, Object mess3, Object mess4, Object 
mess5) {
        if (isDebugEnabled()) {
            debug(new StringBuffer(mess1).append(mess2).append(mess3).append
(mess4).append(mess5));
        }
    }


This would allow code such as this in an application -

    String value = (String)myMap.get(key);
    if (log.isDebugEnabled()) {
        log.debug(""Got the value "" + value + "" from the map with key "" + key);
    }

to be reduced down to -

    String value = (String)myMap.get(key);
    log.debug(""Got the value "", value, "" from the map with key "", key);

removing the clutter from the application.
","14/Dec/04 20:37;bob.tarling@gmail.com;I like the fact that the statement still reads from left to right and that it 
doesn't rely on any recent JRE API changes.","14/Dec/04 21:27;skitching;I understand the reason for your request, but would be reluctant to add this for
one main reason: 

Having redundant methods with varying numbers of Object params, to ""emulate""
varargs functionality may be effective, but it's also butt-ugly.

Have you looked at http://just4log.sourceforge.net? It looks to me like adding
the just4log ant task as a final step in your ant builds should achieve what you
want. (This project is referenced from the commons-logging wiki pages).

I'm also wondering whether java1.5 ""varargs"" functionality is
backward-compatible, ie whether varargs methods compiled using java1.5 can then
be called from code compiled using earlier JVMs? Commons projects do ship with
code that won't compile *but will run* on 1.1 or 1.2; maybe a 1.5 dependency
would be acceptable if it is backward-compatible and brings a significant benefit...
","14/Dec/04 21:52;bob.tarling@gmail.com;>Having redundant methods with varying numbers of Object params, to ""emulate""
>varargs functionality may be effective, but it's also butt-ugly.
:-)
I agree entirely, its a great shame that such a language feature as varargs 
comes at a late stage.

If the bytecode is backwards compatible (ie can compile varargs on JRE5 and run 
on JRE1.3) then this would be acceptable for me but would it be acceptable to 
all commons-logging users? They would be forced to move to JDK5 for development 
but many companies will be holding back.

Possibly you could release a seperate pre and post JRE5 interface but that 
would be extra work for your release manager.

I think commons-logging should give the benefit to the user of removing butt-
ugly code from the users applications by taking that upon themselves. Good 
encapsulation I would expect to hide that ugly stuff.

Interesting link to Just4Log. I must confess to being a bit wary of byte-code 
manipulators. What else could it be putting in there for me? I'd have to read 
the entire soucre base and swot up on byte code format to know. Then again the 
same could be said of any 3rd party library I guess.","09/Feb/05 07:24;rdonkin@apache.org;The future shape of the JCL component interface is currently under develpment.
Will anyone who cares about this please join the commons-dev mailing list and
champion it.","02/Jun/05 18:32;skitching;I'm inclined to close this as WONTFIX. Users who really want this functionality
can add this as a wrapper class at the user level without any significant
performance hit.

The implementation really is just too ugly, in my opinion, to be in the core.",09/Jun/05 16:31;skitching;As there's been no further feedback I'm closing this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] org.apache.commons.logging.impl.LogFactoryImpl does not provide enough information on an InvocationTargetException in the newInstance() method.,LOGGING-90,12341235,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,bcurnow@gfs.com,bcurnow@gfs.com,02/Feb/04 20:05,29/Dec/09 17:32,07/Apr/19 20:35,29/Dec/09 17:32,1.0.3,,,,,,,,,1.0.4,,0,,,"Using version 1-0-3 I was getting an 
org.apache.commons.logging.LogConfigurationException while attempting to 
retrieve a Log instance from the LogFactory. This LogConfigurationException was 
wrapping an InvocationTargetException from the newInstance() method in 
org.apache.commons.logging.impl.LogFactoryImpl. An InvocationTargetException 
does not provide any information regarding the cause of the exception in its' 
stack trace so I had a difficult time determining the true cause of the error 
(A ClassNotFoundException).

I would suggest adding a special case to the existing catch clause in 
newInstance() to catch an InvocationTargetException and throw a new 
LogConfigurationExeption constructed with the cause (not the 
InvocationTargetException object).

The following would be the new catch clause:

        } catch (InvocationTargetException e) {
            throw new LogConfigurationException(e.getCause());
        } catch (Throwable t) {
            throw new LogConfigurationException(t);
        }

The modified newInstance() method would look like this:

    protected Log newInstance(String name) throws LogConfigurationException {

        Log instance = null;
        try {
            Object params[] = new Object[1];
            params[0] = name;
            instance = (Log) getLogConstructor().newInstance(params);
            if (logMethod != null) {
                params[0] = this;
                logMethod.invoke(instance, params);
            }
            return (instance);
        } catch (InvocationTargetException e) {
            throw new LogConfigurationException(e.getCause());
        } catch (Throwable t) {
            throw new LogConfigurationException(t);
        }

    }","Operating System: Solaris
Platform: Sun",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,26598.0,,,2004-02-29 01:51:03.0,,,false,,,,,,,,,,,,,,,148268,,,Sun Mar 07 05:26:18 UTC 2004,,,,,,0|i0spf3:,165595,,,,,,,,"29/Feb/04 01:51;dennisl@apache.org;Since InvocationTargetException.getCause() was introduced in JDK 1.4 we should
use InvocationTargetException.getTargetException() instead to retain
compatibility with earlier JDKs.","07/Mar/04 05:26;craig.mcclanahan@sun.com;Fixed in nightly build 20040307 (and the upcoming 1.0.4 release).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Enterprise Commons Logging : Globalization & more,LOGGING-89,12341926,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,rsitze@apache.org,rsitze@apache.org,10/Dec/04 07:44,09/Jul/14 20:14,07/Apr/19 20:35,15/Jul/13 21:07,,,,,,,,,,,,0,,,"IBM would like to open a discussion within the Jakarta commons community 
on evolving the Jakarta Commons Logging (JCL) API's to support Enterprise 
level logging functionality.  We recognize the value that a ""logging 
implementation independent API"" brings to open source component 
development, and would like to work with the community to accomplish this 
goal.

We present a set of requirements as a baseline for the discussion, a 
proposal for meeting these requirements, a number of points of discussion, 
and attached are two Java source files that correspond to the discussion 
below.


Requirements:

  We recognize that the community has an overriding
  requirement:

    A.1.  Evolution: maintain compatibility with the
          current LogFactory/Log interfaces.

  We have ONE primary requirement:

    A.2.  Globalization


  Having opened the door, we'd also like to propose a few
  other requirements:

    B.1.  Functional alignment with JSR-47 concepts.

    B.2.  Fix fragile configuration problems - Currently
          the user has NO idea which impl is in effect.
          All the default/fall back behavior means that in
          the end we have an apparent non-deterministic
          logging implementation.  Errors in config file
          names, classpath errors, classpath ordering,
          etc., can all change the behavior... with no
          idea which is in effect.

          The fundamental problem with the current factory
          is that it is dependent on ""passively""
          identifying a logging implementation.

          We propose one solution below, but would ask a
          more general question: any new bright ideas?","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,10/Dec/04 07:46;rsitze@apache.org;ASF.LICENSE.NOT.GRANTED--EnterpriseLog.java;https://issues.apache.org/jira/secure/attachment/12333277/ASF.LICENSE.NOT.GRANTED--EnterpriseLog.java,10/Dec/04 07:46;rsitze@apache.org;ASF.LICENSE.NOT.GRANTED--EnterpriseLogFactory.java;https://issues.apache.org/jira/secure/attachment/12333278/ASF.LICENSE.NOT.GRANTED--EnterpriseLogFactory.java,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,32618.0,,,2006-01-12 03:10:52.0,,,false,,,,,,,,,,,,,,,148267,,,Mon Jul 15 21:07:18 UTC 2013,,,,,,0|i0spfb:,165596,,,,,,,,"10/Dec/04 07:46;rsitze@apache.org;Created an attachment (id=13714)
Initial proposed EnterpriseLog.java
","10/Dec/04 07:46;rsitze@apache.org;Created an attachment (id=13715)
Initial proposed EnterpriseLogFactory.java
","10/Dec/04 07:47;rsitze@apache.org;    A.1.  Evolution: Maintain compatibility with the
          current LogFactory/Log interfaces BY PROVIDING

          - Drop-in replacement of commons-logging.jar
            version 1.x with a version 2.x variant.

          - EnterpriseLogFactory class that extends the
            existing LogFactory.

          - EnterpriseLog interface that extends the
            existing Log interface.
","10/Dec/04 07:49;rsitze@apache.org;    A.2.  Globalization.  For the enterprise logging we
          need globalized messages (translated) for message
          level logging API's: info, warn, error, fatal.
          The remaining logging API's are considered trace
          level logging API's, and do not require message
          translation.

          - For message level logging, support globalized
            variants on the new EnterpriseLog interface:

            info(Class callingClass,
                 String methodName,
                 String messageID);

            info(Class callingClass,
                 String methodName,
                 String messageID,
                 Object messageParam);

            info(Class callingClass,
                 String methodName,
                 String messageID,
                 Object[] messageParams);

            same for warn, error, fatal.


          - Utility function to support formatting for
            other purposes (exception strings):

            formatMessage(String messageID);
            formatMessage(String messageID, Object messageParam);
            formatMessage(String messageID, Object[] messageParams);


          Ensure that component has an assurance that the
          message will be translated/formatted as expected:

          - ALL message translation must be done using
            the standard java.util.ResourceBundle class,
            or functional equivalent.

          - ALL message formatting must be done using
            the standard java.text.MessageFormat class,
            or functional equivalent.

          - Bind a ResourceBundleName to an EnterpriseLog
            instance.

          - Expects that the named ResourceBundle is
            available to the logger.","10/Dec/04 07:49;rsitze@apache.org;    B.1.  Functional alignment with JSR-47 concepts.
          JSR-47 has 3 trace levels:  FINE, FINER, FINEST
          JCL has 2 trace levels defined today: debug,
          trace which corresponds to JSR-47 FINE and
          FINEST in the current implementation.

          The JSR-47 FINER level has no corresponding APIs
          in JCL.  The expectation is that the FINER level
          be used for ""class/method level flow"".

          We propose a set of API's that would correspond
          to the JSR-47 FINER LEVEL, but more generally
          support the ""class/method level flow"" logging.

          - enter(Class clazz, String methodName,
                  Object message);

          - enter(Class clazz, String methodName,
                  Object methodArg,
                  Object message)

          - enter(Class clazz, String methodName,
                  Object[] methodArgs,
                  Object message);

          - exit(Class clazz, String methodName,
                 Object result,
                 Object message);

          - exit(Class clazz, String methodName,
                 Throwable exception,
                 Object message);

          These being ""new"" API's, it is reasonable to have
          'Log' level behavior... updating Log or only
          supporting in EnterpriseLog might be an interesting
          discussion point.

          The JCL debug level is described (in the user's
          guide) as appropriate for ""detailed information
          on the flow through the system.""  As a best
          practice, would like to suggest that this be
          for ""component level flow"", i.e. crossing
          component boundries.  This being a guideline,
          we see no conflict with current usage.
          This is in-line with current JSR-47 expectations.
          This does raise a question: would a set of
          API's to support this notion be appropriate?
          Something along the order of:

          - enterComponent(String componentName,
                           Class clazz,
                           String methodName,
                           ...);

          - etc.
","10/Dec/04 07:50;rsitze@apache.org;    B.2.  Fix fragile configuration problems.

          This area is more discussion, and less is
          currently represented in any proposed
          interface/class changes.

          Two things can/should be done here:

          a. tighten the 'discovery' process to minimize
             ""non-deterministic behavior"".

          b. give *serious* consideration to how we
             package commons logging.


        - Declarative Configuration:
 
          Now, regarding 'fragile' configurations, a
          declarative configuration driven programmatically
          by the ""target framework"" into which a component
          might be installed/executing within would resolve
          a lot of the problems.

          In such a solution, we should guard against
          any multiplicity of such ""declarations"".  Throw
          exception, something, to if multiple occur in the
          runtime.


        - ONE Configuration

          Even in a dynamic ""discovery"" process, we
          should adopt a strategy of allowing only ONE
          configuration to exist.

          - In absense of an explicit declaration, if there
            is only one logger available, use it.

          - In absense of an explicit declaration, if there
            are multiple loadable loggers available,
            then configurable preference list could be
            consulted.  Such a list MUST NOT be packaged with
            the commons logging distributable.

          - In presense of an explicit declaration, if that
            is NOT available, then fall back to a default
            logger (preference list or simple logger) AND
            log warning/info.

          - NO configuration of explicit/default loggers in
            ANY resource packaged with the logger.


        - Detailed diagnostics

          Detailed Internal analysis and dump on
          error/warning. Explain what has failed, why,
          and what should be done about it.  References
          to a user guide would be acceptable I think.

          If there is ANY ambiguity, then WARN or INFO at
          a minimum.


        - Improve relationship with ClassLoader hierarchies

          The parent-first class loader mechanism causes
          problems with in some situations.  Specifically,
          J2EE environments where applications attempt to
          use commons logging, AND where the runtime also
          supports it.

          The apparent solution is both a more
          deterministic discovery process for
          *configuration* data, and a more flexible
          config model.

          More deterministic ClassLoader behavior with
          respect to configuration files:

          - Force adherence to the parent-first ClassLoader
            precedence even if the ClassLoaders attempt
            to circumvent [force deterministic behavior].

            - Walk ClassLoader hierarchy from top to
              bottom, discover and track WHERE resources
              [config files] are available.

          - Always defer to configuration found in lowest
            [closest to app] classloader.

          - Look for multiple copies of config resource
            loaded by any *one* classloader, throw a
            configuration exception or warning w/ fall-back
            to consistent default behavior in such an event
            OR warn and fall-back to behavior configured by
            PARENT classloader.

          - NO configuration file to be packed with
            commons-logging.jar


          Flexible config model:

          - Allow PARENT config to define a *default*
            attribute [such as logger] which applies to
            current classloader, and as a default to any
            child loader.  These attributes are always
            considered in order of PARENT LAST.

          - Allow PARENT config to define a *must-use*
            attribute [such as logger] which forces
            behavior of child loaders.  These attributes
            are always considered in order of PARENT FIRST,
            and override a corresponding *default*
            attribute.

          - The distinction between *default* and
            *must-use* to be made by different attribute
            names.


        - Repackaging

          Separate Interface from Implementations.  Yes,
          this means TWO jar files (default).  We
          might produce ""utility"" jar files that contain
          an interface with ONE implementation, and config
          for that implementation.  We MUST eliminate
          packaging/solutions that dynamically adapt to
          environments were our users loose control of
          what the logger is doing.


        - Misc - is there any value in:

          Being able to query the logger implementation
          for it's ""name""?

          An ""Assert"" the application/framework runtime
          can use to verify that all is as expected?

          Would be be better to ""name"" a logger, or
          a specific configuration?  I think naming a
          configuration would lend better towards
          a deterministic behavior.","12/Jan/06 03:10;boris.unckel.mlg@gmx.net;(In reply to comment #6)
This is already available with java.util.logging. Why is this needed for JCL?
JCL's main intention is for use in APIs. APIs already using JCL whould have to
be changed (major change) with rewritting all logging calls for I18N.

New APIs (I assume JDK1.4 and above) could use java.util.logging for this
requirement.
There were already discussions on the log4j dev mailing list to this topic, with
consensus to leave an stable interface.","15/Jul/13 21:07;tn;Considering the available alternatives (log4j, logback, slf4j) and the state of JCL, this proposal is not going to happen anymore.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Access to underlying native logging provider missing,LOGGING-88,12340394,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Duplicate,,ch@ipin.com,ch@ipin.com,01/Nov/02 13:30,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0,,,,,,,,,,,0,,,"Currently only class org.apache.commons.logging.impl.Jdk14Logger provides access
to the underlying logging provider through the method 


org.apache.commons.logging.Log doe","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14154.0,,,,,,false,,,,,,,,,,,,,,,148266,,,Fri Nov 01 13:36:07 UTC 2002,,,,,,0|i0spfj:,165597,,,,,,,,"01/Nov/02 13:36;ch@ipin.com;sorry, is fully described in 14155 (it's late at night).

*** This bug has been marked as a duplicate of 14155 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Add MemoryLog,LOGGING-87,12341334,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,joehni,,15/Mar/04 21:48,29/Dec/09 14:12,07/Apr/19 20:35,29/Dec/09 14:12,1.0.4,,,,,,,,,1.1.0,,0,,,"Statistics show, that logging code take normally nearly 4% of the 
application's code. To increase coverage and exclude side-effects from the 
logging code it is useful to have unit tests running the compete logging code, 
too. The MemoryLog class is especially designed for this purpose, since every 
log entry can be retrieved later on as big list with each entry represented by 
a bean. This makes it e.g. easy to test for thrown and logged exceptions.

Code for MemoryLog and MemoryLogTest attached, code borrows from SimpleLog.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,15/Mar/04 21:49;ASF.LICENSE.NOT.GRANTED--MemoryLog.java;https://issues.apache.org/jira/secure/attachment/12332804/ASF.LICENSE.NOT.GRANTED--MemoryLog.java,15/Mar/04 21:50;ASF.LICENSE.NOT.GRANTED--MemoryLogTest.java;https://issues.apache.org/jira/secure/attachment/12332805/ASF.LICENSE.NOT.GRANTED--MemoryLogTest.java,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,27663.0,,,2004-03-15 21:49:57.0,,,false,,,,,,,,,,,,,,,148265,,,Fri Nov 05 07:05:18 UTC 2004,,,,,,0|i0spfr:,165598,,,,,,,,"15/Mar/04 21:49;joerg.schaible@gmx.de;Created an attachment (id=10785)
src/java/org/apache/commons/logging/impl/MemoryLog.java
","15/Mar/04 21:50;joerg.schaible@gmx.de;Created an attachment (id=10786)
src/test/org/apache/commons/logging/MemoryLog.java
","05/Nov/04 07:05;rdonkin@apache.org;Committed. Many thanks.

This has been added to the new optional jar containing non-core jars.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] SimpleLog log method should defer writing for better reuse!,LOGGING-86,12341284,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,arh14@cornell.edu,arh14@cornell.edu,22/Feb/04 03:25,29/Dec/09 14:11,07/Apr/19 20:35,29/Dec/09 14:11,1.0.3,,,,,,,,,1.0.4,,0,,,"SimpleLog 'log' method which performs the actual log write to System.err should 
be refactored to instead call a 'doWrite' method which commits the log message 
to the stream.  This would allow subclasses to reuse the bulk of the SimpleLog 
logic but direct the output elsewhere (in my case, for instance, a GUI log 
window).  This change is too trivial to mandate a full patch, here is a pseudo 
patch:

/**
 * <p> Do the actual logging.
 * This method assembles the message
 * and then prints to <code>System.err</code>.</p>
 */
 protected void log(int type, Object message, Throwable t) {
   ...
   // print to System.err
-  System.err.println(buf.toString());
+  doWrite(buf);
 }

+ /** Subclasses can easily override this */
+ protected void doWrite(StringBuffer buf) {
+   System.err.println(buf);
+ }

Without this patch, the only current solution is reuse by cutting-and-pasting 
the entire 'log' method and changing the single System.err line :(","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,27135.0,,,2004-02-28 05:24:08.0,,,false,,,,,,,,,,,,,,,148264,,,Mon Mar 01 10:13:28 UTC 2004,,,,,,0|i0spfz:,165599,,,,,,,,"28/Feb/04 05:24;dennisl@apache.org;The only downside I can see in doing this is that it requires one more
method-call. How critical is performance in this implementation?","28/Feb/04 05:40;arh14@cornell.edu;I also noticed that all the logging methods are made final (as well as the
accessors for debug level), which obviates subclasses, so I had to copy and
paste my own copy of this class and remove the 'final' keywords from those methods.

It may be that it is important to performance to keep these things final and to
not do an extra call, but I wanted to at least point it out.","29/Feb/04 01:38;dennisl@apache.org;Having thought some more about this I like the idea. I'm planning to write a
Logger that can be used in an applet that sends all log entries to a servlet.
That could easily be done by extending SimpleLog, with the enhancement proposed
here.

I can write a patch for it, but I'm currently 2 patches ahead of what's in cvs.
The attribute prefix (renamed to shortLogName in my patch for COM-1039) should
also be made protected.

Do you really need to override the logging methods (and accessors for debug level)?","29/Feb/04 01:50;arh14@cornell.edu;Yes, I need to override the logging methods because I am writing a ""facade"" log
for my application which captures all logging to a graphical window.  As far as
I know the easiest, most portable, way of doing this while still retaining all
the implementation-neutrality of jakarta commons logging is to wrap each Log
with my own application log which captures these messages.  My usage is
something like:

class SomeClass {
  private static final Log log = new MyAppLog(LogFactory.getLog(""SomeClass""));
}

class MyAppLog extends SimpleLog {
...
  public void doWrite(StringBuffer buf) {
    // write to my log window
  }
  public void info(String message) {
    super.info(message);
    chainedlog.info(message);
  }
...
}


MyAppLog will then capture all output (nicely formatted since it is a SimpleLog
subclass), but also pass it on to the destination log implementation, be it
Log4j, or jdk 1.4 logging, etc.  (technical note, I could equivalently create my
own custom facade log factory implementation but I think that is a bit of
overkill just to cache MyAppLog instances which will most likely no two will be
instantiated with the same name).

If you have any better idea that using such a facade I'm all ears.  The only
other alternative I see is to write appender implementations in every possible
back-end, to write to my application window...I don't think that is feasible or
desirable.","29/Feb/04 02:12;dennisl@apache.org;How about this:

class MyAppLog extends SimpleLog {
...
  public void doWrite(StringBuffer buf) {
    super.doWrite(buf);
    // write to my log window
  }
...
}


","29/Feb/04 02:14;rdonkin@apache.org;i'm tempted to mark this as WONT FIX for the following reason:

SimpleLog should have been marked final. (Too late to fix it now.) IMO the right way to reuse SimpleLog 
would be through delegation. So, I'd suggest implementing your facade by delegating to a SimpleLog 
instance rather than inheriting from SimpleLog.

But I'm willing to be persuaded otherwise (so I'm leaving this open for now).
","29/Feb/04 08:37;simon@ecnetwork.co.nz;I'm in favour of Aaron's proposal to add a doWrite(StringBuffer s) method.

This extra virtual method call occurs only after it is determined that the
message *will* be output. Performance is critical when determining *if* a
message will be logged, but given that we have now committed to doing IO (which
is always slow), I don't see an extra virtual method call being significant at
that point.

Robert, I think the Log interface is sufficiently complex to make
reuse-by-delegation a pain; inheritance seems cleaner to me in this case. And it
seems a quite common use-case too; using all the standard SimpleLog
functionality but directing the output to some custom destination.

I also think the doWrite method should take StringBuffer, not String, as a
parameter, just in case the doWrite method wants to tweak the output string some
more. Yes this commits the log() method to using StringBuffers forever more, but
I can't see why it would ever want to use anything else. Still, this could be
debated...","01/Mar/04 00:20;arh14@cornell.edu;Hi guys.  In answer to Robert, my original implementation was through
delegation, and this only worked because I previously arranged to override the
System.err stream with a custom stream, and then grab the byte[] chunks emitted
by SimpleLog in my custom stream implementation, and then write that to my
window.  I thought this was more convoluted and less efficient than just being
able to snag the output dierctly at its source (and it also had the side-effect
of consuming System.err output produced by code other than SimpleLog).

I can always reuse through copy/paste, so make the decision you feel is best for
the package.  I just wanted to note what I ran into.","01/Mar/04 10:13;craig.mcclanahan@sun.com;Fixed in nightly build 20040301 (and upcoming 1.0.4 release).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Create Log factory method getLog(),LOGGING-85,12340822,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,william.balloni@med.ge.com,william.balloni@med.ge.com,26/Jun/03 21:38,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.3,,,,,,,,,,,0,,,"This is an enhancement request to create a Log factory method that will allow 
getting a Log instance without the need to use the LogFactory (directly). This 
would simplify using the package as only the Log class would need to be 
imported and referenced in the typical case. This will also align the Commons 
logging API more closely with the 2 primary logging APIs it wraps, Log4J and 
JDK, without sacrificing the decoupling of the Commons logging API and concrete 
logging implementations.

The implications of this are, 1) Log will need to be changed to a class, likely 
abstract, 2) Log will use the LogFactory to get the Log object.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,21114.0,,,2004-03-07 05:08:30.0,,,false,,,,,,,,,,,,,,,148263,,,Sun Mar 07 05:08:30 UTC 2004,,,,,,0|i0spg7:,165600,,,,,,,,"07/Mar/04 05:08;craig.mcclanahan@sun.com;This change would dramatically break backwards compatibility, for (IMHO) too
little gain.  Going from:

  Log log = LogFactory.getLog(""foo"");

to

  Log log = Log.getLog(""foo"");

and removing an import clause is not worth breaking every implementation of Log
in the world.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Need Log.close method,LOGGING-84,12342060,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,apache.org@ishepherd.co.uk,apache.org@ishepherd.co.uk,14/Feb/05 22:56,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.4,,,,,,,,,,,0,,,"I can't see a way to tell Commons Logging to close a log. There is 
LogFactory.release(), but it is specified only as releasing references.

This is causing me a problem when using Logging with log4j's TelnetAppender. 
Because I can't shut down the logging, the appender never closes down its 
sockets; this prevents my application from exiting properly.","Operating System: Windows 2000
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,33561.0,,,2005-02-15 02:52:03.0,,,false,,,,,,,,,,,,,,,148262,,,Tue Feb 15 18:14:26 UTC 2005,,,,,,0|i0spgf:,165601,,,,,,,,"15/Feb/05 02:52;rdonkin@apache.org;This is an issue best solved by deployment code rather than application code. It
is very easy to come up with scenarios where JCL closing a log would have
detrimental effects.

The deployer of the application has made the choice to deploy a configuration of
a particular logging system which needs to be closed in a particular fashion.
The deployer should therefore add the appropriate lifecycle code to shutdown the
appropriate Log4J repository to the deployment.
","15/Feb/05 17:49;skitching;I've added an entry to the logging FAQ on this:
  http://wiki.apache.org/jakarta-commons/Logging/FrequentlyAskedQuestions",15/Feb/05 18:14;apache.org@ishepherd.co.uk;Thanks to both of you - I'll try the ideas in the FAQ entry.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[logging] Enhance error message for "" org.apache.commons.logging.impl.Log4JLogger does not implement Log""",LOGGING-83,12341135,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,ralfhauser,ralfhauser,03/Dec/03 16:56,29/Dec/09 14:10,07/Apr/19 20:35,29/Dec/09 14:10,1.0.3,,,,,,,,,1.0.4,,0,,,"After moving from struts1.0 to struts1.1 I got the same error message as in the
above mailing list discussion thread.

Couldn't the error message contain the names of the two jar files?
Even better if it hinted on what to do or provided a link to an explanation page!

http://jakarta.apache.org/commons/logging/userguide.html#Configuring%20the%20Logger%20Implementation
didn't really provide any help?

So shall I remove the 
-rwxr-xr-x    1 root     root       218864 Dec  2 15:37 WEB-INF/lib/log4j.jar
or the 
-rw-r--r--    1 root     root        31605 Dec  2 16:05
WEB-INF/lib/commons-logging.jar

Since all went well with log4j so far and the file is bigger, I am inclined to
dump commons-logging.jar.
On the other hand, since I am a new user of commons-dbcp-1.1.jar, that one may
rely on its own logger - so perhaps I will run into trouble due to that?
Anyway, help would be highly appreciated!","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,25156.0,,,2004-03-07 05:55:54.0,,,false,,,,,,,,,,,,,,,148261,,,Sun Mar 07 05:55:54 UTC 2004,,,,,,0|i0spgn:,165602,,,,,,,,"03/Dec/03 18:40;ralfhauser;removed commons-logging.jar, left tomcat1.27/commons/lib/commons-logging-api.jar

and now it works again - no clue whether this is a recommendable setup or not???","07/Mar/04 05:55;craig.mcclanahan@sun.com;I've improved the error message in the (fairly common) case where the user has
org.apache.commons.logging.Log available more than once in the class loading
hierarchy.

For the expected configuration when using commons logging inside Tomcat, you
should consult the Tomcat documentation, but I've had no problems with the
standard way that Tomcat packages things (commons-logging-api.jar in common/lib,
no logging libraries in my webapp, put log4j.jar in commons/lib if I want to use
it).

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging][PATCH]Additions to classloading discussion in the tech guide,LOGGING-82,12342179,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,b_stansberry@hotmail.com,b_stansberry@hotmail.com,12/Apr/05 15:09,29/Dec/09 14:23,07/Apr/19 20:35,29/Dec/09 14:23,1.0.4,,,,,,,,,1.1.0,,0,,,"Attached is the patch to the JCL tech guide I promised on the dev list a couple
weeks back.

Cheers,
Brian","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,12/Apr/05 15:11;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--JCL-tech.diff;https://issues.apache.org/jira/secure/attachment/12333455/ASF.LICENSE.NOT.GRANTED--JCL-tech.diff,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,34412.0,,,2005-04-18 04:32:46.0,,,false,,,,,,,,,,,,,,,148260,,,Mon Apr 18 04:32:46 UTC 2005,,,,,,0|i0spgv:,165603,,,,,,,,"12/Apr/05 15:11;b_stansberry@hotmail.com;Created an attachment (id=14687)
patch to xdocs/tech.xml
","18/Apr/05 04:32;rdonkin@apache.org;Good work. Committed. Many thanks.

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SimpleFileLog class,LOGGING-81,12340559,Improvement,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Won't Fix,,vladimir@bossicard.com,vladimir@bossicard.com,18/Feb/03 19:36,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.3,,,,,,,,,,,0,,,"it would be very useful to have a SimpleLog class that writes into a file (no
pipes).  Or at least to refactor SimpleLog to extract a BaseLog class with some
basic functionalities (like generating the message).","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,17157.0,,,2003-02-25 02:06:05.0,,,false,,,,,,,,,,,,,,,148259,,,Tue Aug 19 09:13:58 UTC 2003,,,,,,0|i0sph3:,165604,,,,,,,,"25/Feb/03 02:06;garyashley@3mv.biz;The SimpleLog class writes to System.err which can point to a file.  Use the 
System.setErr(PrintStream) method to modify this behavior.
See the javadoc:  
http://java.sun.com/j2se/1.3/docs/api/java/lang/System.html#err
a good tutorial: http://www.javacoffeebreak.com/java103/java103.html#output

Also, the Log4J Logger has both a FileAppender and RollingFileAppender.  

IMHO, This seems beyond the scope of the Commons Logging API.  I would look to 
Avalon, JDK1.4, or Log4J to supply this functionality.","22/Mar/03 02:42;vladimir@bossicard.com;I've written this FileLog class for my JUnit-addons package.  And you were
right, it was a little bit behond the scope of Commons-Logging.

While writing my class, I refactored the SimpleLog class and split the
functionality into two classes: AbstractLog and SimpleLog.  You can have a look
at :

<http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/junit-addons/sandbox/incubator/main/junitx/tool/logging/>

Sorry for not sending a patch.  Feel free to include this code into the
Commons-logging package.","04/Apr/03 23:24;amamment;Think this was moved to Validator by accident as it has nothing to do with 
validation....",07/Apr/03 03:37;rdonkin@apache.org;This will have to be left until after the 1.0.3 release,07/Apr/03 03:54;vladimir@bossicard.com;What can I do to have this included into 1.0.3?,"07/Apr/03 04:45;rdonkin@apache.org;it was just too late in the process to be included. the release VOTE had already
been been completed on the basis of CVS HEAD. the code to be released is now
tagged and so the release will be shipped without this patch.

if the community considers the patch important enough to warrant it, a swift
1.0.4 release could be made including this patch. 

- robert",07/Apr/03 08:19;vladimir@bossicard.com;Fine.  I'll wait for 1.04,07/Apr/03 16:37;rdonkin@apache.org;commons-logging 1.0.3 released,"19/Aug/03 07:55;yoavs@computer.org;-1 On this addition.  Commons-logging should really stay away from 
implementations are much as possible -- log4j, avalon, jdk1.4 all have this 
feature.","19/Aug/03 09:13;craig.mcclanahan@sun.com;I'm also -1.  commons-logging is not and should not be in the business of
providing robust logging *implementations* -- it is designed to be a wrapper
around existing logging technologies.  Had I to do it over again, I probably
would have argued against including even SimpleLog in the basic package.

Besides, all you have to do is redirect where System.err writes to and you've
accomplished what this bug report wants.  You can look at what recent versions
of Tomcat do in this regard.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging][PATCH] Javadoc for jul.Log interface,LOGGING-80,12342940,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,boris.unckel.mlg@gmx.net,boris.unckel.mlg@gmx.net,25/Feb/06 20:48,18/Nov/06 12:52,07/Apr/19 20:35,18/Nov/06 12:52,1.0.4,,,,,,,,,1.1.0,,0,,,Added missing return types.,"Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,25/Feb/06 20:50;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--Log_javadoc.patch;https://issues.apache.org/jira/secure/attachment/12334045/ASF.LICENSE.NOT.GRANTED--Log_javadoc.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,38783.0,,,2006-03-01 08:57:27.0,,,false,,,,,,,,,,,,,,,148258,,,Wed Mar 01 08:57:27 UTC 2006,,,,,,0|i0d7kv:,75004,,,,,,,,"25/Feb/06 20:50;boris.unckel.mlg@gmx.net;Created an attachment (id=17797)
Javadoc - missing return types
",01/Mar/06 08:57;skitching;Patch committed. Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Online JCL 1.0.4 API Javadoc missing,LOGGING-79,12342697,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,barry@alltc.com,barry@alltc.com,09/Nov/05 14:00,29/Dec/09 14:22,07/Apr/19 20:35,29/Dec/09 14:22,1.0.4,,,,,,,,,1.0.4,,0,,,"I searched to see if someone has posted about this, so sorry if it has
already been reported.  The root for the API Javadoc of Commons Logging
1.0.4 is empty:

http://jakarta.apache.org/commons/logging/api/","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37420.0,,,2005-11-10 06:25:54.0,,,false,,,,,,,,,,,,,,,148257,,,Wed Jan 18 13:03:28 UTC 2006,,,,,,0|i0d7l3:,75005,,,,,,,,"10/Nov/05 06:25;dennisl@apache.org;Here's a more detailed description.

Start from the commons-logging home page
 http://jakarta.apache.org/commons/logging/

Navigate through the menus
/Commons Logging
    ...
    /1.0.4 Release
        /Documentation 

This page
 http://jakarta.apache.org/commons/logging/commons-logging-1.0.4/docs/
has a broken link.
The link text is ""JavaDoc API documents"" and the URL is
 http://jakarta.apache.org/commons/logging/api/index.html

The correct URL for this should be
 http://jakarta.apache.org/commons/logging/commons-logging-1.0.4/docs/apidocs/","18/Jan/06 13:03;skitching;The docs are there now, so closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] The Log4JCategoryLog class does not get Serialized in WLS 8.1. Given below is the stackTrace,LOGGING-78,12341251,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,prashanth_kumar@dstinnovis.com,prashanth_kumar@dstinnovis.com,10/Feb/04 03:36,29/Dec/09 14:21,07/Apr/19 20:35,29/Dec/09 14:21,,,,,,,,,,1.0.4,,0,,,"ava.io.NotSerializableException: org.apache.commons.logging.impl.Log4JCategoryL
og
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1054)
        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java
:1330)
        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:13
02)
        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.jav
a:1245)
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)
        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java
:1330)
        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:13
02)
        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.jav
a:1245)
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)
        at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:278)
        at java.util.ArrayList.writeObject(ArrayList.java:530)
        at sun.reflect.GeneratedMethodAccessor278.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces
sorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:324)
        at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:79
5)
        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:12
94)
        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.jav
a:1245)
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)
        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java
:1330)
        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:13
02)
        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.jav
a:1245)
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)
        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java
:1330)
        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:13
02)
        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.jav
a:1245)
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)
        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java
:1330)
        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:13
02)
        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.jav
a:1245)
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1052)
        at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:278)
        at weblogic.rmi.internal.CBVOutputStream.writeObject(CBVOutputStream.jav
a:78)
        at weblogic.rmi.internal.ServerRequest.unmarshalThrowable(ServerRequest.
java:327)
        at weblogic.rmi.internal.ServerRequest.getThrowable(ServerRequest.java:5
9)
        at weblogic.rmi.internal.ServerRequest.sendReceive(ServerRequest.java:18
4)
        at weblogic.rmi.cluster.ReplicaAwareRemoteRef.invoke(ReplicaAwareRemoteR
ef.java:284)
        at weblogic.rmi.cluster.ReplicaAwareRemoteRef.invoke(ReplicaAwareRemoteR
ef.java:244)","Operating System: Solaris
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,26802.0,,,2004-02-28 05:29:45.0,,,false,,,,,,,,,,,,,,,148256,,,Sat Feb 28 05:29:45 UTC 2004,,,,,,0|i0d7lb:,75006,,,,,,,,"28/Feb/04 05:29;dennisl@apache.org;This is fixed in cvs for org.apache.commons.logging.impl.Log4JLogger.
You should use Log4JLogger instead of Log4JCategoryLog, because the latter has
been deprecated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The syntax error exists in the sample code of package-summary.html,LOGGING-77,12341133,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Duplicate,,onorat@javapro.jp,onorat@javapro.jp,02/Dec/03 19:52,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.3,,,,,,,,,,,0,,,"The syntax error exists in the sample code of package-summary.html.
http://jakarta.apache.org/commons/logging/apidocs/org/apache/commons/logging/pac
kage-summary.html
A problem is in the contents of a Quick Start Guide section. 

    Log log = LogFactory.getLog(this.class);

""this.class"" shold be ""this.getClass()"", ""Foo.class"" or something else.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,25135.0,,,2004-01-07 10:19:56.0,,,false,,,,,,,,,,,,,,,148255,,,Wed Jan 07 10:19:56 UTC 2004,,,,,,0|i0d7lj:,75007,,,,,,,,"07/Jan/04 10:19;dennisl@apache.org;

*** This bug has been marked as a duplicate of 18889 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Jdk14Logger Throws NullPointerException,LOGGING-76,12340262,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,glm@hilbertinc.com,glm@hilbertinc.com,12/Jul/02 20:05,29/Dec/09 17:05,07/Apr/19 20:35,29/Dec/09 17:05,1.0,,,,,,,,,1.0.1,,0,,,"When passed a null reference to all of the logging methods, a NullPointer
exception will result at the .toString() method call.  I changed all of the 

  message.toString()

to 
 
  String.valueOf(message)

This was obsfucating another error in Struts.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,12/Jul/02 20:06;glm@hilbertinc.com;ASF.LICENSE.NOT.GRANTED--Jdk14Logger.java;https://issues.apache.org/jira/secure/attachment/12331985/ASF.LICENSE.NOT.GRANTED--Jdk14Logger.java,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,10737.0,,,,,,false,,,,,,,,,,,,,,,148254,,,Fri Jul 12 20:06:19 UTC 2002,,,,,,0|i0d7lr:,75008,,,,,,,,"12/Jul/02 20:06;glm@hilbertinc.com;Created an attachment (id=2328)
Changed code to avoid NullPointerException
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] LogFactory is not thread-safe,LOGGING-75,12342816,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,maartenc,maartenc,23/Dec/05 18:23,29/Dec/09 14:27,07/Apr/19 20:35,29/Dec/09 14:27,,,,,,,,,,1.1.0,,0,,,"Hi,

the LogFactory class is not thread-safe. All access to the factories variable 
should be in synchronized code. This is sometimes the case (like in the 
LogFactory.releasXXX() methods), but in the LogFactory.getFactory() method, 
this variable is accessed in a non-synchronized way.

regards,
Maarten","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,38026.0,,,2006-01-18 13:18:22.0,,,false,,,,,,,,,,,,,,,148253,,,Thu Jan 19 06:59:57 UTC 2006,,,,,,0|i0d7lz:,75009,,,,,,,,"18/Jan/06 13:18;skitching;I don't believe this issue is valid. The Hashtable javadoc specifies that this
class is internally synchronized (ie already thread-safe) which will prevent
race conditions between concurrent calls to get/put.

There is potentially an issue with the removeAll method, as a
ConcurrentModificationException could occur if one thread is in removeAll while
another is adding an entry to the table. However removeAll should only ever be
called by the container during container shutdown so this is not expected to
ever be possible in practice.

Adding synchronisation everywhere just to avoid a theoretical conflict with
removeAll isn't a good idea; that's a significant performance hit.

If I've got this wrong, please let me know. Otherwise I will close this issue in
a couple of days.","18/Jan/06 13:58;nbeyer;The Hashtable is synchronized using synchronized keywords on the methods, which
means that that lock object is the instance itself. As such, everything is
waiting on the same lock, so releaseAll is safe because it synchronizes on the
instance before manipulating anything and the other mutation points, like the
cacheFactory method would be blocked during a Hashtable.put if releaseAll were
in process.","19/Jan/06 04:49;maartenc;The releaseXXX() methods are safe, but the getFactory() is not.

It is possible that 2 threads calling the getFactory() method will receive 
different LogFactory instances for the same classloader. I'm not saying that 
you should make getFactory() synchronized, but you should say more explicitly 
in the javadoc that the getFactory() method not necessarely returns the same 
factory instance in a multithreaded environment.

Consider the following simple scenario:
No Factory has been created yet. 2 Different threads have just been started. 
Thread1 calls LogFactory.getFactory(). This method will look in the cache, but 
since it is the first time the factory is retrieved, the cache will return 
null and the thread will continue creating the factory instance. In the middle 
of the getFactory() method, thread1 is suspended and thread2 becomes active. 
Thread2 calls getFactory(). The cache still returns null! (Thread1 didn't put 
the factory instance in the cache yet). So thread2 will continue creating a 
new factory instance. Both threads will end up having their own instance of a 
LogFactory. One of them is cached, the other not.

In most cases, this is no big deal: it's just an instance of a factory that 
has been created too much. This won't cause problems in > 99% of the 
applications.

But it could get worse: if you now call LogFactory.releaseAll(), one instance 
of the factory won't be released at all (because it's not present in the 
cache)! If your factory implementation consumes a lot of resources, this could 
cause a serious negative impact on your system.

regards,
Maarten","19/Jan/06 06:59;rdonkin@apache.org;I agree that the performance advantages outweight the downside but it should be
documented. I've committed a note to the getFactory method javadocs which should
be suitable.

Please check and if not satisfactory the please reopen and attach a patch for
the documentation.

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Commons logging jar files causes weblogic to throw errors,LOGGING-74,12340690,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Critical,Fixed,,avinay_2000@yahoo.com,avinay_2000@yahoo.com,28/Apr/03 23:37,29/Dec/09 16:29,07/Apr/19 20:35,29/Dec/09 16:29,1.0.3,,,,,,,,,1.0.4,,0,,,"Hi I get StringIndexOutOfBounds Exception when I place commons-logging.jar and 
commons-logging-api.jar in the WEB-INF/lib folder of my weblogic 6.1 
application.","Operating System: other
Platform: Sun",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,19390.0,,,2003-04-29 00:26:30.0,,,false,,,,,,,,,,,,,,,148252,,,Sun Aug 17 08:54:06 UTC 2003,,,,,,0|i0d7m7:,75010,,,,,,,,28/Apr/03 23:40;avinay_2000@yahoo.com;This happens for commons logging 1.0.3,"29/Apr/03 00:26;craig.mcclanahan@sun.com;It's pretty much impossible for anyone to help you with this, unless you can
post a stack trace, details of how you're configuring commons-logging, and (best
of all) a small webapp that illustrates the problem.

Without those, this bug report is likely to get closed with no action.
","29/Apr/03 01:57;avinay_2000@yahoo.com;Please refer Bug# 19108. Seems this bug is not yet fixed and reappears for 
commons logging 1.0.3

","30/Apr/03 01:33;mohankishore@yahoo.com;Can you try using the jar from the nightly build. The message stack seem to 
indicate that the problem was due to presence of log4j.jar entry in commons-
logging.jar's manifest file.

That has been fixed on Apr 17, Rev1.4 (after the 1.0.3 release - Rev1.3)
","17/Aug/03 08:54;craig.mcclanahan@sun.com;The classpath entry in the JAR file has been removed, so I am presuming that
this is no longer an issue.  Please re-open the report (with a stack trace) if
that is not the case.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] TCCL problem in J2EE Container,LOGGING-73,12342380,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,mkopp,mkopp,18/Jul/05 19:00,29/Dec/09 22:17,07/Apr/19 20:35,29/Dec/09 22:17,1.0.4,,,,,,,,,1.1.0,,1,,,"Everybody that uses commons-logging in an J2EE Container (especially jboss) has
problems when the TCCL is not the same as the current ClassLoader. The solution
cannot be to drop the commons-logging.jar out of the ear/war file, as it would
prevent to have an application specific logging instance.

Commons-logging preferes the TCCL which is OK. But if it finds a Logger in the
TCCL that does not fit to the current Log interface it throws an error instead
of trying the current CL.

I propose to change this. I will attach a changed LogFactoryImpl.java. The
changed factory still prefers TCCL, but will try the current class loader if the
LOG_INTERFACE is not assignable for the class found via TCCL.

It allows us to run more painlessly in an J2EE Container and to keep
commons-logging class loader preferences.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,18/Jul/05 19:01;mkopp;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java;https://issues.apache.org/jira/secure/attachment/12333635/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,35774.0,,,2005-07-18 20:33:42.0,,,false,,,,,,,,,,,,,,,148251,,,Tue Dec 29 22:17:29 UTC 2009,,,,,,0|i0d7mf:,75011,,,,,,,,"18/Jul/05 19:01;mkopp;Created an attachment (id=15695)
proposed patch
","18/Jul/05 20:33;skitching;Thanks for reporting this, and for your proposed code.

I believe that this functionality has already been added to the commons-logging
trunk. See the current release notes for details:
http://svn.apache.org/repos/asf/jakarta/commons/proper/logging/trunk/RELEASE-NOTES.txt

Hopefully a commons-logging 1.1 release isn't too far away - though that depends
on how much time the committers on commons-logging can find.

If you could download and compile the latest commons-logging code, and see if it
resolves your issue that would definitely be appreciated. If it does, then
please close this entry.

In future, providing a patch file (ie generated by ""svn diff"" or ""diff -u"")
would be appreciated instead of (or as well as) a full source code attachment.
It's hard to see what changes you might have made by looking at the the attached
file.

Thanks again.","18/Jul/05 20:53;mkopp;Thanks for the fast reply.

I checked the current trunk and unfortunatelly I do not think that the changes help.

Consider you have a cross Container call (WebContainer to JCA Container of
another Application).

There is not parent-child releation ship between the TCCL (Web) and the
ClassLoader of the JCA Adapter. You would still take the TCCL in this case.
There would be no implementation available in the TCCL from the Web container
that would implement the Log interface from the JCA Container. It would never work!

The getBaseClassLoader method would return the TCCL if no base is found. You
should add another loop that explictly tries the thisClassLoader if the TCCL is
unsuccessful.

If you add this, then it should work in nearlly every case","18/Jul/05 21:07;skitching;You may have to help me out here - I'm not familiar with JCA.

By ""cross-container call"" do you mean this?
 * shared classloader A defines some interface I
 * classloader B is a child of A and provides some class that implements I
 * classloader C contains some webapp. Code here invokes a lookup method
   that returns an object of type I, where the actual concrete type is A.
 * the webapp then invokes a method on I
 * the actual method on A calls commons-logging

If not, could you please spell out exactly what classloader relationships you
are addressing?","18/Jul/05 21:37;mkopp;JBoss Class Loader A (commons-logging available here)
Application B with ClassLoader B. Child of A
Application C with ClassLoader C. Child of C (commons-logging deployed in here)

We have a Child First delegation as is appropriate in a J2EE Container!

Application B initiates thread and makes a call to Application C.

Application C contains the commons-logging in its own classloader C. We need
this in order to have our own logging instance apart from the jboss instance.
The Log interface used in application C is loaded by ClassLoader C as it is a
'static' link. commons-logging will take the Log implementation from the TCCL
which either comes from CL B or CL A. None of them will implement Log from CL C.

This is a fairly common case in jboss. The horror is that we do not even use
commons-logging directly, but a lot of third-party does. That and the fact that
commons-logging is part of the jboss distribution and visiable to all
applications, even if I have isolated class loaders.","18/Jul/05 21:38;mkopp;Small Type:

JBoss Class Loader A (commons-logging available here)
Application B with ClassLoader B. Child of A
Application C with ClassLoader C. Child of A (commons-logging deployed in here)

ClassLoader C is of course a child of A","19/Jul/05 15:35;skitching;Yep, your description #5 matches my #4 (though yours is a bit better phrased :).

This makes things very ugly for commons-logging. The LogFactory keeps a map of
configurations by context-classloader. So even with your proposed fix, any app
that calls into C will cause C's LogFactory to create another LogFactoryImpl for
that classloader. That will probably prevent the calling app's classloader from
being garbage-collected among other nasty issues.

Here's some initial thoughts on a full fix for this:

Basically, if LogFactory sees that TCCL is not related to its classloader, then
it should *not* retain any strong references to that TCCL, and in particular not
use it as a key into the factories map. But if it doesn't do that, then every
time getLog() is called and it can't find an entry in its factories map then it
needs to walk the list of ancestors for the TCCL to see whether it is among
them: if yes, then this is simply the ""new context"" scenario; if no then this is
the ""inter-app-call"" scenario so it needs to ignore the TCCL and use
LogFactory.getClassLoader as the key instead.

Hmm. But there's another scenario in which the TCCL can be unrelated to the
classloader for LogFactory - the jboss ""UnifiedLoaderRepository"" (as explained
by Brian S.). But in that case we *must* use the TCCL in order to get sane
logging configuration behaviour (remember that the whole point of trying to load
the logging adapter classes via the TCCL is so that webapps can provide their
own adapters, and so that logging config files in the webapp-specific classpath
are seen).

Currently, I don't see *any* way to handle this with JBoss. The combination of
the UnifiedLoaderRepository and inter-app-calls where the TCCL is set to the
caller appears initially unsolvable to me - not just for commons-logging, but
for any logging system at all which can be configured on a per-app basis.

I'll give this some more thought. All suggestions on how to resolve this are
very welcome - though it might be more convenient to post them to commons-dev
(with subject line starting [logging]) rather than having a discussion on these
awkward web forms.","19/Jul/05 16:23;mkopp;I'm not sure about your factory map talking but consider this.

log4j can do what I want without problems. It is rather simple, when you want to
have your own instance, you need the jar file in your own class loader. In a
proper j2ee environment (child first delegation), this will always lead to a new
logger instance).

I agree that jboss's UnifiedClassLoader is a problem in that regard. But I see
it this way. If you want to have your own logging instance, then work without
that damned UnifiedClassLoader.

The thing is that these 'Inter-App' Calls are happening all the time.

jmx-console: The TCCL is the WebClassLoader and the current is the one of the
MBean (Application)
jmx-scheduling: The TCCL is the one of the TimerMBean (jboss or jdk) and the
current is the one of the MBean (Application)
JCAPoolFiller Thread: The TCCL is the jboss-one and the current is the
Applications ClassLoader.

I think that my a approach can still work.
1. Try commons-logging approach first (TCCL)
2. If no logger is found (not assignable?) try the current class loader

Agreed it might not always be the correct logging instance, but at least it
would not generate an error and the log would be written.","19/Jul/05 17:11;skitching;Here's the problem I mentioned earlier in more detail:

LogFactory always keeps a map of LogFactoryImpl instances keyed by context
classloader so that when deployed in a shared classloader each webapp gets an
independent logging setup.

When webapp B makes an inter-app call to C. Code in C calls LogFactory.getLog.
tries to look up a LogFactoryImpl by TCCL in its map. There isn't one, so it
goes into its discovery process. This is what is currently causing problems, but
assuming we fix it somehow [as per your suggestion] a LogFactoryImpl object will
be returned. LogFactory then caches it using the current TCCL. 

Later someone undeploys webapp B. Normally, the reference count for the TCCL for
B will drop to zero at that point, and all the classes associated with B will be
garbage-collected (including all the static member variables, etc). However
because the map in the LogFactory class loaded by C has a key that references B
this won't happen.

Log4j's default setup works because it effectively has two modes: ""server"" and
""app"". The default is ""app"", where it doesn't care about TCCL and always uses
the default hierarchy. However it can be configured to use a
ContextHierarchySelector or somesuch name; when deployed via a shared classpath
the user needs to enable this selector in order to get independent logging for
each app. Note that if you enabled log4j's ContextHierarchySelector in
classloader C you would get the same memory leakage problem as JCL suffers.

JCL is effectively always in ""server"" mode, with the assumption that if it was
actually deployed in a webapp's classpath then it is a server with only one
client TCCL - the app. However the ""inter-app"" stuff screws this up because JCL
deployed via a webapp ends up seeing multiple client TCCLs.

So I guess we could provide a config option for LogFactory which tells it to act
in server or client mode, and if in client then it avoids using the TCCL.

This will be a nuisance for every system that deploys logging libs via a shared
classloader (and that is a *lot* of them). And I don't know how we would provide
any kind of ""backward compatibility"". Maybe there is some way to do reasonable
auto-detection of client vs server mode? Like walk the classloader tree looking
for a copy of JCL at a higher level and assume client mode if one is found? Not
sure that's reliable enough...

Maybe the answer is two different JCL jars: a client jar and a server jar? That
sounds nicer. webapps bundle the client jar, and that only ever has one
LogFactoryImpl. In this case we also know that adapters should be located via
LogFactoryImpl's classloader so that fixes your reported problem too. The server
jar has an implementation that uses a Map keyed by TCCL and locates adapters via
TCCL. This is a significant change, though, with API breakage.","19/Jul/05 17:24;mkopp;I agree that is a huge change. But I think it is a also necessary one. After all
I'm not the only one having this kind of problem. And we already invested many
hours finding issues around that.

So I hope you find a good solution about this. I would really appreciate it.","19/Jul/05 18:13;skitching;I agree it is necessary to address this scenario. Thanks very much for your
explanation of the issues. One of the problems with commons-logging is that
there is very little information on the situations it has to handle. Slowly this
information is being built up, and the information you have provided here is
very useful indeed.","19/Jul/05 18:20;mkopp;Well the point of opensource is to have a community in order to improve the
quality right? So the users should not only complain, but help to make it better.

So I'm glad to be of help to the project. In the end I'm helping myself.","19/Jul/05 19:19;rdonkin@apache.org;I think I've managed to get my head around this one...

Simon's analysis seems good but I'd like to add a few random comments...

Exotic ClassLoaders
-----------------
When used in a JCA, this is a use case where JCL really can't gather enough information to configure 
itself correctly. It's tough. It's good to have a solid use case for exotic classloading. I think when I was 
thinking about exotic classloaders, I thought that there was something that could be done for cases 
such as this: along the lines of recognizing that TCCL is busted and default to use the class classloader. 

Good point from Simon (though) that busted TCCL's should be not cached. Would need to think about 
performance but maybe bad performance is better than total refusal to run...

Static Binding
-----------
If I've understood this correctly, the client and server jars would use static binding to determine the 
LogFactoryImpl to be use. There's a certain amount of convergence here: DON_QUIXOTE and SLF4J. I'd 
prefer to implement a long term solution (prune back to a minimal set of statically bound classes and 
interfaces) rather than a short term fix (client and server jars). I'm not so religous as Simon about jar 
proliferation but he's right that more jars need more explaination and so more quality documentation.

I've been wanting for a while to look at using byte code engineering to statically bind different discovery 
strategies.  Michael Kopp's is an advanced use case. If he's using a child-first classloader then 
(hyopthetically) he could just run the enhancer over all the jars and rewire the discovery. Maybe one day 
I'll find the time to get this working...","19/Jul/05 19:30;skitching;Yes, the DON_QUIXOTE experimental branch of JCL did come to mind while I was
writing that. As we're committed to a non-compatible 1.1 release it might be
time to revisit that.

The problem with going to a fully refactored release as we've looked at in some
of the more radical restructures is of course that it will take many months to
get that done at our current rate. Still, there's no point in putting out a new
release that doesn't properly fix the known problems.

BTW, if anyone out there wishes to *hire* me to work on this full-time to get a
new release out sooner, I'm available :-)","20/Jul/05 02:03;rdonkin@apache.org;I won't have time today to code anything up right now but I have been thinking and playing around with 
various exotic cases (such as the JCA). I suspect that the problems in these cases arise when (as in this 
case) code has been loaded is a sibling (or cousin) load to the application code. In this case, TCCL either 
cannot load the implementation classes or when it can load them but they are defined by an incompatible 
loader.

I think that it should be possible to diagnose this case by checking the Log class loaded by TCCL. If it 
cannot be loaded or is not compatible with the Log class loaded by the class classloader, then TCCL 
should not be used by JCL.
","03/Aug/05 14:24;b_stansberry@hotmail.com;I haven't had a chance to fully digest this thread, so please forgive me if I'm
way off base.

In the specific scenario Michael described, JCL is available in a classloader
that is a common parent of both apps involved in the ""Inter-App"" call.  If the
webapp deployed commons-logging-adapters.jar instead of the full
commons-logging.jar there should be no Log incompatibility problems nor any
memory leak.  The logging would end up going to the loggers associated with the
TCCL, which may or may not be the desired behavior.  But that seems more like a
problem with ensuring the TCCL is properly set when a thread crosses an app
boundary and not something JCL can fix. (e.g. it seems to me that if a thread
spawned by a timer service calls into an MBean, the TCCL should be set to the
MBean's classloader before the call is made).

What I'm suggesting of course wouldn't work if JCL wasn't available in a shared
classloader, so I don't mean to imply some of the ideas raised on this thread
are unneeded.  But a commons-logging-adapters.jar approach might be a good
workaround for the issue Michael specifically raised.  (Such a jar doesn't exist
in JCL 1.0.4, the latest official release, but it's simple enough to create one
by taking commons-logging.jar and removing all classes found in
commons-logging-api.jar).","03/Aug/05 14:42;mkopp;1. The J2EE Spec does not specify which classloader the TCCL should contains.
only that it should be there.
2. Most AppServers won't have JCL in the common-classloader, jboss is the
exception I would say. The common classloader there contains way to much.

jboss seems to ignore the TCCL most of the time.
It all comes down to the fact that we cannot know what the TCCL contains at a
given time. Because it is not defined!
I had this problem now in:

- jmx-console calling mbean with Web TCCL
- jmx-console calling mbean calling ejb with Web TCCL in the ejbCreate call!!!
- instantiation of ManagedConnectionFactory/ManagedConnection (JCA) by jboss JCA
Pool Loader with jboss TCCL

Of course this is all in jboss, but as it is defined nowhere (at least I
couldn't find it) I consider TCCL not reliable!!

And many more. I changed the 1.0.4 commons-logging the way it is described in my
patch and replaced it in jboss and all other apps. Now it works as expected.","05/Oct/05 10:13;dvoytenko@reveredata.com;Hi,

Somewhat related problem with using TCL in the shared environment (Tomcat). For 
instance I have application A (classloader A) and class A1 that invokes class 
S1 in the shared classloader S. Class S1 has static initializer for logger 
(static Log log = LogFactory.getLog(...)). Provided A1 will be the first one to 
access S1, JCL's LogFactory will use instance cached with A classloader and 
will be (possibly) creating logs within the same A classloader. Further if A is 
undeployed, there will be no way to notify S that it's Log instance is not up-
to-date anymore. This would lead to the memory leaks, even if ClassLoader is 
removed from LogFactory's cache. In addition, such situation will be illogical -
 why should child's classloader used for initialization of parent's classloader?

A propose a solution that is a compromize b/w server/client idea and static 
linking would be to have a setting (in the system properties) that would 
instruct JCL to not use TCCL (e.g. org.apache.logging.DISABLE_TCCL). In this 
mode, inspection and cache would be performed in the classloader of the 
LogFactory. This solution will work good for both: shared environments (Tomcat 
or JBoss with UCL) and for deployments with JCL in the WEB-INF/lib.
",05/Oct/05 10:43;dvoytenko@reveredata.com;i moved this proposal into the separate issue (36927).,"17/Feb/06 05:42;rdonkin@apache.org;Please retest with latest release candidate. This can be found in
http://people.apache.org/~rdonkin/commons-logging.

Use of the TCCL is now flaggable but I suspect that logging may function (though
the per application configuration may not be too great) so please test both.

","17/Feb/06 15:45;mkopp;Are the interfaces compatible with the 1.0X version? As you might remember we
are not using commons-logging directly but through thirdparty. And of course we
cannot change that code...","17/Feb/06 19:15;skitching;The API is compatible with 1.0.x for ""normal"" uses of JCL.

There are some minor incompatibilites for code that extends commons-logging
classes; this is a pretty rare thing to do, however.

See the release notes for full details.",29/Dec/09 22:17;dennisl@apache.org;According to Simon this was fixed in 1.1.0.,,,,,,,,,,,,,,,
LogFactoryImpl.guessConfig overrides configuration,LOGGING-72,12340576,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,thundur@mayaxatl.org,thundur@mayaxatl.org,01/Mar/03 20:43,29/Dec/09 16:35,07/Apr/19 20:35,18/Nov/06 12:48,,,,,,,,,,1.0.3,,1,,,"problem occurred in version 1.0.2-release.

When using another Log implementation than log4j (e.g. SimpleLog), but with
log4j available, LogFactoryImpl.guessConfig creates
org.apache.commons.logging.impl.Log4jFactory as a proxy factory anyway, and in
this way unwantedly overrides your custom setting.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,17561.0,,,2003-03-31 08:22:24.0,,,false,,,,,,,,,,,,,,,148250,,,Wed Apr 02 09:56:16 UTC 2003,,,,,,0|i0d7mn:,75012,,,,,,,,31/Mar/03 08:22;craig.mcclanahan@sun.com;*** COM-449 has been marked as a duplicate of this bug. ***,"02/Apr/03 09:56;craig.mcclanahan@sun.com;The configuration override was actually a side effect of Log4JLogger, rather
than Log4jFactory, and that has been removed.  In addition, per discussion on
COMMONS-DEV, the Log4jFactory class has been deprecated, and use of a proxy
instance of the class removed from the implementation of LogFactoryImpl.  Fixed
in nightly build 20030402.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] print/display the wire log!,LOGGING-71,12341634,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Cannot Reproduce,,tgerdes@oldrepnatl.com,tgerdes@oldrepnatl.com,13/Aug/04 02:33,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.4,,,,,,,,,,,0,,,"I have followd the instructions on how to setup logging in my java class found 
on the web page for HTTPCLIENT for Jakarta Commons.  I am using ""simplelog"" yet 
nothing appears when I run the class.  I do not know how to print or display 
the contents of the log!  The web page does not give any example code of how to 
display or print the log!  Only, how to set the system properties!  I have set 
them as follows!  How, do I view the log!  Here is how I set the system 
properties in my java class!

  System.setProperty
(""org.apache.commons.logging.Log"", ""org.apache.commons.logging.impl.SimpleLog"");
  System.setProperty
(""org.apache.commons.logging.simplelog.showdatetime"", ""true"");
  System.setProperty
(""org.apache.commons.logging.simplelog.log.httpclient.wire"", ""trace"");
  System.setProperty
(""org.apache.commons.logging.simplelog.log.org.apache.commons.httpclient"", ""trac
e"");","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,30632.0,,,2005-02-09 07:20:26.0,,,false,,,,,,,,,,,,,,,148249,,,Wed Feb 09 07:20:26 UTC 2005,,,,,,0|i0d7mv:,75013,,,,,,,,"09/Feb/05 07:20;rdonkin@apache.org;I've tested the latest httpclient documentation and it seems to be in order. 

Posting a question to the user list would probably have provided more
productive. If anyone feels the need to re-open this, please supply a unit test
demonstrating the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] small bug in guide.html,LOGGING-70,12341495,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,tobrien@discursive.com,tobrien@discursive.com,08/Jun/04 00:05,29/Dec/09 16:24,07/Apr/19 20:35,29/Dec/09 16:24,,,,,,,,,,1.0.4,,0,,,"In guide.html, there is a link towards the bottom of the page 
to ""http://jakarta.apache.org/commons/logging/How%20Can%20I%20Change%20The%
20Logging%20System%20Configuration?"".  Clicking on this link causes a 404.

This link should be to the anchor for the next section.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,29430.0,,,2004-06-08 04:12:59.0,,,false,,,,,,,,,,,,,,,148248,,,Tue Jun 08 04:12:59 UTC 2004,,,,,,0|i0d7n3:,75014,,,,,,,,"08/Jun/04 04:12;rdonkin@apache.org;good spot Tim 8-)

Patched. Many thanks.

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Various improvements to generated documentation,LOGGING-69,12342871,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,rahul@apache.org,rahul@apache.org,22/Jan/06 03:44,29/Dec/09 14:26,07/Apr/19 20:35,29/Dec/09 14:26,,,,,,,,,,1.1.0,,0,,,"All item numbers under subsequent patches will be in reference to:

http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=113786760531115&w=2","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,22/Jan/06 03:47;rahul@apache.org;ASF.LICENSE.NOT.GRANTED--cvs-usage.xml;https://issues.apache.org/jira/secure/attachment/12334002/ASF.LICENSE.NOT.GRANTED--cvs-usage.xml,22/Jan/06 03:48;rahul@apache.org;ASF.LICENSE.NOT.GRANTED--issue-tracking.xml;https://issues.apache.org/jira/secure/attachment/12334003/ASF.LICENSE.NOT.GRANTED--issue-tracking.xml,22/Jan/06 03:45;rahul@apache.org;ASF.LICENSE.NOT.GRANTED--logging_javadoc_warnings.patch;https://issues.apache.org/jira/secure/attachment/12334000/ASF.LICENSE.NOT.GRANTED--logging_javadoc_warnings.patch,22/Jan/06 03:45;rahul@apache.org;ASF.LICENSE.NOT.GRANTED--logging_no_tasklist.patch;https://issues.apache.org/jira/secure/attachment/12334001/ASF.LICENSE.NOT.GRANTED--logging_no_tasklist.patch,,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,38344.0,,,2006-01-22 07:01:33.0,,,false,,,,,,,,,,,,,,,148247,,,Sun Jan 22 07:01:33 UTC 2006,,,,,,0|i0d7nb:,75015,,,,,,,,"22/Jan/06 03:45;rahul@apache.org;Created an attachment (id=17473)
Item #2
","22/Jan/06 03:45;rahul@apache.org;Created an attachment (id=17474)
Item #3
","22/Jan/06 03:47;rahul@apache.org;Created an attachment (id=17475)
Item #4 ( New file for SVN info, drop in xdocs/ )
","22/Jan/06 03:48;rahul@apache.org;Created an attachment (id=17476)
Item #4 ( New file for BZ info, drop in xdocs/ )
","22/Jan/06 04:24;rahul@apache.org;(From update of attachment 17475)
Didn't mention the file name earlier (cvs-usage.xml).
","22/Jan/06 07:01;dennisl@apache.org;Patches applied with modifications.
Thanks Rahul.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect test for availability of log4j,LOGGING-68,12341791,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,nntp_ds@fastmail.fm,nntp_ds@fastmail.fm,08/Oct/04 15:35,29/Dec/09 16:15,07/Apr/19 20:35,29/Dec/09 16:15,1.0.3,,,,,,,,,1.1.0,,0,,,"Corrrected code from LogFactoryImpl is below.  Log4j is only available if the
the class loader that loads Log4JLogger can load Logger.  The orginal test
is incorrect when both of these conditions are met
a.) the context loader can load Logger ( directly or not ), and
b.) Log4jLogger is actually loaded by a parent of the loader that loads Logger.

The failure of course occurs because Log4jLogger has a direct dep on Logger.

    protected boolean isLog4JAvailable() {

        try {
             
            /* <incorrect> */
            //loadClass(""org.apache.log4j.Logger"");
            //loadClass(""org.apache.commons.logging.impl.Log4JLogger"");
            /* </incorrect> */
           
loadClass(""org.apache.commons.logging.impl.Log4JLogger"").getClassLoader().loadClass(
""org.apache.log4j.Logger"" );
            return (true);
        } catch (Throwable t) {
            return (false);
        }
    }","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31597.0,,,2004-10-17 16:04:51.0,,,false,,,,,,,,,,,,,,,148246,,,Sun Oct 17 16:04:51 UTC 2004,,,,,,0|i0d7nj:,75016,,,,,,,,"17/Oct/04 16:04;rdonkin@apache.org;Patch committed. Many Thanks.

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Logging] Improvements to maven build,LOGGING-67,12342616,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,brettporter,carlos,carlos,11/Oct/05 08:09,29/Dec/09 16:00,07/Apr/19 20:35,29/Dec/09 16:00,,,,,,,,,,1.1.0,,0,,,"Improvements to project.xml updating deprecated tags and making it easier for
maven 2 users.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,11/Oct/05 08:09;carlos;ASF.LICENSE.NOT.GRANTED--logging.patch;https://issues.apache.org/jira/secure/attachment/12333842/ASF.LICENSE.NOT.GRANTED--logging.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,37014.0,,,,,,false,,,,,,,,,,,,,,,148245,,,Tue Oct 11 08:09:17 UTC 2005,,,,,,0|i0d7nr:,75017,,,,,,,,"11/Oct/05 08:09;carlos;Created an attachment (id=16648)
A patch for current code in svn
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deprecation  in 1.0.2,LOGGING-66,12340340,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,seapwc@halcyon.com,seapwc@halcyon.com,29/Sep/02 14:12,29/Dec/09 16:59,07/Apr/19 20:35,29/Dec/09 16:59,1.0.1,,,,,,,,,1.0.3,,0,,,"[javac]
.......\logging\src\java\org\apache\commons\logging\impl\Log4JCategoryLog.java:
137: warning: 
setPriority(org.apache.log4j.Priority) in org.apache.log4j.Category 
has been deprecated","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,13118.0,,,2002-11-23 11:51:33.0,,,false,,,,,,,,,,,,,,,148244,,,Sat Nov 23 11:51:33 UTC 2002,,,,,,0|i0d7nz:,75018,,,,,,,,19/Oct/02 01:38;seapwc@halcyon.com;*** COM-188 has been marked as a duplicate of this bug. ***,"23/Nov/02 11:51;craig.mcclanahan@sun.com;Fixed in nightly build 20021123.

This deprecation warning occurs because Log4J has deprecated the entire Category
class, replacing it by o.a.l.Logger.  What really needed to happen here is that
we create a new Log4JLogger implementation (based on Log4JCategoryLog, which was
deprecated), and start using that for the Log4J Log implementation class.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Disabling of TCCL,LOGGING-65,12342601,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,skitching,dvoytenko@reveredata.com,dvoytenko@reveredata.com,05/Oct/05 10:41,18/Nov/06 12:52,07/Apr/19 20:35,18/Nov/06 12:48,1.0.4,,,,,,,,,1.1.0,,1,,,"I separated this request from 35774 as it seems to provide a viable and easy 
solution to a big number of ClassLoader-related problems of using JCL in shared 
environments. The solution relies on having an option (configured via system 
properties) to disable TCCL usage and only use LogFactory's ClassLoader. When 
TCCL is disabled, logger implementation and caching should be performed in the 
JCL's ClassLoader only (cache will be reduced to a single record). This would 
remove any memory leak issues as well as other inconsitencies (see 35774 for 
some samples). 

There're two main scenarios how JCL is used in the shared environment: a) 
deployed in the shared class loader (shared for Tomcat and UCL for JBoss), b) 
deployed in the application's class loader in the child-first ClassLoader 
setup. In both cases this solution works well and disabled TCCL could even be a 
reasonable default (though it depends on other uses). In case of deployment 
within application's classloader (case [b]), two versions of JCL can coexist 
redirecting logs for the application's classes to application's LogFactory 
instance and shared classes to shared LogFactory.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36927.0,,,2006-01-15 20:24:50.0,,,false,,,,,,,,,,,,,,,148243,,,Wed Mar 01 08:50:12 UTC 2006,,,,,,0|i0d7o7:,75019,,,,,,,,"15/Jan/06 20:24;skitching;I have a proposal. I've implemented what's described below, and have unit tests
mostly working for it so it's ready to go pretty soon if there are no objections.

== part 1 ==

When loading commons-logging.properties files, currently the first one found in
the class is used. 

Instead, I propose that commons-logging.properties files can contain a
""priority=n"" . Files without an entry default to priority=0. The priority value
is a floating-point number. When loading properties files, every file in the
classpath is checked, and the one with the highest priority is used.

This allows webapps to provide a config file, but for the container
administrator to override these by placing a file of higher priority in the
shared path. A webapp can then override *that* if it wants by defining an even
higher priority.

This isn't a major performance hit as it is done only once per distinct TCCL (ie
per webapp in a container).

Priority numbers aren't perfect as they do require some ""coordination"" between
the different levels. However I don't think there's anything better in this case.

== part 2 ==

Allow commons-logging.properties files to contain a key
  use_tccl=false
If this is present, then *for the current TCCL* all loading is done via the
classloader that loaded the LogFactory class. 


== effect ==

Together, these features allow the following:
(a) 
A single webapp can disable tccl logging for itself by having a
commons-logging.properties file with use_tccl=false.

(b)
A container administrator can disable TCCL-based logging for all webapps by
simply placing a commons-logging.properties file in a shared classpath location
with priority=10 and use_tccl=false. This will override any settings in any
webapp. However a specific webapp can override this again with a higher-priority
value for its config file.


At a technical level, there will still be a LogFactoryImpl for each distinct
TCCL, keyed by the TCCL. However a call to LogFactory.getLog made when the
current tccl matches one associated with a ""use_tccl=false"" configuration will
always return a concrete Log class that is loaded via the same classloader that
loaded the LogFactory class.


Opinions?","18/Jan/06 12:52;skitching;Ok, as there were no objections I have committed this new feature.

As of r370031, dropping a file named commons-logging.properties into the shared
classpath containing the following entries will disable TCCL loading completely:

  priority=10
  use_tccl=false

I would appreciate it if people could test this in live systems that have
previously experienced problems.","23/Jan/06 12:24;skitching;Hi Dimitry,

Release candidate 1 of commons-logging 1.1 has now been created:
   http://people.apache.org/~rdonkin/commons-logging/

Could you please check whether this meets your requirements?",17/Feb/06 05:44;rdonkin@apache.org;Please test with latest release candidate,01/Mar/06 08:50;skitching;As there's been no response I'll presume the implemented fix is satisfactory.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong sample code in org/apache/commons/logging/package.html (using static and this.class),LOGGING-64,12340651,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,thaiha@psv.com.vn,thaiha@psv.com.vn,10/Apr/03 09:53,29/Dec/09 16:30,07/Apr/19 20:35,29/Dec/09 16:30,Nightly Builds,,,,,,,,,1.0.4,,0,,,"In the org/apache/commons/logging/package.html file, there is sample code:

public class Foo {
  static Log log = LogFactory.getLog(this.class);
  ...
}

This code cannot be compiled because of using ""static"" and ""this.class"" in the 
same statement. Should be change to Foo.class.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,18889.0,,,2003-04-10 11:27:56.0,,,false,,,,,,,,,,,,,,,148242,,,Wed Jan 07 10:19:58 UTC 2004,,,,,,0|i0d7of:,75020,,,,,,,,"10/Apr/03 11:27;mohankishore@yahoo.com;In diff -u format:
Index: package.html
===================================================================
RCS file: /home/cvspublic/jakarta-
commons/logging/src/java/org/apache/commons/logging/package.html,v
retrieving revision 1.9
diff -u -r1.9 package.html
--- package.html	30 Mar 2003 23:42:36 -0000	1.9
+++ package.html	10 Apr 2003 04:24:47 -0000
@@ -38,7 +38,7 @@
 
     public class Foo {
 
-        static Log log = LogFactory.getLog(this.class);
+        static Log log = LogFactory.getLog(Foo.class);
 
         public void foo() {
             ...
","17/Aug/03 06:49;craig.mcclanahan@sun.com;Fixed in nightly build 20030817.
",07/Jan/04 10:19;dennisl@apache.org;*** COM-982 has been marked as a duplicate of this bug. ***,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging][PATCH] Minor improvement to JARs within Build,LOGGING-63,12342882,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Cannot Reproduce,,boris.unckel.mlg@gmx.net,boris.unckel.mlg@gmx.net,04/Feb/06 05:07,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"Jars can contain an optional index of their packages.
The feature was introduced in Java 1.3.

See
http://java.sun.com/j2se/1.4.2/docs/guide/jar/jar.html#JAR%20Index
for details.

I did not see an classloader optimizing for it yet, but it causes no pain to add
and use it within Ant.
ant dist did run succesfully","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,04/Feb/06 05:08;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--jcl_build_xml.patch;https://issues.apache.org/jira/secure/attachment/12334016/ASF.LICENSE.NOT.GRANTED--jcl_build_xml.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,38499.0,,,2006-02-08 00:44:16.0,,,false,,,,,,,,,,,,,,,148241,,,Fri Feb 17 05:34:00 UTC 2006,,,,,,0|i0d7on:,75021,,,,,,,,"04/Feb/06 05:08;boris.unckel.mlg@gmx.net;Created an attachment (id=17581)
Patch for build.xml to add index=""true"" for jar tasks
","08/Feb/06 00:44;rdonkin@apache.org;Committed. Many thanks.

Robert","08/Feb/06 01:03;sandymac@apache.org;Hold on. That index feature doesn't gain anything and just increases the jar size.

The index feature is mainly for applets. For it to work the main jar file has an
index of all the classes in other jars on the classpath. For an applet this lets
the JVM not have to download a jar file just to search for a jar that may not be
in it.

Adding index=""true"" for the logging jars won't help the logging jars unless the
generated index references other jars containing logging dependencies.","08/Feb/06 03:52;rdonkin@apache.org;Hmmm...

I've spent a little while looking into this...

Figures (bytes):
  commons-logging-1.1-RC3.jar             49202 -> 49399   +~0.4%
  commons-logging-adapters-1.1-RC3.jar    21151 -> 21356   +~1%
  commons-logging-api-1.1-RC3.jar         39167 -> 39368   +~0.5%

I don't think that the difference in size is large enough to be an issue.

But it seems ATM to be of use (as sandy says) only for the main jar of an applet
(which JCL isn't). 

Opinions?

","10/Feb/06 01:23;sandymac@apache.org;It's not a big deal, in those cases it is only ~200 bytes but it is ~200 bytes
of dead weight and that eventually it adds up. Would you accept a patch that
adds dead code to a project?

Currently the jar command puts the META-INF/INDEX.LIST as the last file in the
jar. By the time the ClassLoader has loaded the jar, it already knows about all
the files in the current jar.","17/Feb/06 05:34;rdonkin@apache.org;I've had a good think about this and a chance to play around a little.

jarindex indexes the dependencies but I'm a little worried that classloaders may
get confused by optional depedencies. JCL would need to be re-jarred and signed
before it could be used in an applet so I've decided that it'd be best to remove
the indexes. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging][PATCH] JavaDoc corrections,LOGGING-62,12341488,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,dennisl@apache.org,dennisl@apache.org,05/Jun/04 03:32,29/Dec/09 16:24,07/Apr/19 20:35,29/Dec/09 16:24,1.0.4,,,,,,,,,1.0.4,,0,,,"I have read through the JavaDocs for commons-logging 1.0.4-rc2 and found and
corrected a few errors.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,05/Jun/04 03:33;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--Jdk13LumberjackLogger.java.patch;https://issues.apache.org/jira/secure/attachment/12332930/ASF.LICENSE.NOT.GRANTED--Jdk13LumberjackLogger.java.patch,05/Jun/04 03:34;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--Jdk14Logger.java.patch;https://issues.apache.org/jira/secure/attachment/12332931/ASF.LICENSE.NOT.GRANTED--Jdk14Logger.java.patch,05/Jun/04 03:34;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--Log.java.patch;https://issues.apache.org/jira/secure/attachment/12332932/ASF.LICENSE.NOT.GRANTED--Log.java.patch,05/Jun/04 03:34;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--LogFactory.java.patch;https://issues.apache.org/jira/secure/attachment/12332933/ASF.LICENSE.NOT.GRANTED--LogFactory.java.patch,05/Jun/04 03:34;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--NoOpLog.java.patch;https://issues.apache.org/jira/secure/attachment/12332934/ASF.LICENSE.NOT.GRANTED--NoOpLog.java.patch,05/Jun/04 03:35;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--SimpleLog.java.patch;https://issues.apache.org/jira/secure/attachment/12332935/ASF.LICENSE.NOT.GRANTED--SimpleLog.java.patch,05/Jun/04 03:36;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--package.html.patch;https://issues.apache.org/jira/secure/attachment/12332936/ASF.LICENSE.NOT.GRANTED--package.html.patch,,,,,,,,,,,7.0,,,,,,,,,,,,,,,,29400.0,,,2004-06-07 04:18:24.0,,,false,,,,,,,,,,,,,,,148240,,,Mon Jun 07 04:18:24 UTC 2004,,,,,,0|i0d7ov:,75022,,,,,,,,"05/Jun/04 03:33;dennisl@apache.org;Created an attachment (id=11761)
JavaDoc correction
","05/Jun/04 03:34;dennisl@apache.org;Created an attachment (id=11762)
JavaDoc correction
","05/Jun/04 03:34;dennisl@apache.org;Created an attachment (id=11763)
JavaDoc correction
","05/Jun/04 03:34;dennisl@apache.org;Created an attachment (id=11764)
JavaDoc correction
","05/Jun/04 03:34;dennisl@apache.org;Created an attachment (id=11765)
JavaDoc correction
","05/Jun/04 03:35;dennisl@apache.org;Created an attachment (id=11766)
JavaDoc correction
","05/Jun/04 03:36;dennisl@apache.org;Created an attachment (id=11767)
JavaDoc correction
","07/Jun/04 04:18;rdonkin@apache.org;Applied. Many thanks.

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
contextClassLoader null returned in LogFactory.java,LOGGING-61,12340302,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,steve.bryant@aig.com,steve.bryant@aig.com,29/Aug/02 15:28,29/Dec/09 17:00,07/Apr/19 20:35,29/Dec/09 17:00,1.0.1,,,,,,,,,1.0.2,,0,,,"I was trying to deploy Axis beta3 on iPlanet 6 and kept getting the following
exception.

lang.ExceptionInInitializerError: java.lang.NullPointerException
        at org.apache.commons.logging.LogFactory.getFactory(LogFactory.java:326)
        at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:394)
        at org.apache.axis.transport.http.AxisServlet.<clinit>(AxisServlet.java:104)
        at java.lang.Class.newInstance0(Native Method)
        at java.lang.Class.newInstance(Class.java:232)
        at
com.iplanet.server.http.servlet.WServletEntity.loadAndInitServlet(WServletEntity.java:71)
        at
com.iplanet.server.http.servlet.WebApplication.service(WebApplication.java:1045)
        at
com.iplanet.server.http.servlet.NSServletRunner.ServiceWebApp(NSServletRunner.java:959)

Found another guy getting the same problem that was posting to the Axis mailing
list.  Here is a URL to his posts:
http://www.mail-archive.com/axis-user@xml.apache.org/msg04319.html

He mentioned a hack he did and I did the same and it seemed to fix the problem.
 I don't know whether I may have broke something else but my Axis web services
are working fine now...

Here is the hack in LogFactory.java at line 264 in method getFactory():

/*sjb - hack to default back*/
if(contextClassLoader==null)
{
  contextClassLoader = ClassLoader.getSystemClassLoader();
}

Cheers...","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,12149.0,,,2002-08-30 10:29:43.0,,,false,,,,,,,,,,,,,,,148239,,,Fri Sep 27 04:36:44 UTC 2002,,,,,,0|i0d7p3:,75023,,,,,,,,"30/Aug/02 10:29;rsitze@apache.org;Fix checked in tonight.  Please let me know ASAP if this corrects
your problem.  BTW, calling 'ClassLoader.getSystemClassLoader'
is not portable to early JVM's, so it is not an acceptable solution
for commons-logging.","30/Aug/02 15:23;steve.bryant@aig.com;Also, I forgot to throw this helpful bits in the bug report.  I deployed this
service with no problems on Linux JVM 1.3.1_03 and Tomcat 4.0.3.  This error
occurred while deploying the Axis service on iPlanet on a Solaris JVM 1.3.1. 
Sorry about that.  The Axis service now works fine on both platforms.

-sjb",27/Sep/02 04:36;rsitze@apache.org;*** COM-118 has been marked as a duplicate of this bug. ***,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
.zip file actually a .tar.gz file,LOGGING-60,12340564,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,snible@us.ibm.com,snible@us.ibm.com,20/Feb/03 22:52,29/Dec/09 16:35,07/Apr/19 20:35,29/Dec/09 16:35,,,,,,,,,,1.0.3,,0,,,"The file
http://jakarta.apache.org/builds/jakarta-commons/release/commons-logging/v1.0.2/commons-logging-1.0.2-src.zip
has exactly the same contents as the .tar.gz file in the same directory.

This .zip file is not usable by .zip readers.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,17245.0,,,2003-03-31 08:03:31.0,,,false,,,,,,,,,,,,,,,148238,,,Mon Mar 31 08:23:51 UTC 2003,,,,,,0|i0d7pb:,75024,,,,,,,,"31/Mar/03 08:03;craig.mcclanahan@sun.com;Will be fixed in the 1.0.3 release.  In the mean time, you can process the file
with a tool like WinZip, which can read the tar.gz format.

",31/Mar/03 08:23;craig.mcclanahan@sun.com;*** COM-475 has been marked as a duplicate of this bug. ***,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
patch to make commons-logging compileable againt cvs-head of log4j,LOGGING-59,12341142,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Critical,Won't Fix,,mario@ops.co.at,mario@ops.co.at,13/May/04 01:01,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"patch to make commons-logging compileable againt cvs-head of log4j

slightly changed CustomConfigTestCase - getThrowable() on ThrowableInfo is no
longer accessible - in fact it isnt any longer stored in ThrowableInfor, now
only the string representation is stored.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,19/May/04 21:02;ceki@apache.org;ASF.LICENSE.NOT.GRANTED--diffz;https://issues.apache.org/jira/secure/attachment/12332649/ASF.LICENSE.NOT.GRANTED--diffz,13/May/04 01:02;mario@ops.co.at;ASF.LICENSE.NOT.GRANTED--log4j.patch;https://issues.apache.org/jira/secure/attachment/12332648/ASF.LICENSE.NOT.GRANTED--log4j.patch,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,28933.0,,,2004-05-19 21:02:34.0,,,false,,,,,,,,,,,,,,,148237,,,Thu May 27 02:28:59 UTC 2004,,,,,,0|i0d7pj:,75025,,,,,,,,"13/May/04 01:02;mario@ops.co.at;Created an attachment (id=11525)
[PATCH] implement log4j changes
","19/May/04 21:02;ceki@apache.org;Created an attachment (id=11596)
this patch covers runtime compatibility as well
","19/May/04 21:04;ceki@apache.org;With some changes to log4j HEAD and the following patch to
commons-logging, it is now possible to compile commons-logging with
1.3alpha and run it with both 1.3 *and* 1.2.8. Unfortunately, I was
unable to get a c-l version compiled with 1.2.8 to also run with 1.3. Mostly 
because I am unable to grok the java.lang.VerifyError.

     [java] No suitable Log constructor [Ljava.lang.Class;@f9f9d8 for 
org.apache.commons.logging.impl.Log4JLogger
     [java] java.lang.VerifyError: (class: 
org/apache/commons/logging/impl/Log4JLogger, method: warn signature: 
(Ljava/lang/Object;Ljava/lang/Throwable;)V) Incom
patible argument to function
     [java]     at java.lang.Class.getDeclaredConstructors0(Native Method)
     [java]     at java.lang.Class.privateGetDeclaredConstructors
(Class.java:1590)
     [java]     at java.lang.Class.getConstructor0(Class.java:1762)
     [java]     at java.lang.Class.getConstructor(Class.java:1002)
     [java]     at 
org.apache.commons.logging.impl.LogFactoryImpl.getLogConstructor
(LogFactoryImpl.java:410)
     [java]     at org.apache.commons.logging.impl.LogFactoryImpl.newInstance
(LogFactoryImpl.java:531)
     [java]     at org.apache.commons.logging.impl.LogFactoryImpl.getInstance
(LogFactoryImpl.java:235)
     [java]     at org.apache.commons.logging.LogFactory.getLog
(LogFactory.java:369)
     [java]     at 
org.apache.commons.logging.log4j.DefaultConfigTestCase.setUpLog
(DefaultConfigTestCase.java:179)
     [java]     at org.apache.commons.logging.log4j.DefaultConfigTestCase.setUp
(DefaultConfigTestCase.java:81)
     [java]     at junit.framework.TestCase.runBare(TestCase.java:125)
     [java]     at junit.framework.TestResult$1.protect(TestResult.java:106)
     [java]     at junit.framework.TestResult.runProtected(TestResult.java:124)
     [java]     at junit.framework.TestResult.run(TestResult.java:109)
     [java]     at junit.framework.TestCase.run(TestCase.java:118)
     [java]     at junit.framework.TestSuite.runTest(TestSuite.java:208)
     [java]     at junit.framework.TestSuite.run(TestSuite.java:203)
     [java]     at junit.textui.TestRunner.doRun(TestRunner.java:116)
     [java]     at junit.textui.TestRunner.start(TestRunner.java:172)
     [java]     at junit.textui.TestRunner.main(TestRunner.java:138)

I would be grateful if someone could explain the source of the error.

Anyway, to get 1.3 compiled code to also run on 1.2.8, the trick is to
detect if running on 1.2 and to cast a Level instance as a Priority.

The detection is straightforward:

 private static final boolean is12 = Priority.class.isAssignableFrom
(Level.class);

In Log4jLogger class, the various method calls become:

 public void debug(Object message) {
   if(is12) {
     getLogger().log(FQCN, (Priority) Level.DEBUG, message, null );
   } else {
     getLogger().log(FQCN, Level.DEBUG, message, null );
   }
 }

Refer to the included patch file for exact details.

Note also that the CustomConfigTestCase.java was modified to reflect
the fact that the throwable is no longer available in ThrowableInfo.","19/May/04 21:26;mario@ops.co.at;I think this could be THE solution, we well see what the commons-logging team
will say.

However, i would like to suggest to take this solution but to create a second
Log4JLogger anyway.

Just to avoid the if() and cast on every log-message.

People are very sensitive about log-performance and even if those code do not
cost that much, there might be some who complain about it.

If wanted i could do this today, but i am sure a loggings-committer can do it
faster.","19/May/04 21:41;ceki@apache.org;Agreed. My goal was to show that achieving compatibility was
feasible. There may indeed be better solutions.
","27/May/04 02:28;rdonkin@apache.org;Thanks for the patch mario but the solution offered (in the end) by Ceki allows commons-logging to be 
compatible with both 1.2.x and (hopefully) the upcoming 1.3 release. Therefore, I'm marking this bug 
closed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] null pointer exception in LogFactory.getLog,LOGGING-58,12342013,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,dhuebsch@mac.com,dhuebsch@mac.com,25/Jan/05 00:47,29/Dec/09 16:04,07/Apr/19 20:35,29/Dec/09 16:04,1.0.4,,,,,,,,,1.1.0,,0,,,"In running the LoggingTrial example from the book ""Pro Jakarta Commons"" by Oak from Apress on 
MacOSX 10.3.7, java version ""1.4.2_05-141.3"", I get the following error:

run_example:
     [java] Exception in thread ""main"" org.apache.commons.logging.LogConfigurationException: 
org.apache.commons.logging.LogConfigurationException: java.lang.NullPointerException (Caused by 
java.lang.NullPointerException) (Caused by org.apache.commons.logging.LogConfigurationException: 
java.lang.NullPointerException (Caused by java.lang.NullPointerException))
     [java]     at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:543)
     [java]     at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:235)
     [java]     at org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:209)
     [java]     at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:351)
     [java]     at com.commonsbook.chap3.LoggingTrial.main(LoggingTrial.java:8)
     [java] Caused by: org.apache.commons.logging.LogConfigurationException: 
java.lang.NullPointerException (Caused by java.lang.NullPointerException)
     [java]     at 
org.apache.commons.logging.impl.LogFactoryImpl.getLogConstructor(LogFactoryImpl.java:397)
     [java]     at org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:529)
     [java]     ... 4 more
     [java] Caused by: java.lang.NullPointerException
     [java]     at 
org.apache.commons.logging.impl.LogFactoryImpl.getLogConstructor(LogFactoryImpl.java:374)
     [java]     ... 5 more

Up to this point everything in the book worked. I doubt user error. MacOSX java implementation?","Operating System: Mac OS X 10.3
Platform: Macintosh",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,33221.0,,,2005-01-25 01:27:14.0,,,false,,,,,,,,,,,,,,,148236,,,Sun Jan 29 22:27:21 UTC 2006,,,,,,0|i0d7pr:,75026,,,,,,,,"25/Jan/05 01:27;dennisl@apache.org;I downloaded the example and tried it successfully on Windows XP with Java
1.4.2_06. Note that my locale is set to sv_SE. Here is the output:

The Log being used >>> org.apache.commons.logging.impl.Jdk14Logger@7c6768
2005-jan-24 17:19:46 com.commonsbook.chap3.LoggingTrial main
INFO: INFO TEST
2005-jan-24 17:19:46 com.commonsbook.chap3.LoggingTrial main
INFO: INFO TEST
java.lang.Exception: A DUMMY EXCEPTION
        at com.commonsbook.chap3.LoggingTrial.main(LoggingTrial.java:14)
2005-jan-24 17:19:46 com.commonsbook.chap3.LoggingTrial main
VARNING: WARN TEST
2005-jan-24 17:19:46 com.commonsbook.chap3.LoggingTrial main
VARNING: WARN TEST
java.lang.Exception: A DUMMY EXCEPTION
        at com.commonsbook.chap3.LoggingTrial.main(LoggingTrial.java:14)
2005-jan-24 17:19:46 com.commonsbook.chap3.LoggingTrial main
ALLVARLIG: ERROR TEST
2005-jan-24 17:19:46 com.commonsbook.chap3.LoggingTrial main
ALLVARLIG: ERROR TEST
java.lang.Exception: A DUMMY EXCEPTION
        at com.commonsbook.chap3.LoggingTrial.main(LoggingTrial.java:14)
2005-jan-24 17:19:46 com.commonsbook.chap3.LoggingTrial main
ALLVARLIG: FATAL TEST
2005-jan-24 17:19:46 com.commonsbook.chap3.LoggingTrial main
ALLVARLIG: FATAL TEST
java.lang.Exception: A DUMMY EXCEPTION
        at com.commonsbook.chap3.LoggingTrial.main(LoggingTrial.java:14)
","25/Jan/05 05:22;rsitze@apache.org;LogFactoryImpl.java:543

541:            if (logMethod != null) {
542:                params[0] = this;
543:                logMethod.invoke(instance, params);
544:            }

So... not sure what version of the code you're using, but looks to me like 
your line#543 can't be the same as the most recent source.  This isn't a 
recent code change either.

Please pull a recent build, retry, and supply us with a stack-trace that 
matches current code.  Thanks.",25/Jan/05 05:24;rsitze@apache.org;Oh wait.. this is a reflective invoke.  How fun.  Strike that last note.,"25/Jan/05 05:29;rsitze@apache.org;I would still like to ensure that you are running this with a recent nightly 
build, to ensure line #'s line up.  Also, if there is any more detail on the 
stacktrace, I'd like to see that... it looks like we're losing the interesting 
detail on the core problem.","25/Jan/05 06:21;dhuebsch@mac.com;I am using 1.0.4 version which I believe is the most recent. I have the commons-logging in the java 
endorsed directory as well as in a separate classpath listed lib directory. Removing it from classpath 
doesn't change anything, have not removed it from endorsed.","25/Jan/05 07:21;dhuebsch@mac.com;I removed commons-logging from endorsed and left it in classpath. It now works as it suppose to, 
except, it defaults to log4j and not simplelog.

Something I don't understand happens when commons-logging is in the java/lib/endorsed directory.","31/Jan/05 04:27;apache@netdpb.net;Could this be because the docs for Class.getClassLoader() include:

""Returns the class loader for the class. Some implementations may use  null to represent the bootstrap 
class loader. This method will return  null in such implementations if this class was loaded by the 
bootstrap  class loader.""

If Apple's JRE does return null, and commons-logging is in the system classpath (/Library/Java/
Extensions)...

The relevant snippet from 1.0.4 source (ultimate cause at LogFactoryImpl:374) is:

            logInterface = this.getClass().getClassLoader().loadClass
                (LOG_INTERFACE);

If getClassLoader() indeed returns null, as the API spec allows?...","08/Feb/05 05:06;rdonkin@apache.org;The code which seems to be in question now reads: 

            ClassLoader cl = this.getClass().getClassLoader();
            // handle the case if getClassLoader() returns null
            // It may mean this class was loaded from the bootstrap classloader
            logInterface = (cl == null) ? loadClass(LOG_INTERFACE) : 
                                          cl.loadClass(LOG_INTERFACE);
            logClass = loadClass(logClassName);

This looks ok.

I've tried to replicate on my PowerBook with the newest code but doesn't seem to
happen any more.",29/Jan/06 22:27;dennisl@apache.org;This was fixed by the patch for issue 31710.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Language specs violation in Commons Logging 1.0.2 in class LogFactoryImpl,LOGGING-57,12340544,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Incomplete,,d.tonhofer@m-plify.com,d.tonhofer@m-plify.com,07/Feb/03 21:30,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"In Commons Logging 1.0.2, we have the folloing:

org.apache.commons.logging.LogFactory  
  defines method getContextClassLoader() as 'protected'

org.apache.commons.logging.impl.LogFactoryImpl
  calls aforementioned method inside loadClass() 
  from within the run() method of an anonymous
  subclass of PrivilegedAction.

The IBM VisualAge Java compiler does not like that.
It reports an error: ""method not visible""

It is right.

The Java Language reference says in 6.6.1:

[..], if the member or constructor is declared protected, then access is
      permitted only when one of the following is true: 
      - Access to the member or constructor occurs from within the package
        containing the class in which the protected member or constructor is
        declared. (** not true in this case **)
      - Access is correct as described in §6.6.2. (""A protected member or
        constructor of an object may be accessed from outside the package in
        which it is declared only by code that is responsible for the
        implementation of that object."")
        (not true in our case...)

So, I think this method has to be made public. Which is of course unfortunate.

Similar problems have occurred with other stuff. See my bugs 6493 & 13087.","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16880.0,,,2003-04-04 06:53:36.0,,,false,,,,,,,,,,,,,,,148235,,,Fri Apr 04 06:53:36 UTC 2003,,,,,,0|i0d7pz:,75027,,,,,,,,"04/Apr/03 06:53;dgraham@apache.org;There is a compiler option in Eclipse called ""Access to a non-accessible member 
of an enclosing type"" that you can set to report as Ignore, Warning, or Error.  
Setting it to Warning results in a statement indicating that access to the 
method is emulated with a synthetic accessor method and changing the method's 
visibility will improve performance.  However, the code still compiles and 
functions appropriately.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unable to configure commons-logging SimpleLog for a webapp,LOGGING-56,12340600,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Duplicate,,nathann@objectfx.com,nathann@objectfx.com,12/Mar/03 06:15,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,Nightly Builds,,,,,,,,,,,0,,,"I am unable to configure the commons-logging SimpleLog for my webapp.

I beleive something is wrong with the jakarta-struts-1.1-rc1\lib\commons-
logging.jar. If I use the commons project version 1.0.2 of the jar, everything 
works as expected. If I the struts 1.1-rc1 version of the jar, I am unable to 
change the SimpleLog properties such as the log level (i.e., trace, debug, 
info...). It seems to be completely ignoring my WEB-
INF\classes\simplelog.properties file.

The meta-inf\Manifest.mf file in the jakarta-struts-1.1-rc1\lib\commons-
logging.jar does not have proper information for these properties:
Extension-Name: @package@
Implementation-Version: @version@

My WEB-INF\classes\commons-logging.properties file:
org.apache.commons.logging.LogFactory=org.apache.commons.logging.impl.LogFactory
Impl
org.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog

My WEB-INF\classes\simplelog.properties file:
org.apache.commons.logging.simplelog.defaultlog=info
org.apache.commons.logging.simplelog.log.org.apache.struts=debug
org.apache.commons.logging.simplelog.log.com.ofx=debug
org.apache.commons.logging.simplelog.showlogname=true
org.apache.commons.logging.simplelog.showShortLogname=false

Using the Struts 1.1-rc1 commons-logging.jar my console output is in the 
following format:
Mar 11, 2003 3:28:04 PM org.apache.struts.util.PropertyMessageResources <init>
INFO: Initializing, config='org.apache.struts.util.LocalStrings', returnNull=tru
e

Using the Commons 1.0.2 commons-logging.jar my console output is in the 
following format:
[INFO] org.apache.struts.util.PropertyMessageResources - Initializing, config='o
rg.apache.struts.util.LocalStrings', returnNull=true
[DEBUG] org.apache.struts.action.ActionServlet - Scanning web.xml for controller
 servlet mapping

My environment is: Windows 2000, J2SDK 1.4.1_01, Tomcat 4.1.18, Struts 1.1-rc1","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,26/Mar/03 00:34;gcompagnon@hotmail.com;ASF.LICENSE.NOT.GRANTED--patchBuildCommonsLogging.jar;https://issues.apache.org/jira/secure/attachment/12332182/ASF.LICENSE.NOT.GRANTED--patchBuildCommonsLogging.jar,26/Mar/03 03:54;gcompagnon@hotmail.com;ASF.LICENSE.NOT.GRANTED--patchCommonsLogging.jar;https://issues.apache.org/jira/secure/attachment/12332183/ASF.LICENSE.NOT.GRANTED--patchCommonsLogging.jar,26/Mar/03 18:20;gcompagnon@hotmail.com;ASF.LICENSE.NOT.GRANTED--patchCommonsLogging2.jar;https://issues.apache.org/jira/secure/attachment/12332184/ASF.LICENSE.NOT.GRANTED--patchCommonsLogging2.jar,,,,,,,,,,,,,,,3.0,,,,,,,,,,,,,,,,17894.0,,,2003-03-12 06:54:00.0,,,false,,,,,,,,,,,,,,,148234,,,Mon Mar 31 08:22:23 UTC 2003,,,,,,0|i0d7q7:,75028,,,,,,,,"12/Mar/03 06:54;dgraham@apache.org;Please post logging configuration questions to commons-user or struts-user.
","12/Mar/03 06:56;nathann@objectfx.com;This is not invalid. The commons-logging.jar file in the Strut 1.1-rc1 binary 
distribution is BAD.","12/Mar/03 07:10;dgraham@apache.org;Does changing the manifest entries fix the problem?
","12/Mar/03 07:23;nathann@objectfx.com;Nope. I used winzip to extract the manifest, updated the properties to look 
like the ones in the commons jar, and then re-added the manifest to the jar. 
That didn't fix it.","12/Mar/03 07:39;nathann@objectfx.com;You can reproduce this using any of the Struts examples. Just configure an 
examaple as follows below. Notice that when you run the example you don't see 
any trace or debug level message on the console. Now replace the examples WEB-
INF\lib\commons-logging.jar with the commons 1.0.2 version. Reload the example 
webapp and you will see that it now finds the config file and displays trace 
and debug messages.

WEB-INF\classes\commons-logging.properties file:
org.apache.commons.logging.LogFactory=org.apache.commons.logging.impl.LogFactory
Impl
org.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog

WEB-INF\classes\simplelog.properties file:
org.apache.commons.logging.simplelog.defaultlog=info
org.apache.commons.logging.simplelog.log.org.apache.struts=trace
org.apache.commons.logging.simplelog.showlogname=true
org.apache.commons.logging.simplelog.showShortLogname=false

","13/Mar/03 13:34;dgraham@apache.org;Please download the latest nightly build of commons-logging and test against 
that jar.  Struts nightly builds include nightly builds of commons jars so this 
may be a problem introduced in commons-logging after 1.0.2.
","13/Mar/03 22:03;nathann@objectfx.com;Bingo! I tried the 3/8 and 3/13 builds, neither worked and they both had goofy 
manifests. Popped the 1.0.2 build back in and everything worked fine again. 
Maybe something is wrong with their build process. I'm not sure if I can move 
this bug to another project so I'll leave that to you. Thanks, Nathan.","13/Mar/03 22:07;nathann@objectfx.com;I guess this bug is probably still valid for Struts since you wouldn't want to 
ship with a bad commons-logging.jar.","13/Mar/03 22:19;nathann@objectfx.com;One more note. I tried extracting the jar to WEB-INF\classes. It still didn't 
work so it is more than just a jar problem.","14/Mar/03 01:30;dgraham@apache.org;Moving to commons-logging...
","26/Mar/03 00:34;gcompagnon@hotmail.com;Created an attachment (id=5500)
jar bundle for the new build.xml (proposal for every project inside jakarta)
","26/Mar/03 00:35;gcompagnon@hotmail.com;in order to tag correctly each librairies, I recommend to use the ant sub-task: 
<manifest>, with, no need to checkout MANIFEST.MF file, and we are sure to have 
the correct version number.

I have published a version for the building of struts ... and I think that 
every build.xml of jakarta-commons should be as that.

Regards 
Guillaume Compagnon gcompagnon@hotmail.com","26/Mar/03 03:54;gcompagnon@hotmail.com;Created an attachment (id=5504)
jar bundle of the patch applied to LogFactoryImpl
","26/Mar/03 03:54;gcompagnon@hotmail.com;In fact, there is a bug due to the lazy loading of LogClassName into 
LogFactoryImpl.
This attribute is initialized by guessConfig() during the construction of the 
factory. Nevertheless, the attributes list is not initialized when the factory 
os constructed in LogFactory::getFactory() (the call to newFactory() is before 
the loop for initializing the attributes.

for solving this bug, I ve moved the proxyFactory construction in a other 
method, and used lazy instanciation for the ProxyFactory

this bug is present into the current release (LogFactoryImpl v1.22), but not in 
the 1.0.2 (there was another bug, if there is log4j present, the LogFactoryImpl 
uses always the ProxyFactory from log4J)


Guillaume Compagnon gcompagnon@hotmail.com","26/Mar/03 04:06;gcompagnon@hotmail.com;just for information, 
in the current version, the default logClassName is JDK 1.4 , and that's why 
you get the following format:
Mar 11, 2003 3:28:04 PM org.apache.struts.util.PropertyMessageResources <init>
INFO: Initializing, config='org.apache.struts.util.LocalStrings', 
returnNull=true

(the JDK 1.4 logger is configured by the logging.properties file, present into 
jdk1.4/jre/lib, and whose the default log level is INFO)

and on the 1.0.2, this is the SimpleLog with the format:
[INFO] org.apache.struts.util.PropertyMessageResources - Initializing, config='o
rg.apache.struts.util.LocalStrings', returnNull=true

As a conclusion, Tomcat 4.1.18 uses the 1.0.2 release, so if log4J is not 
installed ... it is the JDK 1.4 logger that was used with INFO log level 
messages.","26/Mar/03 05:02;nathann@objectfx.com;>>this bug is present into the current release (LogFactoryImpl v1.22), but not
>>in the 1.0.2 (there was another bug, if there is log4j present, the
>>LogFactoryImpl uses always the ProxyFactory from log4J)

Hmmm? My testing indicates that both 1.0.2 and 3/25/03 nightly always use log4j 
when it's present. If log4j is present, both builds appear to ignore the 
following commons-logging.properties entries:

org.apache.commons.logging.LogFactory=org.apache.commons.logging.impl.LogFactory
Impl
org.apache.commons.logging.Log=org.apache.commons.logging.impl.Jdk14Logger
-OR-
org.apache.commons.logging.LogFactory=org.apache.commons.logging.impl.LogFactory
Impl
org.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog


>>just for information, 
>>in the current version, the default logClassName is JDK 1.4 , and that's why 
>>you get the following format:
>>....

Yep, I figured that out. I was just using that as proof that it worked in 1.0.2.

Thanks, Nathan.","26/Mar/03 18:16;gcompagnon@hotmail.com;I d forgotten something important:
if we use ProxyFactory from log4j, all the attributes (from the commons-
logging.properties) should be setted to the ProxyFactory

","26/Mar/03 18:20;gcompagnon@hotmail.com;Created an attachment (id=5514)
following the jar file with the source code of LogFactoryImpl
","26/Mar/03 23:09;gcompagnon@hotmail.com;
seems to resolve this bug :
http://nagoya.apache.org/bugzilla/show_bug.cgi?id=17561","31/Mar/03 08:22;craig.mcclanahan@sun.com;I fixed the manifest file creation (which was unrelated to the real problem
here.  As far as I can tell, all the remaining stuff is a duplicate of 17561,
and will be fixed when that one is dealt with.



*** This bug has been marked as a duplicate of 17561 ***",,,,,,,,,,,,,,,,,,
[all] exclude package.html files from the distribution jars,LOGGING-55,12342250,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,maartenc,maartenc,20/May/05 01:17,29/Dec/09 16:06,07/Apr/19 20:35,29/Dec/09 16:06,,,,,,,,,,1.1.0,,0,,,"Hi,

could you please remove the package.html files from the generated jars? We are 
having problems with commons-logging and commons-beanutils, but this probably 
affects a lot more projects...

For instance, if I have commons-logging.jar and commons-beanutils.jar in my 
classpath, I receive the following warnings from the JDK1.5 javadoc tool. This 
is caused by the package.html files present in these jars.

  [javadoc] javadoc: warning - Multiple sources of package comments found for 
package ""org""
  [javadoc] javadoc: warning - Multiple sources of package comments found for 
package ""org.apache""
  [javadoc] javadoc: warning - Multiple sources of package comments found for 
package ""org.apache.commons""

thanks,
Maarten","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,34972.0,,,2005-06-02 17:36:45.0,,,false,,,,,,,,,,,,,,,148233,,,Thu Jun 02 17:36:45 UTC 2005,,,,,,0|i0d7qf:,75029,,,,,,,,"02/Jun/05 17:36;skitching;The ant build.xml file has been updated to exclude the package.html files.
Thanks for reporting this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem accessing LogFactoryImpl from servlet,LOGGING-54,12340238,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Incomplete,,sstrenn@yahoo.com,sstrenn@yahoo.com,04/Jun/02 10:38,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"When trying to access an excel file from a servlet using the POI usermodel 
HSSFWorkbook, I get a ClassNotFoundException when it tries to access the 
LogFactoryImpl class (see below).  What is the problem here?  I don't get this 
exception when I use the same Java code w/in a Java application...

Stephen
sstrenn@yahoo.com


2002-06-03 20:31:00 - Ctx( /ExcelGradeCheck ): Exception in: R
( /ExcelGradeCheck + /gradecheck + null) - 
java.lang.ExceptionInInitializerError: 
org.apache.commons.logging.LogConfigurationException: 
java.lang.ClassNotFoundException: 
org.apache.commons.logging.impl.LogFactoryImpl

	at org.apache.commons.logging.LogFactory.newFactory
(LogFactory.java:497)

	at org.apache.commons.logging.LogFactory.getFactory
(LogFactory.java:350)

	at org.apache.poi.util.POILogFactory.<clinit>(POILogFactory.java:76)

	at org.apache.poi.hssf.usermodel.HSSFWorkbook.<clinit>
(HSSFWorkbook.java:113)

	at excelgradecheck.GradeCheckServlet.init(GradeCheckServlet.java:20)

	at javax.servlet.GenericServlet.init(GenericServlet.java:258)

	at org.apache.tomcat.core.ServletWrapper.doInit
(ServletWrapper.java:317)

	at org.apache.tomcat.core.Handler.init(Handler.java:215)

	at org.apache.tomcat.core.ServletWrapper.init(ServletWrapper.java:296)

	at org.apache.tomcat.core.Handler.service(Handler.java:254)

	at org.apache.tomcat.core.ServletWrapper.service
(ServletWrapper.java:372)

	at org.apache.tomcat.core.ContextManager.internalService
(ContextManager.java:812)

	at org.apache.tomcat.core.ContextManager.service
(ContextManager.java:758)

	at 
org.apache.tomcat.service.http.HttpConnectionHandler.processConnection
(HttpConnectionHandler.java:213)

	at org.apache.tomcat.service.TcpWorkerThread.runIt
(PoolTcpEndpoint.java:416)

	at org.apache.tomcat.util.ThreadPool$ControlRunnable.run
(ThreadPool.java:501)

	at java.lang.Thread.run(Thread.java:498)","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,9599.0,,,2002-09-26 14:08:50.0,,,false,,,,,,,,,,,,,,,148232,,,Sun Oct 20 00:37:22 UTC 2002,,,,,,0|i0d7qn:,75030,,,,,,,,"26/Sep/02 14:08;nbrennan@touchcorp.com;I get the same problem if I attempt to prepend the commons-logging jar into my 
Xbootclasspath (I'm running Axis):

All I need to do to generate the error is:

Class.forName(""org.apache.axis.configuration.EngineConfigurationFactoryFinder"");

And I get:

          java.lang.ExceptionInInitializerError: 
org.apache.commons.logging.LogConfigurationException: 
java.lang.NullPointerException
                at org.apache.commons.logging.LogFactory.newFactory
(LogFactory.java:558)
                at org.apache.commons.logging.LogFactory.getFactory
(LogFactory.java:355)
                at org.apache.commons.logging.LogFactory.getLog
(LogFactory.java:409)
                at org.apache.axis.components.logger.LogFactory.getLog
(LogFactory.java:76)
                at 
org.apache.axis.configuration.EngineConfigurationFactoryFinder.<clinit>
(EngineConfigurationFactoryFinder.java:89)
                at java.lang.Class.forName1(Native Method)
                at java.lang.Class.forName(Class.java:142)
                at com.touchcorp.apps.kiosk.KioskServer.main
(KioskServer.java:469)

What is going on?","26/Sep/02 21:14;rsitze@apache.org;You are describing TWO different problems.  Regarding the first, 
ClassNotFoundException:

Apparently commons-logging isn't on your path correctly.

Regarding the second, commons-logging NullPointerException (NPE):

Which version of commons-logging are you using?  This is an NPE problem with 
commons-logging 1.0.1 that may (or may not) be the same that you are 
experiencing.  The commons-logging *currently* in AXIS is from a more recent 
(post 1.0.1) nightly build of commons-logging.

Please provide more information & a test case that demonstrates failure.","20/Oct/02 00:37;rsitze@apache.org;Other recent bug fixes may have resolved this.
Close pending further info.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging]Need for parent-child classloader relationship prevent JBoss startup,LOGGING-53,12342320,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,b_stansberry@hotmail.com,b_stansberry@hotmail.com,20/Jun/05 07:57,29/Dec/09 14:35,07/Apr/19 20:35,29/Dec/09 14:35,Nightly Builds,,,,,,,,,1.1.0,,0,,,"The current version of LogFactoryImpl in svn requires that there be a
parent-child relationship between the thread context classloader and the
classloader that loaded LogFactoryImpl.  The standard classloading architecture
used in JBoss (see below) violates this constraint; as a result JBoss will not
start if a version of JCL built from svn is used.

The attached patch relaxes this constraint by attempting to load Log adapters
starting with the thread context classloader if the two classloaders are not in
a parent child relationship.  The behavior change only applies if the user has
not set the ALLOW_FLAWED_CONTEXT_PROPERTY to true.

Background: The JBoss classloading architecture includes something called the
UnifiedLoaderRepository.  Basically, when JBoss classloaders are asked to load a
class they first look to the ULR to see if the class has already been loaded. 
If it has, they return that class.  If not, normal Java classloading occurs, but
once the class is loaded, it is registered with the ULR.

This setup allows classloaders to see classes loaded by ""non-parent""
classloaders, e.g. siblings, cousins etc. (BTW, ULRs can be scoped, allowing,
for example, a J2EE EAR to isolate its classes from other deployed applications).

JBoss loads JCL using a classloader that is not the parent of the classloaders
used by a number of JBoss services and by deployed applications.  So, if JCL
forbids classloading relationships other than parent-child, JBoss will not start
properly.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,20/Jun/05 07:58;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImplJBoss.diff;https://issues.apache.org/jira/secure/attachment/12333575/ASF.LICENSE.NOT.GRANTED--LogFactoryImplJBoss.diff,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,35423.0,,,2005-06-20 19:16:32.0,,,false,,,,,,,,,,,,,,,148231,,,Mon Jun 20 19:16:32 UTC 2005,,,,,,0|i0d7qv:,75031,,,,,,,,"20/Jun/05 07:58;b_stansberry@hotmail.com;Created an attachment (id=15470)
patch to LogFactoryImpl.java
",20/Jun/05 19:16;skitching;Agreed. Patch committed as r191431. Thanks Brian.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Redirect stdout and stderr to logging system,LOGGING-52,12342698,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,wim.deblauwe@gmail.com,wim.deblauwe@gmail.com,10/Nov/05 05:16,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"Hi,

I would like to have any output from stdout and stderr redirected to the
configured logging system.  I know I can do this with log4j by using
LoggingOutputStream (See
http://cvs.apache.org/viewcvs.cgi/jakarta-log4j/contribs/JimMoore/LoggingOutputStream.java?view=markup).
Is there a way to do this without directly depending on log4j?

regards,

Wim","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37427.0,,,2005-11-10 16:40:08.0,,,false,,,,,,,,,,,,,,,148230,,,Wed Jan 18 13:05:10 UTC 2006,,,,,,0|i0d7r3:,75032,,,,,,,,"10/Nov/05 16:40;skitching;This functionality definitely does not exist in commons logging.

However commons-logging uses ""adapters"" to map to various logging libraries, and
has the ability for an application to override the adapter used via a number of
mechanisms (system property, commons-logging.properties file, service file)
which are documented. 

I think you could write a custom adapter which sets up this stdout/stderr
override stuff when loaded, and configure commons-logging to use it.

I wouldn't be particularly interested in seeing this feature in core
commons-logging though; commons-logging is mainly for use by libraries, and
libraries shouldn't be writing to stdout or stderr. Applications which need to
trap this should know what underlying logging lib is being used, and can
therefore set this stuff up themselves.","18/Nov/05 06:43;rdonkin@apache.org;I'd be willing to find a home for code to do this somewhere at Apache but I
agree that it isn't core JCL functionality. Any volunteers?","18/Jan/06 13:05;skitching;This functionality doesn't belong in JCL as described in previous comments, so
closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Memory leaks in JBoss due to LogFactory cache,LOGGING-51,12341730,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,ayud@mail.ru,ayud@mail.ru,18/Sep/04 18:51,29/Dec/09 16:21,07/Apr/19 20:35,29/Dec/09 16:21,1.0.4,,,,,,,,,1.1.0,,0,,,"LogFactory.java maintains a static cache (Hashtable) of LogFactories, keyed by 
context ClassLoader. In JBoss, and may be in many other J2EE containers, each 
hot-redeployment of a J2EE application makes a new class loader for the 
application, destroying all references to the old one. However, commons-logging.
jar is loaded by a parent classloader which is common for all applications, and 
still maintains hard references to would-be-dead ClassLoaders of undeployed 
applications. This leads to significant memory leaks, because all static members 
of all classes of the undeployed applications do not become a subject for GC. It 
would be excellent if this LogFactory caching could be disabled through a config 
or a WeakHashMap is used instead of Hashtable.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,01/Feb/05 16:45;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--JCL-guide.diff;https://issues.apache.org/jira/secure/attachment/12333120/ASF.LICENSE.NOT.GRANTED--JCL-guide.diff,09/Nov/04 15:03;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactory.diff;https://issues.apache.org/jira/secure/attachment/12333116/ASF.LICENSE.NOT.GRANTED--LogFactory.diff,19/Nov/04 14:33;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--LogFactoryTest.diff;https://issues.apache.org/jira/secure/attachment/12333117/ASF.LICENSE.NOT.GRANTED--LogFactoryTest.diff,09/Nov/04 15:02;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--WeakHashtable.java;https://issues.apache.org/jira/secure/attachment/12333115/ASF.LICENSE.NOT.GRANTED--WeakHashtable.java,23/Nov/04 15:45;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--WeakHashtable_javadoc.txt;https://issues.apache.org/jira/secure/attachment/12333118/ASF.LICENSE.NOT.GRANTED--WeakHashtable_javadoc.txt,17/Mar/05 16:37;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--memoryleaktest.zip;https://issues.apache.org/jira/secure/attachment/12333121/ASF.LICENSE.NOT.GRANTED--memoryleaktest.zip,04/Dec/04 16:40;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12333119/ASF.LICENSE.NOT.GRANTED--patch.txt,,,,,,,,,,,7.0,,,,,,,,,,,,,,,,31286.0,,,2004-09-19 18:35:24.0,,,false,,,,,,,,,,,,,,,14905,,,Wed Jan 18 13:42:05 UTC 2006,,,,,,0|i0d7rb:,75033,,,,,,,,"19/Sep/04 18:35;rdonkin@apache.org;Yep. I've been aware of this one for quite a while. It's necessary to call release when commons-logging 
is in the parent classloader of a container. 

There are a couple of issue which have prevented it being fixed. The first is that commons-logging 
needs to support JVMs which do not have weak-hash maps. The second is that for some reason the 
cache implementation (hashtable) was made protected rather than private so a direct change could 
mean breaking backward compatibility.

I can see a few ways round these issues but they aren't not so simple and (to be honest) commons-
logging really isn't an itch for me at the moment. 

The caching needs to be factored out and then some mechanism added to allow how these methods 
work to vary. A system property might do the trick but I wonder whether it might be possible to use 
aspect orientation. (I've been wondering whether releasing a vanilla implementation and enhancement 
scripts might be the long term solution to a host of thorny problems with logging.)","08/Nov/04 03:48;rdonkin@apache.org;Had another look at this today and again it looks like the downsides of altering the code outweight the 
upside.

I've been moving towards ideas about using bytecode manipulation to dope commons logging jars. The 
idea would be that though one-size-fits implementations are really not possible, it should be possible 
to use make small changes by altering the bytecode so that (for example) uses of the hashtable are 
replaced by calls to a WeakHashMap. The doped jar would no longer work correctly with certain 
subclasses or pre-Java2 JVMs but would release classloaders.","09/Nov/04 15:01;b_stansberry@hotmail.com;I wrote something a couple weeks back that sounds like it might do something 
similar to what you were thinking about, but using reflection instead of 
bytecode manipulation.  Basically, it detects if 1.2 is available and if so 
LogFactory uses a special Hashtable subclass that passes (almost) all calls 
through to a WeakHashMap.  Almost, because to allow use in 1.1 JVMs the 
methods that include Collections framework classes in their signatures are not 
overridden.  So, as you noted, this approach may cause issues with subclasses.

I hesistated to submit this as it seems a bit of a hack, but, hey, why not

Attached is a diff to LogFactory and a new class, WeakHashtable.","09/Nov/04 15:02;b_stansberry@hotmail.com;Created an attachment (id=13360)
WeakHashtable.java
","09/Nov/04 15:03;b_stansberry@hotmail.com;Created an attachment (id=13361)
LogFactory.diff
","09/Nov/04 16:49;rdonkin@apache.org;Maybe something alongs these lines might work. 

There are major performance issues with using a reflection to hook up the methods but it might be 
possible to create a Hashtable implementation that uses a WeakHashMap internally and then try to load 
the class by name when the LogFactory class is initialized. If the class can't be loaded then a normal 
Hashtable would be used. 

Probably be a good idea to allow the class name to be specified in a system property.","10/Nov/04 05:20;b_stansberry@hotmail.com;Yes, I think I made a likely unnecessary assumption that commons-logging has to 
compile under JDK 1.1, not just run.  So I used reflection throughout.  If 
compiling is not an issue, I would be happy to tweak WeakHashtable to get rid of 
all the internal use of reflection (and add the system property you suggested as 
well).","10/Nov/04 06:06;rdonkin@apache.org;I'm on GMT so the offer's come a little later (it's almost done) but the offer's really appreciated :)

This kind of stuff benefits from many eyes so what would be really useful is if you could take a look at 
the code (once I've committed it, probably tomorrow now) and run any test cases you have against it.","10/Nov/04 06:08;b_stansberry@hotmail.com;Sure, no problem at all.  I'll keep an eye out.","10/Nov/04 06:39;rsitze@apache.org;The world is watching.. and waiting.

Good to hear this is being address, in one way or another.

Just FYI, commons-discovery attempts [impl. incomplete]
to isolate JVM dependencies to a *.jdk package with
a base interface JDKHooks and separate classes for
JDK11Hooks, JDK12Hooks.

We may not be able to support something in one version
versus another, but at least this way we can document
and isolate the dependencies.  Even if it's as simple
as a getWeakHashTable() function on one such.","10/Nov/04 07:10;rdonkin@apache.org;I agree with the sentiments but hopefully this solution is so simple that no discovery is needed :)

One of the aims of the bytecode stuff I looking at is allow replacement of LogFactory with something 
that implements a minimal API. This might allow a commons-discovery based discovery mechanism to 
be added (by doping) without having to introduce a core dependency. ","11/Nov/04 07:05;rdonkin@apache.org;I've checked in my changes. I'm going to leave the documentation for another day.

The idea is that the Hashtable implementation can be specified by a system property and (when the 
class is found on the classpath) defaults to the optional WeakHashtable. The idea is that a user (on a 
1.3+ JVM) should be able to drop in the commons-logging-optional.jar and have the classloaders 
garbaged collectable without further changes.

This is going to need some testing. I've added a few tests (if anyone wants to add more, please go 
ahead :) I'll probably post something on the lists tomorrow.

BTW Brian, I'm happy to add your name to the contributors and/or author tags if that is your wish. 

","11/Nov/04 14:51;b_stansberry@hotmail.com;I'll look this over as carefully as I can and try to add a few tests.  I've 
got a couple thoughts, but I'll post to the commons-dev list to keep from 
filling up Bugzilla.

Re adding my name, at this point you've done all the work :)  If I'm able to 
make any further significant contributions to this, please feel free to add my 
name.","12/Nov/04 06:49;rdonkin@apache.org;Contributions take different forms. I commonly rewrite or reimplement patches before applying them. 
(One of the signs I look for when nominating a new committer is that they start producing patches that 
I can apply without modification.) Without your contribution, this code wouldn't have been written. (I'm
quick to credit but slow to nominate.)

Just FYI I never add credit unilaterally (except in commit messages where it provides a record) so if you 
ever decide that you've done enough and would like your name added, submit a patch. ","12/Nov/04 07:03;simon@ecnetwork.co.nz;Just to clarify: When Robert said ""if you ever decide you've done enough and
would like your name added, submit a patch"" I believe he means provide a patch
to the project.xml file which contains the author information :-)","19/Nov/04 14:27;b_stansberry@hotmail.com;Attaching  some improvements to the LogFactoryTest.  Designed to test different
classloading configurations, particularly an isolated application classloader
inside a container.","19/Nov/04 14:33;b_stansberry@hotmail.com;Created an attachment (id=13498)
Patch to LogFactoryTest
","23/Nov/04 07:52;rdonkin@apache.org;Nice work. Committed. Many Thanks.

I'm happy that this bug can be closed but I will leave it open for a while yet just in case Brian (or anyone 
else) wants to attach improvements.

Robert","23/Nov/04 15:45;b_stansberry@hotmail.com;Created an attachment (id=13519)
Javadoc for WeakHashtable

Attached adds some class level Javadoc to WeakHashtable that tries to explain
the classloading situation where a call to release() is still needed.

There's some other stuff that I'd like to do on this (perhaps use simple strong
references for values in WeakHashtable; refactor LogFactoryTest and LoadTest to
avoid code duplication), but they don't affect the functionality, and it will
probably be a while before a can get to them.","26/Nov/04 05:14;rdonkin@apache.org;Another good patch. Committed. Many thanks. 

I think that it should be possible to simplify the code in the way you suggest (by using simple strong 
references) without effecting the function.  

My next priority will be to work on the documentation build and the user guide. Then push towards a 
1.0.5 release. I'll leave this bug open until that's done in case you find time.

Robert","04/Dec/04 16:40;b_stansberry@hotmail.com;Created an attachment (id=13646)
WeakHashtable uses strong refs to values

OK, got a chance to change WeakHashtable to simple strong references to its
values.  Patch attached.

The patch also follows up on a thought we'd mentioned on the dev list.	Every
10 puts it checks the ReferenceQueue and, if needed, purges one dead entry.
Housekeeping in small doses ;-) I also added this behavior to remove().

Also changed a couple local variable names Eclipse warned about for JDK 1.5

Cheers,

Brian","15/Dec/04 19:36;rdonkin@apache.org;Hi Brian

Apologies for my tardiness (caught the traditional British Christmas Cold). Good patch, committed.

I suspect that we're approaching the end of the line for this bug now. I still need to pull together some 
documentation and integrate it with the existing stuff. So I'll leave this open as a reminder.

You might like to resubscribe to commons-dev (perhaps through www.gmane.org if the volume is 
offputting) since a lot of discussions have kicked off (involved IBM amongst others) about the future of 
commons logging and enterprise logging in general. I'm sure you're input would be welcomed.

Robert","01/Feb/05 16:45;b_stansberry@hotmail.com;Created an attachment (id=14148)
Update to the User Guide

Attached is a patch to guide.xml that includes discussion of the issues in this
bug and the fix.  Also includes discussion of what the various jars in the
standard distribution are, in order to give some context to the above.","07/Feb/05 08:33;rdonkin@apache.org;Committed. Many thanks.

I'm closing this one now (but please feel free to open new reports for any new
improvements). 

Robert","17/Mar/05 16:34;b_stansberry@hotmail.com;As discussed on the commons-dev list, even using WeakHashtable the classloader
is not released when LogFactoryImpl is loaded by a parent loader and the
Log wrapper is loaded  by a child.  This is because the LogFactoryImpl holds a
reference to the Log in its instances map, and that reference prevents the Log's
classloader being released.

Will attach a patch to the JUnit tests that show the problem.  Sadly, no fix is
in the patch :(","17/Mar/05 16:37;b_stansberry@hotmail.com;Created an attachment (id=14501)
Further tests for memory leak

The patch includes a new class -- a special classloader that may also be useful
in tests of the JCL discovery process.","31/Aug/05 05:19;ddkilzer@kilzer.net;FYI, here's the corresponding JBoss bug.  They've proposed a similar fix and
(per their comments) may roll their own commons-logging-1.0.3 to fix the problem.

http://jira.jboss.com/jira/browse/JBAS-1319
","18/Jan/06 13:42;skitching;I don't think we're going to get any better than the current code on this issue.
Brian's WeakHashtable fixes some cases transparently which is nice.

A custom ServletContextListener class that calls release() can definitely solve
the problem in  all cases, but requires some additional work on the user's side.
This class is currently in the release, but may end up just as documentation
instead; issue still being debated.

I'm therefore closing this.",,,,,,,,,,
Corrupted Source Zip: commons-logging-1.0.2-src.zip,LOGGING-50,12340745,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,ignat@cs.virginia.edu,ignat@cs.virginia.edu,01/Jun/03 02:58,29/Dec/09 16:47,07/Apr/19 20:35,29/Dec/09 16:47,1.0.2,,,,,,,,,1.0.2,,0,,,"http://jakarta.apache.org/builds/jakarta-commons/release/commons-
logging/v1.0.2/commons-logging-1.0.2-src.zip is a corrupted zip file.  Please 
repost a good one as soon as possible.","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,20386.0,,,2003-06-01 17:08:54.0,,,false,,,,,,,,,,,,,,,148229,,,Sun Jun 01 17:08:54 UTC 2003,,,,,,0|i0d7rj:,75034,,,,,,,,"01/Jun/03 17:08;rdonkin@apache.org;the problem seems to be that the tar.gz version was copied over the zip. i've
created a new zip and uploaded it. hopefully this should be ok now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MANIFEST.MF references invalid log4j-core.jar,LOGGING-49,12340691,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,lquijano@hotpop.com,lquijano@hotpop.com,29/Apr/03 00:06,29/Dec/09 16:28,07/Apr/19 20:35,29/Dec/09 16:28,,,,,,,,,,1.0.4,,0,,,"MANIFEST.MF references both log4j.jar and log4j-core.jar, but the current log4j
release - 1.2.8 - only distributes log4j.jar (and AFAIK some older releases like
1.2.6 too). Maybe this is an invalid reference, don't you think?","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,19393.0,,,2003-04-29 00:28:47.0,,,false,,,,,,,,,,,,,,,148228,,,Tue Apr 29 00:28:47 UTC 2003,,,,,,0|i0d7rr:,75035,,,,,,,,"29/Apr/03 00:28;craig.mcclanahan@sun.com;These references have been removed in the latest nightly builds of
commons-logging, and this change will be incorporated into the next release. 
For now, you can grab the latest nightly build from:

http://jakarta.apache.org/builds/jakarta-commons/nightly/commons-logging/
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Checking for JDK 1.4,LOGGING-48,12340522,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,wen@eigner.com,wen@eigner.com,31/Jan/03 00:48,29/Dec/09 16:44,07/Apr/19 20:35,29/Dec/09 16:44,1.0,,,,,,,,,1.0.3,,0,,,"In LogFactoryImpl it is checked for a JDK 1.4 being avaible by trying to load 
class java.util.logging.Logger. When using <a 
href=""http://javalogging.sourceforge.net/"">lumberjack</a> under JDK 1.3 it is 
therefore assumed that JDK 1.4 is available which is surely not the case. You 
will receive a java.lang.NoSuchMethodError when tying to call 
Throwable.getStackTrace() in class Jdk14Logger.
I would suggest to use another new class in JDK 1.4 to check for its existence.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16606.0,,,2003-02-01 12:13:21.0,,,false,,,,,,,,,,,,,,,148227,,,Sat Feb 01 12:13:21 UTC 2003,,,,,,0|i0d7rz:,75036,,,,,,,,"01/Feb/03 12:13;craig.mcclanahan@sun.com;Fixed in nightly build 20030201.  We now check for ""java.sql.Savepoint"" instead
of ""java.util.logging.Logger"".
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging][PATCH] Improvements to wrapper classes,LOGGING-47,12342847,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,boris.unckel.mlg@gmx.net,boris.unckel.mlg@gmx.net,08/Jan/06 06:41,29/Dec/09 22:15,07/Apr/19 20:35,29/Dec/09 22:15,,,,,,,,,,1.1.0,,0,,,"There are several issues with the wrapper classes.

1) Logging null objects or not
If the message object is null, the logger logs the String ""NULL"" to the
underlying log system. Currently some wrappers just return and some log the
String ""NULL"".
-> The patch unifies that. All wrappers will log the String ""NULL"".

2) Exception safe toString
Currently all wrappers would fail if an toString method throws a
RuntimeException. See
http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=113664590418487&w=2
for details.
-> The patch logs an error message instead and an additional log record with
the exception in a central, private doLog method.

3) isLoggable check
Currently some wrappers check the log level in each log method and some wrappers
check the level in one central method, which applies the log message and
throwable to the underlying log system.
-> The patch unifies that. All wrappers will use a doLog method and check the
level there. One exception: AvalonLogger which has no Level/Priority object.

3) JavaDoc
Every wrapper has its own javadoc for the log methods, sometime with reference
to the Log interface, sometimes with the underlying log level, ...
-> The patch unifies that. All wrapper log methods are commented in the same way.

4) Additional class
There is one additional class for the error message, to have a single point of
change.

Please check the patch for correct format.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,20/Jan/06 02:58;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--AvalonLogger_Patch.txt;https://issues.apache.org/jira/secure/attachment/12333980/ASF.LICENSE.NOT.GRANTED--AvalonLogger_Patch.txt,20/Jan/06 02:59;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--Jdk13LumberjackLogger_Patch.txt;https://issues.apache.org/jira/secure/attachment/12333981/ASF.LICENSE.NOT.GRANTED--Jdk13LumberjackLogger_Patch.txt,20/Jan/06 03:00;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--Jdk14Logger_Patch.txt;https://issues.apache.org/jira/secure/attachment/12333982/ASF.LICENSE.NOT.GRANTED--Jdk14Logger_Patch.txt,20/Jan/06 03:00;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--Log4J12Logger_Patch.txt;https://issues.apache.org/jira/secure/attachment/12333983/ASF.LICENSE.NOT.GRANTED--Log4J12Logger_Patch.txt,20/Jan/06 03:01;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--Log4J13Logger_Patch.txt;https://issues.apache.org/jira/secure/attachment/12333984/ASF.LICENSE.NOT.GRANTED--Log4J13Logger_Patch.txt,20/Jan/06 03:02;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--LogKitLogger_Patch.txt;https://issues.apache.org/jira/secure/attachment/12333985/ASF.LICENSE.NOT.GRANTED--LogKitLogger_Patch.txt,20/Jan/06 03:02;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--SimpleLog_Patch.txt;https://issues.apache.org/jira/secure/attachment/12333986/ASF.LICENSE.NOT.GRANTED--SimpleLog_Patch.txt,08/Jan/06 07:05;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--jclimpl.patch;https://issues.apache.org/jira/secure/attachment/12333979/ASF.LICENSE.NOT.GRANTED--jclimpl.patch,08/Jan/06 06:43;boris.unckel.mlg@gmx.net;ASF.LICENSE.NOT.GRANTED--jclimpl.patch;https://issues.apache.org/jira/secure/attachment/12333978/ASF.LICENSE.NOT.GRANTED--jclimpl.patch,,,,,,,,,9.0,,,,,,,,,,,,,,,,38174.0,,,2006-01-08 08:12:23.0,,,false,,,,,,,,,,,,,,,43163,,,Tue Dec 29 22:15:19 UTC 2009,,,,,,0|i0d7s7:,75037,,,,,,,,"08/Jan/06 06:43;boris.unckel.mlg@gmx.net;Created an attachment (id=17359)
Improvements for null message behavior, exception in toString behavior,
javadoc.
","08/Jan/06 07:04;boris.unckel.mlg@gmx.net;(From update of attachment 17359)
Patch contains error.
","08/Jan/06 07:05;boris.unckel.mlg@gmx.net;Created an attachment (id=17360)
Improvements for null message behavior, exception in toString behavior,
javadoc.

This time correct version.","08/Jan/06 08:12;william.barker@wilshire.com;At least for log4j, this is wrong, since the conversion of Objects to Strings 
is controlled by the log4j configuration.  With this patch, you've preempted 
that functionallity.","09/Jan/06 01:37;boris.unckel.mlg@gmx.net;(In reply to comment #4)
> At least for log4j, this is wrong, since the conversion of Objects to Strings 
> is controlled by the log4j configuration.  With this patch, you've preempted 
> that functionallity.

You are right. log4j suffers currently from the same problem (no exception safe
message rendering). It is a design decision to have _one_ behaviour for all
classes, or  one behaviour for underlying logging supporting object as message
and another for underlying APIs which require String.

I would suggest to apply the patch now (since log4j has no exception safe
rendering) and change it, if it has the capability to deal with exceptions in
toString.

Or in other words:
What causes the user more pain: Missing individual formatting or missing a good
exception handling strategy?
The org.apache.log4j.or.DefaultRenderer does nothing but o.toString()

The patch has one advantage: You would have to change at one single place per
Log4j1xLogger (x 2,3)...","18/Jan/06 13:39;skitching;Hi Boris,

Thanks very much for your patch. Unfortunately I'm inclined not to apply this
patch to the next release, for the reasons below. However I agree these points
should definitely be kept in mind when designing JCL 2.0.


The implementation adds overhead to the critical path for logging messages,
including an extra virtual method call and a call to the underlying logger to
determine whether the loglevel is enabled. There's some additional overhead if
the message is actually logged, but that's not so important as the act of really
logging a message is likely to be much larger than the overhead introduced.

The patch is also reasonably large, touching a significant portion of all the
logging classes. That introduces the risk of new bugs; JCL's unit test suite
isn't *too* bad but it's definitely not 100% coverage so we can't just trust the
tests to pick up any issues.

The issue of behaviour when NULL is passed as the object to log is valid; it
would be nice for JCL to impose consistent behaviour rather than leaving it up
to the underlying logging library. However it's not a major issue.

The issue of the message-object to be logged throwing an exception in its
toString is really pretty unusual. Almost all the time, a String or StringBuffer
will be passed here, and they never have problems with toString. In the rare
case where it does occur, it's the caller's fault anyway. Yes, this would be
nice to handle but I don't think the risk of introducing a bug is worth it at
the moment.

Consistency of code - yes that would be nice, but it's not critical.

JavaDoc - again, this would be nice but it's not critical. I would consider a
javadoc-only patch, but can't be bothered to extract the javadoc bits out of the
attached all-in-one patchfile.

Centralising code for future maintainability - well, yes good idea. But this
code doesn't have a lot of lifetime left; hopefully the release after next will
be JCL 2.0, with significant work done on all parts of the library.


Anyone else got an opinion on this?","19/Jan/06 06:34;rdonkin@apache.org;Yeh: a combined patch with so many changes makes things very difficult. I agree
with Simon's analysis of the patch (too big to apply and would prefer a less
centralised implementation).

I might see if I can extract the javadoc improvements.

If they were separate, decentralised patch's I'd probably be willing to take the
risk of applying both the consistent NULL patch and the toString exception handling.","19/Jan/06 13:38;skitching;As William noted, the use of String.valueOf(msg) on the input object to avoid
exceptions has significant implications. Suppose a user passes a custom
MessageRecord object as the parameter, and then has a custom Log4J Renderer
which takes this object and builds a string out of it in some clever way. By
forcing the message parameter to a string at the JCL level, that breaks the code
completely.

Boris makes the point that if someone is doing this then they really should be
using log4j directly, not JCL, because that won't work if JCL is bound to
anything other than log4j. Nevertheless, I'm inclined to avoid introding such
breakage in this release, and make a note of that point for JCL2, where we could
potentially state that all ""rendering"" of the message object is done by JCL for
consistency. Currently, 1.1 is very close to being backwards compatible and I
would prefer to keep it that way.","20/Jan/06 02:54;boris.unckel.mlg@gmx.net;(From update of attachment 17360)
The patch was rejected by the project due to complexity and unwanted feature of
exception handling.
","20/Jan/06 02:58;boris.unckel.mlg@gmx.net;Created an attachment (id=17451)
Patch for AvalonLogger

- JavaDoc
- per level log method (doLogTrace, doLogDebug...)
- Null behaviour (null object message will be logged)
- Null safe
- Formatting of source code may show more diff as needed (sorry)!

** Nothing else **","20/Jan/06 02:59;boris.unckel.mlg@gmx.net;Created an attachment (id=17452)
Patch for Jdk13LumberjackLogger

- JavaDoc
- single doLog method for all levels
- Null behaviour (null object message will be logged)
- Null safe
- Formatting of source code may show more diff as needed (sorry)!

** Nothing else **
","20/Jan/06 03:00;boris.unckel.mlg@gmx.net;Created an attachment (id=17453)
Patch for Jdk14Logger

- JavaDoc
- single doLog method for all levels
- Null behaviour (null object message will be logged)
- Null safe
- Formatting of source code may show more diff as needed (sorry)!

** Nothing else **
","20/Jan/06 03:00;boris.unckel.mlg@gmx.net;Created an attachment (id=17454)
Patch for Log4J12Logger

- JavaDoc
- single doLog method for all levels
- Null behaviour (null object message will be logged)
- Null safe
- Formatting of source code may show more diff as needed (sorry)!

** Nothing else **
","20/Jan/06 03:01;boris.unckel.mlg@gmx.net;Created an attachment (id=17455)
Patch for Log4J13Logger

- JavaDoc
- single doLog method for all levels
- Null behaviour (null object message will be logged)
- Null safe
- Formatting of source code may show more diff as needed (sorry)!

** Nothing else **
","20/Jan/06 03:02;boris.unckel.mlg@gmx.net;Created an attachment (id=17456)
Patch for LogKitLogger

- JavaDoc
- single doLog method for all levels
- Null behaviour (null object message will be logged)
- Null safe
- Formatting of source code may show more diff as needed (sorry)!

** Nothing else **
","20/Jan/06 03:02;boris.unckel.mlg@gmx.net;Created an attachment (id=17457)
Patch for SimpleLog

- JavaDoc
- single doLog method for all levels
- Null behaviour (null object message will be logged)
- Null safe
- Formatting of source code may show more diff as needed (sorry)!

** Nothing else **
","20/Jan/06 05:07;rdonkin@apache.org;Thanks for the revised patches.

I'll go through them now. 

Robert",29/Dec/09 22:15;dennisl@apache.org;The Javadoc improvements where commited by rdonkin prior to the 1.1.0 release.,,,,,,,,,,,,,,,,,,,,
build.xml line 252 references file `LICENSE' in wrong place,LOGGING-46,12340418,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Fixed,,milkfilk@yahoo.com,milkfilk@yahoo.com,14/Nov/02 13:34,29/Dec/09 16:55,07/Apr/19 20:35,29/Dec/09 16:55,Nightly Builds,,,,,,,,,1.0.3,,0,,,"The build was failing, because it couldn't find LICENSE.txt.  There is no
``LICENSE.txt'', but a text file ``LICENSE''.

I changed line 252 to read:

<copy      file=""./LICENSE.txt""

instead of:

<copy      file=""../LICENSE""


And the build finished.  Pretty simple and also minor.","Operating System: Linux
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14536.0,,,2002-11-23 12:00:20.0,,,false,,,,,,,,,,,,,,,148226,,,Sat Nov 23 12:00:20 UTC 2002,,,,,,0|i0d7sf:,75038,,,,,,,,"23/Nov/02 12:00;craig.mcclanahan@sun.com;This got fixed along the way, so I'm closing this report.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Default LogFactory Implementation fails for Log4J : ClassCastException,LOGGING-45,12340243,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,jerome.jacobsen@gentootech.com,jerome.jacobsen@gentootech.com,13/Jun/02 23:26,29/Dec/09 17:08,07/Apr/19 20:35,18/Nov/06 12:48,1.0,,,,,,,,,1.0.3,,1,,,"I've got Log4J 1.1.3 JAR in my classpath.  Upon startup of my application 
(actually a JUnit test case), I immediately get:

java.lang.ExceptionInInitializerError: 
org.apache.commons.logging.LogConfigurationException: 
java.lang.ClassCastException

So I downloaded the Commons Logging 1.0 source and debugged.  The problem is in 
org.apache.commons.logging.impl.LogFactoryImpl.guessConfig().

Class proxyClass=findClassLoader().
  loadClass( ""org.apache.commons.logging.Log4jFactory"" );

The above loadClass call should be changed to:

Class proxyClass=findClassLoader().
  loadClass( ""org.apache.commons.logging.impl.Log4jFactory"" );

However, after I make the above change I still get a ClassCastException, now 
from org.apache.commons.logging.LogFactory.newFactory().  This exception  
baffles me.  It happens at: 

return (LogFactory) clazz.newInstance();

So I modify newFactory() to do the newInstance() and the return in two steps 
instead of one.

Object result = clazz.newInstance();
return (LogFactory)result;

The exception occurs during the cast of result.  If I print result's class name 
I get org.apache.commons.logging.impl.LogFactoryImpl.  But checking if result 
is an instanceof org.apache.commons.logging.impl.LogFactoryImpl returns false.

Object result = clazz.newInstance();
System.out.println(""Got Factory: "" + result.getClass().getName());

if (result instanceof LogFactory) {
  System.out.println(""result is a LogFactory"");
}

if (result instanceof org.apache.commons.logging.impl.LogFactoryImpl) {
  System.out.println(""result is a LogFactoryImpl"");
}

return (LogFactory) result;

The code above just prints:
Got Factory: org.apache.commons.logging.impl.LogFactoryImpl

And then throws the ClassCastException.  I'm confused.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,9845.0,,,2002-07-31 00:59:35.0,,,false,,,,,,,,,,,,,,,148225,,,Sun Apr 27 05:08:41 UTC 2003,,,,,,0|i0d7sn:,75039,,,,,,,,"31/Jul/02 00:59;dwallace@udel.edu;I second this: I am seeing very much similiar behavior with Jdk 1.3 & 1.4 with
the latest logging release and the 2002-7-30 snapshot. Somehow, the classname
looks right but the class programmatically is not recognized as being a subclass
of its parent.","02/Sep/02 19:07;david@pastornet.net.au;I'm seeing the same thing, with jdk 1.3.","20/Oct/02 00:44;rsitze@apache.org;This is a KNOWN problem with J2EE and (other) managed environments where there
are multiple instances of commons-logging.jar (and/or commons-logging-api.jar).

[I'm changing this to 'LATER' to move it out of the open problem category,
but also to leave it open for futher comment/suggestions/discussion]

The problem is that you have different parts of commons-logging being loaded
by different classloaders, and though they have the same NAME, they are not
the same class (diff classloader).  So... class cast exception.

This is NOT easily fixed in commons-logging, though providing details on your
environments and any work-arounds you might be able to provide would be usefull.

Any JUnit Guru's out there?  Can this be caused by using commons-logging at 
various levels within the test suites?

<ras>",07/Apr/03 16:36;rdonkin@apache.org;commons-logging 1.0.3 released.,"08/Apr/03 05:04;mohankishore@yahoo.com;The reporters might like to check with the nightly build, whether the problem 
still persists. The guessConfig() method has been removed from 
org.apache.commons.logging.impl.LogFactoryImpl.

","27/Apr/03 05:08;craig.mcclanahan@sun.com;Marking as closed, because as far as I can tell this works correctly with 1.0.3.

As a side note, one cause for ClassCastException problems would be having
commons-logging classes available from more than one class loader, and not being
careful to ensure that all the c-l classes are loaded from the same class
loader.  A class ""foo"" loaded from class loader A and a class ""foo"" loaded from
class loader B are not the same class, even if the bytecodes happen to be identical.
Attempts to do assignments or casts between them will fail.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFactory property with Log4j,LOGGING-44,12340344,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,giacomo@apache.org,giacomo@apache.org,01/Oct/02 04:41,29/Dec/09 16:58,07/Apr/19 20:35,29/Dec/09 16:58,1.0.2,,,,,,,,,1.0.3,,0,,,"We've dicovered an issue with the current commons-logging code (1.0.2).

We have a servlet depoyed into a Servlet engine which has a log4j.jar in
its common classpath but our servlet (using commons-logging) need to used
logkit. We tried to use the system property
""org.apache.commons.logging.Log"" set to
""org.apache.commons.logging.impl.LogKitLogger"" as suggested with no luck.

So, we looked into the code and found that the constructor of
org.apache.commons.logging.impl.LogFactoryImpl is doing the following:

    public LogFactoryImpl() {
        super();
        guessConfig();
    }

and the guessConfig does:

    protected void guessConfig() {
        if( isLog4JAvailable() ) {
            proxyFactory = null;
            try {
                Class proxyClass=
                    loadClass(
""org.apache.commons.logging.impl.Log4jFactory"" );
                if (proxyClass != null) {
                    proxyFactory = (LogFactory)proxyClass.newInstance();
                }
            } catch( Throwable t ) {
                ; // ignore
            }
        }
        // other logger specific initialization
        // ...
    }

Admittedly if have no idea what the proxyFactory is used for but for us
this means commons-logging does not respect the system property suggested
to use any other logging kit if there is a log4j in the classpath
anywhere.

Is this intentional?

By commenting the 'guessConfig()' call from the constructor we could solve
our problems but I'd really like to hear your oppinions about it.

Cheers

Giacomo","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,13157.0,,,2002-10-20 00:23:52.0,,,false,,,,,,,,,,,,,,,148224,,,Sun Oct 20 00:23:52 UTC 2002,,,,,,0|i0d7sv:,75040,,,,,,,,"20/Oct/02 00:23;rsitze@apache.org;Lots of logic got changed to make this work,
helpfull if a few would verify that I haven't broken
anything OTHER than overly friendly attitude to Log4J :-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
can't get log4j logger in webapp under tomcat5+java1.4,LOGGING-43,12341565,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Cannot Reproduce,,bloch@laszlosystems.com,bloch@laszlosystems.com,12/Jul/04 21:51,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.3,,,,,,,,,,,0,,,"Couldn't find a commons-logging specific email list and thought I'd file
a bug in the hopes that someone might have already seen this.

I'm having trouble making httpclient 2.0 (a user of commons logging)
use log4j logging inside Tomcat5 (when running against java 1.4).  Seems as
though tomcat5 makes some call to the the commons logger early on (see below). 
Tomcat5 doesn't come with log4j... so the commons logging default log factory
implementation picks up the jdk14 logger for tomcat as you'd expect.

I'm guessing that somehow when my webapp comes up... the commons logger fails to
look for log4j in my WEB-INF/lib (this is where it finds httpclient).  

This feels like one of the class-loader disagreements that I've seen related to
java/commons-logging and the servlet spec.  That is, my webapp is getting
tomcat's copy of the default log factor impl, instead of its own.

Fwiw, this is a stack from early tomcat initialization:

LogFactoryImpl.getLogClassName() line: 331
LogFactoryImpl.getLogConstructor() line: 368
LogFactoryImpl.newInstance(String) line: 529
LogFactoryImpl.getInstance(String) line: 235
LogFactoryImpl.getInstance(Class) line: 209
LogFactory.getLog(Class) line: 351
JdkCompat.<clinit>() line: 53
StandardClassLoader.<clinit>() line: 207
ClassLoaderFactory.createClassLoader(File[], File[], URL[], ClassLoader) line: 189
Bootstrap.createClassLoader(String, ClassLoader) line: 160
Bootstrap.initClassLoaders() line: 104
Bootstrap.init() line: 193
Bootstrap.main(String[]) line: 399

And this is a stack where my initial use of the httpclient ends up picking up
the JDK14 logger even though my webapp has log4j in it's WEB-INF/lib:

Jdk14Logger.<init>(String) line: 50
NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not
available [native method]
NativeConstructorAccessorImpl.newInstance(Object[]) line: 39
DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27
Constructor.newInstance(Object[]) line: 274
LogFactoryImpl.newInstance(String) line: 529
LogFactoryImpl.getInstance(String) line: 235
LogFactoryImpl.getInstance(Class) line: 209
LogFactory.getLog(Class) line: 351
MultiThreadedHttpConnectionManager.<clinit>() line: 98
..
..
..


It isn't an option for me to put touch any of the jars inside the container. 
And I'd like to force httpclient to use log4j when it's used within my webapp. 
This was working fine, fyi, in tomcat4.

Any clues/advice?

Thanks!

-Eric","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,30054.0,,,2004-07-13 03:07:05.0,,,false,,,,,,,,,,,,,,,148223,,,Sat Jul 31 02:30:40 UTC 2004,,,,,,0|i0d7t3:,75041,,,,,,,,"13/Jul/04 03:07;rdonkin@apache.org;hi eric

Just FYI all the jakarta commons components use the same mailing lists (commons-dev and commons-
user). This is a FAQ (or should be ;) Please give a little something back by adding this to the wiki FAQ 
(http://wiki.apache.org/jakarta-commons/Logging/FrequentlyAskedQuestions) if I manage to set you 
straight.

The first thing I'd like to add is that the documentation has improved for the 1.0.4 release but logging 
has changed only slightly (mainly adding compatibility with the log4j 3.x series of releases). If you 
haven't taken a look already, the documentation on the website (http://jakarta.apache.org/commons/
logging/) should be more helpful than that which came with 1.0.3.

Okay - onto my recommendation. You can either use the services mechanism (which doesn't seem to 
be well documented at the moment - i'm very busy with releases at the moment so if you manage to 
get this working, putting something on the wiki would be really appreciated see http://java.sun.com/
j2se/1.3/docs/guide/jar/jar.html and the source) or add a commons-logging.properties file into the 
root of your classes file in the webapp containing 

org.apache.commons.logging.LogFactory=org.apache.commons.logging.impl.LogFactoryImpl
org.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger

After searching for this information, I've realized just who much work needs to be done on the 
documentation. Will have to wait, though. So much to do, so little time :(

Robert

","13/Jul/04 04:15;bloch@laszlosystems.com;Thanks so much for the response!  I'll be happy to edit the wiki when I get this
resolved!

I dropped a commons-logging.properties file into WEB-INF/classes and reloaded by
webapp and the httpclient logging still isn't going to log4j :-(

What are your recommended debugging techniques here?

Again, thanks so much.
-Eric
","13/Jul/04 04:28;bloch@laszlosystems.com;Please ignore the previous comment.  I restarted by container 
and got an exception when tomcat starts up (this exception only
occurs when I have the commons-logging.properties file in my webap):

LogConfigurationException: java.lang.ClassNotFoundException:
org.apache.commons.logging.impl.Log4JLogg
er
        at
org.apache.catalina.core.StandardHostDeployer.install(StandardHostDeployer.java:494)
        at org.apache.catalina.core.StandardHost.install(StandardHost.java:863)
        at
org.apache.catalina.startup.HostConfig.deployDescriptors(HostConfig.java:482)
        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:427)
        at org.apache.catalina.startup.HostConfig.start(HostConfig.java:964)
        at
org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:349)
        at
org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1091)
        at org.apache.catalina.core.StandardHost.start(StandardHost.java:789)
        at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1083)
        at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:478)
        at org.apache.catalina.core.StandardService.start(StandardService.java:476)
        at org.apache.catalina.core.StandardServer.start(StandardServer.java:2298)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:556)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:284)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:422)","13/Jul/04 05:09;rdonkin@apache.org;debugging a logging configuration is difficult.

that's exception looks pretty wierd and i don't have a good answer. you could try:

1 check that the class name in the commons-logging.properties file is exactly right. (take a look in the 
JavaDocs.)

2 if that doesn't work, try dropping the commons-logging jar into you web app's lib. this will probably 
produce a different exception (but it might work).

3 unroll the commons-logging jar and reroll a new jar just with Log4JLogger in it. try adding that.","14/Jul/04 01:16;william.barker@wilshire.com;Tomcat doesn't include commons-logging.jar (only commons-logging-api.jar).  
You need to install the full commons-logging.jar to use log4j.","31/Jul/04 01:32;bloch@laszlosystems.com;Are you saying there's no way to use the log4j bits from commons-logging
inside a webapp w/out modifying tomcat jars?  In tomcat 5.0.24, the only copy
of commons-logging stuff I see is

$TOMCAT_HOME/bin/commons-logging-api.jar

Do I replace that with commons-logging.jar?  Or put the commons-logging.jar
somewhere inside tomcat?  (I've tried putting it inside WEB-INF/lib as well as
placing a commons-logging.properties file inside WEB-INF/classes and I still
can't get commons logging to use log4j.


Thanks,
Eric


-Eric


","31/Jul/04 01:37;yoavs@computer.org;No, you don't need to modify tomcat jars or recompile any of them..  See the 
Tomcat FAQ entry for this issue: 
http://jakarta.apache.org/tomcat/faq/misc.html#commonsLoggingLog4j.

","31/Jul/04 02:30;bloch@laszlosystems.com;I *finally* go this to work.  

1) Copy commons-logging.jar and log4j-1.2.x.jar to $TOMCAT_HOME/common/lib
2) Copy both jars to my webapp as well.


-Eric
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] setUpHandlers leaves handlers null pointer,LOGGING-42,12342229,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,skitching,ms419@freezone.co.uk,ms419@freezone.co.uk,07/May/05 11:29,29/Dec/09 16:09,07/Apr/19 20:35,29/Dec/09 16:09,1.0.4,,,,,,,,,1.1.0,,0,,,"These errors occur because the ""handler"" field is null -


     [...]
     [java] There were 3 errors:
     [java] 1)
testSerializable(org.apache.commons.logging.jdk14.CustomConfigTestCase)java.lang.NullPointerException
     [java]    at
org.apache.commons.logging.jdk14.CustomConfigTestCase.checkLogRecords
(CustomConfigTestCase.java:215)
     [java]    at
org.apache.commons.logging.jdk14.CustomConfigTestCase.testExceptionMessages
(CustomConfigTestCase.java:139)
     [java]    at
org.apache.commons.logging.jdk14.CustomConfigTestCase.testSerializable
(CustomConfigTestCase.java:186)
     [java]    at java.lang.reflect.Method.invoke0 (Method.java)
     [java]    at java.lang.reflect.Method.invoke (Method.java:255)
     [...]


The ""handler"" field is probably null due to an error in gnu classpath

Anyway, a ClassCastException in setUpHandlers is probably more helpful than
NullPointerExceptions in checkLogRecords -
http://www.sfu.ca/~jdbates/tmp/commons-logging/patch

Thanks for your work on these terrific tools!

Jack","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,23/May/05 10:43;skitching;ASF.LICENSE.NOT.GRANTED--CustomConfigTestCase-patch.txt;https://issues.apache.org/jira/secure/attachment/12333506/ASF.LICENSE.NOT.GRANTED--CustomConfigTestCase-patch.txt,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,34792.0,,,2005-05-23 10:43:43.0,,,false,,,,,,,,,,,,,,,148222,,,Tue May 24 09:56:23 UTC 2005,,,,,,0|i0d7tb:,75042,,,,,,,,"23/May/05 10:43;skitching;Created an attachment (id=15120)
patch to jdk14 test case to handle incorrect handler setup

Here's an alternative solution to your problem (I hope). I've committed this
patch as subversion revision 177867. If you have any issues with this, please
let me know. Otherwise I will close this bug report in about a week's time.

Regards, Simon","24/May/05 09:56;ms419@freezone.co.uk;(In reply to comment #1)
> Here's an alternative solution to your problem (I hope)

Sweet - with your patch I get this much improved error message -


     [...]
     [echo] Custom Configuration (JDK 1.4 Auto-Recognized)
     [java] .F.F.F.F.F.F.F
     [java] Time: 0.155
     [java] There were 7 failures:
     [java] 1) 
testExceptionMessages(org.apache.commons.logging.jdk14.CustomConfigTestCase)junit.framework.As
sertionFailedError: Unexpected number of handlers for JDK14 logging expected:<1> but was:<0>
     [java]    at org.apache.commons.logging.jdk14.CustomConfigTestCase.setUpHandlers 
(CustomConfigTestCase.java:293)
     [java]    at org.apache.commons.logging.jdk14.CustomConfigTestCase.setUp 
(CustomConfigTestCase.java:108)
     [java]    at java.lang.VirtualMachine.invokeMain (VirtualMachine.java)
     [java]    at java.lang.VirtualMachine.main (VirtualMachine.java:108)
     [...]


Your solution was _far_ better than mine - many thanks!

Jack",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove default log4j configuration,LOGGING-41,12340345,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,stevencaswell@apache.org,stevencaswell@apache.org,02/Oct/02 20:06,29/Dec/09 16:57,07/Apr/19 20:35,18/Nov/06 12:48,1.0.1,,,,,,,,,1.0.3,,4,,,"I am requesting that the code added to Log4JCategory in
commons-logging-1.0.1 that sets up a default initialization in log4j be
removed.

Why? When I put 1.0.1 in place of 1.0, I started getting extraneous
messages logged to the console. Subsequent research led me to the new
initialization code in Log4JCategory. The problem is in the way the
initialization code tries to decide if log4j has been configured. It
assumes that the root category has been configured with an appender. I
happen to have a log4j properties configuration that doesn't configure
an appender, so the initialization code couldn't tell that log4j had
been configured, it created the default root appender, and I started
getting the extraneous messages.

I realize there are easy workarounds for my particular problem, but I
believe this presents a more philosophical issue. Quoting from the
commons-logging api org.apache.commons.logging package description:

""The basic principle is that the user is totally responsible for the
configuration of the underlying logging system. Commons-logging should
not change the existing configuration.""

The code in question directly violates this expressly stated principal
and is inappropriate. Allowing this code to remain opens a Pandora's box
of attempts to configure the underlying logger, which should be resisted
based on the above principal.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,13201.0,,,2002-10-06 08:10:57.0,,,false,,,,,,,,,,,,,,,148221,,,Tue Apr 15 19:06:34 UTC 2003,,,,,,0|i0d7tj:,75043,,,,,,,,"06/Oct/02 08:10;steve.downey@netfolio.com;In practice, I think this means changing the selection mechanism for the logging
system to use. It's not enough to see that log4j is present. If the root logger
in log4j is not configured, then log4j can't be used. Otherwise you get errors
printed out instructing you to correctly configure the logging system. 

OTOH, I also think it's a logical error to use log4j without configuring the
root logger, even if only to send everything to the null appender.

","20/Oct/02 00:57;rsitze@apache.org;Realizing that there are OTHER complications in this,
would looking for the presence of 'log4j.properties'
be sufficient for everyones needs?","23/Oct/02 00:44;steve.downey@netfolio.com;Not for me. I use log4j, but it's not configured using the default configuration
mechanism. I configure explicitly, and not always from a property file name
'log4j.properties'.

How about this? If we're searching for a log implementation, that is,an
implementation has not been set explicitly, and the log4j Root appender is not
configured, move on to the next in the search list?

I'd also like to know what Steven Caswell's desired behavior is? He's got the
use case where Root is unconfigured, but other loggers are. What should a random
log category do in this case. Be default, I believe Log4J will print out error
messages, which is, in my opinion, undesireable behavior.
","23/Oct/02 02:17;ceki@apache.org;
Steven Caswell has said it well.

I don't agree with Steve Downey. He says: ""If the root logger
in log4j is not configured, then log4j can't be used. Otherwise you get errors
printed out instructing you to correctly configure the logging system.""

Log4j is designed to warn the user that it was not properly configured. 

He also states: ""I also think it's a logical error to use log4j without 
configuring the root logger, even if only to send everything to the null 
appender.""

Log4j can be correctly used without ever configuring the root logger. 
","23/Oct/02 09:52;steve.downey@netfolio.com; I didn't mean that log4j in an application couldn't be used without a root logger configured. That's well within scope for log4j and a self contained application.   But what should the semantics be for an application that uses a component that uses commons-logging that doesn't have a root appender configured? When the component goes to log, it will get an unconfigured category, and will generate errors. It might not even be the component that's of interest to the application. e.g. httpclient may use collections, which uses logging.   By leaving log4j unconfigured, we force the application to become interested in logging. And removing log4j is not always feasible. It may be present to support other apps that are interested in logging.   Getting log4j warnings just because you start using a commons component seems wrong.   ","23/Oct/02 13:55;ceki@apache.org;
""But what should the semantics be for an application that uses a component that 
uses commons-logging that doesn't have a root appender configured? When the 
component goes to log, it will get an unconfigured category, and will generate 
errors.""

Wrong working assumption! If the logger named ""org.apache.commons.httputils"" is 
configured (it has an attached appender) and, assuming httputils only uses 
loggers under ""org.apache.commons.httputils"", logging from httputils will *not* 
generate errors even if the root logger is not configured.

Wrong assumptions => wrong conclusions.","23/Oct/02 17:30;stevencaswell@apache.org;The functionality I desire is the functionality in version 1.0 of
commons-logging. That functionality is that commons-logging makes no attempt in
any way to apply a default configuration to log4j. And that is the fundamental
issue I have against having commons-logging attempt to put in a default
configuration - it shouldn't. As a developer or deployer, I should be smart
enough to know what I want my logging system to acheive.

Again, quoting from the commons-logging documentation:

""The basic principle is that the user is totally responsible for the
configuration of the underlying logging system. Commons-logging should
not change the existing configuration.""

Existing configuration means whatever I've done to configure my logging package,
including letting it default.","23/Oct/02 23:24;rsitze@apache.org;The issue here is between those who
a) want to use commons-logging (with default behaviour) out-of-box,
b) want to use commons-logging in a Log4J enabled application, out-of-box.

Both have reasonable requests & desires... the problem may be Log4J's
difficult bootstrapping mechanism.

It's been proposed (but nothing has yet been done) that the current content
be packaged in a number of different ways:

Create a commons-logging-XYZ.jar for each of LogKit, JDK14, SimpleLogger, ?
containing:
    Log, LogFactory, appropriate LogImpl
    commons-logging.properties
       org.apache.commons.logging.Log=org.apache.commons.logging.impl.XYZ

We could include TWO versions for Log4J if we change the current logic
to NOT automatically defer to the Log4jFactory:

a)  Log, LogFactory, appropriate LogImpl
    commons-logging.properties
       org.apache.commons.logging.Log=org.apache.commons.logging.impl.XYZ

b)  Log, LogFactory, appropriate LogImpl, Log4jFactory
    commons-logging.properties
       org.apache.commons.logging.LogFactory=
              org.apache.commons.logging.impl.Log4jFactory

the first would work in an environment pre-enabled for Log4J.
The second would work in a clean environment.


So... the solution would be to grab the jar file that fits your environment.","18/Feb/03 06:14;mwomack@apache.org;Why now change the behavior of the Log4JFactory to not perform any default 
initialization, BUT extend commons-logging to allow for custom initialization 
classes that can be declared in the commons-logging properties?

org.apache.commons.logging.LogInitializer=<whatever class you want to do 
initialization>

This gives commons-logging users of all log packages the opportunity to 
initialize correctly according to the log package being used and/or product it 
is being used within.","18/Feb/03 07:22;stevencaswell@apache.org;I'd be happy with the latest proposal, esp. if log4j did nothing beyond calling
the log initializer class. At least then I'd have control over having it do or
not do initialization.","31/Mar/03 08:00;craig.mcclanahan@sun.com;Picking up this thread as I'm reviewing commons-logging in prep for a 1.0.3 release.

I agree with Steven Caswell's original request -- commons-logging should make
absolutely no attempt to configure the underlying loggging implementation. 
Instead, either the app should preconfigure the implementation the way it wants,
or the implementation should provide a mechanism for self-configuration.

(Ceki, my understanding is that this is not true for Log4J, right?  If there's a
""log4j.properties"" file then it will be used to configure things if config was
not done directly by the application?)

Further discussion about this will happen on COMMONS-DEV shortly.
","31/Mar/03 15:39;ceki@apache.org;
Log4j does not provide a ""default"" configuration. However, if at static 
initailization time, log4j can find a resource called log4j.xml or 
log4j.properties, it will use that configration file. The name of the files to 
search for can be specified by the user. I hope this answers the question,","02/Apr/03 09:32;craig.mcclanahan@sun.com;As discussed in the thread on this bug report, the attempt to configure Log4J
has been removed from Log4JLogger and Log4JCategoryLog.  Fixed in nightly build
20030402.",15/Apr/03 19:06;ceki@apache.org;*** *** Bug 19026 has been marked as a duplicate of this bug. *** has been marked as a duplicate of this bug. ***,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Log writer not closed with log4j after restarting a webapp (Tomcat 5.0),LOGGING-40,12341942,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,vvidovic@inet.hr,vvidovic@inet.hr,13/Dec/04 10:40,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.4,,,,,,,,,,,0,,,"When I run web application in which I use commons-logging 1.0.4 with log4j
(1.2.8 or 1.2.9, using org.apache.log4j.RollingFileAppender) inside Tomcat 5.0
there is no way to release all resources. So, when web application is restarted
(even if calling LogFactory.releaseAll()) main log file have some dangling
writers connected to itself and when it comes time when log4j should rename it
to backup file no 1 it doesn't happen.
If log4j's org.apache.log4j.LogManager.shutdown() is called when web application
is shut down everything works ok.

If org.apache.commons.logging.impl.Log4jFactory.releaseAll() is right place to
put it, it would be nice that log4j's org.apache.log4j.LogManager.shutdown()
method is called there.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,13/Dec/04 19:16;vvidovic@inet.hr;ASF.LICENSE.NOT.GRANTED--Log4jFactory.java;https://issues.apache.org/jira/secure/attachment/12333285/ASF.LICENSE.NOT.GRANTED--Log4jFactory.java,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,32662.0,,,2005-02-09 07:22:43.0,,,false,,,,,,,,,,,,,,,148220,,,Wed Feb 09 10:51:49 UTC 2005,,,,,,0|i0d7tr:,75044,,,,,,,,"13/Dec/04 19:16;vvidovic@inet.hr;Created an attachment (id=13741)
Releases log4j resources when calling LogFactory.release().

Only method release() changed, added LogManager.shutdown().
","09/Feb/05 07:22;rdonkin@apache.org;This is not within the scope of JCL. A deployer who knows that the component is
going to be deployed with Log4J should take the steps required to ensure that
the appenders are closed upon restart of the web application. 

See http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=110780577017737&w=2","09/Feb/05 07:58;vvidovic@inet.hr;I believe this is in scope of JCL, why else there is method which suggests all 
resources will be released (org.apache.commons.logging.LogFactory.releaseAll
()) with Log4j specific implementation class
(org.apache.commons.logging.impl.Log4jFactory)?
",09/Feb/05 08:03;vvidovic@inet.hr;Why else to use commons logging if we have to take care about Log4j specifics?,"09/Feb/05 08:24;skitching;It would seem to me that Vedran is right that a webapp that uses commons-logging
should not need to make direct calls to log4j on shutdown (this is what you were
suggesting, Robert?)

However as Robert states, the solution needs care; if two webapps are using
log4j and one of them is reloaded it would be very unpleasant if the other
webapp suddenly had its logging implementation shut down. So before adding a
call to LogManager.shutdown in log4j, it would be wise to determine whether this
would happen or not.

I would initially assume that log4j.jar would be deployed in the webapp-specific
libraries. As such, a separate copy should exist within each webapp (different
classloaders used) and therefore calling shutdown on one would *not* affect the
other. However I'm no expert on containers; I know that in some cases containers
want to provide the underlying logging implementation so that logging is
centralised for all webapps. If the container chooses log4j as its centralised
logging implementation, then what?","09/Feb/05 10:27;rsitze@apache.org;There is a fundamental misunderstanding here of the purpose and nature of 
commons-logging.  It may be somewhat confused by the existence of the 
Log4jFactory.  Note the following, from the Log4jFactory javadoc:

 * @deprecated Per discussion on COMMONS-DEV, the behind-the-scenes use
 *  of this class as a proxy factory has been removed.  For 1.0, you
 *  can still request it directly if you wish, but it doesn't really
 *  do anything useful, and will be removed in 1.1.

Now, that aside, the Log4jFactory does NOT ""initialize"" or ""manage"" Log4j: 
feel free to review the source for Log4jFactory, it doesn't have anything to 
do with initializing Log4j.

And neither should commons-logging.  It's not designed to ""manage"" the logger 
impl.  THAT task remains in your core application.  Please note that commons-
logging is NOT intended to make your *application* independent from a logger 
implementation, though you are welcome to use it's API's to minimize impact to 
your application if you choose to change logger implementations.

JCL is designed to help make your *components* [not applications] independent 
from logger implementations.  You wouldn't expect each individual component to 
try to start/stop your apps logger, and so you shouldn't expect commons-
logging to do so either [weak analogy, if you have complaints, forget it..].

The *expected* behavior of your application/framework is as follows:


app startup:
  - initialize logging implementation
     [Avalon, Log4j, Whatever]
  - JCL configured to use appropriate logging impl,
    possibly via commons-logging.properties file
  - initializes components & begins processing

component at runtime:
     httpclient: component logs using JCL
     axis: component log using JCL
     other component(s): log using JCL

app shutdown:
  - shutdown components [as needed]
  - shutdown logging [if needed]


At NO time does JCL presume to *know* that your app is starting up or shutting 
down, it presume only that you want to use a specific logger impl, and 
presumes that your app runtime environment will supply the appropriate logger.

Please also see the note I sent to the developers mailing list on this topic, 
it provides additional details on how your proposed ""fix"" will cause problems 
in other environs.","09/Feb/05 10:39;rsitze@apache.org;Would note that Vedran has already discovered that Log4jFactory is NOT used 
[by default] with JCL, as his patch is placing a Log4J specific call to 
LogManager.release() into LogFactory, as opposed to Log4jFactory.

As stated, for web-apps:  The web-app OWNS the logging implementation, unless 
you have some understanding that your HOSTING environment is fronting JCL and 
a logger impl for you.

In the first case, the web app is responsible for initializing and terminating 
the logger, as appropriate, for the context of the web-app.  Your app may ALSO 
choose to use JCL.  The benefits are:

- if you elect to use a different logger impl [initialize & terminate as 
appropriate for THAT logger impl], then you won't have to change any other 
part of your web-app.

- if your web-app is using OTHER components [many open-source components] and 
technologies that leverage JCL, then they will log as you would like them to, 
in the context of your web-app.

In the second case, you might reasonably assume that the hosting environment 
should to ""do what is right"" to manage the logger impl [whatever that means].. 
but that falls outside the scope of JCL and this defect.
","09/Feb/05 10:51;skitching;Hi Richard,

Ok, I'll buy the argument that commons-logging should be viewed as an API to
wrap ""use"" but not ""configuration"" of the underlying concrete log library 

In this case, things are a bit more confusing because commons-logging *does*
implicitly manage log4j's initialisation: when the first log4j Log instance is
instantiated (via the appropriate commons-logging wrapper class), this triggers
log4j to scan for a config file, load it, and initialise itself.

And as loggers are often created as static members of classes, it is rather
tricky to ensure that app-specific log initialisation code has been run before
the first commons-logging Log object triggers log4j's default initialisation.
Sorry if a solution to that has been raised on the logging email thread that
occurred recently; I tried to keep up with that but the volume just got too great..

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Ant build script does not create commons-logging-optional.jar,LOGGING-39,12342025,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,b_stansberry@hotmail.com,b_stansberry@hotmail.com,01/Feb/05 14:39,29/Dec/09 16:04,07/Apr/19 20:35,29/Dec/09 16:04,Nightly Builds,,,,,,,,,1.1.0,,0,,,"I was building JCL with ant and couldn't get a
commons-logging-optional.jar to build when executing
the build.xml in the root directory.  Instead the
optional classes would get included in
commons-logging.jar.

Looked into this and saw that the when the main
build.xml called the build in the optional folder, it
was passing along all its properties, thus overriding
the optional version.  I'll attach a patch that fixes
this.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,01/Feb/05 14:44;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--JCL-build.diff;https://issues.apache.org/jira/secure/attachment/12333372/ASF.LICENSE.NOT.GRANTED--JCL-build.diff,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,33323.0,,,2005-02-07 04:45:20.0,,,false,,,,,,,,,,,,,,,148219,,,Mon Feb 07 04:45:20 UTC 2005,,,,,,0|i0d7tz:,75045,,,,,,,,"01/Feb/05 14:44;b_stansberry@hotmail.com;Created an attachment (id=14147)
Patch so call to optional build does not pass through properties

1) Main build script should not pass through properties to optional build
target.
2) Copy commons-logging.jar to the dist folder before calling the optional
build so the jar is where the optional build classpath expects it.","07/Feb/05 04:45;rdonkin@apache.org;Committed. Many Thanks.

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[logging] SimpleLog undocumented: no answer to question ""how do you switch it on?""",LOGGING-38,12342909,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,minfrin,minfrin,15/Feb/06 00:45,29/Dec/09 14:25,07/Apr/19 20:35,29/Dec/09 14:25,1.0.4,,,,,,,,,1.1.0,,0,,,"While searching for instructions on how to configure the SimpleLog that
comes with commons logging, the only reference to SimpleLog is found at
http://jakarta.apache.org/commons/logging/commons-logging-1.0.4/docs/guide.html#Configuration,
however this link is broken.

So far it's taken an entire afternoon of googling for information on how to
switch logging on using commons-logging, without any success.

There needs to be some simple documentation included to get the user from
nowhere to a basic somewhere in a reasonable number of steps.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,38643.0,,,2006-02-15 03:36:41.0,,,false,,,,,,,,,,,,,,,148218,,,Wed Feb 15 06:43:30 UTC 2006,,,,,,0|i0d7u7:,75046,,,,,,,,"15/Feb/06 03:36;dennisl@apache.org;There seems to be something wrong with the links between JavaDocs and the other
documentation. Until those have been fixed you can find the JavaDocs for
SimpleLog here:
http://jakarta.apache.org/commons/logging/commons-logging-1.0.4/docs/apidocs/org/apache/commons/logging/impl/SimpleLog.html","15/Feb/06 06:43;rdonkin@apache.org;I've committed a section in the user guide based on the javadocs.

http://jakarta.apache.org/commons/logging/guide.html#A%20Quick%20Guide%20To%20Simple%20Log",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] LogFactory#getLogFactory should not look for method every time,LOGGING-37,12342905,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,matthias.ernst@coremedia.com,matthias.ernst@coremedia.com,13/Feb/06 07:23,09/Jul/14 20:14,07/Apr/19 20:35,27/Jun/14 12:09,1.0.4,,,,,,,,,1.2,,0,,,"LogFactory checks for the existence of Thread#getContextClassLoader every time
#getLogFactory is invoked and does a reflective invocation. This is
unnecessarily expensive if many Log objects are created. An easy patch is to
remember the Method object; the lookup happens only once and it will massively
profit from reflection optimizations after a number of calls (a Java code stub
is generated by the reflection package).

Patch:

419a420,426
>     private static Method GET_CONTEXT_CLASS_LOADER = null;
>     static {
>       try {
>         GET_CONTEXT_CLASS_LOADER = Thread.class.getMethod(""getContextClassLoad
er"", null);
>       } catch (NoSuchMethodException e) {
>       }
>     }
436,439c443
<         try {
<             // Are we running on a JDK 1.2 or later system?
<             Method method = Thread.class.getMethod(""getContextClassLoader"", nu
ll);
<
---
>         if(GET_CONTEXT_CLASS_LOADER != null) {
442c446
<                 classLoader = (ClassLoader)method.invoke(Thread.currentThread(
), null);
---
>                 classLoader = (ClassLoader)GET_CONTEXT_CLASS_LOADER.invoke(Thr
ead.currentThread(), null);
472c476
<         } catch (NoSuchMethodException e) {
---
>         } else {","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,38626.0,,,2006-02-13 10:31:23.0,,,false,,,,,,,,,,,,,,,148217,,,Fri Jun 27 12:09:12 UTC 2014,,,,,,0|i0d7uf:,75047,,,,,,,,"13/Feb/06 07:25;matthias.ernst@coremedia.com;
> >     private static Method GET_CONTEXT_CLASS_LOADER = null;

Add a ""final"" there.
","13/Feb/06 10:31;skitching;Nice idea, but unfortunately it's not quite that simple.

The code
  Thread.class.getMethod
is currently in method directGetContextClassLoader that is invoked from method
getContextClassLoader via AccessController.doPrivileged.

The use of SecurityController is for the case where the commons-logging.jar file
is signed and trusted to use reflection but the calling code is not.

What happens if we move this call into a static initialisation block of the
LogFactory class?

Is there any security on this call, or is the current use of AccessController
really just meant to wrap the Method.invoke call?

If we perform this operation from the static initialisation block of the
LogFactory class, what are the security manager implications? I would *guess*
that such an operation would be performed with the privileges of the class being
loaded, ie would be ok WITHOUT using an AccessController. However I don't know a
whole lot about this area..","13/Feb/06 16:06;matthias.ernst@coremedia.com;That is a valid concern that I didn't think about. I checked the specification
for #getMethod which would throw a SecurityException in two cases:
if a security manager would deny 

* member access to Thread.class with scope PUBLIC
* package access to java.lang

I would suggest this would be a dysfunctional setup anyway. If you're really
concerned, wouldn't it be possible to wrap the Method lookup in a privileged
block as well?
","17/Feb/06 05:47;rdonkin@apache.org;After consideration, I'm not happy addressing this for this release.

I would consider a performance patch with either extensive unit tests
(preferrably with security managers) or demonstration code (if it's not feasible
to easily codify into tests) once this release is out. If anyone feels like
contributing one, please attach to this bugzilla and reopen","25/Jun/14 16:13;archie172;I noticed this method consuming inordinate CPU on my system as well.

Can the next release of commons-logging drop support for Java 1.1? If so then this issue can go away... simply invoke {{Thread.getContextClassLoader()}} directly.
",25/Jun/14 18:31;tn;I think it is reasonable to make a 1.2 release that drops java 1.1 support.,"26/Jun/14 15:21;sebb@apache.org;Agreed, but we should only increase the Java version by the minimum necessary.",27/Jun/14 12:09;tn;Fixed in r1606041.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Wrong version for dependency avalon-framework in project.xml,LOGGING-36,12341191,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,dennisl@apache.org,dennisl@apache.org,07/Jan/04 09:57,29/Dec/09 16:26,07/Apr/19 20:35,29/Dec/09 16:26,Nightly Builds,,,,,,,,,1.0.4,,0,,,"When I tried to build commons-logging (pulled from CVS) I needed to find the
right version of the avalon-framework. The project.xml file says to use version 4.0.

When I ran the unit-tests they wanted the class
org.apache.avalon.framework.logger.ConsoleLogger, and that is not included in
4.0. After some digging in the CVS I found the class in question in version 4.1.3.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,07/Jan/04 09:58;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--project.patch;https://issues.apache.org/jira/secure/attachment/12332684/ASF.LICENSE.NOT.GRANTED--project.patch,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,25941.0,,,2004-02-15 17:40:48.0,,,false,,,,,,,,,,,,,,,148216,,,Sun Feb 15 17:40:48 UTC 2004,,,,,,0|i0d7un:,75048,,,,,,,,"07/Jan/04 09:58;dennisl@apache.org;Created an attachment (id=9839)
Fixes correct version for dependency avalon-framework
",15/Feb/04 17:40;rdonkin@apache.org;Committed. Many thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Logging has a NPE when security prevents property reading,LOGGING-35,12340194,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,tim@adjective.org,tim@adjective.org,26/Mar/02 07:52,29/Dec/09 17:06,07/Apr/19 20:35,29/Dec/09 17:06,1.0,,,,,,,,,1.0.1,,0,,,"In LogFactoryImpl:

        // Identify the Log implementation class we will be using
        String logClassName = null;
        try {
  /** Read attributes **/
  /** Read properties **/
  /** Look for Log4J **/
  /** Look for jdk1.4 **/
  /** Use Default logger **/
        } catch (SecurityException e) {
        }

        // Attempt to load the Log implementation class
        Class logClass = null;
        try {
            logClass = loadClass(logClassName);
        
If a SecurityException occurs, then logClassName isn't ever set, and the 
loadClass
method throws a NullPointerException.

What to do?
a) Throw the SecurityException instead. Better, because then the cause is at 
least clearer (than the NPE), but probably not what we want.

b) Have the DefaultLogger setting occur outside of the ""try"". Better still, but 
then you loose any chance of getting log4j or jdk1.4, just because you aren't 
allowed to read system properties.

c) Only wrap the getProperty calls in the try block. I think this is the best 
solution, but I'm not sure if any of the other code in there could raise a 
SecruityException.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,7468.0,,,2002-03-31 08:41:01.0,,,false,,,,,,,,,,,,,,,148215,,,Sun Mar 31 08:41:01 UTC 2002,,,,,,0|i0d7uv:,75049,,,,,,,,"31/Mar/02 08:41;craig.mcclanahan@sun.com;Fixed in nightly build 20020331.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] ContextClassLoader may load Log impl from wrong context in JDK 1.4,LOGGING-34,12341398,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Cannot Reproduce,,chriseldredge@comcast.net,chriseldredge@comcast.net,09/Apr/04 01:58,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.3,,,,,,,,,,,0,,,"The static method org.apache.commons.logging.LogFactory#getContextClassLoader 
will return the ClassLoader for the currently executing thread 
Thread.currentThread().  If this ClassLoader is different from the ClassLoader 
which loaded org.apache.commons.logging.Log, the implementing class cannot be 
cast to Log.

This results in Log.class.isAssignableFrom(logClass) returning false even 
though logClass implements Log.  In turn, this causes 
org.apache.commons.logging.impl.LogFactoryImpl#getLogConstructor() to 
incorrectly throw the exception ""Class "" + logClass + "" does not implement Log""

The solution is to use the same ClassLoader that was used to load 
org.apache.commons.logging.Log.

On line 463 of LogFactoryImpl.java, replace the line:
ClassLoader threadCL = getContextClassLoader();

with:
ClassLoader threadCL = Log.class.getClassLoader();

The only was I am aware of to reproduce this bug is to write a Jakarta Cactus 
Test Suite and run the test using junit.swingui.TestRunner.main or 
junit.awtui.TestRunner.main.  Because the Thread has a different 
ContextClassLoader, commons-logging will fail to instantiate the Log 
implementation.","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,28291.0,,,2004-05-27 02:37:37.0,,,false,,,,,,,,,,,,,,,148214,,,Fri Mar 18 14:18:28 UTC 2005,,,,,,0|i0d7v3:,75050,,,,,,,,"27/May/04 02:37;rdonkin@apache.org;Using the context classloader is vital if this code is going to run correctly in containers. So the 
proposed solution is probably a non-starter. Maybe I can think of an alternative solution...","28/Jan/05 05:34;rsitze@apache.org;The opening statement is not necessarily true:

""...  If this ClassLoader [Thread.currentThread()] is different from the
ClassLoader which loaded org.apache.commons.logging.Log, the implementing class
cannot be cast to Log.""

Specifically, with the [default or expected] ClassLoader rule of deferring to
the parent ClassLoader first, the implementing class will extend the Log class
defined by the parent, and hence it can be cast.

The discovery mechanism for commons-logging currently overlooks/assumes two points:
1. That the thread-context class loader is a child who's parent hierarchy
includes the commons-logging.jar.
2. That the ClassLoaders in the current hierarchy exhibit the default
parent-first behavior.

I'm guessing it is this later scenario that some combination of JUnit/Cactus is
doing.

Would you help confirm this analysis of your problem?","28/Jan/05 05:41;rsitze@apache.org;Correction... my guess is that JUnit/Cactus are in conflict with point (1). 
That a thread context classloader is being set up that does not defer up a
hierarchy that includes the commons logging code.","28/Jan/05 06:34;ceki@apache.org;Richard,

You mean point (2)?","28/Jan/05 06:49;rsitze@apache.org;I believe that in this particular case it is point (1), based on his 
description of the problem.  I'm looking for confirmation.

Point (2) would also create a problem, and I think that is more closely 
related to the errors you have been exposed to in the past.

I'm writing a separate summary of both of these... to be posted shortly.","28/Jan/05 07:11;ceki@apache.org;I thought you had made a simple typo, hence my question ""you mean point (2)?"". 
Otherwise, the follwing two paragraphs do not make sense (to me).

 The discovery mechanism for commons-logging currently overlooks/assumes two points:
 1. That the thread-context class loader is a child who's parent hierarchy
 includes the commons-logging.jar.
 2. That the ClassLoaders in the current hierarchy exhibit the default
 parent-first behavior.

 Correction... my guess is that JUnit/Cactus are in conflict with point (1). 
 That a thread context classloader is being set up that does not defer up a
 hierarchy that includes the commons logging code.

I think in the second paragraph you meant to say:

 Correction... my guess is that JUnit/Cactus are in conflict with point (2). ","28/Jan/05 08:00;rsitze@apache.org;Either point will break JCL.  My assumption is irrelevant in the end.

I'm simply asking the defect owner to help identify *which* one might be 
working here.

If the ""thread context classloader"" is adhering to the ""parent first"" search 
behavior, then this would only be a problem if the ""thread context 
classloader"" did not have the ""current class's classloader"" in it's hierarchy.

If the ""thread context classloader"" is adhering to the ""child first"" search 
behavior, then it opens up all sorts of ugly doors in a test environment, so 
I'm guessing this isn't true.","15/Mar/05 23:57;catalin;(In reply to comment #7)
> 
> If the ""thread context classloader"" is adhering to the ""parent first"" search 
> behavior, then this would only be a problem if the ""thread context 
> classloader"" did not have the ""current class's classloader"" in it's hierarchy.
> 
I would like to reopen the discussion from this point.

The behaviour described above can actually lead (and actually did) to a
significant memory leak in the following circumstance: I deploy a web
application in Tomcat. The application uses log4j to log, and has
commons-logging.jar and log4j.jar in WEB-INF/lib. Tomcat also uses common-loggings. 
The problem is that I find myslef in the situation where tomcat classes get to
use a Log instance loaded by the class loader of my web application (which is,
of course, the context class loader during the execution of servlets). This will
prevent the web app from being garbage collected when I stop it. 

The only workaroung for this was to put common-logging.jar and log4j.jar in
share/lib instead of WEB-INF/lib, but I'm not really happy with this solution. 

Could somebody confirm this problem? 
The guys from Tomcat do not admit this is a bug for them, but I belive this
actually affects Tomcat.","16/Mar/05 02:37;rdonkin@apache.org;It's hard to be categorical since there are variations between JVMs. There are known circumstances 
where 1.0.4 holds references to classloaders in some containers (but not tomcat) preventing recycling 
of memory in undeployment. It would not surprise me to find that this is one of those circumstances (at 
least on some platforms).

If this is a concern, there are a number of actions you might take (any of which should be effective):

1 If you are going to be hot deploying applications frequently and deploying your logging systems in 
the child classloader for the web application, then it is a very good idea to add a lifecycle listener to 
ensure that all logging resources are correctly closed. If you are logging to Log4J, you should be doing 
this anyway. If you are concerned about releasing references then you should call JCL release during 
this cleanup.

2 Download the new JCL alpha and install the optional jar. The weak references should allow the 
memory to be recycled (sooner or later).

3 Reconsider your deployment decision. I'm not sure why you are unhappy to deploy your logging 
system in share/lib. Logging systems tend to hold a number of resources open for performance 
reasons. Hot deployment therefore isn't particularly pretty for them. There are sometimes good reasons 
why people are forced to deploy all libraries in the application loader (perhaps because they do not 
control the container). In other cases, it's worth considering the best deployment strategy.","16/Mar/05 21:21;skitching;Robert, why would you think that putting commons-logging.jar in shared/lib would
resolve the issue? 

The problem is caused by Hashtable LogFactory.factories having an entry whose
key is a classloader that has been ""undeployed"". Shouldn't the solution be to
ensure that LogFactory gets loaded by the *component* classloader, not the
shared classloader, so that when the container ""forgets"" the component
classloader there are no longer any references to it (apart from circular ones
that the garbage collector can handle)? 

NB: we're talking about JCL-1.0.4 here (no weak references).","18/Mar/05 02:51;rdonkin@apache.org;When running on Tomcat, the container should call release on the instance loaded
in the shared library after each classloader is deployed. This is why I made
this suggestion.

It's hard to know whether the classloader will get collected upon hot deployment
even when LogFactory is defined by the child classloader on all platforms (which
is why I caveated my answers). Garbage collection and reflection has had some
wrinkles (and bugs). I wouldn't be surprised if it didn't on some (but would
bet on it).

The way that I would have proceeded would have been to set a hot deployment test
for my particular application to determine whether there is a detectable memory
leak. (I believe that this is how the tomcat problems were first recognized.)
However, Chris asked for a therotical answer so I did my best. 
","18/Mar/05 13:51;skitching;(In reply to comment #11)
> When running on Tomcat, the container should call release 
> on the instance loaded in the shared library after each
> classloader is deployed. This is why I made this suggestion.

Ah. So Tomcat has an ugly hack to specifically work around this issue with
commons-logging. Yep, I see it in 
  org.apache.catalina.loader.WebappClassLoader#stop:

  public void stop() throws LifecycleException {
        ....
        org.apache.commons.logging.LogFactory.release(this);


Because this hack exists, the bug I described doesn't occur in Tomcat, ie when
commons-logging.jar is deployed via the shared classloader, memory is correctly
released on undeploy.

Note that the *real* bug exists in commons-logging. A container shouldn't need
to call o.a.c.l.LogFactory.release (and most won't). Tomcat is trying to be nice
to webapps that use commons-logging, and in one sense the call doesn't do any
*harm*. However doing this does make porting to another servlet container
interesting, when a leak suddenly appears..) - and confuses people like me who
know commons-logging and are confused when it *doesn't* leak as expected :-).

A completely portable solution (I think) would be for the deployed app to
register for a callback on undeploy and have the app call LogFactory.release
itself. Class ServletContextListener provides a method  contextDestroyed that
should be able to do this (http://java.sun.com/j2ee/sdk_1.3/techdocs/api/) for
any servlet engine that supports java servlet 2.3. Note that I haven't tried
this myself though.

Just as a matter of style, I wouldn't recommend deploying libs in a ""shared""
manner (ie visible to all webapps). This may provide a minor performance
benefit, or reduce memory consumption, but in my view it is just plain ugly, on
the same order as making class member variables public instead of providing
getter and setter methods, just to improve performance. But that's only my
personal opinion, and I know many people disagree.

If LogFactory.release is going to be called on unload, then this should work
fine regardless of whether the LogFactory class was loaded via the shared
classloader (shared/lib) or via the component-specific classloader (WEB-INF/lib).

However Catalin *was* getting a leak when commons-logging.jar was deployed in
WEB-INF/lib. I wonder why (my previous argument no longer applies, as Tomcat
*is* calling LogFactory.release on undeploy).

Catalin, how exactly are you undeploying your webapp?","18/Mar/05 14:18;skitching;(In reply to comment #12)
> Catalin, how exactly are you undeploying your webapp?
And how exactly are you measuring the memory leak?

",,,,,,,,,,,,,,,,,,,,,,,,,
getClassLoader() returns null at a critical point under certain conditions,LOGGING-33,12341804,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Critical,Fixed,,david.ferrero@zion.com,david.ferrero@zion.com,14/Oct/04 04:24,29/Dec/09 16:14,07/Apr/19 20:35,29/Dec/09 16:14,1.0.4,,,,,,,,,1.1.0,,0,,,"launching jakarta-tomcat 5.0.28 using the JWS (java wrapper service) via the
Bootstrap class leads to a critical null pointer exception which points to code
in LogFactoryImpl.java which expects this.getClass().getClassLoader() to return
a value that's not null. The javadocs for Class state that null can be returned
in some implementations if the class was loaded by the bootstrap classloader.  I
have a patch file but am not sure how to submit it as an attachment so here it
is below:

Index: LogFactoryImpl.java
===================================================================
RCS file:
/home/cvspublic/jakarta-commons/logging/src/java/org/apache/commons/logging/impl/LogFactoryImpl.java,v
retrieving revision 1.33
diff -u -u -r1.33 LogFactoryImpl.java
--- LogFactoryImpl.java 6 Mar 2004 21:52:59 -0000       1.33
+++ LogFactoryImpl.java 13 Oct 2004 20:54:02 -0000
@@ -371,8 +371,12 @@
         Class logClass = null;
         Class logInterface = null;
         try {
-            logInterface = this.getClass().getClassLoader().loadClass
-                (LOG_INTERFACE);
+            ClassLoader cl = this.getClass().getClassLoader();
+            // handle the case if getClassLoader() returns null
+            // It may mean this class was loaded from the bootstrap classloader
+            logInterface = (cl == null) ? loadClass(LOG_INTERFACE) : 
+                                          cl.loadClass(LOG_INTERFACE);
+
             logClass = loadClass(logClassName);
             if (logClass == null) {
                 throw new LogConfigurationException","Operating System: All
Platform: Macintosh",,,,,,,,,,,,,,,,,,,,,14/Oct/04 04:25;david.ferrero@zion.com;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java.patch.txt;https://issues.apache.org/jira/secure/attachment/12333170/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.java.patch.txt,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,31710.0,,,2004-10-17 16:16:13.0,,,false,,,,,,,,,,,,,,,148213,,,Sun Oct 17 16:16:13 UTC 2004,,,,,,0|i0d7vb:,75051,,,,,,,,"14/Oct/04 04:25;david.ferrero@zion.com;Created an attachment (id=13085)
patch to fix null pointer for this bug.
","17/Oct/04 16:16;rdonkin@apache.org;Committed. Many Thanks.

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PATCH][logging] Spelling errors and other errors in the JavaDoc documentation,LOGGING-32,12341283,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,dennisl@apache.org,dennisl@apache.org,21/Feb/04 06:22,29/Dec/09 16:25,07/Apr/19 20:35,29/Dec/09 16:25,Nightly Builds,,,,,,,,,1.0.4,,0,,,"I've proofread the JavaDoc documentation and have created patches for a number
of spelling errors and other errors.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,21/Feb/04 06:24;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--patches.zip;https://issues.apache.org/jira/secure/attachment/12332752/ASF.LICENSE.NOT.GRANTED--patches.zip,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,27124.0,,,2004-02-29 01:55:01.0,,,false,,,,,,,,,,,,,,,148212,,,Sun Feb 29 01:55:01 UTC 2004,,,,,,0|i0d7vj:,75052,,,,,,,,"21/Feb/04 06:24;dennisl@apache.org;Created an attachment (id=10466)
Patches for 12 files in a zip-file
","29/Feb/04 01:55;rdonkin@apache.org;Committed. 

Many thanks - documentation patches are very much appreciated :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[PATCH] [logging] build.xml does not exclude Log4JLogger when jar not present,LOGGING-31,12340508,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,jeremias@apache.org,jeremias@apache.org,23/Jan/03 20:05,29/Dec/09 16:46,07/Apr/19 20:35,29/Dec/09 16:46,,,,,,,,,,1.0.3,,0,,,"Commons logging (from CVS) does not build when Log4J isn't present. 
Log4JLogger.java has to be excluded. Will attach patch...","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,23/Jan/03 20:06;jeremias@apache.org;ASF.LICENSE.NOT.GRANTED--commons-logging-build-patch.diff.txt;https://issues.apache.org/jira/secure/attachment/12332113/ASF.LICENSE.NOT.GRANTED--commons-logging-build-patch.diff.txt,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,16358.0,,,2003-02-01 12:31:02.0,,,false,,,,,,,,,,,,,,,148211,,,Sat Feb 01 12:31:02 UTC 2003,,,,,,0|i0d7vr:,75053,,,,,,,,"23/Jan/03 20:06;jeremias@apache.org;Created an attachment (id=4521)
Patch to solve the problem
",01/Feb/03 12:31;craig.mcclanahan@sun.com;Fixed in nightly build 20030201.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ability to set levels for loggers,LOGGING-30,12340463,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,hlship,hlship,18/Dec/02 04:37,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"Something I missed when I converted from Log4J to jakarta-logging was the 
ability to set levels for my loggers dynamically.

Part of Tapestry is the Inspector, a component/mini-application that embeds 
into an application.  It used to have a form that listed all Log4J categories 
(now called ""Loggers"") and you could set the Priority (now ""Level"") for each 
(as well as create new loggers on the fly).

I had to strip that functionality out which is unhappy, since it was very 
useful for enabling debug output just as you need it.

Anyway, extending the LogFactory or Log interfaces with
a) Method for obtaining sorted list of levels, as strings
b) Method for querying level for Log
c) Method for updating level for log

Would be cool and useful.

I would suggest that the levels exposed to the user code be strings, with an 
internal translation to appropriate object types.  null for no-explicit level 
(logger inherits from parent).

What's very important is the sort order, when the list of possible settings is 
provided.  I suggest a sort order of least-to-most, 
i.e., ""NEVER"", ""FATAL"", ""ERROR"", ""WARN"", ""INFO"", ""DEBUG"", ""ALL"" would map to 
Log4J's default list.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,15450.0,,,2002-12-18 05:31:25.0,,,false,,,,,,,,,,,,,,,148210,,,Sat Jan 18 11:47:36 UTC 2003,,,,,,0|i0d7vz:,75054,,,,,,,,"18/Dec/02 05:31;rdonkin@apache.org;IMHO 

Useful as it may be, this is against the commons-logging philosophy. All
configuration of the logging system (as opposed to decided which logging system
to use) was intentionally placed outside the scope of this component. 

You can still set the log levels dynamically - but you need to do this through
the wrapped logging system rather than via the Log wrapper. If you use - for
example - log4j as your logging implementation then you can set levels
dynamically in exactly the same way as before.
","18/Dec/02 05:37;hlship;I think I gave a useful, practical example of why setting of levels should be 
brought in scope.  I want to code my logging to jakarta-logging, but I want to 
flexibility to update logging levels at runtime ... I just don't think that's 
too much to ask.

All of the logging systems I've explored (Log4J, JDK 1.4, that mutant one at 
IBM -- JLog?) ... all have the ability to set levels, by updating a property to 
a value from a fixed list.  Sometimes the levels are specified as strings, 
as ""enum-like"" objects, or as numeric values.","18/Jan/03 11:47;craig.mcclanahan@sun.com;The philosophy of commons-logging was, and always has been, to wrap only the
actual logging calls -- not the lifecycle or configuration of the underlying
logging implementation.  That was left to the application itself.  In your
particular scenario, you could have left the Log4J configuration screens in
place, but only allowed them to be accessed when Log4J is available.  Likewise,
it would be straightforward to build similar screens for JDK 1.4 logging (if
available), or any other logging implementation you want to support.

Going down the path of adding more and more functionality to commons-logging
would lead, ultimately, to writing a complete logging implementation.  That
would be a waste of time, when perfectly good implementations exist already. 
Instead, commons-logging should stay narrowly focused on abstracting just the
logging calls themselves.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.commons.logging.impl.Log4JCategoryLog not serializable,LOGGING-29,12340222,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,bmoritz@gmx.de,bmoritz@gmx.de,13/May/02 20:59,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0,,,,,,,,,,,0,,,"The class org.apache.commons.logging.impl.Log4JCategoryLog should be serializable. If it 
is used in a session object in a web application, the web application cannot be successfully 
restarted without all objects being serializable.","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,9034.0,,,2002-06-16 03:43:47.0,,,false,,,,,,,,,,,,,,,148209,,,Sun Jun 16 03:43:47 UTC 2002,,,,,,0|i0d7w7:,75055,,,,,,,,"16/Jun/02 03:43;craig.mcclanahan@sun.com;Even if this class were changed, serialization would fail because
org.apache.log4j.Category is not Serializable.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassLoader clashes,LOGGING-28,12341298,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,tilo.christ@siemens.com,tilo.christ@siemens.com,03/Mar/04 01:40,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.3,,,,,,,,,,,0,,,"LogFactoryImpl.getLogConstructor() uses two different means to obtain classes. 
It uses Log.class to obtain the class for the Log interface and the 
LogFactory.loadClass(className) method to load the actual implementation. 
This can result in failure when isAssignable is invoked to make sure they can 
be assigned to each other. This situation happens in my case when I try to use 
commons logging from the JUnit testrunner in the IntelliJ IDE. I fixed the 
problem by using Class.forName() to load the implementation of the logger.
It doesn't work the other way around (using loadClass() to load the Log 
interface) because then the entire framework fails. The reason is that Log as 
being loaded by loadClass is then no longer castable to Log as used by your 
APIs.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,27374.0,,,2004-03-07 06:00:34.0,,,false,,,,,,,,,,,,,,,148208,,,Sun Mar 07 06:00:34 UTC 2004,,,,,,0|i0d7wf:,75056,,,,,,,,"07/Mar/04 06:00;craig.mcclanahan@sun.com;Unfortunately, using Class.forName() to load the Log class in question would
break all uses of commons-logging in scenarios like Tomcat, when you want to use
c-l loaded from common/lib and a custom Log implementation class loaded from
within your web application.

The underying issue is that having org.apache.commons.logging.Log visible in
more than one class loader in your class loader hierarchy is always going to
fail.  This is the reason, for example, that the JUnit tests in the build.xml
file for commons-logging itself use fork=""true"", so that the class loader used
by Ant is not visible.  You should investigate whether IntelliJ has some sort of
similar configuration switch, to run the unit tests in a separate JVM.

Note that the error message produced when multiple cases of o.a.c.l.Log are
detected has been improved to state that this is the real problem, rather than
implying that the selected Log implementation class does not actually implement
this interface.  See:

  http://issues.apache.org/bugzilla/show_bug.cgi?id=25156

for more information.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Getting Logger to give trace Information,LOGGING-27,12341575,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Cannot Reproduce,,tgerdes@oldrepnatl.com,tgerdes@oldrepnatl.com,16/Jul/04 04:03,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.4,,,,,,,,,,,0,,,"I have looked at the User Manual and can not get the logging to be sent to 
display when I run my class! 

I set my system properties as follows!  Is there anything more I need to do to 
get the trace information displaying!

  System.setProperty 
(""org.apache.commons.logging.simplelog.log.org.apache.commons.httpclient"", ""debu
g"");
  System.setProperty
(""org.apache.commons.logging.Log"", ""org.apache.commons.logging.impl.SimpleLog"");
  System.setProperty
(""org.apache.commons.logging.simplelog.showdatetime"", ""true"");
  System.setProperty
(""org.apache.commons.logging.simplelog.log.httpclient.wire"", ""trace"");
  System.setProperty
(""org.apache.commons.logging.simplelog.log.org.apache.commons.httpclient"", ""trac
e"");","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,30131.0,,,2004-07-18 21:49:29.0,,,false,,,,,,,,,,,,,,,148207,,,Wed Feb 09 07:19:44 UTC 2005,,,,,,0|i0d7wn:,75057,,,,,,,,"18/Jul/04 21:49;dennisl@apache.org;You can try adding this to see if you get any trace output:
System.setProperty(""org.apache.commons.logging.simplelog.defaultlog"", ""trace"");

If the above works, then your logging configuration is probably wrong. Can you
post some examples of your code doing logging?","09/Feb/05 07:19;rdonkin@apache.org;No followup has been received to Dennis' posting. I've tested the latest
httpclient documentation and it seems to be in order. 

Posting a question to the user list would probably have provided more
productive. If anyone feels the need to re-open this, please supply a unit test
demonstrating the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Security policy configuration, SimpleLog uses System.getProperties()",LOGGING-26,12340240,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,glenn@apache.org,glenn@apache.org,10/Jun/02 20:03,29/Dec/09 17:08,07/Apr/19 20:35,29/Dec/09 17:08,Nightly Builds,,,,,,,,,1.0.3,,0,,,"SimpleLog uses System.getProperties to get a list of existing
org.apache.commons.logging.* properties.

If commons-logging is running within an application which uses
the Java SecurityManager such as Tomcat this requires granting
java.util.PropertyPermission ""*"", ""read"" to not only
commongs-logging.jar, but all other jar files with classes
on the stack.

This makes it impossible to restrict access to reading properties
for any API's on the stack.

SimpleLog should get each individual property it needs separately.

This would apply to any other code which uses System.getProperties() also.","Operating System: Solaris
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,9743.0,,,2002-06-16 04:17:47.0,,,false,,,,,,,,,,,,,,,148206,,,Fri Dec 13 03:52:49 UTC 2002,,,,,,0|i0d7wv:,75058,,,,,,,,"10/Jun/02 20:07;glenn@apache.org;Correction, it requires the following permission to be granted:

java.util.PropertyPermission ""*"", ""read,write"";

What is really bad about this is that you have to grant permission
to write all properties.","16/Jun/02 04:17;craig.mcclanahan@sun.com;This was fixed in version 1.3 of SimpleLog to swallow any security exceptions
caused by this, so the fix is in current nightly builds and will be included in
the next released version.
","18/Jun/02 19:36;glenn@apache.org;Just swallowing the security exceptions doesn't solve the problem.
What if you need SimpleLog to use properties?  It can't use any
properties unless it is granted:

java.util.PropertyPermission ""*"", ""read,write"";

This is too broad of a permission grant to give SimpleLog and all
other API's which may be on the stack.","20/Oct/02 00:34;rsitze@apache.org;This cannot be easily corrected:

On one hand, SimpleLog has a requirement to pickup unspecified properties
(those properties beginning with a prefix) describing logging levels for
different categories.

On the other, SimpleLog has turned into a real (although simple :-) log
implementation.

This leaves us with THREE choices for satisfactorily resolving this defect:

1. Simplify SimpleLog & remove offending code, or

2. Make SimpleLog a NotSoSimpleLog with it's own property file, and
   remove offending calls to System.getProperties() - use property file
   instead.

3. Acknowledge that in a proper J2EE environment SimpleLog may not be
   the best answer, so it doesn't matter anyway...
","20/Oct/02 19:40;glenn@apache.org;I would guess that jakarta project API's get used within a
servlet or other server side container > 90 % of the time.
If it exists it will get used. Those developing applications
which use SimpleLog may not be as security aware as system
administrators who have to deploy the application.
IMHO this rules out option 3.

Option 1 requires removing features from SimpleLog which
may not be best for those already using SimpleLog.

Option 2 seems like the best solution.  It doesn't remove
any features and allows SimpleLog to be used in a J2EE
container which implements a SecurityManager.","21/Oct/02 06:21;adrian@ephox.com;Perhaps a slight improvement over version 2 would be to use the properties file 
if available and then fall back on to the system properties if that fails?

We use SimpleLog in a signed applet and make heavy use of the system properties 
configurability as it allows us to vary the logging level very easily (a must 
if you want end users to do it).  Having a separate configuration file would be 
much less convienient for this use.","13/Dec/02 03:52;rsitze@apache.org;Eliminated System.getProperties().
Instead, on each query for a property, we call System.getProperty.
(private) helper methods are getStringProperty() and getBooleanProperty()",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] call to getClassLoader() in LogFactoryImpl not checked for null,LOGGING-25,12342715,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,luke.sleeman@ordermate.com.au,luke.sleeman@ordermate.com.au,14/Nov/05 13:59,29/Dec/09 14:28,07/Apr/19 20:35,19/Dec/06 21:12,1.0.4,,,,,,,,,1.1.0,,0,,,"In line 374 of LogFactoryImpl.java getClassLoader() is called:

logInterface = this.getClass().getClassLoader().loadClass(LOG_INTERFACE);

However, the docs for getClassLoader() state that some implementations may use
null to return the system classloader.  This occurs under CrEme a JVM for the
PocketPC platform which some of our products run under, causing a null pointer
exception.  Perhaps it would be better to change line 374 to read:

logClass = loadClass(LOG_INTERFACE);

which seems to solve the problems I have been having.  At any rate calls to
getClassLoader() should be checked to ensure that they haven't returned null.

In addition the error that I got:
org.apache.commons.logging.LogConfigurationException:
org.apache.commons.logging.LogConfigurationException:
java.lang.NullPointerException (Caused by java.lang.NullPointerException)
(Caused by org.apache.commons.logging.LogConfigurationException:
java.lang.NullPointerException (Caused by java.lang.NullPointerException))

Certianly wasnt very helpfull for figuring out what is going on.

- Luke","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37484.0,,,2005-11-15 03:43:23.0,,,false,,,,,,,,,,,,,,,148205,,,Tue Dec 19 21:12:42 UTC 2006,,,,,,0|i0d7x3:,75059,,,,,,,,"15/Nov/05 03:43;skitching;Hi Luke,

Some work has gone into the trunk version of commons-logging to support null
classloaders. There is some effort going in right now to try to get a new
release out. Hopefully a release candidate (probably called
commons-logging-1.1-RC1) will be released soon; it would be great if you could
test that.",16/Nov/05 07:35;luke.sleeman@ordermate.com.au;will do!,"23/Jan/06 12:25;skitching;Hi Luke,

Release candidate 1 of commons-logging 1.1 has now been created:
   http://people.apache.org/~rdonkin/commons-logging/

Could you please check whether this meets your requirements?","31/Jan/06 12:06;luke.sleeman@ordermate.com.au;Hey,
I've downloaded and tried to use the RC1.  Unfortunately the method:

private static Enumeration getResources(final ClassLoader loader, final String name)

inside LogFactory calls the getResource and getSystemResource methods on
ClassLoader.  These methods were only added in java 1.2 and since I am trying to
run commons logging on a 1.1 JVM I get NoSuchMethodErrors thrown.

Depending on what version of Java commons logging is supposed to run on this
may, or may not be a bug.

In case you are curious we are trying to develop java applications on the
PocketPC, using the CrEme virtual machine:
http://www.nsicom.com/Default.aspx?tabid=138","08/Feb/06 00:31;rdonkin@apache.org;JCL uses the thread context classloader and the hierarchical class loader model
introduced in Java 1.2. 

My expectation is that the JCL implementation code would fail under Java 1.1 but
that a API compatible static bound alternative would work. (Basically, taken
LogFactory and gut the complex classloading logic then recompile.)  Perhaps it's
time that we considered hosting such an implementation in the commons.

Perhaps your JVM has a number of extra backported 1.2 methods (but not the few
that JCL uses). ","08/Feb/06 14:50;skitching;Thanks for the info Luke. 

I would like to see JCL 1.1 be compatible with java 1.1, though it isn't a
pre-requisite for the release.

As Robert says, a statically-bound version should work. As soon as the 1.1
release is made, I'm keen to get started on a JCL 2.0 implementation that would
use some kind of ""static binding"", ie one jar per implementation. In this case,
there would be a simple non-TCCL-aware jar that you could use, and a separate
TCCL-aware jar for people using servlet container style frameworks.

However it isn't too difficult to just catch the NoSuchMethodError in this case.
I've committed a change to do that (r375866), so if you could test by building
from source, using a nightly build or the next release candidate that would be
appreciated.","13/Feb/06 08:10;rdonkin@apache.org;Hi Luke,

Release candidate 4 of commons-logging 1.1 has now been created:
   http://people.apache.org/~rdonkin/commons-logging/

It contains Simon's fix.

Could you please check whether this is any better?

Robert","13/Feb/06 08:22;luke.sleeman@ordermate.com.au;Thanks for your help, I'll check it out when I get a free moment at work.

The staticaly bound version for 2.0 sounds like a good idea.  Doing a quick
search around google returns a large number of people complaing about commons
loggings complex classloading stuff.","14/Feb/06 06:46;rdonkin@apache.org;Sadly, there are no silver bullets.

It's very easy to complain but much more difficult to understand the problem in
detail. So, I should probably thank you know for being one of the tiny minority
who step up and help :)

JCL is incredibly widely used. This makes things very difficult. The issue for
JCL is (and has always been) that the J2EE classloading specifications are broken.

Static binding has it's own limitations. It also has it's own issues. The vast
majority of problems experienced by users are caused by having JCL jars in
different classloaders they are not aware of. Static binding will not solve this
problem.

Dynamic binding addresses application isolation in well behaved containers in a
fashion that is impossible for compile time static binding. Application
isolation should be possible by using byte code engineering to perform static
binding but that has it's own set of issues.

So, no silver bullets but maybe we can make things a little less painful...",17/Feb/06 05:43;rdonkin@apache.org;Waiting for retest with latest release candidate.,"21/Jul/06 01:02;skitching;As there has been no response from original poster, this is being closed presumed fixed.","07/Dec/06 22:08;dsmiley;This hasn't been fixed.  This problem can be seen using Apple's VM on Mac OS X if JCL is on the bootclasspath (such as via -Xbootclasspath).  I looked in source control for JCL and I see that the result is not checked for null.  The reference is:
LogFactory.getClassLoader(classname).
What needs to happen is that the result in there needs to be checked for null, and if it is then return ClassLoader.getSystemClassLoader().  At least there is only one place to make this fix now that all of JCL uses this method to get a ClassLoader, unlike how it used to work.","08/Dec/06 18:35;dsmiley;FYI, here's the new code that should go into the try/catch block:
            ClassLoader result = clazz.getClassLoader();
            if (result == null)
                result = ClassLoader.getSystemClassLoader();
            if (result == null)
                throw new IllegalStateException(""ClassLoader.getSystemClassLoader() returned null!"");
            return result;

It works for me.",13/Dec/06 04:29;skitching;Reopen due to report by David Smiley,"16/Dec/06 21:37;skitching;Applying this patch would cause some undesirable side-effects. For example, method logClassLoaderEnvironment uses this method to print diagnostic info. With this patch, we would report that a certain class was loaded from the system classloader when it is really loaded from the bootclassloader.

I think it's better to fix the place(s) where we try to dereference this loader without checking for null. Presumably you get an exception with a stack trace when this occurs. Can you please run the standard JCL 1.1.1 release with the following code and post the resulting exception? (please also include the output of ""java -version"")

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class Tester {
  public static Log log = LogFactory.getLog(""foo"");
  public static void main(String[] args) {
    log.error(""testing"");
  }
}

java -Xbootclasspath/a:commons-logging-1.1.1.jar Tester

BTW, running the 1.1.1 release on Linux/java1.5 using -Xbootclasspath/a:commons-logging-1.1.1.jar works fine. I'm pretty sure the Apple JVM is just the Sun source code licensed by Apple and tweaked, so don't know what could be causing a difference on Apple.

Thanks,

Simon",19/Dec/06 14:11;dsmiley;Sorry... it appears that the problem was with v1.0.4 and not 1.1 or later.  I *thought* I tried 1.1 in my environment and it didn't work but I just did now and all is well.  So sorry for re-opening this--problem solved.,19/Dec/06 21:12;skitching;That's ok David; I've done that before :-). Marking as closed/fixed.,,,,,,,,,,,,,,,,,,,,,
[commons-logging] Class-Path entry produces StringIndexOutOfBoundsExceptions,LOGGING-24,12340668,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,jens@void.fm,jens@void.fm,17/Apr/03 18:46,29/Dec/09 16:50,07/Apr/19 20:35,29/Dec/09 16:50,,,,,,,,,,1.0.4,,0,,,"I have been running into several problems using axis on weblogic (BEA WLS 6.1SP4). 
The used commons-logging.jar (1.0.2 to my knowledge)  produces  
StringIndexOutOfBoundsExceptions as soon as you try to deploy axis. The reason for this 
is a Class-Path: Entry in commons-logging Manifest. Removing this entry allows bea 
WLS deployment.

I have been referred to commons-logging, see http://nagoya.apache.org/bugzilla/
show_bug.cgi?id=19090 for further details.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,19108.0,,,2003-04-17 19:58:43.0,,,false,,,,,,,,,,,,,,,148204,,,Thu Apr 17 20:03:20 UTC 2003,,,,,,0|i0d7xb:,75060,,,,,,,,"17/Apr/03 19:58;rsitze@apache.org;Please provide details on the problem (stack trace would be helpful).
I'd like to understand where the exception is coming from, and why,
before making changes.","17/Apr/03 20:03;jens@void.fm;#19090 contains a link to a full stacktrace.

See http://marc.theaimsgroup.com/?l=axis-user&m=103347880202479&w=2

It is definitly a weblogic problem, but I believe a distribution should not include Class-Path entries if the jar may be used in a different context.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogConfigurationException when using STRUTS with 2 applications in iPlanet,LOGGING-23,12341315,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Incomplete,,vshaiva@optonline.net,vshaiva@optonline.net,07/Mar/04 23:57,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.3,,,,,,,,,,,0,,,"We are running two STRUTS applications using Log4j in iPlanet 6.5 Application 
servers. We have deployed struts, commons-beanutils, common-collections, 
commons-digester, commons-logging, commons-validator and  log4j under the WEB-
INF/lib and packaged them as separate ear files for each application 
separately. The Action servlet in each application is deployed with a different 
name. Each application has an initializer servlet that is invoked at 
application server startup and load the Log4J configuration.

The above works fine with only one application and also on occasion with both 
applications. However, we are getting intermittent errors when running both 
applications together when the requested JSP fails to load with an error in the 
application server kjs logs. We have observed the following pattern of errors: 
(with debugging turned on)

Always starts with one LogConfigurationException (see Error #1 below). This 
error does not always happen at startup. It can happen even after some usage of 
the applications. Once this error has occured, we get a 
java.lang.NoClassDefFoundError  (see Error #2 below) when  the JSP page load 
occurs in the application. 

Has anyone seen this error ? Any insight would be much appreciated.


Error #1
------------
Loading servlet: App1Action
[06/Mar/2004 13:01:39:3] error: Exception: SERVLET-execution_failed: Error in 
executing servlet EAMSAction: java.lang.ExceptionInInitializerError 
Exception Stack Trace: 
java.lang.ExceptionInInitializerError: 
org.apache.commons.logging.LogConfigurationException: 
org.apache.commons.logging.LogConfigurationException: 
org.apache.commons.logging.LogConfigurationException: 
Class org.apache.commons.logging.impl.Log4JLogger does not implement Log
	at org.apache.commons.logging.impl.LogFactoryImpl.newInstance
(LogFactoryImpl.java:532)
	at org.apache.commons.logging.impl.LogFactoryImpl.getInstance
(LogFactoryImpl.java:272)
	at org.apache.commons.logging.impl.LogFactoryImpl.getInstance
(LogFactoryImpl.java:246)
	at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:395)
	at org.apache.struts.action.ActionServlet.<clinit>
(ActionServlet.java:375)
	at java.lang.Class.newInstance0(Native Method)
	at java.lang.Class.newInstance(Class.java:232)
	at 
com.netscape.server.servlet.servletrunner.ServletRepository.loadServlet(Unknown 
Source)
	at 
com.netscape.server.servlet.servletrunner.ServletRepository.createInstance
(Unknown Source)
	at 
com.netscape.server.servlet.servletrunner.ServletRunner.createServletInfo
(ServletRunner.java:1237)
	at com.netscape.server.servlet.servletrunner.AppInfo.preLoadServlets
(Unknown Source)
	at com.netscape.server.servlet.servletrunner.AppInfo.resetServlets
(Unknown Source)
	at com.netscape.server.servlet.servletrunner.AppInfo.<init>(Unknown 
Source)
	at com.netscape.server.servlet.servletrunner.ServletModule.getAppInfo
(Unknown Source)
	at com.netscape.server.servlet.servletrunner.ServletRunner.getAppInfo
(ServletRunner.java:1546)
	at com.netscape.server.servlet.servletrunner.ServletRunner.execute
(ServletRunner.java:986)
	at com.kivasoft.applogic.AppLogic.execute(AppLogic.java:152)
	at com.kivasoft.applogic.AppLogic.execute(AppLogic.java:86)
	at com.kivasoft.thread.ThreadBasic.run(Native Method)
	at java.lang.Thread.run(Thread.java:479)

MessageHeaders:setHeaderField(): Invoking headers.put(name, value)

[06/Mar/2004 13:01:39:3] error: APPLOGIC-caught_exception: Caught Exception: 
java.lang.ClassCastException: java.lang.ExceptionInInitializerError
	at com.netscape.server.servlet.servletrunner.ServletRunner.reportError
(ServletRunner.java:1576)
	at com.netscape.server.servlet.servletrunner.ServletRunner.execute
(ServletRunner.java:1002)
	at com.kivasoft.applogic.AppLogic.execute(AppLogic.java:152)
	at com.kivasoft.applogic.AppLogic.execute(AppLogic.java:86)
	at com.kivasoft.thread.ThreadBasic.run(Native Method)
	at java.lang.Thread.run(Thread.java:479)


Error #2: This happens when the application is accessing a page.
--------------------------------------------------------------------------------
--------------
Loading servlet: App1Action
[06/Mar/2004 13:38:23:7] error: Exception: SERVLET-execution_failed: Error in 
executing servlet App1Action: java.lang.NoClassDefFoundError 
Exception Stack Trace: 
java.lang.NoClassDefFoundError
	at java.lang.Class.newInstance0(Native Method)
	at java.lang.Class.newInstance(Class.java:232)
	at 
com.netscape.server.servlet.servletrunner.ServletRepository.loadServlet(Unknown 
Source)
	at 
com.netscape.server.servlet.servletrunner.ServletRepository.createInstance
(Unknown Source)
	at 
com.netscape.server.servlet.servletrunner.ServletRunner.createServletInfo
(ServletRunner.java:1237)
	at com.netscape.server.servlet.servletrunner.AppInfo.preLoadServlets
(Unknown Source)
	at com.netscape.server.servlet.servletrunner.AppInfo.resetServlets
(Unknown Source)
	at com.netscape.server.servlet.servletrunner.AppInfo.<init>(Unknown 
Source)
	at com.netscape.server.servlet.servletrunner.ServletModule.getAppInfo
(Unknown Source)
	at com.netscape.server.servlet.servletrunner.ServletRunner.getAppInfo
(ServletRunner.java:1546)
	at com.netscape.server.servlet.servletrunner.ServletRunner.execute
(ServletRunner.java:986)
	at com.kivasoft.applogic.AppLogic.execute(AppLogic.java:152)
	at com.kivasoft.applogic.AppLogic.execute(AppLogic.java:86)
	at com.kivasoft.thread.ThreadBasic.run(Native Method)
	at java.lang.Thread.run(Thread.java:479)

MessageHeaders:setHeaderField(): Invoking headers.put(name, value)

[06/Mar/2004 13:38:23:7] error: APPLOGIC-caught_exception: Caught Exception: 
java.lang.ClassCastException: java.lang.NoClassDefFoundError
	at com.netscape.server.servlet.servletrunner.ServletRunner.reportError
(ServletRunner.java:1576)
	at com.netscape.server.servlet.servletrunner.ServletRunner.execute
(ServletRunner.java:1002)
	at com.kivasoft.applogic.AppLogic.execute(AppLogic.java:152)
	at com.kivasoft.applogic.AppLogic.execute(AppLogic.java:86)
	at com.kivasoft.thread.ThreadBasic.run(Native Method)
	at java.lang.Thread.run(Thread.java:479)","Operating System: Solaris
Platform: Sun",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,27504.0,,,2004-04-11 01:46:53.0,,,false,,,,,,,,,,,,,,,148203,,,Mon May 31 15:07:40 UTC 2004,,,,,,0|i0d7xj:,75061,,,,,,,,"11/Apr/04 01:46;craig.mcclanahan@sun.com;The ""Log4JLogger does not implement Log"" exception implies that there is more
than one copy of commons-logging.jar visible in the class loader hierarchy.  You
need to ensure that the commons-logging.jar file is *not* visible through a
parent class loader (whatever the iPlanet equivalent of Tomcat's common/lib
directory).
","31/May/04 15:07;rdonkin@apache.org;As craig said, this is a common problem caused by the deployment configuration.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in LogFactory,LOGGING-22,12340512,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,philipm@sybase.com,philipm@sybase.com,28/Jan/03 00:01,29/Dec/09 16:46,07/Apr/19 20:35,29/Dec/09 16:46,Nightly Builds,,,,,,,,,1.0.3,,0,,,"Trying to run this software on an EAServer, a NullPointerException is thrown in 
two different places within LogFactory.java.  I was able to trace the problem 
in the source:
1)  private static LogFactory getCachedFactory(ClassLoader contextClassLoader)
    {
        LogFactory factory = null;

        if (contextClassLoader != null)
            factory = (LogFactory) factories.get(contextClassLoader);

        if (factory==null)
            factory = (LogFactory) factories.get(LogFactory.class.getClassLoader
());

        return factory;
    }

the factories.get(LogFactory.class.getClassLoader()) will cause a problem 
because LogFactory.class.GetClassLoader() is null (using jre 1.4)  changing 
that part to a call to getContextClassLoader() would resolve this bug.

2) in getFactory():

        // Fourth, try the fallback implementation class
        if (factory == null) {
            factory = newFactory(FACTORY_DEFAULT, 
LogFactory.class.getClassLoader());
        }

same deal here, replacing LogFactory.class.getClassLoader() with contextClass 
will fix.

I don't know if there was a reason these were left as 
LogFactory.class.getClassLoader(), but getContextClassLoader(), will determine 
if this is the correct call to make (and it states that this is only 
appropriate in pre-jdk1.1), instead of just assuming it is the right call, 
causing NullPointerExceptions.

Perhaps this wasn't noticed since it usually doesn't get to this fallback 
position, but on the application server, it does every time.","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16457.0,,,2003-01-30 00:19:13.0,,,false,,,,,,,,,,,,,,,148202,,,Mon Mar 31 07:55:34 UTC 2003,,,,,,0|i0d7xr:,75062,,,,,,,,"28/Jan/03 00:14;philipm@sybase.com;correction: changing the first part to include a call to getContextClassLoader
() does not quite do it, changing the 'if(factory = null)' to an 'else' will 
clear it up.  This may not be what was intended, but I don't think it will 
change the function of the code significantly.  Please consider this fix.
Thanks","30/Jan/03 00:19;rsitze@apache.org;Please try recent code from CVS (a recent nightly build will do).
The code you are looking at was changed on 8/29/02.  Many other
changes have gone in to correct the problem you describe.


*** This bug has been marked as a duplicate of 10825 ***","30/Jan/03 00:39;philipm@sybase.com;Then how do you explain the error I get when I'm using the MOST RECENT BUILD.  
LogFactory.class.getClassLoader() still returns null and it is not handled 
well, yet LogFactory.getContextClassLoader() does not.  I don't know what 
you've put into it to ""fix"" this, but it's not quite right yet.
Please reconsider looking at this, because it obviously isn't fully resolved.","31/Jan/03 04:31;philipm@sybase.com;Please note: the previous note was not intended to sound confrontational.  I 
just wanted to point out that I already (before I posted the bug originally) 
had tested with the most recent build to begin with and whatever fix had been 
applied for this problem wasn't quite complete.  I apologise if I've offended 
anyone, I should have chosen my words more carefully.
Thank you for reconsidering.","31/Jan/03 05:04;rsitze@apache.org;OK, I've reviewed the code, and obviously I'm missing something
because it looks good to me (and I'm not having problems).  You
have done some homework to pin-point the problem... would you
please help me out with a reference to where you think the problem
is occuring in the new code...  [btw, this is subtle - at least
I find it so]

Again, the code below is ""old"", so if you seeing a two if statements
in getCachedFactory() then you have out-of-date code.  I'm confused...","31/Jan/03 05:19;philipm@sybase.com;okay, getCachedFactory() was fixed in the new source, although I copied my 
original post right out of the source code view (right out of the cvs 
repository), but I didn't see that updated code until just now.  

No matter, the bigger problem (and yet more subtle) that I had in mind is still 
there in getFactory():

// Fourth, try the fallback implementation class
if (factory == null) {
  factory = newFactory(FACTORY_DEFAULT, LogFactory.class.getClassLoader());
}

but LogFactory.class.getClassLoader() returns null.  I've suggested (and tested 
on my system) replacing 'LogFactory.class.getClassLoader()' 
with 'contextClassLoader' since that was defined earlier and used in every 
other place in the method.  

This problem doesn't occur in standalone apps or in a lot of other cases 
because it doesn't get to this fallback implementation class, but in my case it 
gets there.
        ","31/Jan/03 08:13;rsitze@apache.org;Now I'm curious as to the behaviour you are seeing.  At the following code 
point:

  // Fourth, try the fallback implementation class
  if (factory == null) {
    factory = newFactory(FACTORY_DEFAULT, LogFactory.class.getClassLoader());
  }

Yes, LogFactory.class.getClassLoader() may return null.  The method newFactory 
checks the class loaders, sees that it is null, and drops down to the line:

  return (LogFactory)Class.forName(factoryClass).newInstance();

which is exactly the desired behavior (Class is LogFactory.class).  If, 
instead, you pass in 'contextClassLoader', then you allow the user to override 
the factory-default by providing another implementation (same name) down the 
classloader hierarchy.  This is 'one-way' to resolve the problem, but the 
programming model is to use other methods to override...  You shouldn't NEED 
the context classloader, as LogFactory and the factory default are (suppose to 
be) in the same jar file.  If you don't have the factory default (commons-
logging-api.jar?), then this is moot anyway.

Does that help any, or am I still blind?","31/Jan/03 22:44;philipm@sybase.com;Now that you point that out, I, too, am puzzled...I was able to make the code 
work by setting the system property to get it to point to the appropriate class 
file (and avoiding that whole fourth alternative)

There may be something specific to my environment that is causing these 
troubles, but as I look at the code now, it SHOULD work, as you said.  I still 
don't understand why not use contextClassLoader instead of the other, since 
getContextClassLoader() will have returned the appropriate call, saving 
newFactory() a lot of work, and saving unnecessary method calls and being 
consistent with the rest of the method, but there may be something beyond the 
scope of my problems that made you go with that approach, I do not know.

Thank you for looking at it anyways, I will try to see if there's something 
*else* at my end.","31/Jan/03 23:21;rsitze@apache.org;Sorry if this is obvious, but I'm going to ask anyway: Were you expecting 'step 
four' to find YOUR factory?  If so, that would explain the confusion.  'step 
four' finds the DEFAULT.

FYI,

In a J2SE environment where you are using CLASSPATH to point to commons-
logging.jar and yourOwn.jar, then you are correct - using context class loader 
is OK.  In a J2EE environment with commons-logging installed at a system level, 
and your code as a web application, then the class loader hierarchy looks 
(loosely) like:

webAppClassLoader -> EARFileClassLoader -> SystemClassLoader -> ..

So, if you use the context class loader, then you are unnecessarily walking up 
the tree to find something in SystemClassLoader.  In this example, 
LogFactory.class.getClassLoader() == SystemClassLoader(), which is no more and 
no less than what is required to find the companion class in the same jar file 
with LogFactory.  The 'extra logic' that makes all that happen is to avoid 
walking the class loader chain - maybe a small nit, but it's something.

BTW, I incorrectly stated previously that you could overload the 
FACTORY_DEFAULT by placing a class in the lower [i.e webApp] classloader... 
default/standard behavior is to defer up the hierarchy for class resolution 
before looking at local class loader).  As you pointed out, in your hierarchy 
it appears that it's found by the bootstrap class loader, which can be returned 
as null.. that's odd to my simple mind, but that's the documented (and 
functional) behavior.","31/Jan/03 23:43;philipm@sybase.com;Yes, I know...and it doesn't for some reason (now I'm as puzzled as you 
are...perhaps more).  But thanks for the FYI, I now know just a little bit more 
than I did 5 minutes ago.","31/Mar/03 07:55;craig.mcclanahan@sun.com;Given no further discussion on this since January (and no changes to the
LogFactory code in question), I'm going to assume that it's been addressed. 
Please reopen the bug report if you find out something new.

In addition, if you take the (very helpful, thanks!) step of proposing a patch
to fix something, the most useful format is a ""cvs diff -u"".  This gives the
committer applying the patch unambiguous documentation of which CVS revision the
patch is against, and the ""-u"" format provides enough context to evaluate the
impact of the patch on a code review.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Log4J shutdown not invoked?,LOGGING-21,12340485,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Critical,Won't Fix,,william.pohlmann@vertexinc.com,william.pohlmann@vertexinc.com,14/Jan/03 03:27,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,Nightly Builds,,,,,,,,,,,0,,,"There's a comment in Log4jFactory.release() that suggests that log4j isn't 
being cleaned up.  (// what's the log4j mechanism to cleanup ???)

I think the appropriate method to call would be LogManager.shutdown().

A cursory look through log4j suggests that failure to shutdown may result in 
the SocketAppender not completely flushing data.  This is an UNCONFIRMED 
observation from reading code.  This would be a more serious problem than just 
failing garbage collection in some environments.

At least this is probably the call you want there, if it isn't truly a critical 
bug.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16039.0,,,2003-01-18 11:42:29.0,,,false,,,,,,,,,,,,,,,148201,,,Mon Mar 31 07:49:14 UTC 2003,,,,,,0|i0d7xz:,75063,,,,,,,,"18/Jan/03 11:42;craig.mcclanahan@sun.com;I don't believe that it is the responsibility of commons-logging to clean up
Log4J (or any other logging system), just as it is not the responsibility of
commons-logging to configure it in the first place.  This API is simply a
wrapper around the *logging* calls.  Configuration and lifecycle management of
the underlying logging implementation is the responsibility of the application
that is using commons-logging.
","22/Jan/03 01:15;william.pohlmann@vertexinc.com;While the higher level classes of commons-logging are not responsible for any 
specific logging system, the commons-logging release provides factories that do 
specifically configure logging systems to work under the jakarata commons-
logging.

Is org.apache.commons.logging.impl.Log4jFactory not considered to be part of 
commons-logging?

This class implements Log4jFactory.release().  The head revision of that class 
(revision 1.2) is as follows:


    public void release() {

        instances.clear();

        // what's the log4j mechanism to cleanup ??? 
    }

All I was attempting to log was what function should replace that comment, 
specifically org.apache.log4j.LogManager.shutdown().

I completely disagree that it is the responsibility of the application using 
commons-logging to clean up the underlying implementation of logging that is 
plugged into commons-logging.  If I wanted my application tied to a specific 
logging implementation even for setup and cleanup, I wouldn't use commons-
logging.  Configuration and lifecycle management has to fall within the purview 
of the commons-logging SPI or it loses its value.  Lifecycle events must be 
exposed at the plug level (as they currently are)and given factory 
implementations should do the right thing. 

I could see an argument that specific factory implementations should be outside 
of commons-logging, but the current distribution and package naming puts 
certain packages such as Log4j squarely within it.

Please reconsider the bug determination. ","26/Mar/03 01:43;garyashley@3mv.biz;As a user of JBoss 3.0.6 w/ Tomcat 4.1.18, I wanted to make sure that any 
changes to Commons logging does not shutdown Log4J automatically.  I am not 
aware of any problems that I have, and it seems to function properly though I 
am in the early stages of testing this functionality.  

Struts makes a call to:
LogFactory.release(classLoader); 

which is where the comment that produced this bug report stems.  

I merely want to ensure caution is taken with the many interdependencies on the 
common's logging component.  Having one Struts application on the server 
shutting down logging for other applications, or for either Tomcat or JBoss 
would be very undesireable.

","31/Mar/03 07:49;craig.mcclanahan@sun.com;With regard to William's question about ""Log4jFactory"" being considered part of
Log4J, I am very unhappy to find that it actually got added, since it doesn't
seem to add any useful value, does a half-baked job of pretending to manage the
underlying Log4J stuff, and only obfuscates everything else.  I'm going to be
arguing that it get deprecated in 1.0.x and removed in 1.1.x versions of
commons-logging.

It is said over and over in the documentation, and I'll say it again here --
configuration and management of the underlying logging system is out of scope
for commons-logging, which was originally, and should remain, totally focused on
wrapping the actual logging of messages.  If your application needs to manage
the configuration and cleanup of the underlying logging implementation, it must
do so itself.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] LoadTest not included in ant based unit tests,LOGGING-20,12342272,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,b_stansberry@hotmail.com,b_stansberry@hotmail.com,31/May/05 14:35,29/Dec/09 16:12,07/Apr/19 20:35,29/Dec/09 16:12,Nightly Builds,,,,,,,,,1.1.0,,0,,,"Unit test o.a.c.l.LoadTest is not run during the ant build.

The simplest way to include it is to include it in the suite returned by
TestAll, so I'll attach a patch to TestAll that does this.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,31/May/05 14:35;b_stansberry@hotmail.com;ASF.LICENSE.NOT.GRANTED--TestAll.diff;https://issues.apache.org/jira/secure/attachment/12333542/ASF.LICENSE.NOT.GRANTED--TestAll.diff,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,35131.0,,,2005-06-02 18:14:02.0,,,false,,,,,,,,,,,,,,,148200,,,Thu Jun 02 18:14:02 UTC 2005,,,,,,0|i0d7y7:,75064,,,,,,,,"31/May/05 14:35;b_stansberry@hotmail.com;Created an attachment (id=15223)
TestAll.diff
",02/Jun/05 18:14;skitching;Thanks Brian. Patch committed.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
<available ...> does not work properly when not available,LOGGING-19,12340433,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Incomplete,,tra@biobase.dk,tra@biobase.dk,26/Nov/02 23:47,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,Nightly Builds,,,,,,,,,,,0,,,"On this machine this build.xml snippet does not work properly:

  <target name=""compile-only"" depends=""init"" >
    <available property=""jdk.1.4.present""
               classname=""java.util.logging.Logger""/>
    <available classname=""org.apache.log4j.Category"" 
               classpathref=""compile.classpath"" 
               property=""log4j.present""/>
    <available property=""logkit.present""
               classpathref=""compile.classpath"" 
               classname=""org.apache.log.Logger""/>

    <echo  message=""jdk.1.4.present=${jdk.1.4.present}""/>
    <echo  message=""log4j.present=${log4j.present}""/>
    <echo  message=""logkit.present=${logkit.present}""/>

It is printed as


compile-only:
     [echo] jdk.1.4.present=${jdk.1.4.present}
     [echo] log4j.present=${log4j.present}
     [echo] logkit.present=${logkit.present}
    [javac] Compiling 3 source files to
/Users/ravn/net/jakarta/jakarta-commons/logging/target/classes


This is OS X 10.2.2 with a 1.3 JVM and none of the log4j or logkit things
installed.  Ant is a 1.5.1 binary release.","Operating System: All
Platform: Macintosh",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14859.0,,,2002-12-19 10:46:56.0,,,false,,,,,,,,,,,,,,,148199,,,Thu Dec 19 10:46:56 UTC 2002,,,,,,0|i0d7yf:,75065,,,,,,,,"19/Dec/02 10:46;craig.mcclanahan@sun.com;What you see is exactly what you should expect to see.  The property values will
be listed as ""true"" if the available class was detected.  For example, on my
system (JDK 1.4, both Log4J and LogKit visible), I get:

jdk.1.4.present=true
log4j.present=true
logkit.present=true

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Can't find commons-logging-optional.jar,LOGGING-18,12342653,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,sebb@apache.org,sebb@apache.org,23/Oct/05 22:32,29/Dec/09 14:29,07/Apr/19 20:35,29/Dec/09 14:29,1.0.4,,,,,,,,,1.1.0,,0,,,"The documentation for Commons Logging 1.0.4 says that
commons-logging-optional.jar is included in the standard distribution, but it
does not seem to be in either the binary or source zip files.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37210.0,,,2005-10-29 21:12:09.0,,,false,,,,,,,,,,,,,,,148198,,,Sun Nov 20 07:27:37 UTC 2005,,,,,,0|i0d7yn:,75066,,,,,,,,"29/Oct/05 21:12;rdonkin@apache.org;AFAIK commons-logging-optional.jar was added later than the 1.0.4 release. Where
did you find it refered to in the 1.0.4 documentation?","31/Oct/05 09:05;sebb@apache.org;Google finds it here:

http://wiki.apache.org/jakarta-commons/Logging/FrequentlyAskedQuestions

but that's not where I saw it. I can't find the reference at present. 

However, I have just noticed that the link ""1.0.4 Release"" on the main page
(just below ""Wiki"") does not take one to the 1.0.4 documentation (nor do the
1.0.3 and 1.0.2 links work properly either). I suppose it is possible that I was
misled by this.","20/Nov/05 07:27;dennisl@apache.org;I have updated the wiki. The optional jar was introduced in 1.0.5.
Sebb, if you find the other reference please reopen this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] SimpleLog.java adds extra - characters,LOGGING-17,12341190,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,dennisl@apache.org,dennisl@apache.org,07/Jan/04 09:52,29/Dec/09 16:26,07/Apr/19 20:35,29/Dec/09 16:26,Nightly Builds,,,,,,,,,1.0.4,,0,,,"I've just started using commons-logging, so I used SimpleLog to get started.
When doing so I found that the output isn't consistent.

With the default settings (showlogname=false, showShortLogname=true) the output
looks like this:

[DEBUG] CodeGenerator - -locale.language=sv

With altered settings (showlogname=true, showShortLogname=false) the output
looks like this:

[DEBUG] se.dennislundberg.codegeneration.ui.CodeGenerator - locale.language=sv

As you can see in the first example there is an extra '-' before the log message.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,29/Feb/04 03:31;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--SimpleLog.java.patch;https://issues.apache.org/jira/secure/attachment/12332683/ASF.LICENSE.NOT.GRANTED--SimpleLog.java.patch,07/Jan/04 09:54;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--SimpleLog.patch;https://issues.apache.org/jira/secure/attachment/12332682/ASF.LICENSE.NOT.GRANTED--SimpleLog.patch,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,25940.0,,,2004-02-29 07:01:44.0,,,false,,,,,,,,,,,,,,,148197,,,Sun Feb 29 07:01:44 UTC 2004,,,,,,0|i0d7yv:,75067,,,,,,,,"07/Jan/04 09:54;dennisl@apache.org;Created an attachment (id=9838)
Renames the variable ""prefix"" to ""shortLogName"" and adds some JavaDoc for it. A couple of typos and some trailing whitespace are also fixed.
","29/Feb/04 03:31;dennisl@apache.org;Created an attachment (id=10608)
Updated version of the previous patch that also removes a duplicate assignment
","29/Feb/04 07:01;craig.mcclanahan@sun.com;Fixed in nightly build 20040229 (and upcoming 1.0.4 release).  Thanks for the patch!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LogFactoryImpl bug? in class loading order...,LOGGING-16,12341808,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,ervandew@yahoo.com,ervandew@yahoo.com,16/Oct/04 08:36,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.4,,,,,,,,,,,0,,,"in loadClass(String) the current implementation trys to load the supplied class
name by first using the context classloader, then trying a simple Class.forName().

Is there a particular reason why it's not the other way around?

I ask because i've gotten very weird behavior using ant and ejbdoclet (xdoclet).
When building several modules at once and running xdoclet several times, at some
point (after several ejbdoclet calls have succeeded), ejbdoclet suddenly fails
with ... ""Invalid class loader hierarchy.  You have more than one version of
'org.apache.commons.logging.Log' visible, which is not allowed.""

There are no other jars in the classpath containing this class.

I narrowed it down to the fact that the failure occurs when the context
classloader is the one that finds the class.  If i swap the order and have
Class.forName execute first then everything works fine.

I think the root of this issue may be a bug in ant, since i can run the module
that fails independently and it builds fine.  It's only when run after other
modules in a single ant script that it fails.

So, i'm hoping that there isn't a need to use the context classloader first, but
instead the Class.forName can be given precedence.

Thoughts?","Operating System: Linux
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31740.0,,,2004-10-16 08:49:17.0,,,false,,,,,,,,,,,,,,,148196,,,Sat Oct 16 08:49:17 UTC 2004,,,,,,0|i0d7z3:,75068,,,,,,,,"16/Oct/04 08:49;craig.mcclanahan@sun.com;You'd be better off having a conversation on the Commons User mailing list on
issues like this, reserving the issue tracking system for reporting bugs or
making enhancement requests.

That being said, the design decision on class loading order was very much a
deliberate one.  Consider the very common scenario of a servlet container that
makes commons-logging available to all applications (such as by putting it in
common/lib or shared/lib in Tomcat).  Now, applications can use commons-logging
without having to carry it around inside WEB-INF/lib.

Now consider an app that wants to provide its own Log implementation (say, to
prefix the current app's context path onto the log name before delegating to the
standard implementation).  The Log implementation itself would be included in
the webapp, and the current class loading order (check the context class loader
first) will find it.  Your proposed change, however, would cause the custom Log
implementation to NOT be found, because the search would start in the shared
repository ... and you can only go UP a class loader hierarchy, not down. 
That's not acceptable.

I've successfully used commons-logging inside things managed by Ant (such as
JUnit based unit tests), but only with fork=""true"".  It sounds like you should
experiment with actually setting the context class loader to the one you want:

  Thread.currentThread().setContextClassLoader(...)

and/or work with the Ant folks to understand how they set up their class loading
architecture.  But don't forget that everything in $ANT_HOME/lib is in the class
loader hierarchy somewhere, in addition to things in the actual classpath. 
Also, JAR files can declare their own internal classpaths within the
META-INF/MANIFEST.MF file, so you'll need to double check those as well for
possible additional occurrences of commons-logging.jar.



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Log interface should be loaded by loadClass method,LOGGING-15,12341070,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Won't Fix,,jaynes@umich.edu,jaynes@umich.edu,03/Nov/03 21:19,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,Nightly Builds,,,,,,,,,,,0,,,"In LogFactoryImpl.getLogConstructor(), the Log interface may not have been
loaded by the same classloader as the log implementation, so the
isAssignableFrom test fails. To be consistent, the Log interface should be
loaded by the loadClass() method, just as the logClass is.  --Will Jaynes","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,03/Nov/03 21:22;jaynes@umich.edu;ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.patch.txt;https://issues.apache.org/jira/secure/attachment/12332602/ASF.LICENSE.NOT.GRANTED--LogFactoryImpl.patch.txt,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,24353.0,,,2003-11-03 21:35:45.0,,,false,,,,,,,,,,,,,,,148195,,,Mon Nov 03 21:35:45 UTC 2003,,,,,,0|i0d7zb:,75069,,,,,,,,"03/Nov/03 21:22;jaynes@umich.edu;Created an attachment (id=8888)
Load Log interface using loadClass() method
","03/Nov/03 21:35;remm@apache.org;I disagree with this. If used properly, you'll see that commons-logging
classloading handling is well thought out, and works perfectly well. Pesonally,
I am against the change you propose.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] LogConfigurationException double wrapped,LOGGING-14,12342266,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,w-zwicky@cecer.army.mil,w-zwicky@cecer.army.mil,28/May/05 06:23,29/Dec/09 16:12,07/Apr/19 20:35,29/Dec/09 16:12,1.0.4,,,,,,,,,1.1.0,,0,,,"LogFactoryImpl.getLogConstructor() double-wraps when it throws
LogConfigurationException.  In other words, when it throws
LogConfigurationException, it wraps that exception in *another*
LogConfigurationException.  In fact, the full message is:

org.apache.commons.logging.LogConfigurationException:
org.apache.commons.logging.LogConfigurationException:
java.lang.NullPointerException (Caused by java.lang.NullPointerException)
(Caused by org.apache.commons.logging.LogConfigurationException:
java.lang.NullPointerException (Caused by java.lang.NullPointerException))

Feel free to track that mess down, but this report is just for this one instance
of wrapping.

The wrapping occurs on line 397.  You can fix it either by ensuring the ""throw
new"" calls are outside the ""catch Throwable"", or you can add an extra catch:

catch (LogConfigurationException ex) { throw ex; }
catch (Throwable t) { throw new LogConfigurationException(t); }","Operating System: Windows 2000
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,35112.0,,,2005-05-30 16:52:37.0,,,false,,,,,,,,,,,,,,,148194,,,Mon May 30 16:52:37 UTC 2005,,,,,,0|i0d7zj:,75070,,,,,,,,"30/May/05 16:52;skitching;Thanks for reporting this Bill. The LogFactoryImpl class is getting some
significant modifications right at this moment. Brian Stansberry's proposed
patch actually fixes this as a part of some other changes. I'm marking this bug
entry ""fixed"" although the patch isn't yet committed because it is expected that
it very soon will be.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] NullPointException when Logger.getClassLoader returns null,LOGGING-13,12340269,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Critical,Fixed,,ajack@openbiz.biz,ajack@openbiz.biz,15/Jul/02 21:11,29/Dec/09 17:01,07/Apr/19 20:35,29/Dec/09 17:01,Nightly Builds,,,,,,,,,1.1.0,,0,,,"getClassLoader can return null to imply the Boot Class Loader (per JDK 1.3 
documentatio at least) however unfortunately commons logging is not coded to 
support that.

There are at least two places where this is a problem & commons logging dies w/ 
a NullPointerException, one in a Hashtable (used as a key to factory) [HashMap 
allows null key, Hashtable does not] and one other more directly.

I modified the code to use the ClassLoader.getSystemClassLoader() when a null 
was returned for Logger.getClassLoader() -- assuming ['cos I had no better 
guess/choice] that System == Boot [since there was no getBootClassLoader.] This 
appears to be working.

I can send my modified code if interested.","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,17/Jul/02 23:08;ajack@openbiz.biz;ASF.LICENSE.NOT.GRANTED--LogFactory.java;https://issues.apache.org/jira/secure/attachment/12331991/ASF.LICENSE.NOT.GRANTED--LogFactory.java,17/Jul/02 23:07;ajack@openbiz.biz;ASF.LICENSE.NOT.GRANTED--LogFactory.java;https://issues.apache.org/jira/secure/attachment/12331990/ASF.LICENSE.NOT.GRANTED--LogFactory.java,10/May/05 01:20;erik@ingaro.co.uk;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12331993/ASF.LICENSE.NOT.GRANTED--patch.txt,17/Oct/02 17:19;leidl@nt.imp.univie.ac.at;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12331992/ASF.LICENSE.NOT.GRANTED--patch.txt,,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,10825.0,,,2002-07-17 22:51:06.0,,,false,,,,,,,,,,,,,,,148193,,,Tue May 31 13:53:31 UTC 2005,,,,,,0|i0d7zr:,75071,,,,,,,,"17/Jul/02 22:51;craig.mcclanahan@sun.com;This sounds like a good fix -- could you post your changes as an attachment to
this bug report, or in a mail message to COMMONS-DEV@JAKARTA.APACHE.ORG?
","17/Jul/02 23:07;ajack@openbiz.biz;Created an attachment (id=2383)
This is my hacked copy...
","17/Jul/02 23:08;ajack@openbiz.biz;Created an attachment (id=2384)
This is the original I diff'ed
","17/Jul/02 23:09;ajack@openbiz.biz;Diff of mine (Attached) with yours (Attached)

445,452d445
< 
<         
< if ( null == classLoader )
< {
< 	classLoader = ClassLoader.getSystemClassLoader();
< 
< }
< 
483d475
< 
503,516c495
< 	{
< 	    ClassLoader local = LogFactory.class.getClassLoader();
< 
<             if ( null != local )
< 		factory = (LogFactory) factories.get
(LogFactory.class.getClassLoader());
< 	}
< 
< 	if ( factory == null )
< 	{
< 
< 	   factory = (LogFactory) factories.get(ClassLoader.getSystemClassLoader
());
< 
< 	}
< 
---
>             factory = (LogFactory) factories.get
(LogFactory.class.getClassLoader());
548,552d526
< 
< 
< 	 if (classLoader == null)
<                 classLoader = ClassLoader.getSystemClassLoader();
< ","18/Jul/02 04:23;rsitze@apache.org;Don't forget that commons-logger is targeted to JVM < 1.2,
and getSystemClassLoader() is new for 1.2.  Hmm...","18/Jul/02 04:26;rsitze@apache.org;Let me clarify that last remark:  commons-logging should execute on JDK 1.1.8+,
so it must avoid code that will not execute in pre 1.2/1.3/1.4 environs.","18/Jul/02 04:51;ajack@openbiz.biz;I see you have other code in commons that does introspection (or catches 
MethodNotFound) to deal with earlier JDKs. Could that not occur here?

I assume you aren't saying it must crash for me on JDK 1.3 so it works for 
folks on JDK 1.1. Are you proposing something?","18/Jul/02 05:16;rsitze@apache.org;Take a look at commons.discovery.  This will eventually replace the factory 
code in logging (at least that's my intent), so I'm going to assume that you 
would like the problem fixed there also :-)

Anyway, take a look at the class BootstrapLoader.  I'd appreciate someone with 
a JDK 1.1.x environ putting together a test-case for this loader and verifying 
that it does what's expected.  It SHOULD build in earlier JVM's, and function 
as you specified.  For JDK 1.2 we could use a similar mechanism to get directly 
to the bootstrap loader, but that code wouldn't build in JDK 1.1.x... so I 
think your proposed solution + portable code is going to be about as good as it 
gets.  Thanks for the proposed solution.

BTW, IF you have time, it would be great if you used 'discovery' directly in 
your environment to get the LogFactory.  This would verify for me that I've 
solved your problem and haven't introduced another...

Use the following to get the LogFactory (note properties are protected, so I've 
put literals here):

 (LogFactory)ServiceFinder.find(LogFactory.class,
                                LogFactory.class,
                 ""org.apache.commons.logging.impl.LogFactoryImpl"",
                 ""commons-logging.properties"");
","18/Jul/02 11:59;ajack@openbiz.biz;I clearly do not understand this bug form, I keep getting things out of thread 
sequence. Oh well...

I would volunteer to help, in any way, it is certainly in my interest. 
Unfortunaly I leave Friday for vacation and I am no where near wrapped up, so 
know I won't have time before then.

I don't know if it helps, but I've added it to my calendar to do upon my return 
August 1st. 

regards

Adam","18/Jul/02 23:07;rsitze@apache.org;Just to keep the conversation going :-)  I'm moving this side comment from Axis 
(because I don't think it is relevant there, it's not constrained as commons-
logging is):

>> [If JDK 1.1 has not getSystemClassLoader I have to assume it does not return 
null.]

Not true.

JDK 1.1.x: Class.getClassLoader() == null == SystemClassLoader
JDK 1.2+:  Class.getClassLoader() == null == BootstrapClassLoader

... now how do you get the system classloader in JDK 1.1.x?
... and how do you get the bootstrap classloader in JDK 1.2+?

I'm using the following class as my ""SystemClassLoader"" in Discovery:

    /**
     * JDK 1.1.x compatible?
     * There is no direct way to get the system class loader
     * in 1.1.x, so work around...
     */
    class SystemClassLoader extends ClassLoader {
        protected Class loadClass(String className, boolean resolve)
            throws ClassNotFoundException
        {
            return findSystemClass(className);
        }
        
        public URL getResource(String resName) {
            return getSystemResource(resName);
        }
        
        public InputStream getResourceAsStream(String resName) {
            return getSystemResourceAsStream(resName);
        }
    }
","27/Sep/02 04:36;rsitze@apache.org;I believe that this was corrected along with the issues raised in 12149.
[quite possible the same issue, in the end].

*** This bug has been marked as a duplicate of 12149 ***","17/Oct/02 17:19;leidl@nt.imp.univie.ac.at;Created an attachment (id=3501)
patch file including code patches and a new test case
","17/Oct/02 17:29;leidl@nt.imp.univie.ac.at;This bug is still unsolved in the current CVS version (2002-10-17), so I decided
to reopen it again.
This bug occurs when the commons-logging classes are loaded by the bootstrap
class loader and no context class loader is available.
A patch as well as an appropriate test case is attached. This test makes use of
the Java endorsed library mechanism to expose the critical classes to the boot
strap class loader, so you will need a JDK that supports that mechanism to make
the test work. I used Sun J2SE SDK 1.4.0 on a Windows NT 4.0 machine.

The patch for LogFactory uses Class.forName() instead of
Class.getClassLoader().loadClass(). AFAIK this should not make a difference.
Furthermore this method is also available in pre 1.2 JDKs so it should not raise
any compatibility issues. 

Here is the modified newFactory method:

    protected static LogFactory newFactory(String factoryClass,
                                           ClassLoader classLoader)
            throws LogConfigurationException {
        try {
            if (classLoader != null) {
                try {
                    return (LogFactory) classLoader.loadClass(factoryClass)
                            .newInstance();
                } catch (ClassNotFoundException cnfx) {
                    // continue
                }
            }
	    
            // class loader is null, or Factory class could not be loaded
            // by means of the specified class loader at this point.

            // Let's try the class loader that loaded this class. If this 
            // class is loaded by the bootstrap class loader 
            // Class.getClassLoader() can return null according to the 
            // contract of that method so we have to use Class.forName() 
            // instead of Class.getClassLoader().loadClass().
            return (LogFactory) Class.forName(factoryClass).newInstance();

        } catch (Exception e) {
            throw new LogConfigurationException(e);
        }
    }



To apply the patch enter the commons-logging directory and run ""patch -Np0 <
patch.txt"".

The patch applies changes to LogFactory.java and build.xml, and creates a new
TestCase called BootStrapTest.java
","17/Oct/02 19:48;leidl@nt.imp.univie.ac.at;Oops, I mean ""patch -Np2 < patch.txt"". Furthermore the patch makes some changes
to TestAll.java, which I just forgot to take out again :(

Cheers,
Volker","18/Oct/02 06:03;rsitze@apache.org;Thanks for the education and the patch!
Really appreciate when someone explains WHY the code is wrong :-)
",12/Nov/02 00:49;rsitze@apache.org;*** COM-260 has been marked as a duplicate of this bug. ***,30/Jan/03 00:19;rsitze@apache.org;*** COM-361 has been marked as a duplicate of this bug. ***,"06/Aug/04 00:36;scott@scottbender.net;It looks like this bug is back. I'm getting a NullPointerException in
commons-logging-1.0.4 LogFactoryImpl.java line 374","17/Oct/04 21:07;rdonkin@apache.org;I've just committed a patch which should fix this problem as well.

Robert","09/May/05 17:26;e.vogelsinger@mobilkom.at;Hithere,

using commons logging 1.0.4 this bug seems to be (again? still?) in production, 
see code snippet below, lines 374/375. As soon as you have the commons in your 
bootstrap classpath you're doomed, as ""this.getClass().getClassLoader()"" will 
return null (JVM 1.4.2).

// from LogFactoryImpl.java
360:   protected Constructor getLogConstructor()
361:        throws LogConfigurationException {
362:
363:        // Return the previously identified Constructor (if any)
364:        if (logConstructor != null) {
365:            return logConstructor;
366:        }
367:
368:        String logClassName = getLogClassName();
369:
370:        // Attempt to load the Log implementation class
371:        Class logClass = null;
372:        Class logInterface = null;
373:        try {
374:            logInterface = this.getClass().getClassLoader().loadClass
375:                (LOG_INTERFACE);

org.apache.commons.logging.LogConfigurationException: 
org.apache.commons.logging.LogConfigurationException: 
java.lang.NullPointerException (Caused by java.lang.NullPointerException) 
(Caused by org.apache.commons.logging.LogConfigurationException: 
java.lang.NullPointerException (Caused by java.lang.NullPointerException))
	at org.apache.commons.logging.impl.LogFactoryImpl.newInstance
(LogFactoryImpl.java:543)
	at org.apache.commons.logging.impl.LogFactoryImpl.getInstance
(LogFactoryImpl.java:235)
	at org.apache.commons.logging.LogFactory.getLog(LogFactory.java:370)
	at org.apache.commons.digester.Digester.<init>(Digester.java:346)
	at Main.main(Main.java:53)
Caused by: org.apache.commons.logging.LogConfigurationException: 
java.lang.NullPointerException (Caused by java.lang.NullPointerException)
	at org.apache.commons.logging.impl.LogFactoryImpl.getLogConstructor
(LogFactoryImpl.java:397)
	at org.apache.commons.logging.impl.LogFactoryImpl.newInstance
(LogFactoryImpl.java:529)
	... 4 more
Caused by: java.lang.NullPointerException
	at org.apache.commons.logging.impl.LogFactoryImpl.getLogConstructor
(LogFactoryImpl.java:374)
	... 5 more
Exception in thread ""main"" ","09/May/05 19:01;skitching;Release 1.0.4 was made from revision 139045 on 2004-06-11.
This bug was fixed in revision 139052 on 2004-10-17.
And this bugzilla entry was closed on that same date.

So the bug is fixed; there just hasn't been an official release since the fix
went in. If you pull the latest code from SVN and compile that, you should get a
fixed JCL - though of course you'll get some other changes too.

Still, I presume that if you're putting JCL into the bootclasspath, you're doing
embedded systems work? In that case, distributing a non-official version of JCL
shouldn't bother you. I would recommend pulling the code from the LOGGING_1_0_4
tagdir and applying the fix from r139052 only, in order to avoid getting any
""experimental"" code.","10/May/05 01:20;erik@ingaro.co.uk;Created an attachment (id=14974)
changes LogFactory.getFactory to return same instance if classloader is null

I'm experiencing similar issues on Jeode (basically 1.1.8) where
getClassLoader() is returing null.

When this is the case LogFactory.getFactory() returns a different instance of
LogFactory each time it is called.  This means I cannot call setAttribute on a
LogFactory and expect future calls to getLog to use the same instance.

LogFactory uses a map (""factories"") of 
ClassLoader->LogFactory.  Where ClassLoader == null it cannot be used as a key
in this map, therefore previously created instances are not found.

I have included a patch to fix this problem.  It adds an additional static
variable ""nullClassLoaderFactory"" that performs the same function as the
factories map, but for cases where ClassLoader is null.  If the factories map
is accessed and the ClassLoader is null this variable can be used instead.

This is against svn trunk.
","10/May/05 09:50;skitching;(In reply to comment #22)
> changes LogFactory.getFactory to return same instance if classloader is null

Thanks for the patch Erik. It has been committed to SVN trunk.


","31/May/05 13:53;skitching;As there has been no feedback in the last 21 days, I will assume the patch
worked and am closing the issue.",,,,,,,,,,,,,,
Jdk14Logger extremely slow due to method name extraction,LOGGING-12,12340621,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,bruno,bruno,20/Mar/03 21:01,29/Dec/09 16:33,07/Apr/19 20:35,29/Dec/09 16:33,,,,,,,,,,1.0.3,,0,,,"The Jdk14Logger of Commons logging is *extremely* slow, even if logging is not
enabled. This is due to the fact that an exception is created so that its stack
trace can be used to determine the callers method name.

Attached patch will surround the code with a logger.isLoggable(level) check, so
that this is at least avoided when logging is not enabled. (though I would
rather see that code completely removed)","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,20/Mar/03 21:02;bruno;ASF.LICENSE.NOT.GRANTED--jdk14loggerpatch.txt;https://issues.apache.org/jira/secure/attachment/12332205/ASF.LICENSE.NOT.GRANTED--jdk14loggerpatch.txt,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,18184.0,,,2003-03-31 08:29:26.0,,,false,,,,,,,,,,,,,,,148192,,,Mon Mar 31 08:29:26 UTC 2003,,,,,,0|i0d7zz:,75072,,,,,,,,"20/Mar/03 21:02;bruno;Created an attachment (id=5444)
patch for Jdk14Logger.java
","31/Mar/03 08:29;craig.mcclanahan@sun.com;Fixed in nightly build 20030331, and upcoming 1.0.3 release.  Thanks for the patch!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging][PATCH] Enable the configuration of date and time format in SimpleLog,LOGGING-11,12341319,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,dennisl@apache.org,dennisl@apache.org,09/Mar/04 08:37,29/Dec/09 16:24,07/Apr/19 20:35,29/Dec/09 16:24,Nightly Builds,,,,,,,,,1.0.4,,0,,,"It would be nice if the user could configure the date and time format used by
SimpleLog.

I have made patches for SimpleLog and the unittests. The patch enables a new
optional configuration property
org.apache.commons.logging.simplelog.dateTimeFormat. The property takes a value
of a SimpleDateFormat pattern. If the pattern is not specified or is invalid,
the default pattern is used.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,09/Mar/04 08:39;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--CustomConfigTestCase.java.patch;https://issues.apache.org/jira/secure/attachment/12332790/ASF.LICENSE.NOT.GRANTED--CustomConfigTestCase.java.patch,09/Mar/04 08:39;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--DecoratedSimpleLog.java.patch;https://issues.apache.org/jira/secure/attachment/12332791/ASF.LICENSE.NOT.GRANTED--DecoratedSimpleLog.java.patch,09/Mar/04 08:39;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--DefaultConfigTestCase.java.patch;https://issues.apache.org/jira/secure/attachment/12332792/ASF.LICENSE.NOT.GRANTED--DefaultConfigTestCase.java.patch,09/Mar/04 08:38;dennisl@apache.org;ASF.LICENSE.NOT.GRANTED--SimpleLog.java.patch;https://issues.apache.org/jira/secure/attachment/12332789/ASF.LICENSE.NOT.GRANTED--SimpleLog.java.patch,,,,,,,,,,,,,,4.0,,,,,,,,,,,,,,,,27528.0,,,2004-05-29 17:52:27.0,,,false,,,,,,,,,,,,,,,148191,,,Sat May 29 17:52:27 UTC 2004,,,,,,0|i0d807:,75073,,,,,,,,"09/Mar/04 08:38;dennisl@apache.org;Created an attachment (id=10714)
Patch for SimpleLog.java
","09/Mar/04 08:39;dennisl@apache.org;Created an attachment (id=10715)
Patch for unittests
","09/Mar/04 08:39;dennisl@apache.org;Created an attachment (id=10716)
Patch for unittests
","09/Mar/04 08:39;dennisl@apache.org;Created an attachment (id=10717)
Patch for unittests
","29/May/04 17:52;rdonkin@apache.org;Committed this patch. Many thanks.

I will probably go ahead and create some more unit tests plus creating a documentation patch now. 

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SimpleLog uses getSystemResourceAsStream to load props,LOGGING-10,12340225,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,jrr@silverstream.com,jrr@silverstream.com,16/May/02 09:07,29/Dec/09 17:06,07/Apr/19 20:35,29/Dec/09 17:06,1.0,,,,,,,,,1.0.1,,0,,,"The Log implementation, SimpleLog, uses getSystemResourceAsStream() to load the 
simplelog.properties file. Using getSystemResourceAsStream(), instead of something like 
this.getClass().getClassLoader().getResourceAsStream(), or even better, 
Thread.currentThread().getContextClassLoader().getResourceAsStream(), prevents the 
properties file from being deployed with an application. This forces the developer to put the 
properties file on the system classpath.

Why was the decision made to only look on at the 
system classloader? The LogFactory does a nice job of finding it's properties with 
findClassLoader(). A similar implementation for SimpleLog would be great.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,9140.0,,,2002-06-16 03:55:13.0,,,false,,,,,,,,,,,,,,,148190,,,Sun Jun 16 03:55:13 UTC 2002,,,,,,0|i0d80f:,75074,,,,,,,,"16/Jun/02 03:55;craig.mcclanahan@sun.com;Fixed in nightly build 20020616.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] Log.trace() doesn't use log4j 1.3 trace methods,LOGGING-9,12342184,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,pdegregorio@comcast.net,pdegregorio@comcast.net,13/Apr/05 22:12,18/Nov/06 12:52,07/Apr/19 20:35,18/Nov/06 12:44,1.0.4,,,,,,,,,1.1.0,,2,,,"Jakarta Commons Logging 1.0.4 detects log4j 1.3 and alters its behaviour 
accordingly but continues to map its trace methods to log4j debug methods 
while log4j 1.3 now has its own trace methods. The following patch fixes this 
bug: 

Index: commons-
logging/src/java/org/apache/commons/logging/impl/Log4JLogger.java
===================================================================
--- commons-logging/src/java/org/apache/commons/logging/impl/Log4JLogger.java
	(revision 161137)
+++ commons-logging/src/java/org/apache/commons/logging/impl/Log4JLogger.java
	(working copy)
@@ -84,7 +84,7 @@
         if(is12) {
             getLogger().log(FQCN, (Priority) Level.DEBUG, message, null );
         } else {
-            getLogger().log(FQCN, Level.DEBUG, message, null );
+            getLogger().log(FQCN, Level.TRACE, message, null );
         }
     }
 
@@ -97,7 +97,7 @@
         if(is12) {
             getLogger().log(FQCN, (Priority) Level.DEBUG, message, t );
         } else {
-            getLogger().log(FQCN, Level.DEBUG, message, t );
+            getLogger().log(FQCN, Level.TRACE, message, t );
         }
     }
 
@@ -277,7 +277,11 @@
      * For Log4J, this returns the value of <code>isDebugEnabled()</code>
      */
     public boolean isTraceEnabled() {
-        return getLogger().isDebugEnabled();
+        if(is12) {
+            return getLogger().isDebugEnabled();
+        } else {
+            return getLogger().isTraceEnabled();
+        }
     }
 
     /**","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,34437.0,,,2005-04-14 01:28:05.0,,,false,,,,,,,,,,,,,,,148189,,,Sun Nov 20 07:10:19 UTC 2005,,,,,,0|i0d80n:,75075,,,,,,,,"14/Apr/05 01:28;skitching;Hi Peter,

I'm a bit concerned about the fact that this implementation requires testing a
boolean flag for each call to Log.isTraceEnabled or Log.trace. Testing a single
boolean isn't too bad, but logging *is* supposed to be highly tuned. Yes, the
current code *already* does this boolean testing - but I'm not sure I agree with it.

An alternative would be to instead create a Log4J13Logger class which subclasses
Log4JLogger and overrides the trace and isTraceEnabled methods. This should
produce the same effect without needing a boolean flag - though it means
modifying LogFactoryImpl to do the testing for log4j version instead (so it can
select the correct Log wrapper class constructor to call).

However if no-one else is concerned about the performance implications of an
extra boolean test in isTraceEnabled, then your patch could certainly be applied
as-is.

If we stay with the current implementation, I think it would be a good idea to
rename ""is12"" to ""isPre13"" or similar; I was confused at first by this variable
name (not your fault, Peter!).","14/Apr/05 08:27;pdegregorio@comcast.net;Hi Simon, 
I was wondering about continual testing of the is12 flag in isTraceEnabled. 
It's obviously going to cost some time, though I don't really have the 
expertise to know how much, so I'm curious what others think. If you're looking 
for a volunteer, I'd enjoy taking a look at submitting a Log4J13Logger and the 
required LogFactoryImpl modification if that would help, or do the suggested 
rename of is12 to isPre13, though I may not be able to turn it around very 
quickly and I'll have questions (like should I actually be working on 1.0.5 and 
how to do unit testing). 
Regards, 
Peter","18/Apr/05 04:45;rdonkin@apache.org;Real life costs are very hard to guesstimate. Might be nice to get some numbers
(but not essential).

I'd suggest that the bigger cost would likely be the class cast performed. This
is going to make logging to early versions of Log4J expensive. Refactoring in a
fashion suggested by Simon may therefore makes quite a lot of sense. 

However, I would say that it may be better to leave Log4JLogger with less
performant support for all versions of Log4J retaining the internal boolean.
This could then be used from the command line when required. 

If do go down this route, we'll end up with one general purpose logger not used
by LogFactory and two special purpose loggers used by LogFactoryImpl. The
classloader which defines LogFactoryImpl would be the one that determines which
version of LogJ to use. Not sure whether that's better or worse that the current
situation.","02/Jun/05 18:22;skitching;Just a note: log4j 1.3 still hasn't been released yet, and there are debates on
the log4j list over which future version will provide the TRACE level. So this
needs to be put on hold until a log4j version with trace actually exists.","08/Sep/05 20:07;christian.gruber@biomax.com;log4j 1.2.12 is out, which has implemented the trace level.
So it now might be the right time to remove the hold?","09/Sep/05 15:46;skitching;Thanks for the note. It's definitely the right time to look at this again.

Unfortunately there isn't much developer time being spent on commons-logging at
the moment; all the developers (including myself) appear to be occupied with
other things at the moment. A new commons-logging release isn't looking likely
in the near future.","29/Sep/05 06:56;joerg@j-hohwiller.de;two points from me:

1. As you can read on http://www.qos.ch/logging/preparingFor13.jsp on the long
run they want to kick out the legacy stuff such as Category and Priority.
So eighter we should kick this out completely (which is my suggestion) or we
have a very strong point for creating a separate Log4J13Logger which is already
in SVN
and is using Logger and Level.

2. The current SVN codebase has renamed Log4JLogger to Log4J12Logger. I am not
sure if this is a good idea for compatibility. If someone just upgrades the jar
and is using the Log4JLogger set up somewhere in his config, his code may not
work anymore (as expected).","05/Nov/05 04:42;marc210@hotmail.com;Is this bug going to stay open forever?  What should commons-logging users do 
if they want to make use of the log4j trace method?","20/Nov/05 07:10;dennisl@apache.org;The code that is in SVN now handles trace level logging for log4j 1.2.12+ and
1.3alpha-7.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Deprecation,LOGGING-8,12340339,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Duplicate,,seapwc@halcyon.com,seapwc@halcyon.com,29/Sep/02 14:11,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.1,,,,,,,,,,,0,,,"[javac]
.......\logging\src\java\org\apache\commons\logging\impl\Log4JCategoryLog.java:
137: warning: 
setPriority(org.apache.log4j.Priority) in org.apache.log4j.Category 
has been deprecated","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,13117.0,,,,,,false,,,,,,,,,,,,,,,148188,,,Sat Oct 19 01:38:52 UTC 2002,,,,,,0|i0d80v:,75076,,,,,,,,"19/Oct/02 01:38;seapwc@halcyon.com;

*** This bug has been marked as a duplicate of 13118 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Can't locate classloader when creating a new LogFactory,LOGGING-7,12340411,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Duplicate,,bargezi@csi.com,bargezi@csi.com,11/Nov/02 18:26,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,,,,,,,,,,,,0,,,"When running WebSphere 5.0 Early Adopters using the Sysdeo Tomcat plugin in 
debug mode I discovered that the LogFactory can't locate a classloader to 
create new Factories. A call to LogFactory.class.getClassLoader() 
returns 'null'. As of the SDK documentation this may be tha case if the 
bootstrap has loaded the class. I thus suggest the following code for the 
newFactory method taken from v1.0.2 of the common logging API:

    /**
     * Return a new instance of the specified <code>LogFactory</code>
     * implementation class, loaded by the specified class loader.
     * If that fails, try the class loader used to load this
     * (abstract) LogFactory.
     *
     * @param factoryClass Fully qualified name of the <code>LogFactory</code>
     *  implementation class
     * @param classLoader ClassLoader from which to load this class
     *
     * @exception LogConfigurationException if a suitable instance
     *  cannot be created
     */
    protected static LogFactory newFactory(String factoryClass,
                                           ClassLoader classLoader)
        throws LogConfigurationException
    {
        
        try {
            if (classLoader == null)
                classLoader = LogFactory.class.getClassLoader();
            Class clazz = null;
            try {
	            // #FIX: RBA
	            // may be null in case the classloader is the bootstrap 
loader
            	if(classLoader == null) {
            		// try general load
            		clazz = Class.forName(factoryClass);
            	} else {
	                // first the thread class loader
	                clazz = classLoader.loadClass(factoryClass);
            	}
            } catch (ClassNotFoundException ex) {
                // if this failed (i.e. no implementation is
                // found in the webapp), try the caller's loader
                // if we haven't already...
                if (classLoader != LogFactory.class.getClassLoader()) {
                    classLoader = LogFactory.class.getClassLoader();

                    if(classLoader == null) {
	            		// try general load
	            		clazz = Class.forName(factoryClass);
                    } else {
	                    clazz = classLoader.loadClass(factoryClass);
                    }
                }
            }
            
            LogFactory factory = (LogFactory)clazz.newInstance();
            
            return factory;
        } catch (Exception e) {
            throw new LogConfigurationException(e);
        }

    }","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14439.0,,,2002-11-12 00:49:50.0,,,false,,,,,,,,,,,,,,,148187,,,Tue Nov 12 00:49:50 UTC 2002,,,,,,0|i0d813:,75077,,,,,,,,"12/Nov/02 00:49;rsitze@apache.org;I believe that this is already fixed in commons-logging.
Try picking up a new version of commons-logging-api.jar
and dropping it into WebSphere (replace existing).
Please re-open if it doesn't help.

*** This bug has been marked as a duplicate of 10825 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
getResourceAsStream access permissions in J2EE environs,LOGGING-6,12340457,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,rsitze@apache.org,rsitze@apache.org,13/Dec/02 04:25,29/Dec/09 16:53,07/Apr/19 20:35,29/Dec/09 16:53,,,,,,,,,,1.0.3,,0,,,Security exceptions (file io) when using getResourceAsStream() in J2EE.,"Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,15331.0,,,,,,false,,,,,,,,,,,,,,,148186,,,Fri Dec 13 04:31:11 UTC 2002,,,,,,0|i0d81b:,75078,,,,,,,,"13/Dec/02 04:31;rsitze@apache.org;Wrap with doPriv.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
corrupt logging v1.0.2 source zipfiles are posted on all mirror sites,LOGGING-5,12340626,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Minor,Duplicate,,ian_springer@hp.com,ian_springer@hp.com,26/Mar/03 21:38,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.1,,,,,,,,,,,0,,,"The following zipfiles are corrupt on all mirrors:

  http://www.apache.org/dist/jakarta/commons/logging/logging-current-src.zip
  http://www.apache.org/dist/jakarta/commons/logging/source/logging-1.0.2-
src.zip

Regards,
Ian","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,18366.0,,,2003-03-31 08:23:50.0,,,false,,,,,,,,,,,,,,,148185,,,Mon Mar 31 08:23:50 UTC 2003,,,,,,0|i0d81j:,75079,,,,,,,,"31/Mar/03 08:23;craig.mcclanahan@sun.com;

*** This bug has been marked as a duplicate of 17245 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[logging] LogFactoryImpl does not compile on JDK1.2,LOGGING-4,12341820,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,kstrauss@printingforsystems.com,kstrauss@printingforsystems.com,21/Oct/04 09:04,29/Dec/09 16:14,07/Apr/19 20:35,29/Dec/09 16:14,1.0.4,,,,,,,,,1.1.0,,0,,,"When you compile using JDK1.2 you get the following error message:
[javac]
/home/kstrauss/cvs/updated/PSI_PsUtil/org/apache/commons/logging/impl/LogFactoryImpl.java:457:
No method matching getContextClassLoader() found in class
org.apache.commons.logging.impl.LogFactoryImpl.
    [javac]                     ClassLoader threadCL = getContextClassLoader();

It does however compile succesfully under JDK1.4

I believe that this is related to a bug in the Javac compiler (see
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4269441)

Using this as a base the following addition will enable the class to compile
under JDK1.2.

protected static ClassLoader getContextClassLoader() throws
LogConfigurationException
{
            return LogFactory.getContextClassLoader();
}

Can we add this?","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31818.0,,,2004-11-01 01:55:59.0,,,false,,,,,,,,,,,,,,,148184,,,Mon Nov 01 01:55:59 UTC 2004,,,,,,0|i0d81r:,75080,,,,,,,,"01/Nov/04 01:55;rdonkin@apache.org;Commited. Many thanks.

Robert",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Using Log4J as impl. gives linenumbers in Log4JCategoryLog , not class that does the logging.",LOGGING-3,12340253,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,morten.haavaldsen@zonavi.com,morten.haavaldsen@zonavi.com,04/Jul/02 19:12,29/Dec/09 17:02,07/Apr/19 20:35,29/Dec/09 17:02,1.0,,,,,,,,,1.0.1,,0,,,"I use the commons log package and sets the impl=Log4JCategoryLog

The logging then shows linenumbers in the actual impl class(which bridges the 
logging) and not the class that actually does the logging.

Thus the same line number appairs all the time(almost) and the feature of log4J 
becomes rather useless.

This feature is really important in system with lots of code.","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,10480.0,,,2002-07-17 23:07:33.0,,,false,,,,,,,,,,,,,,,148183,,,Fri Sep 27 04:39:14 UTC 2002,,,,,,0|i0d81z:,75081,,,,,,,,"17/Jul/02 23:07;rsitze@apache.org;This was corrected quite a while back.  If you are using the first release,
try extracting newest code & retrying.","29/Jul/02 17:40;morten.haavaldsen@zonavi.com;The error is present in log4J 1.2.5 together with Commons/Logging 1.0 !

Please note the LOG4J 1.2.5 is used in COMMONS Logging 1.0 library(no other 
releases).

The log says linenumbers in the commons class Log4JCategoryLog  and not the 
class that does the actual logging.

The logging works as such....

Is there a work around using the properties file.



","27/Sep/02 04:39;rsitze@apache.org;Again, I believe this Log4J functions correctly in 1.0.1 or later.
Of course, reopen if you find otherwise...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
exception when logging in JDK 1.3 with Lumberjack,LOGGING-2,12340847,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Fixed,,vince256@comcast.net,vince256@comcast.net,10/Jul/03 11:07,02/Jan/08 07:48,07/Apr/19 20:35,18/Nov/06 12:48,Nightly Builds,,,,,,,,,1.0.4,,1,,,"The JDK 1.4 logging tests do not test for the Throwable class having the method 
getStackTrace() which is only available in 1.4. Below is the exception and 
sample source code to recreate. (first encountered in generic initialization of 
the struts 1.1 ActionServlet which throws an empty ServletException when this 
happens)

---

Exception in thread ""main"" java.lang.NoSuchMethodError
        at org.apache.commons.logging.impl.Jdk14Logger.log(Jdk14Logger.java:116)
        at org.apache.commons.logging.impl.Jdk14Logger.fatal
(Jdk14Logger.java:177)
        at CommonsLoggingTest.main(CommonsLoggingTest.java:19)

---

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.logging.*;

public class CommonsLoggingTest {
   protected static Log log = LogFactory.getLog(SchemaTest.class);

   public static void main(String[] args) {
      log.fatal(""testing"", new Exception(""test""));
   }
}","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,11/Jul/03 07:04;vince256@comcast.net;ASF.LICENSE.NOT.GRANTED--Jdk13LumberjackLogger.java;https://issues.apache.org/jira/secure/attachment/12332410/ASF.LICENSE.NOT.GRANTED--Jdk13LumberjackLogger.java,11/Jul/03 07:02;vince256@comcast.net;ASF.LICENSE.NOT.GRANTED--lumberjackcheck.txt;https://issues.apache.org/jira/secure/attachment/12332409/ASF.LICENSE.NOT.GRANTED--lumberjackcheck.txt,,,,,,,,,,,,,,,,2.0,,,,,,,,,,,,,,,,21455.0,,,2003-08-17 05:38:47.0,,,false,,,,,,,,,,,,,,,148182,,,Sun Aug 17 05:38:47 UTC 2003,,,,,,0|i0d827:,75082,,,,,,,,"11/Jul/03 07:02;vince256@comcast.net;Created an attachment (id=7233)
adds Jdk1.3 lumberjack check to LogFactoryImpl
","11/Jul/03 07:04;vince256@comcast.net;Created an attachment (id=7234)
Jdk13 Lumberjack logger without using Jdk14 specific methods
","17/Aug/03 05:38;craig.mcclanahan@sun.com;Added in commons-logging nightly build 20030817.  I also made the implementation
Serializable in the same manner that the other Log implementations were just
enhanced.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Getting error in junit3.8.1 --> Log4JLogger does not implement Log,LOGGING-1,12341480,Bug,Closed,LOGGING,Commons Logging,software,issues@commons.apache.org,,http://commons.apache.org/logging/,Major,Cannot Reproduce,,dbradt@workwell.com,dbradt@workwell.com,28/May/04 09:07,02/Jan/08 07:48,07/Apr/19 20:35,02/Jan/08 07:48,1.0.3,,,,,,,,,,,0,,,"While running the Swing test runner from junit and using the commons_logging 
1.0.3, I get and logger configuration error. The error in effect says 
Log4JLogger does not implement Log. I recompiled commons_logging to see if I 
still get the error and it still came back with the same error. It appears that 
the there are two different class loaders conflicting with each other that is 
causing this problem. Apparently at startup, Log is loaded by one class loader 
while the Log4JLogger is loaded by another which then causes 
class.isAssignableFrom to return false.","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,29263.0,,,2004-06-21 04:05:59.0,,,false,,,,,,,,,,,,,,,148181,,,Mon Jun 21 04:05:59 UTC 2004,,,,,,0|i0d82f:,75083,,,,,,,,"21/Jun/04 04:05;rdonkin@apache.org;this is a FAQ http://wiki.apache.org/jakarta-commons/Logging/FrequentlyAskedQuestions

please ensure that only one copy of the library is in your classpath.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
