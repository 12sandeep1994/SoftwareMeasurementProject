Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Log Work,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Cloners),Outward issue link (Container),Outward issue link (Duplicate),Outward issue link (Duplicate),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Reference),Outward issue link (Regression),Outward issue link (Regression),Outward issue link (Required),Outward issue link (Supercedes),Outward issue link (dependent),Outward issue link (dependent),Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Flags),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Severity),Custom field (Severity),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Test and Documentation Plan),Custom field (Testcase included),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Predefined  ISO_8601_EXTENDED_* patterns use wrong timezone offset formatter,LANG-1440,13224981,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,michael-o,michael-o,michael-o,30/Mar/19 11:11,30/Mar/19 11:16,07/Apr/19 20:36,30/Mar/19 11:16,3.8.1,,,,,,lang.time.*,,,0,,,,,,,,"As observed in LANG-1439, the offset formatters must be {{XXX}} instead of {{ZZ}} to be ISO 8601 compliant. This is purely my bad, it was renamed in pre-Java 7 which did not have {{XXX}}. This must be fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 30 11:16:18 UTC 2019,,,,,,0|z019sg:,9223372036854775807,,,,,,,,30/Mar/19 11:16;michael-o;The code tricked me. In FDF {{ZZ}} is like {{XXX}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser throws NumberFormatException when parsing a long number based on a ISO8601 string,LANG-1439,13222295,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,foly,foly,18/Mar/19 11:48,30/Mar/19 11:25,07/Apr/19 20:37,,3.8.1,,,,,,lang.time.*,,,0,,,,,,,,"Given this piece of code:
{code:java}
    @Test
    public void testParseLongNumber() {
        final DateParser fdf = getInstance(""yyyy-MM-dd'T'HH:mm:ssZZ"");
        fdf.parse(""999999999999""); // NFE here
    }
{code}
Internally, the *FastDateParser.NumberStrategy::parse* method parses the year from that number (without maxWidth because the next part is not a number) using *Integer::parseInt* thus leading to a NumberFormatException.

A quick fix for this would be catching the NFE then return false after setting the error position so that the FastDateParse::Parse method can throw a ParseException correctly.

Edit: the suggested patch is attached below",,,,,,,,,,,,,,,,LANG-1440,,,,,,,,,,18/Mar/19 11:50;foly;suggested-fix.patch;https://issues.apache.org/jira/secure/attachment/12962804/suggested-fix.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2019-03-18 13:21:06.646,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 30 11:25:26 UTC 2019,,,,,,0|z00tb4:,9223372036854775807,,,,,,,,"18/Mar/19 13:21;michael-o;The given format is not ISO 8601 compliant. {{999999999999}} is larger than {{Integer.MAX_VALUE}}. I just checked the standard, chapter 3.5 says that ""Year"" must be a four-digit value. By mutual agreement between parties it can be negative or > 9999 (which we don't have here). So the parse is broken here. Simply wrapping the exception is wrong.","18/Mar/19 14:03;foly;bq. The given format is not ISO 8601 compliant
It is not the ISO 8601 extended format ? FYI I took that pattern from the DateFormatUtils class

{code:java}
    /**
     * ISO 8601 formatter for date-time with time zone.
     *
     * <p>
     * The format used is {@code yyyy-MM-dd'T'HH:mm:ssZZ}. This format uses the
     * default TimeZone in effect at the time of loading DateFormatUtils class.
     * </p>
     *
     * @since 3.5
     */
    public static final FastDateFormat ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT
            = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ssZZ"");
{code}

bq. So the parse is broken here. Simply wrapping the exception is wrong.
Yeah I thought so, I'll try to investigate further",18/Mar/19 16:00;michael-o;Thanks for pointing out. {{ZZ}} is plain wrong. It must be {{XXX}}. I will revise the code.,30/Mar/19 11:16;michael-o;{{ZZ}} is correct. Is has different semantics compared to {{SimpleDateFormat}}.,"30/Mar/19 11:25;michael-o;I just checked the code. One code switch to {{Long}}, but the entire code is built around ints. It would also require an {{ISO_YEAR_STRATEGY}} to enforce bounds.",,,,,,,,,,,,,,,,,,,,,,,,,,
MethodUtils will throw a NPE if invokeMethod() is called for a var-args method,LANG-1433,13216841,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,cfranzen,cfranzen,20/Feb/19 08:44,20/Feb/19 10:23,07/Apr/19 20:37,,3.8.1,,,,,,lang.reflect.*,,,0,,,,,,,,"Whenever calling a var-args method using invokeMethod() of MethodUtils it will throw a NPE if the last parameter value is null. 

Example: Given is the following class with var-args method
{code:java}
public class MyClass {
   public String myMethod(final String... args) {
      ...
   }

   public String myMethod(final Integer... args) {
      ...
   }
}
{code}
The following code will work:
{code:java}
MethodUtils.invokeMethod(myObject, ""myMethod"", ""a"", null, ""c"");
{code}
But this will throw a NPE:
{code:java}
MethodUtils.invokeMethod(myObject, ""myMethod"", ""a"", ""b"", null);
{code}

Further more it is not deterministic which method of the two will be called if the method search of invokeMethod() can not find a single unique match. So the code
{code:java}
MethodUtils.invokeMethod(myObject, ""myMethod"", new Object[] {null});
{code}
might call any of the two methods of MyClass and it might change with each and every invocation. The search is not deterministic due to Class.getMethods () is not deterministic.

I would categorize such a method call as a bug, due to it should not be the intention of the developer to just pick any of the methods. However, debugging such an issue is really hard if the ""right"" method is called ""sometimes"" and it can be solved by just doing a sort, which should be no big deal I belive.",,"cfranzen commented on pull request #407: LANG-1433: MethodUtils will throw a NPE if invokeMethod() is called for a var-args method
URL: https://github.com/apache/commons-lang/pull/407
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
;20/Feb/19 10:23;githubbot;600",,0,600,,,0,600,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 20 10:23:46 UTC 2019,,,,,,0|yi164g:,9223372036854775807,,,,,,,,20/Feb/19 10:23;cfranzen;I have fixed the described issue. Please see pull request: https://github.com/apache/commons-lang/pull/407,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat doesn't parse time string with timezone correctly,LANG-1432,13215176,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,simon_xianyu,simon_xianyu,12/Feb/19 08:21,30/Mar/19 11:01,07/Apr/19 20:37,,3.8.1,,,,,,lang.time.*,,,1,,,,,,,,"FastDateFormat doesn't parse the pattern correctly : 

""EEE MMM dd HH:mm:ss zzz yyyy""

The test code is as following:

  
{code:java}
// code placeholder
public class TestFastDateFormat {
  public static void main(String[] args) throws ParseException {
    Date d = new Date();
    String dstr = d.toString();
    System.out.println(dstr);
    String pattern = ""EEE MMM dd HH:mm:ss zzz yyyy"";
    FastDateFormat fdf = FastDateFormat.getInstance(pattern,
        Locale.US);
    Date d1 = fdf.parse(dstr);
    System.out.println(d1);

    // Use SimpleDateFormat to parse string
    SimpleDateFormat sdf = new SimpleDateFormat(pattern);
    Date d2 = sdf.parse(dstr);
    System.out.println(d2);
  }
}
{code}
The test result example:
 Tue Feb 12 16:07:53 CST 2019    /// this is origin result
 Wed Feb 13 06:07:53 CST 2019   /// this is result of FastDateTime.parse()
 Tue Feb 12 16:07:53 CST 2019    /// this is result of SimpleDateFormat.parse()

 ",jdk 1.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-03-15 20:41:11.198,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 30 11:01:57 UTC 2019,,,,,,0|yi0vx4:,9223372036854775807,,,,,,,,"15/Mar/19 20:41;ph26;Precondition (implicit in submitter's example):
 * default timezone China (which has an ambiguous abbreviation CST)

Expected by submitter:
 * FastDateTime.parse interprets a CST date as China Standard Time (UTC+8)
like SimpleDateFormat.parse apparently does.

Found:
 * FastDateTime.parse interprets a CST date as Central Standard Time (UTC-6).

What might be best for an ambiguous timezone like CST:
 * choose the most likely interpretation if the parser's timezone is in the same region?
 * choose a consistent interpretation if the parser's timezone is in another region?
 * throw an exception because the parse is ambiguous?
 * make it depend on whether the parse is strict or lenient?
 * use whatever java.time does since Java 8 instead?

 ","19/Mar/19 04:53;simon_xianyu;Yes, I'm in China and the default timezone is Asia/Shanghai.

 

I think "" choose the most likely interpretation if the parser's timezone is in the same region"" is better","30/Mar/19 11:01;michael-o;I'd be inclined to closed to this one because using {{zzz}} is a plain broken approach and those three-letter codes are ambigious. Use, wherever you can, ISO 8601 along with {{XXX}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionUtils#getRootCause(Throwable t)  does not work as documented in javadoc,LANG-1430,13210166,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,fverhoef,fverhoef,17/Jan/19 14:24,17/Jan/19 14:26,07/Apr/19 20:37,,3.8,3.8.1,,,,,lang.exception.*,,,0,,,,,,,,"In version 3.8 the following bugfix was introduced:

LANG-1364: ExceptionUtils#getRootCause(Throwable t) should return t if no lower level cause exists Thanks to Zheng Xie.

In general I agree with the consistency it brings, but now the javadocs is not agreeing with the way it actually works.

 

 
{code:java}
/**
168 * <p>Introspects the <code>Throwable</code> to obtain the root cause.</p>
169 *
170 * <p>This method walks through the exception chain to the last element,
171 * ""root"" of the tree, using {@link Throwable#getCause()}, and
172 * returns that exception.</p>
173 *
174 * <p>From version 2.2, this method handles recursive cause structures
175 * that might otherwise cause infinite loops. If the throwable parameter
176 * has a cause of itself, then null will be returned. If the throwable
177 * parameter cause chain loops, the last element in the chain before the
178 * loop is returned.</p>
179 *
180 * @param throwable the throwable to get the root cause for, may be null
181 * @return the root cause of the <code>Throwable</code>,
182 * <code>null</code> if null throwable input
183 */

{code}
 

 

The sentence at line 175/176 should be something like:
{code:java}
If the throwable parameter has a cause of itself, then itself will be returned.{code}
As the method will not return null, but itself instead, as of the fix LANG-1364",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 17 14:26:27 UTC 2019,,,,,,0|yi0140:,9223372036854775807,,,,,,,,"17/Jan/19 14:26;fverhoef;Caused me some work to figure out, as suddenly with version 3.8.1 our code was not working anymore, as the contract had changed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Behavioral inconsistencies across different wrap length,LANG-1429,13206937,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,devson,devson,29/Dec/18 12:50,31/Dec/18 09:15,07/Apr/19 20:37,,,,,,,,,,,0,,,,,,,,"Method name: WordUtils.wrap

The behavior is inconsistent across the two tests about whether the
leading space of string should be retained or not while wrapping. The
string “ This is a sentence with leading whitespace.” retains the leading
whitespace over wrap length 50, but removes it at a wrap length 30.

Also, the trailing spaces are not preserved while wrapping, as shown below:

 
{code:java}
String nl = System.lineSeparator();
assertEquals(""Did you say "" + nl + ""\""supercalifr"" + nl + ""agilisticexp"" + nl + ""ialidocious?"" + nl + ""\"" How do"" + nl + ""you spell"" + nl + ""that odd"" + nl + ""word,"" + nl + ""anyways?"", WordUtils.wrap(""Did you say \""supercalifragilisticexpialidocious?\"" How do you spell that odd word, anyways?"", 12,null,true)); // fails
{code}
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2018-12-29 12:50:54.0,,,,,,0|u00e4g:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDoc issue on StringUtils.truncate,LANG-1426,13203536,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,,,Brower,Brower,10/Dec/18 20:32,16/Mar/19 16:23,07/Apr/19 20:37,,,,,,,,,,,0,,,,,,,,"Two of the examples on the method StringUtils.truncate(String, int, int) are incorrect:
 * StringUtils.truncate(""abcdefghijklmno"", Integer.MIN_VALUE, 10) = ""abcdefghij""
 * StringUtils.truncate(""abcdefghijklmno"", Integer.MIN_VALUE, Integer.MAX_VALUE) = ""abcdefghijklmno""

Both of the above actually throw IllegalArgumentException's.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2019-03-16 08:36:17.112,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 16 16:23:18 UTC 2019,,,,,,0|s01d7k:,9223372036854775807,,,,,,,,"16/Mar/19 08:36;suraj gautam;The offset cannot be negative, sir. Integer.MIN_VALUE is not a valid offset.","16/Mar/19 15:49;Brower;[~suraj gautam] I am aware of that. I am saying that the JavaDoc for the two examples above claim that the method will *not* throw an exception, but it is obvious that they *should* throw an exception. The JavaDoc should be updated to state that they do throw an exception.","16/Mar/19 16:23;suraj gautam;Yes, my bad. Thank you for the clarification, sir.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtils.parseDateStrictly() is not parsing millisecond value,LANG-1425,13199145,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,VamsiBhagi,VamsiBhagi,18/Nov/18 06:59,18/Nov/18 09:29,07/Apr/19 20:37,,3.7,,,,,,,,,0,,,,,,,,"We need to parse String to java.util.Date and are having multiple Date formats.

Snippet for this is 
{code:java}
java.util.Date dt = DateUtils.parseDateStrictly(verificationDate.get_value(),
                                    Locale.ENGLISH,
                                    new String[] { ""yyyy-MM-dd'T'HH:mm:ss.SSSSSSSXXX"",""yyyy-MM-dd'T'HH:mm::ss.SSSSSSS"" });{code}
2018-11-13T08:03:41.2860000-06:00 is not being parsed correctly. On troubleshooting, we discovered that 2018-11-13T08:03:41.0000286-06:00 is parsing fine.

How to handle this?

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-11-18 09:28:38.219,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 18 09:28:38 UTC 2018,,,,,,0|s00mds:,9223372036854775807,,,,,,,,"18/Nov/18 09:28;michael-o;There are several issues here:

# How close is our parsing pattern to {{SimpleDateFormat}}? Not properly documented
# {{Date}} is millisecond precision: {{SSSSSSS}} cannot and will not work.
# {{S}} alreay implies upto three decimal places while parsing, during formatting it shall add trailing null at most, as far as I remember.

I guess we need to improve docs and tests. I stumbled upon this some time ago too.

Also look here: https://stackoverflow.com/a/19223267/696632

If you really need more precision, consider using new Java Time API.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeUtils.isAssignable returns wrong result for GenericArrayType and ParameterizedType comparison,LANG-1420,13184815,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,gofraser,gofraser,13/Sep/18 08:05,09/Dec/18 00:49,07/Apr/19 20:37,,3.7,3.8,,,,,lang.reflect.*,,,0,,,,,,,,"TypeUtils.isAssignable returns a wrong result when checking whether a ParameterizedType is assignable to a GenericArrayType that has the same ParameterizedType as component type.

For example:
{code:java}
ParameterizedType componentType = TypeUtils.parameterize(java.lang.reflect.Constructor.class, java.awt.Insets.class);
GenericArrayType arrayType = TypeUtils.genericArrayType(componentType);{code}

In this case,
{code:java}
TypeUtils.isAssignable(arrayType, componentType) {code}
returns true, but this should be false (the component type should not be assignable to the array type - the Java compiler complains about this).

 

It seem that the problem is that the method:
{code:java}
private static boolean isAssignable(final Type type, final ParameterizedType toParameterizedType, final Map<TypeVariable<?>, Type> typeVarAssigns){code}
only compares the type parameters, since method getTypeArguments retrieves the component type using getGenericComponentType. There seems to be no check whether an array type is being assigned to a non-array in the first place.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-12-08 01:01:34.709,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 09 00:49:34 UTC 2018,,,,,,0|i3y1kv:,9223372036854775807,,,,,,,,"08/Dec/18 01:01;rosti-il;Adding following check into the suspected method fixes it:

{code}        if (type instanceof GenericArrayType) {
            return false;
        }{code}

Is it the right fix and should this check also be added into other private {{isAssignable()}} methods where the second parameter isn't {{GenericArrayType}} ?","09/Dec/18 00:49;garydgregory;Hi [~gofraser],

Thank you for your report. Feel free to provide a PR on GitHub. Ideally, it should come with a unit test that fails without changes to the main code tree.

Gary",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Restore BundleSymbolicName / regression in version 3.8.0,LANG-1419,13183486,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,chtompki,hugo.hirsch,hugo.hirsch,06/Sep/18 19:33,27/Sep/18 13:26,07/Apr/19 20:37,19/Sep/18 15:19,3.8,,,,3.8.1,,General,,,0,,,,,,,,"In contrast to version 3.7.0 the BundleSymbolicName changed erroneously in 3.8.0 to:
{code:java}
org.apache.commons.commons-lang3{code}
 

As this breaks existing installations the change should be reverted and a new version with OSGi support should be released.
h2. v3.8.0 - MetaData
{code:java}
Automatic-Module-Name                    org.apache.commons.lang3               

Bnd-LastModified                         1534383412565                           

Build-Jdk                                1.8.0_172                              

Built-By                                 chtompki                               

Bundle-Description                       Apache Commons Lang, a package of Java utility classes for the  classes that are in java.lang's hierarchy, or are considered to be so  standard as to justify existence in java.lang.

Bundle-DocURL                            http://commons.apache.org/proper/commons-lang/

Bundle-License                           https://www.apache.org/licenses/LICENSE-2.0.txt

Bundle-ManifestVersion                   2                                      

Bundle-Name                              Apache Commons Lang                    

Bundle-SymbolicName                      org.apache.commons.commons-lang3       

Bundle-Vendor                            The Apache Software Foundation         

Bundle-Version                           3.8.0                                  

Created-By                               Apache Maven Bundle Plugin             

Export-Package                           org.apache.commons.lang3;version=""3.8"",org.apache.commons.lang3.arch;version=""3.8"",org.apache.commons.lang3.builder;version=""3.8"",org.apache.commons.lang3.concurrent;version=""3.8"",org.apache.commons.lang3.event;version=""3.8"",org.apache.commons.lang3.exception;version=""3.8"",org.apache.commons.lang3.math;version=""3.8"",org.apache.commons.lang3.mutable;version=""3.8"",org.apache.commons.lang3.reflect;version=""3.8"",org.apache.commons.lang3.text;version=""3.8"",org.apache.commons.lang3.text.translate;version=""3.8"",org.apache.commons.lang3.time;version=""3.8"",org.apache.commons.lang3.tuple;version=""3.8""

Implementation-Title                     Apache Commons Lang                    

Implementation-URL                       http://commons.apache.org/proper/commons-lang/

Implementation-Vendor                    The Apache Software Foundation         

Implementation-Vendor-Id                 org.apache.commons                     

Implementation-Version                   3.8                                    

Include-Resource                         META-INF/NOTICE.txt=NOTICE.txt,META-INF/LICENSE.txt=LICENSE.txt

Manifest-Version                         1.0                                    

Require-Capability                       osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.7))""

Specification-Title                      Apache Commons Lang                    

Specification-Vendor                     The Apache Software Foundation         

Specification-Version                    3.8                                    

Tool                                     Bnd-3.5.0.201709291849{code}
h2. v3.7.0 - MetaData
{code:java}
Archiver-Version                         Plexus Archiver                        

Automatic-Module-Name                    org.apache.commons.lang3               

Bnd-LastModified                         1509819256170                          

Build-Jdk                                1.7.0_80                               

Built-By                                 ggregory                               

Bundle-Description                       Apache Commons Lang, a package of Java utility classes for the  classes that are in java.lang's hierarchy, or are considered to be so  standard as to justify existence in java.lang.

Bundle-DocURL                            http://commons.apache.org/proper/commons-lang/

Bundle-License                           https://www.apache.org/licenses/LICENSE-2.0.txt

Bundle-ManifestVersion                   2                                      

Bundle-Name                              Apache Commons Lang                    

Bundle-SymbolicName                      org.apache.commons.lang3               

Bundle-Vendor                            The Apache Software Foundation         

Bundle-Version                           3.7.0                                  

Created-By                               Apache Maven Bundle Plugin             

Export-Package                           org.apache.commons.lang3;version=""3.7"",org.apache.commons.lang3.arch;version=""3.7"",org.apache.commons.lang3.builder;version=""3.7"",org.apache.commons.lang3.concurrent;version=""3.7"",org.apache.commons.lang3.event;version=""3.7"",org.apache.commons.lang3.exception;version=""3.7"",org.apache.commons.lang3.math;version=""3.7"",org.apache.commons.lang3.mutable;version=""3.7"",org.apache.commons.lang3.reflect;version=""3.7"",org.apache.commons.lang3.text;version=""3.7"",org.apache.commons.lang3.text.translate;version=""3.7"",org.apache.commons.lang3.time;version=""3.7"",org.apache.commons.lang3.tuple;version=""3.7""

Implementation-Title                     Apache Commons Lang                    

Implementation-URL                       http://commons.apache.org/proper/commons-lang/

Implementation-Vendor                    The Apache Software Foundation         

Implementation-Vendor-Id                 org.apache.commons                     

Implementation-Version                   3.7                                    

Include-Resource                         META-INF/LICENSE.txt=LICENSE.txt,META-INF/NOTICE.txt=NOTICE.txt

Manifest-Version                         1.0                                    

Require-Capability                       osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.7))""

Specification-Title                      Apache Commons Lang                    

Specification-Vendor                     The Apache Software Foundation         

Specification-Version                    3.7                                     

Tool                                     Bnd-3.0.0.201509101326             {code}
 

Thanks :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-09-19 15:19:22.988,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Sep 27 13:26:16 UTC 2018,,,,,,0|i3xtgf:,9223372036854775807,,,,,,,,"07/Sep/18 19:55;hugo.hirsch;I tried mingling with the bnd-plugin configuration but it didn't help to correct the META-data:
{code:java}
diff --git a/pom.xml b/pom.xml
index ff00abca..9ac95673 100644
--- a/pom.xml
+++ b/pom.xml
@@ -666,6 +666,14 @@
             <skip>false</skip>
           </configuration>
         </plugin>
+        <plugin>
+          <groupId>org.apache.felix</groupId>
+          <artifactId>maven-bundle-plugin</artifactId>
+          <version>3.5.0</version>
+          <configuration>
+            <Bundle-SymbolicName>org.apache.commons.lang3</Bundle-SymbolicName>
+          </configuration>
+        </plugin>
       </plugins>
     </pluginManagement>
     <plugins>
@@ -742,8 +750,14 @@
           <excludeFilterFile>${basedir}/spotbugs-exclude-filter.xml</excludeFilterFile>
         </configuration>
       </plugin>
+      <plugin>
+        <groupId>org.apache.felix</groupId>
+        <artifactId>maven-bundle-plugin</artifactId>
+        <configuration>
+          <Bundle-SymbolicName>org.apache.commons.lang3</Bundle-SymbolicName>
+        </configuration>
+      </plugin>
     </plugins>
-
   </build>

   <reporting>{code}",19/Sep/18 15:19;chtompki;In tag LANG_3_8_1_RC1: https://github.com/apache/commons-lang/blob/LANG_3_8_1_RC1/pom.xml#L574,25/Sep/18 00:07;chtompki;3.8.1 released.,27/Sep/18 13:26;hugo.hirsch;Thanks for rolling out v3.8.1 which fixed our OSGi setup again.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect Javadoc for StringUtils.isAnyBlank(null),LANG-1418,13183306,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,Veshtard,Veshtard,06/Sep/18 06:36,16/Mar/19 13:59,07/Apr/19 20:37,,3.8,,,,,,lang.*,,,0,,,,,,,,"As of [https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#isAnyBlank-java.lang.CharSequence...-] isAnyBlank((String) null) -> true

But test isAnyBlank((String) null) -> false.

As the result incorrect description for the other methods that used isAnyBlank",,,,,,,,,,,,,,,,,,,,,,,,,,06/Sep/18 06:35;Veshtard;apache-common.isAnyBlank(null).png;https://issues.apache.org/jira/secure/attachment/12938603/apache-common.isAnyBlank%28null%29.png,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2018-10-20 05:10:11.345,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 16 13:57:58 UTC 2019,,,,,,0|i3xsd3:,9223372036854775807,,,,,,,,"20/Oct/18 05:10;oleg.chubaryov;How does this test pass? 

{{public class StringUtilsEmptyBlankTest {...}}

{{    @Test}}
{{    public void testIsAnyBlank() {}}

{{        assertTrue(StringUtils.isAnyBlank((String) null));}}

...

Most likely bug in Intellij IDEA.","16/Mar/19 13:57;ph26;Refactor Extract Method and Evaluate Expression to call the extracted method produces result = true.

So it looks like the javaDoc is correct after all, and that it is just a bug in IntelliJ IDEA Evaluate Expression. I suspect it is passing null as the array of a variable number of String arguments instead of as the only String in a variable argument list. When the call is extracted as a method, javac evaluates it as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
commons.componentId is incorrectly set to lang3,LANG-1414,13180545,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,britter,britter,22/Aug/18 19:21,22/Aug/18 19:21,07/Apr/19 20:37,,,,,,3.9,,General,,,0,,,,,,,,"It looks like the property commons.componentId should be set to lang and not to lang3. See [https://lists.apache.org/thread.html/304129bf7d25a2118ee3f324214c04e1e8f0846e7ee43a57b100a26e@%3Cdev.commons.apache.org%3E]

We need to find out whether this breaks something and then change the componentId.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2018-08-22 19:21:58.0,,,,,,0|i3xbin:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Crashes when testing StringUtils and CharSequenceUtils,LANG-1409,13178123,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,Mozhan,Mozhan,09/Aug/18 20:47,09/Aug/18 20:47,07/Apr/19 20:37,,3.7,,,,,,lang.*,,,0,test,,,,,,,"The attached test suites for {{org.apache.commons.lang3.StringUtils.java}} and {{org.apache.commons.lang3.CharSequenceUtils.java}} come from a prototype I have been working on which combines static analysis and automated test generation.

The prototype analyses a specified dependency of a project to identify risky API calls which may potentially lead to runtime exceptions. Runtime exceptions may occur either because
 # an API lacks sufficient documentation,or
 # usage of the API does not conform to the specification, or
 # API wrapper does not indicate the API specification as part of its own specification.

The prototype then automatically generates test cases which show how such exceptions may be triggered.

*Observation:*

For {{commons-lang}}, {{JDK APIs}} were analyzed. It seems that the failing methods do not handle the potential runtime exceptions which may or may not have been declared/documented for the JDK APIs they invoke.

*Possible fixes:*
 # The failing methods under test could add internal checks on the values they forward to the {{JDK APIs}}.
 # The failing methods could handle the exceptions by adding relevant try/catch blocks.
 # The failing methods under test could specify the potential exceptions by adding {{@throws}} in their documentation/method signatures.","Ubuntu 16.04.4 LTS, and McOs High Sierra-10.13.5 
 Junit-4.12",,,,,,,,,,,,,,,,,,,,,,,,,09/Aug/18 20:44;Mozhan;CharSequenceUtilsTests.java;https://issues.apache.org/jira/secure/attachment/12935039/CharSequenceUtilsTests.java,09/Aug/18 20:43;Mozhan;StringUtilsTests.java;https://issues.apache.org/jira/secure/attachment/12935040/StringUtilsTests.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2018-08-09 20:47:49.0,,,,,,0|i3wwm7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringIndexOutOfBoundsException in StringUtils.replaceIgnoreCase,LANG-1406,13176106,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,michaelryan,michaelryan,01/Aug/18 12:21,19/Nov/18 20:39,07/Apr/19 20:37,,,,,,,,lang.*,,,0,,,,,,,,"STEPS TO REPRODUCE:
{code}
StringUtils.replaceIgnoreCase(""\u0130x"", ""x"", """")
{code}

EXPECTED: ""\u0130"" is returned.

ACTUAL: StringIndexOutOfBoundsException

This happens because the replace method is assuming that text.length() == text.toLowerCase().length(), which is not true for certain characters.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-08 12:01:56.331,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 19 20:39:02 UTC 2018,,,,,,0|i3wkgn:,9223372036854775807,,,,,,,,"08/Aug/18 12:01;hiukwok;Hi all,

After a bit of research, it seem to be a known issue when unicode is contained on a String object ([ref|https://www.quora.com/Is-Javas-toLowercase-string-method-reliable-for-Unicode] ), String.toLowerCase() would produce a incorrect result.

In this case ""\u0130"" would become a String object with three char which are [ i,  ̇, x] instead of [ İ, x].

So by given a incorrect result from .toLowCase() method, StringUtils.replaceIgnoreCase end attempt to access the segment of string which is not exist which is 3 in this case while str.length() is 2.

The fixture I come up with is replacing the .toLowcase() to .toUpperCase() in order to avoid the mis-interprettion on .toLowerCase while performing case-insensitive comparisons.


 ","08/Aug/18 12:13;githubbot;GitHub user HiuKwok opened a pull request:

    https://github.com/apache/commons-lang/pull/340

    [LANG-1406]  StringIndexOutOfBoundsException in StringUtils.replaceIgnoreCase

    Fix for Lang-1406 to avoid any exception while performing String.UTils.replaceIgnoreCase() against uniCode String object. 
    
    Plz let me if there have any extra things need to be done for this PR since I am the first timer for commons-lang project( add more test case?).
    
    All the best

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/HiuKwok/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/340.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #340
    
----
commit e0f6c7802b5e721019a602bf30b31c79dbf6d233
Author: Hiu Kwok <hiufkwok@...>
Date:   2018-08-08T11:44:51Z

    toUpperCase() > toLowerCase() to avoid unicode string length miscalculation

commit 590f90889bf61a5570bd98b78e73410a07d7410b
Author: Hiu Kwok <hiufkwok@...>
Date:   2018-08-08T11:46:29Z

    Assertion for example mentioned on LANG-1406 Description

----
","08/Aug/18 12:22;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/340
  
    
    [![Coverage Status](https://coveralls.io/builds/18383289/badge)](https://coveralls.io/builds/18383289)
    
    Coverage decreased (-0.04%) to 95.243% when pulling **590f90889bf61a5570bd98b78e73410a07d7410b on HiuKwok:master** into **a36c903d4f1065bc59f5e6d2bb0f9d92a5e71d83 on apache:master**.

","08/Aug/18 12:45;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/340
  
    I'm surprised by this bug. Had no idea something like this could happen. Will debug later and see if I can understand why that happens (might have to train my brain to default to always use uppercase instead of lowercase?). Thanks for the pull request, we will review the code and if everything looks OK a committer will merge it.
","09/Aug/18 08:45;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/340
  
    Oh, that does make sense now. So the first visible character we see is the [""Latin Capital Letter I with Dot Above""](https://unicode-table.com/en/#0130) (see also [this other link](https://en.wikipedia.org/wiki/Dotted_and_dotless_I)), and the second an `x`. And doing `toUpperCase()` simply won't change it as it's considered already upper case.
    
    When doing a `toLowerCase`, it gets translated into two visible characters. The second is the normal `x`. While the first contains two codepoints. I tested in Python, and got the lower case `i` (`print(u""\u0069"")`) followed by a character invisible by itself (`print (u""\u0307"")`).
    
    The special/invisible character, is visible when coming after certain letters.
    
    ```python
    >>> print(u""\u0307"")
    
    >>> print(u""\u0069\u0307"")
    i̇
    >>> print(u""\u0068\u0307"")
    ḣ
    >>> print(u""\u0067\u0307"")
    ġ
    >>> print(u""\u0067\u0307"")
    ```
    
    When we get these invisible characters, as we have one code point more, the length returned is not 2, but 3. Resulting in exception in this issue.
    
    I don't believe the fix here would fix the reverse case, where we had a lower case, single codepoint, unicode; that would be represented by a two code codepoint. The exception could happen again (I haven't investigated whether such case exist, but I'm assuming there could be such case - if not now, maybe a character could still be added in future editions).
    
    What do you think @HiuKwok ? Any suggestions? I'm not sure if there's any easy way to fix this case, except by adding a note to the documentation saying that the method is not intended to be used with unicode strings, as it doesn't handle supplementary characters well. Or maybe we could try to remove the `length()` call around the `StringBuilder`'s near the end of the method...
","09/Aug/18 08:47;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/340#discussion_r208851249
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -5596,8 +5596,8 @@ private static String replace(final String text, String searchString, final Stri
              }
              String searchText = text;
              if (ignoreCase) {
    -             searchText = text.toLowerCase();
    -             searchString = searchString.toLowerCase();
    +             searchText = text.toUpperCase();
    +             searchString = searchString.toUpperCase();
    --- End diff --
    
    Just leaving a comment here too to have a review here in GitHub. While your example works, as the character is considered already in upper case, the reverse case would still fail after changing from `toLowerCase` to `toUpperCase`. So I think we should find another solution or update the documentation stating how the code works with unicode.
","13/Aug/18 11:24;githubbot;Github user HiuKwok commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/340#discussion_r209574053
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -5596,8 +5596,8 @@ private static String replace(final String text, String searchString, final Stri
              }
              String searchText = text;
              if (ignoreCase) {
    -             searchText = text.toLowerCase();
    -             searchString = searchString.toLowerCase();
    +             searchText = text.toUpperCase();
    +             searchString = searchString.toUpperCase();
    --- End diff --
    
    Hi @kinow, yes you are right after I did try to come up with a draft java main to generate all || most unicode in string and compare it's length between original, toLowerCase() and to UpperCase().
    
    ![image](https://user-images.githubusercontent.com/37996731/44028895-032488d4-9f2e-11e8-839b-c1259a182b8e.png)
      
    It's seem like no matter which one we pick (toLowerCase || toUpperCase), it would still tend to come up with a incorrect length.
    
    Just a quick question what you mean by remove the ```length( )``` mean? Would you mind to specify more on that? 
    
    Thanks, 
","13/Aug/18 12:20;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/340#discussion_r209587514
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -5596,8 +5596,8 @@ private static String replace(final String text, String searchString, final Stri
              }
              String searchText = text;
              if (ignoreCase) {
    -             searchText = text.toLowerCase();
    -             searchString = searchString.toLowerCase();
    +             searchText = text.toUpperCase();
    +             searchString = searchString.toUpperCase();
    --- End diff --
    
    Oohh, great testing @HiuKwok ! Thanks for sharing here.
    
    >Just a quick question what you mean by remove the length( ) mean? Would you mind to specify more on that?
    
    Sure. I think there could be a possibility to fix the issue by addressing how the length of the lower'ed/upper'ed text is used https://github.com/apache/commons-lang/blob/590f90889bf61a5570bd98b78e73410a07d7410b/src/main/java/org/apache/commons/lang3/StringUtils.java#L5603
    
    So maybe there could be another way to work around the way we use the strings lengths, and avoid the exception.
","13/Aug/18 15:43;githubbot;Github user HiuKwok commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/340#discussion_r209659530
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -5596,8 +5596,8 @@ private static String replace(final String text, String searchString, final Stri
              }
              String searchText = text;
              if (ignoreCase) {
    -             searchText = text.toLowerCase();
    -             searchString = searchString.toLowerCase();
    +             searchText = text.toUpperCase();
    +             searchString = searchString.toUpperCase();
    --- End diff --
    
    @kinow May be try to store a original text.length before performance any upper || lower case operation and make use of it?
    
    haha, it's just a thought. Would try out later 
","14/Aug/18 09:07;githubbot;Github user HiuKwok commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/340#discussion_r209878957
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -5596,8 +5596,8 @@ private static String replace(final String text, String searchString, final Stri
              }
              String searchText = text;
              if (ignoreCase) {
    -             searchText = text.toLowerCase();
    -             searchString = searchString.toLowerCase();
    +             searchText = text.toUpperCase();
    +             searchString = searchString.toUpperCase();
    --- End diff --
    
    @kinow It turn out the problem is large than that, because the incorrect length basically affecting the whole method, especially the part which involve parsing inside the while loop.
    
    https://github.com/apache/commons-lang/blob/590f90889bf61a5570bd98b78e73410a07d7410b/src/main/java/org/apache/commons/lang3/StringUtils.java#L5612-L5619
    
    While string like following is entered, then Exception would be thrown on here instead.
    https://github.com/apache/commons-lang/blob/590f90889bf61a5570bd98b78e73410a07d7410b/src/main/java/org/apache/commons/lang3/StringUtils.java#L5613
    
    ![image](https://user-images.githubusercontent.com/37996731/44082531-137cb1a0-9fe4-11e8-9219-8f373aebce67.png)
    
    
    

","14/Aug/18 10:49;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/340#discussion_r209907553
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -5596,8 +5596,8 @@ private static String replace(final String text, String searchString, final Stri
              }
              String searchText = text;
              if (ignoreCase) {
    -             searchText = text.toLowerCase();
    -             searchString = searchString.toLowerCase();
    +             searchText = text.toUpperCase();
    +             searchString = searchString.toUpperCase();
    --- End diff --
    
    Yeah, a very slippery problem. We still have the option to simply document that the method does not work well with unicode strings. 
    
    But first I would like to spend at least a few hours with paper and pencil (and eraser, because this could take a bit till I give up or find a possible way around it), and perhaps even check in the mailing list if other devs have any idea.
    
    I think you found a very interesting problem (*)! Keep the ideas coming if you have any on how to solve this issue :+1: 
    
    _* if I had more time, I would possibly either go through other methods checking for that or, just try some fuzzifier approach to test the whole project ! Not aware of any static or dynamic analysis tool that does that_
","02/Sep/18 05:31;githubbot;Github user HiuKwok commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/340#discussion_r214529178
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -5596,8 +5596,8 @@ private static String replace(final String text, String searchString, final Stri
              }
              String searchText = text;
              if (ignoreCase) {
    -             searchText = text.toLowerCase();
    -             searchString = searchString.toLowerCase();
    +             searchText = text.toUpperCase();
    +             searchString = searchString.toUpperCase();
    --- End diff --
    
    Hi all, Just a quick update finally I kind of figure the way out of this problem,
    while I am trying to make it happen (the implementation).
    But the concept is mainly Normalize incoming word at the beginning of the method call by ```Normalizer.normalize()```
","05/Sep/18 15:32;githubbot;Github user HiuKwok commented on the issue:

    https://github.com/apache/commons-lang/pull/340
  
    To whom who interested in this issue, here is some founding that I discovered throughout this month of issue solving. 
    
    Problem:
     - The exception would happened when any String object passed in with unicode character. In order to achieve ignore case replacement, the internal logic would first transform both `text` and `SearchString` to lowerCase( ) for comparaition.   
    
    - However if anyone passion enough to digger deeper into the src logic of `.toLowerCase( )`. Certain unicode character would be denormalized. In this way the result String length would tend to longer than original length().  Example like:  ![image](https://user-images.githubusercontent.com/37996731/45103213-efec8780-b161-11e8-8370-88a7edacfc42.png)
    So making use of the transformed String, Out bound exception would happen when trying to access the index that doesn't access at all (3 in this case vs 2 in length before lowerCase).
    
    Flow:
    
     - So the first thought into my mind is, why dun just normalize both `text` and `searchString` before performing ignore case comparation? In this way the String length would always stay consistence no matter `toLowerCase( )` or `toUpperCase( )` 3 -> 3.  However the another problem would emerged, as you may noticed, while the String mentioned above denormalize, it would turn into a UpperCase I and a dot sign. 
    
    - But what happen if the search pattern emerge into searchText in decompose form. In this case let say I am trying to match a upper [I]. Then mismatch would happen and this is certain not the desire behavior of this method I believe. 
    
    BTW I Drafted a simple main method to demonstrate how mismatch would happen in here.
    
    https://github.com/HiuKwok/commons-lang/blob/master/src/main/java/com/hiukwok/test.java#L10-L20
    

","05/Sep/18 17:19;michaelryan;I've been thinking - how do case-insensitive regular expressions handle this? Theoretically these should do the same thing:
{code}
StringUtils.replaceIgnoreCase(""\u0130x"", ""x"", """");
Pattern.compile(""x"", Pattern.CASE_INSENSITIVE).matcher(""\u0130x"").replaceAll("""");
{code}
The Matcher.replaceAll(String) method does not throw an exception.

So what is the difference? The Pattern.newSingle(int) method is the key thing to look at. It uses Character.toUpperCase(char) and Character.toLowerCase(char), which do not have the same behavior as String.toUpperCase() and String.toLowerCase(). The Character class produces a single character.

So I think a possible naive solution to this would be to call Character.toLowerCase() on each character in the String and then append the characters together into a new String.
{code}
String text = ""foo"";
char[] chars = text.toCharArray();
for (int i = 0; i < chars.length; i++) {
    chars[i] = Character.toLowerCase(chars[i]);
}
String lowerText = new String(chars);
{code}","05/Sep/18 20:40;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/340
  
    Good progress so far @HiuKwok . Understanding the problem well is a good first step to solve it 👍 my next development cycle for Apache will probably be for a release for Apache Commons Imaging, then after that Lang+Text. So will try to help here if you haven't found a way to solve it yet.
","15/Sep/18 06:57;hiukwok;Hi [~michaelryan]

I have try to implement your idea into the actual codebase against it. According to the theory the out of bound exception should be fixed.
 As one to one mapping is performed during the .toLowerCase process. It's guaranteed to always give back the same length of String in return.[Here|https://github.com/HiuKwok/commons-lang/commit/a998e3de65a59d0859157f99e6cdf99469aa009f] is the commit btw.

However on certain situation seems would leads to mismatch, which I listed the fail case on the same commit as well.","15/Nov/18 19:32;githubbot;GitHub user drajakumar opened a pull request:

    https://github.com/apache/commons-lang/pull/381

    LANG-1406 StringIndexOutOfBoundsException in StringUtils.replaceIgnor…

    …eCase

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/drajakumar/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/381.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #381
    
----
commit 77ad336da790dc522216300bfb20d74b779a9d62
Author: Don Jeba <donjeba@...>
Date:   2018-11-15T19:31:23Z

    LANG-1406 StringIndexOutOfBoundsException in StringUtils.replaceIgnoreCase

----
","15/Nov/18 19:41;githubbot;Github user drajakumar commented on the issue:

    https://github.com/apache/commons-lang/pull/381
  
    @kinow can you kindly review and comment whether this fix holds good, thank you!
","15/Nov/18 19:45;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/381
  
    
    [![Coverage Status](https://coveralls.io/builds/20129896/badge)](https://coveralls.io/builds/20129896)
    
    Coverage increased (+0.002%) to 95.235% when pulling **77ad336da790dc522216300bfb20d74b779a9d62 on drajakumar:master** into **c4d0dbcb56b8980b1b3b7c85d00ad6540788c08e on apache:master**.

","19/Nov/18 20:39;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/381
  
    @kinow What do you think is this a better solution than #340?
",,,,,,,,,,,
Typo in JavaDoc for lastIndexOf,LANG-1401,13170422,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,amaemdov,amaemdov,06/Jul/18 07:05,21/Aug/18 13:08,07/Apr/19 20:37,27/Jul/18 17:39,,,,,3.8,,,,,0,,,,,,,,"Typo in Java doc for lastIndexOf.

You could check on following page:

[https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#lastIndexOf-java.lang.CharSequence-java.lang.CharSequence-int-]

In example of execution two last row have same arguments but result differ:

StringUtils.lastIndexOf(""aabaabaa"", ""ba"", 2) = -1

StringUtils.lastIndexOf(""aabaabaa"", ""ba"", 2) = 2

 

Thanks

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-07-27 17:39:43.117,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:55 UTC 2018,,,,,,0|i3vlpb:,9223372036854775807,,,,,,,,27/Jul/18 17:39;pascalschumacher;Thanks for reporting!,21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Split fails on word boundaries,LANG-1399,13165258,Bug,Resolved,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,devson,devson,11/Jun/18 07:39,11/Jun/18 14:22,07/Apr/19 20:37,11/Jun/18 14:22,3.x,,,,,,lang.*,,,0,,,,,,,,"StringUtils.split does not behave correctly when the split is to be performed on word boundary characters (""\b""). Steps to produce the bug:

String string = ""foo<bar>foofoo"";
String[] st=StringUtils.split(string, ""\b"");

Expected o/p:

foo
<
bar
>
foofoo

 

Actual o/p:

foo<bar>foofoo

The issue seems to be with how zero-width separators are being handled. Note that Java library's String.split gives the expected output.

Thanks.","Produced on v3.7 with Java 8, running Windows. But this may be produced in any environment",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-06-11 14:22:11.299,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 11 14:22:11 UTC 2018,,,,,,0|i3upu7:,9223372036854775807,,,,,,,,"11/Jun/18 14:22;sebb@apache.org;StringUtils.split treats the separator as a String, not a regular expression.

So ""\b"" does not mean word-boundary.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WordUtils.wrap throws StringIndexOutOfBoundsException when wrapLength is Integer.MAX_VALUE,LANG-1397,13159640,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,tasanuma0829,tasanuma0829,16/May/18 08:14,21/Aug/18 13:08,07/Apr/19 20:37,18/May/18 17:45,3.7,,,,3.8,,,,,0,,,,,,,,"This is the sample code.
{code:java}
int max = Integer.MAX_VALUE;  // 2147483647
WordUtils.wrap(""foobar"", max, ""\n"", true);
{code}

and the error log.
{noformat}
Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String index out of range: -2147483648
	at java.lang.String.substring(String.java:1967)
	at org.apache.commons.lang3.text.WordUtils.wrap(WordUtils.java:291)
	at org.apache.commons.lang3.text.WordUtils.wrap(WordUtils.java:179)
{noformat}

Seems WordUtils in commons-text has the same bug. I will file it on commons-text side later.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-05-16 08:33:24.303,,,false,,,330,https://github.com/apache/commons-lang/pull/330,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:55 UTC 2018,,,,,,0|i3trmn:,9223372036854775807,,,,,,,,"16/May/18 08:33;githubbot;GitHub user tasanuma opened a pull request:

    https://github.com/apache/commons-lang/pull/330

    LANG-1397: WordUtils.wrap throws StringIndexOutOfBoundsException when wrapLength is Integer.MAX_VALUE

    There is a bug of WordUtils. WordUtils in commons-text has the same bug. I will work on it after merging this pull request.
    
    This is my first contribute to this project. I confirmed `mvn clean verify` succeeds. If there is any problem, please let me know.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tasanuma/commons-lang LANG-1397-WordUtils

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/330.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #330
    
----
commit 2a5c0f0d22f465020314bb029eb758917595a7eb
Author: Takanobu Asanuma <tasanuma@...>
Date:   2018-05-16T08:06:03Z

    fix a bug of WordUtils

----
","16/May/18 08:41;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/330
  
    
    [![Coverage Status](https://coveralls.io/builds/17007638/badge)](https://coveralls.io/builds/17007638)
    
    Coverage increased (+0.007%) to 95.242% when pulling **2a5c0f0d22f465020314bb029eb758917595a7eb on tasanuma:LANG-1397-WordUtils** into **961e4a821b66b27c77418dece6017e3fe912fa56 on apache:master**.

","16/May/18 08:41;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/330
  
    
    [![Coverage Status](https://coveralls.io/builds/17007638/badge)](https://coveralls.io/builds/17007638)
    
    Coverage increased (+0.007%) to 95.242% when pulling **2a5c0f0d22f465020314bb029eb758917595a7eb on tasanuma:LANG-1397-WordUtils** into **961e4a821b66b27c77418dece6017e3fe912fa56 on apache:master**.

","17/May/18 18:40;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/330
  
    Thanks for the pull request!
    
    I would be nice if you could amend the commit to add the issue id and description at the beginning of the commit message.
    
    Thanks!
","18/May/18 04:47;githubbot;Github user tasanuma commented on the issue:

    https://github.com/apache/commons-lang/pull/330
  
    Thanks for your advice, @PascalSchumacher! I updated the pull request addressing it.
",18/May/18 17:28;garydgregory;Note: I just realized that {{WordUtils}} in Commons Lang is deprecated in favor of Commons Text. ,"18/May/18 17:45;garydgregory;In Git master. Please verify and close this ticket and associated PR.
","19/May/18 02:20;githubbot;Github user tasanuma commented on the issue:

    https://github.com/apache/commons-lang/pull/330
  
    This pull request is merged by https://github.com/apache/commons-lang/commit/09ef69c5b51115300da6df43690cd455d83c8027. Thanks for committing it, @garydgregory!
","19/May/18 02:20;githubbot;Github user tasanuma closed the pull request at:

    https://github.com/apache/commons-lang/pull/330
",19/May/18 02:21;tasanuma0829;I've just closed the PR. Thanks [~garydgregory]!,21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,
JsonToStringStyle does not escape string names,LANG-1396,13158451,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,10/May/18 11:57,21/Aug/18 13:08,07/Apr/19 20:37,10/May/18 12:09,,,,,3.8,,,,,0,,,,,,,,"JSON objects consist of a string : value pair.
The string part can contain '""' and '\' etc provided it is properly escaped.

This is not currently supported.",,,,,,,,,,,,,,,,LANG-1395,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-21 13:08:55.899,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:55 UTC 2018,,,,,,0|i3tkcn:,9223372036854775807,,,,,,,,"10/May/18 12:09;sebb@apache.org;LANG-1396 - JsonToStringStyle does not escape string names

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/3fadfdd6
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/3fadfdd6
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/3fadfdd6
",21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JsonToStringStyle does not escape double quote in a string value,LANG-1395,13158142,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,09/May/18 09:35,21/Aug/18 13:08,07/Apr/19 20:37,09/May/18 17:29,,,,,3.8,,,,,0,,,,,,,,"From the user mailing list [1]:
JsonToStringStyle does not escape double quote in a string value

JSON requires double-quote to be escaped with a back-slash.

This does not happen currently.

Nor does the code translate control characters such as NL and FF correctly.

AFAICT the code is only guaranateed to process alphanumeric strings correctly.

[1] https://lists.apache.org/thread.html/10bb632e86c473d58656431ad2702e058c58585e1a2edf1bf4a46824@%3Cuser.commons.apache.org%3E",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-21 13:08:57.673,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:57 UTC 2018,,,,,,0|i3tig7:,9223372036854775807,,,,,,,,09/May/18 09:49;sebb@apache.org;It looks like the code needs to use the (now deprecated) StringEscapeUtils#escapeJson() method to transform strings,"09/May/18 17:29;sebb@apache.org;LANG-1395 - JsonToStringStyle does not escape double quote in a string
value

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/e7d16c27
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/e7d16c27
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/e7d16c27
",21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Improve Javadoc for StringUtils.isAnyEmpty(null) ,LANG-1391,13151952,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,smatulli,smatulli,12/Apr/18 12:14,30/Apr/18 09:38,07/Apr/19 20:37,18/Apr/18 18:28,3.7,,,,3.8,,lang.*,,,0,,,,,,,," 

The StringUtils.isAnyEmpty(null) method returns an incorrect value from what is specified in the javadoc.

JAVADOC:   StringUtils.isAnyEmpty(null) = true

Test: System.out.println("""" + StringUtils.isAnyEmpty(null));  --> false

 

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-04-17 23:57:16.531,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Apr 27 14:46:41 UTC 2018,,,,,,0|i3sgvb:,9223372036854775807,,,,,,,,"17/Apr/18 23:57;garydgregory;That does not make sense based on the tests we have the behavior with other params:

{{StringUtils.isAnyEmpty(null)}} is the same as {{StringUtils.isAnyEmpty([null])}}, an array with one element, a null.

Note that {{StringUtils.isAnyEmpty([null, ""foo""]) returns {{true}}.

You might be confusing:
- StringUtils.isAnyEmpty((String[]) null) return false, this actually passes a null
- {{StringUtils.isAnyEmpty(null)}} is the same as {{StringUtils.isAnyEmpty([null])}}, an array with one element, a null
 ",18/Apr/18 00:35;oleg.chubaryov;Maybe better to specify this behavior appropriately in javadoc. Because it's confusing at the moment.,"18/Apr/18 18:28;garydgregory;I updated the Javadoc in git master. Please verify and close.

If anyone of you would like to participate and volunteer to improve the Javadoc for the other methods in this class, please provide a PR on GitHub at [https://github.com/apache/commons-lang]

Thank you!

Gary","24/Apr/18 22:34;githubbot;GitHub user coms opened a pull request:

    https://github.com/apache/commons-lang/pull/326

    [LANG-1391] Improve Javadoc for StringUtils methods

    Improved Javadoc for null cases. Methods: StringUtils.isNoneEmpty, StringUtils.isAnyBlank, StringUtils.isNoneBlank.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/coms/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/326.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #326
    
----
commit 235b485e3a7a8cc60b6884357ecef4fd6bca0abd
Author: Oleg Chubaryov <oleg.chubaryov@...>
Date:   2018-04-24T22:26:29Z

    Improve Javadoc for StringUtils methods

----
","24/Apr/18 22:36;oleg.chubaryov;I've just created PR: [https://github.com/apache/commons-lang/pull/326]

Thank you!","24/Apr/18 22:38;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/326
  
    
    [![Coverage Status](https://coveralls.io/builds/16680481/badge)](https://coveralls.io/builds/16680481)
    
    Coverage remained the same at 95.14% when pulling **235b485e3a7a8cc60b6884357ecef4fd6bca0abd on coms:master** into **58a8f12b443d7cbc16ec00b8841138ee55ee6630 on apache:master**.

",26/Apr/18 16:07;garydgregory;[~oleg.chubaryov]: Patch applied. Thank you.,"27/Apr/18 14:46;githubbot;Github user coms closed the pull request at:

    https://github.com/apache/commons-lang/pull/326
",,,,,,,,,,,,,,,,,,,,,,,
Ambiguous method call error when using BooleanUtils.and,LANG-1386,13144679,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,TheKojuEffect,TheKojuEffect,13/Mar/18 10:27,14/Mar/18 12:59,07/Apr/19 20:37,,3.4,,,,,,lang.*,,,0,,,,,,,,"When using `BooleanUtils.and` as per described in the method's javadoc, ambiguous method call error is thrown. I'm using version 3.4 with Java 8.



Here's a StackOverflow question related to this issue. [https://stackoverflow.com/q/49252638/1433665]",,,,,,,,,,,,,,,,,,,,,,,,,,13/Mar/18 10:27;TheKojuEffect;BooleanUtils.and javadoc.png;https://issues.apache.org/jira/secure/attachment/12914245/BooleanUtils.and+javadoc.png,13/Mar/18 10:27;TheKojuEffect;Wrapper Boolean and.png;https://issues.apache.org/jira/secure/attachment/12914242/Wrapper+Boolean+and.png,13/Mar/18 10:27;TheKojuEffect;literal boolean and.png;https://issues.apache.org/jira/secure/attachment/12914244/literal+boolean+and.png,13/Mar/18 10:27;TheKojuEffect;possible use case.png;https://issues.apache.org/jira/secure/attachment/12914243/possible+use+case.png,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2018-03-13 23:12:47.197,,,false,,,,https://stackoverflow.com/questions/49252638/how-to-use-apache-commons-booleanutils-and-method,,,,,,,,,,9223372036854775807,,,Wed Mar 14 12:59:02 UTC 2018,,,,,,0|i3r85b:,9223372036854775807,,,,,,,,13/Mar/18 23:12;garydgregory;Please specify which version of Commons Lang you are using.,"14/Mar/18 01:30;TheKojuEffect;[~garydgregory] I am using version 3.4 with Java 8. Updated the ticket.

 

Thank you,","14/Mar/18 12:59;sebb@apache.org;The StackOverflow question has an answer that explains it all in great detail.
It also explains how to avoid the warning by using a suitably typed array.

AFAICT the only way that Commons Lang could avoid this problem is to remove and replace one or both of the methods.
This will break compatibility.

Given that there is an easy work-round, I don't think that is warranted.

It might be worth adding some Javadoc to show how avoid the warning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils.createNumber() throws StringIndexOutOfBoundsException  instead of NumberFormatException,LANG-1385,13144118,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,garydgregory,rohanpadhye,rohanpadhye,10/Mar/18 23:47,11/Mar/18 01:23,07/Apr/19 20:37,11/Mar/18 01:17,3.7,,,,3.8,,lang.math.*,,,0,,,,,,,,"Test case:
{noformat}
NumberUtils.createNumber(""L""){noformat}

Expected: {{NumberFormatException}}

Got:
{noformat}
java.lang.StringIndexOutOfBoundsException: String index out of range: 0
at java.lang.String.charAt(String.java:658)
 at org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:528)
{noformat}
 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-11 01:17:17.852,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 11 01:23:46 UTC 2018,,,,,,0|i3r547:,9223372036854775807,,,,,,,,"11/Mar/18 01:17;garydgregory;Thank you for your report [~rohanpadhye].

Fixed in git master. Please verify and close this ticket.","11/Mar/18 01:23;rohanpadhye;Great! Thanks for the quick response, [~garydgregory].",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NPE from SystemUtils.isJavaVersionAtLeast under Java 11 EA,LANG-1384,13143515,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,erans,iay,iay,08/Mar/18 11:18,21/Aug/18 13:08,07/Apr/19 20:37,23/Mar/18 21:02,3.7,,,,3.8,,,,,0,,,,,,,,"Calling, for example, {{SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_7);}} under the Java 11 early access release causes a NPE:
{code:java}
java.lang.NullPointerException
at org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1654)
{code}

This is:

{code}
return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);
{code}

... which implies that {{JAVA_SPECIFICATION_VERSION_AS_ENUM}} hasn't been resolved properly, although it looks like the code in JavaVersion intends to return {{JAVA_RECENT}} in the case of unknown versions.

The {{java.specification.version}} system property is ""11"" in this environment.

{code}
$ java -version
java version ""11-ea"" 2018-09-18
Java(TM) SE Runtime Environment 18.9 (build 11-ea+2)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11-ea+2, mixed mode){code}",Java 11 EA,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-03-08 12:13:14.036,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:53 UTC 2018,,,,,,0|i3r1ef:,9223372036854775807,,,,,,,,"08/Mar/18 12:13;erans;Thanks for the report.
{quote}it looks like the code in JavaVersion intends to return JAVA_RECENT in the case of unknown versions.
{quote}
Clearly, this is broken. It seems to assume that versions are always ""1.X"".
 Adding a new {{enum}} item ({{JAVA_11}}) would work for now; but the same bug will reappear at the next unknown version.","08/Mar/18 12:43;iay;I agree that – particularly given the increased pace of Java releases – any real solution has to put a nail in this for good rather than just adding a new {{enum}} reactively every few months. The {{JAVA_RECENT}} thing seems to have been an attempt to do that, it just doesn't seem to be working.","08/Mar/18 12:57;erans;I've added {{JAVA_11}} in commit 50ce8c44e1601acffa39f5568f0fc140aade0564 (""master"" branch).",08/Mar/18 15:09;garydgregory;[~erans]: Don't forget to update {{changes.xml}} ;),"08/Mar/18 15:10;garydgregory;We also need to push out a 3.8 ASAP IMO so that Maven plugins like Surefire can update Commons Lang (again), to avoid this NPE.","08/Mar/18 15:32;erans;bq. Don't forget to update changes.xml

Done (I didn't know whether my changes would be sufficient to resolve this issue).

Please examine the attempt to prevent the same failure for later versions (would only work if the naming scheme stays the same).","08/Mar/18 15:46;garydgregory;Yes, this will work for now, at least until Java versions go past {{""99""}}. This {{SystemUtils}} method:

{code:java}
    static boolean isJavaVersionMatch(final String version, final String versionPrefix) {
        if (version == null) {
            return false;
        }
        return version.startsWith(versionPrefix);
    }
{code}

will not do the right thing when comparing {{""100""}} with {{""10""}}.

Gary",21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,,,,
Illegal Reflective Access Operation,LANG-1383,13142201,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,schackbrian,schackbrian,02/Mar/18 21:22,02/Mar/18 21:27,07/Apr/19 20:37,,3.7,,,,,,lang.builder.*,,,0,,,,,,,,"ReflectionToStringBuilder::toString prints an illegal access warning to System.err. The warning suggests to report this issue to the Apache Commons maintainers.

Boolean.TRUE is such a simple value that I don't really need ReflectionToStringBuilder. But more complex types (such as HashMap) print the same warning. I chose Boolean.TRUE in order to simplify this example.

When I searched for this warning message, I found a StackOverflow answer which suggested to report it to the package maintainers ([JDK9: An illegal reflective access operation has occurred. org.python.core.PySystemState|https://stackoverflow.com/questions/46230413/jdk9-an-illegal-reflective-access-operation-has-occurred-org-python-core-pysys/46230678]).

I also asked my own StackOverflow question about how to throw an exception for this warning ([How can I throw an exception for an illegal reflective access warning?|https://stackoverflow.com/questions/49076972/how-can-i-throw-an-exception-for-an-illegal-reflective-access-warning]).

I will try to change my code to avoid this warning, but it also seems that Apache Commons should not cause the warning. Perhaps it could use different methods to get the values of the fields, or skip the private fields, or throw an exception? The warning message suggests that the Java maintainers want the Apache Commons maintainers to avoid this warning. And when they disable this illegal access in the future, then it could impact Apache Commons.

Code:

{{import org.apache.commons.lang3.builder.*;}}
 {{class Test {}}

{{public static void main(String[] args) {}}

{{System.out.println(ReflectionToStringBuilder.toString(Boolean.TRUE));}}

{{}}}

{{}}}

Output:

{{WARNING: An illegal reflective access operation has occurred}}
 {{WARNING: Illegal reflective access by org.apache.commons.lang3.builder.ReflectionToStringBuilder ([file:/Users/brianschack/eclipse-workspace/User%20Libraries/com|file:///Users/brianschack/eclipse-workspace/User%20Libraries/com]mons-lang3-3.7/commons-lang3-3.7.jar) to field java.lang.Boolean.value}}
 {{WARNING: Please consider reporting this to the maintainers of org.apache.commons.lang3.builder.ReflectionToStringBuilder}}
 {{WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations}}

{{WARNING: All illegal access operations will be denied in a future release}}",,,,,,,,,,,,,,,,,,,,,,,,,,02/Mar/18 21:14;schackbrian;Test.java;https://issues.apache.org/jira/secure/attachment/12912825/Test.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,https://stackoverflow.com/questions/49076972/how-can-i-throw-an-exception-for-an-illegal-reflective-access-warning,,,,,,,,,,9223372036854775807,,,2018-03-02 21:22:12.0,,,,,,0|i3qta7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToStringBuilder Works Inconsistently With HashMap,LANG-1381,13140817,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,schackbrian,schackbrian,25/Feb/18 22:59,26/Feb/18 16:03,07/Apr/19 20:37,,3.7,,,,,,lang.builder.*,,,0,,,,,,,,"In the following code, why do the two lines containing `System.out.println(person);` yield different outputs? The second line indirectly calls the method `Job.toString` yielding the string `""Manager""`, but the first line mysteriously does not yielding `Job@28f67ac7`. The line in between `person.put(""a"", ""b"");` doesn't seem to me like it should make any difference.

Code:

{{import java.util.*;
import org.apache.commons.lang3.builder.*;

class Job extends HashMap<String, String> {
	@Override public String toString() {
		return ""Manager"";
	}
}

class Person extends HashMap<String, String> {
	Job job;
	
	Person() {
		this.job = new Job();
	}
	
	@Override public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}
}

class Test {
	public static void main(String[] args) {
		Person person = new Person();
		System.out.println(person);
		person.put(""a"", ""b"");
		System.out.println(person);
	}
}}}

Console:

{{Person@2b80d80f[job=Job@28f67ac7,threshold=0,loadFactor=0.75]
Person@2b80d80f[job=Manager,threshold=12,loadFactor=0.75]}}",,,,,,,,,,,,,,,,,,,,,,,,,,25/Feb/18 22:58;schackbrian;Test.java;https://issues.apache.org/jira/secure/attachment/12911971/Test.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2018-02-26 03:17:34.402,,,false,,,,https://stackoverflow.com/questions/48979192/why-does-tostringbuilder-work-inconsistently,,,,,,,,,,9223372036854775807,,,Mon Feb 26 16:03:33 UTC 2018,,,,,,0|i3qksv:,9223372036854775807,,,,,,,,"26/Feb/18 03:17;tkruse;Different Handling seems to come from different result of isRegistered(value) in ToStringStyle.appendInternal().

isRegistered(value) checks for getRegistry().containsKey(value), which in case of empty HashMaps is true for any empty HashMap.

Consider also outputs for these cases:

 

    person.put({color:#008000}""a""{color}, {color:#008000}""b""{color});
    person.{color:#660e7a}job{color}.put({color:#008000}""a""{color}, {color:#008000}""b""{color});
    System.{color:#660e7a}out{color}.println(person); // job=Job@...
    person.clear();
    System.{color:#660e7a}out{color}.println(person); // job=Manager

 

At a glance, containsKey(value) might have to be replaced with identity check inside keySet()","26/Feb/18 16:03;schackbrian;Dear Mr. Kruse,

Thank you for taking this issue seriously! Also, thank you for the explanation. I was looking at the source code, but it didn't occur to me to look at the isRegistered method.

Regards,
Brian Schack ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser too strict on abbreviated short month symbols,LANG-1380,13140219,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,markus17,markus17,22/Feb/18 15:18,21/Aug/18 13:08,07/Apr/19 20:37,03/Jul/18 03:52,3.7,,,,3.8,,lang.time.*,,,0,,,,,,,,"The date format symbols of the French locale adds a . (dot) when short month names are really abbreviated.

{code}
janv.
févr.
mars
avr.
mai
juin
juil.
août
sept.
oct.
nov.
déc.
{code}

But in real world examples, the dot is frequently omitted.

FastDateParser should be lenient in the case where the dot isn't there, e.g. ""14 avr 2014"".",,,,,,,,,,,,,,,,,,,,,,,,,,22/Feb/18 15:19;markus17;LANG-1380.patch;https://issues.apache.org/jira/secure/attachment/12911566/LANG-1380.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2018-02-24 02:33:53.973,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:52 UTC 2018,,,,,,0|i3qh3z:,9223372036854775807,,,,,,,,22/Feb/18 15:20;markus17;Attaching a unit test proving the problem. I am not sure through there it should be fixed.,"24/Feb/18 02:33;garydgregory;The month name Strings are returned by {{java.util.Calendar.getDisplayNames(int, int, Locale)}}. I am not sure it would be a good idea to try to perform additional processing on those values. This is all done programatically. There might be room for adding more values based on an optional resource bundle which matches up with the French locale.

What do you all (the reported [~markus17] and the community) think?","24/Feb/18 10:27;erans;A quick look at the code reveals all sorts of ""strategies"" (a.o. {{ABBREVIATED_YEAR_STRATEGY}}). Hence (IIUC), the design considered not quite correct input, and could perhaps be extended with a prospective {{ABBREVIATED_MONTH_MISSING_DOT}} (?).","26/Feb/18 11:01;markus17;Hello Gary, Gilles, 

I was thinking to be more lenient not only for missing dots in some month forms, but also sometimes optional or mandatory punctuation depending on Locale.

To give an example, we receive date formats from all over the web in the strangest forms. It is easy for us to preprocess AM and PM (stripping punctuation or whitespace), or timezone abbreviations, so it fits for the locale. But, it is not possible (or very hard) to preprocess how some locale's treat their abbreviated literals, we can't add or strip dots without knowing which month (or weekday) we are dealing with.

I did some work on FastDateParser.appendDisplayNames() to strip punctuation or append the regex question mark to punctuation, but that broke things elsewhere, so that was clearly not a good idea.
","26/Feb/18 11:22;erans;If the problem/issue/fix is not well-defined, you might want to post to the ""dev"" ML (using prefix ""[Lang][Text]"" on the ""Subject:"" line).","19/May/18 01:36;githubbot;GitHub user chonton opened a pull request:

    https://github.com/apache/commons-lang/pull/331

    LANG-1380: FastDateParser too strict on abbreviated short month symbols

    I'm interested in feedback.  Particularly from recent committers - @garydgregory @britter @PascalSchumacher @sebbASF 
    thanks


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/chonton/commons-lang LANG-1380

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/331.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #331
    
----
commit 8c114fa865156fa4341390e66e42ca0cf3c494c8
Author: Chas Honton <chas@...>
Date:   2018-05-19T01:29:26Z

    LANG-1380: FastDateParser too strict on abbreviated short month symbols

----
","19/May/18 09:53;githubbot;Github user sebbASF commented on the issue:

    https://github.com/apache/commons-lang/pull/331
  
    The change is hard to review as it contains at least one unrelated change and some code re-arrangement.
    
    Would it be possible to provide a PR that addresses only the proposed change?
","19/May/18 17:19;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/331
  
    
    [![Coverage Status](https://coveralls.io/builds/17069311/badge)](https://coveralls.io/builds/17069311)
    
    Coverage decreased (-0.004%) to 95.229% when pulling **b09d26f12bd4bfd1456d876f56fb8d6986a88a26 on chonton:LANG-1380** into **09ef69c5b51115300da6df43690cd455d83c8027 on apache:master**.

","19/May/18 17:19;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/331
  
    
    [![Coverage Status](https://coveralls.io/builds/17069311/badge)](https://coveralls.io/builds/17069311)
    
    Coverage decreased (-0.004%) to 95.229% when pulling **b09d26f12bd4bfd1456d876f56fb8d6986a88a26 on chonton:LANG-1380** into **09ef69c5b51115300da6df43690cd455d83c8027 on apache:master**.

","28/May/18 06:47;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/331
  
    +1
","27/Jun/18 18:32;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/331
  
    @chonton No further review comments by anyone, so I guess this is good to merge?
","03/Jul/18 03:53;githubbot;Github user chonton commented on the issue:

    https://github.com/apache/commons-lang/pull/331
  
    closed with commit f56931c176fef5e164b681c740746aebdccccec3
","03/Jul/18 03:53;githubbot;Github user chonton closed the pull request at:

    https://github.com/apache/commons-lang/pull/331
",03/Jul/18 10:15;markus17;Thanks!,21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,
DateUtils.parseDateStrictly is not working properly,LANG-1377,13134294,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,dpalic,dpalic,28/Jan/18 14:09,16/Feb/18 23:31,07/Apr/19 20:37,16/Feb/18 23:31,3.7,,,,,,lang.time.*,,,0,,,,,,,,"I have following example to parse dates. The parsing fails in the given cases.

 

removed the code from inline, since Jira is unable to handle it properly... Please check the attachment

 

 ",,,,,,,,,,,,,,,,,,,,,,,,,,28/Jan/18 14:17;dpalic;dateParseTest.java;https://issues.apache.org/jira/secure/attachment/12908057/dateParseTest.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2018-02-16 15:21:12.995,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 16 23:31:39 UTC 2018,,,,,,0|i3pglj:,9223372036854775807,,,,,,,,"16/Feb/18 15:21;orbot90;Looks like the examples in the test are wrong.

The documentation of the parseDateStrictly method reads:
 * @throws ParseException if none of the date patterns were suitable

and for the date 13:05:15 03.05 there is no suitable pattern in the test. The pattern ""hh:mm dd.MM"" is not suitable for the date. It should be ""HH:mm:ss dd.MM""

 ","16/Feb/18 23:31;sebb@apache.org;There are two problems with the format strings:
* none of them allow for the seconds in ""13:05:15 03.05""
* the format char 'h' expects a number from 1-12; 13 is not such a number",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Parsing Json Array failed,LANG-1374,13128424,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,kinow,jaswanth,jaswanth,04/Jan/18 07:13,21/Aug/18 13:08,07/Apr/19 20:37,04/Jan/18 09:18,3.7,,,,3.8,,lang.builder.*,,,0,,,,,,,,"In ToStringStyle class, which checking if a string is a valid Json array, the boolean check was wrong.
original:

{code:java}
        private boolean isJsonArray(final String valueAsString) {
            return valueAsString.startsWith(getArrayStart())
                    && valueAsString.startsWith(getArrayEnd());
        }
{code}

The second expression should be valueAsString.endsWith(getArrayEnd())",,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-01-04 09:17:33.807,,,false,,,,,Important,Patch,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:53 UTC 2018,,,,,,0|i3ohwn:,9223372036854775807,,,,,,,,"04/Jan/18 09:17;kinow;Nice catch! Thanks for reporting the issue.

Fixed with a small test that will force the code to go through that line. Probably coverage will increase a tiny bit.

However, that test is not really important. The output generated with or without the fix is the same, from what I could tell. When that check returns - incorrectly - false, then result of toString() is appended anyway.

But for the sake of correctness, we should fix that method and allow it to follow the correct execution logic :-)

Thanks again for spotting it and for providing the fix. Feel free to submit a pull request next time if you'd like your code to be included with the project. Added credits in the changes.xml, so it should appear in the website after the next release.

Bruno","04/Jan/18 09:18;kinow;Fixed in c614fbcc79615f93d2c60a153db6e82d7474c425. changes.xml updated, FixVersion and Affect Version updated in JIRA too.",21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix TypeUtils#parameterize to work correctly with narrower-typed array,LANG-1371,13126327,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,20/Dec/17 16:14,21/Aug/18 13:08,07/Apr/19 20:37,20/Dec/17 16:21,3.7,,,,3.8,,,,,0,,,,,,,,reported in [https://github.com/apache/commons-lang/pull/307],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-12-20 16:15:26.502,,,false,,,,https://github.com/apache/commons-lang/pull/307,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:55 UTC 2018,,,,,,0|i3o4zz:,9223372036854775807,,,,,,,,"20/Dec/17 16:15;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/307
  
    created https://issues.apache.org/jira/browse/LANG-1371 to track this
",21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix EventCountCircuitBreaker increment batch,LANG-1370,13120702,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,kinow,kinow,kinow,25/Nov/17 08:06,21/Aug/18 13:08,07/Apr/19 20:37,25/Nov/17 08:39,3.7,,,,3.8,,lang.concurrent.*,,,0,,,,,,,,"Place holder for https://github.com/apache/commons-lang/pull/309

Fixes a bug where the increment count is not correctly propagated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-11-25 08:06:24.929,,,false,,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:53 UTC 2018,,,,,,0|i3n6hb:,9223372036854775807,,,,,,,,"25/Nov/17 08:06;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/309
  
    Ticket created in JIRA https://issues.apache.org/jira/browse/LANG-1370
",21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HashCodeBuilder.append incorrect behavior with chains of nulls,LANG-1368,13117774,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,wisnesky,wisnesky,12/Nov/17 07:58,20/Feb/18 05:24,07/Apr/19 20:37,,,,,,,,,,,0,,,,,,,,"I have a 7-way choice/sum/variant class, so that 6 of its 7 fields are null in each object of that class.  When using HashCodeBuilder's reflective hashCode, a 10k line java project works correctly.  When using HashCodeBuilder.append instead, sequential calls to append with a null argument cause the returned hashCode to be inconsistent with EqualsBuilder.  Correct behavior can be restored by appending a dummy non-null field initially:

	new HashCodeBuilder()
					.append(true) //bad return value without this dummy call
					.append(chc1)
...
					.append(chc7)
					.toHashCode();
	",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-02-19 05:24:27.767,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 20 05:24:55 UTC 2018,,,,,,0|i3mogf:,9223372036854775807,,,,,,,,19/Feb/18 05:24;orbot90;Can you add some test with exact cases that reproduce the issue? I tried running sequences of append with null arguments and I always got a consistent with EqualsBuilder result. ,"19/Feb/18 07:06;wisnesky;I’m sorry, but this has been lost to time.  I can add that it was using the eclipse compiler for java 8 on a Mac.  

","20/Feb/18 05:24;orbot90;Unfortunately I don't have any Mac machine available to test that. Please let me know if you find out some more info on this issue.

And if someone is able to test that on Mac with eclipse, I guess that would be great also.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionUtils#getRootCause(Throwable t) should return t if no lower level cause exists,LANG-1364,13112845,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,28/Oct/17 18:52,21/Aug/18 13:08,07/Apr/19 20:37,11/Feb/18 13:20,3.6,,,,3.8,,,,,0,,,,,,,,"{quote}
I have found the design of three root cause related methods inconsistent
when the input Throwable does not wrap up another Throwable.

These three methods are

   1. getRootCause(Throwable t)
   2. getRootCauseMessage(Throwable t)
   3. getRootCauseStackTrace(Throwable t)


When the input t has no lower level cause:

   - the first method returns null;
   - the second method returns the message of t, which means the input t is
   considered as the root cause in this method;
   - the third method returns the stack trace of t, which also means this
   method considers t as the root cause.

Therefore, I consider the design of the first method is not consistent with
the second and the third.

I usually write a function myself to get the root cause of an exception;
and it makes much better sense to me the root cause of a Throwable is
itself if no more lower level cause exists.

A request: change the first method to return t itself when there is no more
'causes'.
{quote}

Reported by Zheng Xie in https://mail-archives.apache.org/mod_mbox/commons-dev/201710.mbox/%3CCAL-LHk7jvQGM9J1SPxLB2qEsXazwwq%2BYKuv29XgWXEcccHUn0w%40mail.gmail.com%3E
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2018-08-21 13:08:52.453,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:52 UTC 2018,,,,,,0|i3lu3r:,9223372036854775807,,,,,,,,21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix tests DateUtilsTest for Java 9 with en_GB locale,LANG-1362,13112579,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,garydgregory,scolebourne@joda.org,scolebourne@joda.org,27/Oct/17 12:02,10/Nov/17 16:41,07/Apr/19 20:37,04/Nov/17 15:46,,,,,3.7,,lang.time.*,,,0,,,,,,,,"On Java 9 I see DateUtilsTest fail. This is because ""MST7MDT"" zone is not formatted as ""MST"". I'm unclear as to why this is, but it is not relevant to what the test is trying to do. As such, I've changed the zone to ""America/Denver"" and changed the format letter from ""z"" to ""XXX"" to make it more reliable.

The PR also uses try-finally when setting the default time-zone to avoid pollution of global state if a test fails (the pollution here made it look like 8 test failures when there was only in fact 1).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-27 12:04:19.414,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Nov 04 14:42:49 UTC 2017,,,,,,0|i3lsgv:,9223372036854775807,,,,,,,,"27/Oct/17 12:04;githubbot;GitHub user jodastephen opened a pull request:

    https://github.com/apache/commons-lang/pull/304

    Fix DateUtilsTest to work reliably on Java 9

    Fixes failures due to MST time-zone not being formatted as ""MST""
    Also sets and unsets time-zones in finally blocks
    to avoid pollution global state when tests fail
    
    See [LANG-1362](https://issues.apache.org/jira/browse/LANG-1362)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jodastephen/commons-lang date-tests

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/304.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #304
    
----
commit 0a6d43fc284b9a085d1b72ca38011187c761321e
Author: Stephen Colebourne <stephen@opengamma.com>
Date:   2017-10-27T11:56:28Z

    Fix DateUtilsTest to work reliably on Java 9
    
    Fixes failures due to MST time-zone not being formatted as ""MST""
    Also sets and unsets time-zones in finally blocks
    to avoid pollution global state when tests fail

----
",28/Oct/17 18:45;pascalschumacher;To replicated add {code}-Duser.country=GB -Duser.language=en{code} to surefire argLine.,"04/Nov/17 14:42;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/304
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionUtils.getThrowableList() is using deprecated ExceptionUtils.getCause(),LANG-1361,13111442,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,afelisatti,afelisatti,23/Oct/17 14:39,10/Nov/17 16:41,07/Apr/19 20:37,23/Oct/17 18:07,3.6,,,,3.7,,lang.exception.*,,,0,,,,,,,,"Though ExceptionUtils.getCause is deprecated it's used internally, for example in ExceptionUtils.getThrowables. 
We noticed this while running performance tests where a large number of NoSuchMethod exceptions where seen since ExceptionUtils.getCause catches them repeatedly. Unless initialised carefully, creating exceptions has the overhead of filling the stack trace which was our performance concern. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-23 18:07:00.533,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 23 18:50:18 UTC 2017,,,,,,0|i3llhr:,9223372036854775807,,,,,,,,23/Oct/17 18:07;garydgregory;In git master. Please verify and close.,23/Oct/17 18:50;afelisatti;Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add methods to ClassUtils to get various forms of class names in a null-safe manner,LANG-1360,13111075,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,garydgregory,garydgregory,20/Oct/17 19:11,10/Nov/17 16:41,07/Apr/19 20:37,23/Oct/17 18:02,,,,,3.7,,lang.*,,,0,,,,,,,,"Fill out methods ClassUtils to get various forms of class names in a null-safe manner:

- getName(Class)
- getName(Object)
- getName(Class, String)
- getName(Object, String)
- getSimpleName(Class)
- getSimpleName(Object)
- getSimpleName(Class, String)
- getSimpleName(Object, String)
- getCanonicalName(Class)
- getCanonicalName(Object)
- getCanonicalName(Class, String)
- getCanonicalName(Object, String)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-20 22:04:47.845,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 23 18:02:38 UTC 2017,,,,,,0|i3lj87:,9223372036854775807,,,,,,,,20/Oct/17 19:20;garydgregory;In git master. Looking for a code review.,20/Oct/17 22:04;kinow;Looks good to me. Unit tests included. +1,21/Oct/17 15:37;britter;This belongs to ClassUtils. [~garydgregory] can we please change that?,"21/Oct/17 16:25;garydgregory;I do not think so: the point of putting  this code in ObjectUtils is that the methods operate on _objects_, not classes (in a null safe manner.) 

Putting the code in ClassUtils implies (to me) that we operate on Classes.. ","21/Oct/17 16:55;britter;But in ClassUtils we already have:

{code:java}
String getShortCanonicalName(final Object object, final String valueIfNull)
String getShortClassName(Object object, String valueIfNull)
String getSimpleName(Object object, String valueIfNull)
{code}

So I think it should be discussed on the ML whether these methods should be deprecated and moved to ObjectUtils. I think it is okay to have them in ClassUtils, because they're dealing with classes at the end of the day and there are overloads of the same name, which take Class parameters.","21/Oct/17 18:38;garydgregory;Crud, I had looked in ClassUtils, but did not find anything, I must have looked with foggy classes! We can nuke/move all of the ObjectUtils code I added. ObjectUtils is new, I just added it.","22/Oct/17 09:06;britter;Sounds good to me, go for it!",22/Oct/17 15:31;garydgregory;In progress but might not get to finish until tonight or tomorrow. ,23/Oct/17 18:02;garydgregory;Looking for another code review...,,,,,,,,,,,,,,,,,,,,,,
org.apache.commons.lang3.time.FastDateParser should use toUpperCase(Locale),LANG-1357,13108072,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,garydgregory,garydgregory,09/Oct/17 20:17,09/Oct/17 20:33,07/Apr/19 20:37,09/Oct/17 20:33,3.6,,,,3.7,,lang.time.*,,,0,,,,,,,,The class org.apache.commons.lang3.time.FastDateParser should use {{toUpperCase(Locale)}} internally to avoid i18n issues https://garygregory.wordpress.com/2015/11/03/java-lowercase-conversion-turkey/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-09 20:22:34.253,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Oct 09 20:33:36 UTC 2017,,,,,,0|i3l1nj:,9223372036854775807,,,,,,,,"09/Oct/17 20:22;githubbot;Github user garydgregory commented on the issue:

    https://github.com/apache/commons-lang/pull/297
  
    I am splitting out the FastDateParser changes here: https://issues.apache.org/jira/browse/LANG-1357
",09/Oct/17 20:33;garydgregory;Closing: In git master.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TimeZone.getTimeZone() in FastDateParser causes resource contention,LANG-1355,13105890,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,kwboone,kwboone,28/Sep/17 22:32,10/Nov/17 16:41,07/Apr/19 20:37,10/Oct/17 17:59,3.6,,,,3.7,,lang.time.*,,,0,,,,,,,,"Under heavy load we are seeing contention in FastDateParser.parse() on calls to TimeZone.getTimeZone().  TimeZone.getTimeZone() is a synchronized static in the Oracle JVM.

Our proposed solution is to add a class TimeZoneCache containing a single method getTimeZone() which gets the requested time zone from a ConcurrentMap, and if not present, looks it up via TimeZone.getTimeZone() and caches it before returning it.

Then replace calls to TimeZone.getTimeZone() in FastDateParser ( and whereever else) to calls to TimeZoneCache.getTimeZone().  

The reason to add a separate class is because it can also be used by other applications which heavily parse or format or do other things where TimeZone is repeatedly needed.

Under extreme load we have seen an 50:1 improvement in calls to FastDateParser.parse().  This saves about a ms/call in our test environment, and reduces contention.


",Windows,,172800,172800,,0%,172800,172800,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-10-02 03:00:00.875,,"package org.apache.commons.lang3.time;

import java.util.TimeZone;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentHashMap;

/**
 * <p>TimeZoneCache is a thread-safe cache and retriever for TimeZone objects.</p>
 *
 * <p>To obtain a TimeZone, use {@link TimeZoneCache.getTimeZone(String tid).  If no instance
 * if found in the cache, an instance will be created by calling TimeZone.getTimeZone().
 * Otherwise, the instance with the matching tid will be obtained from TimeZone.getTimeZone(),
 * stored in the cache and returned.</p>
 *
 * <p>TimeZone.getTimeZone() is a synchronized static method, which can cause thread 
 * contention under high load. If you must use a large number of time formatter or parser 
 * objects, this class can be used to avoid repeated construction and synchronization 
 * blocking.</p>
 * <code>
 *     TimeZone tz = TimeZoneCache.getInstance(""UTC"");
 * </code>
 *
 * @see FastDateParser, FastDateFormatter
 */
public class TimeZoneCache {
	/* A cache of the currently known TimeZones */
	private final static ConcurrentMap<String, TimeZone> timeZoneCache = new ConcurrentHashMap<String, TimeZone>(7);
	
	public static TimeZone getTimeZone(String tid) {
		TimeZone tz = timeZoneCache.get(tid);
		if (tz == null) {
			tz = TimeZone.getTimeZone(tid);
			timeZoneCache.put(tid, tz);
		}
		return tz;
	}
}
",false,,,,,,,,,,,,,,9223372036854775807,,,Tue Oct 10 17:59:31 UTC 2017,,,,,,0|i3korz:,9223372036854775807,,,,,,,,02/Oct/17 03:00;chonton;What is the format you are using?  What is the micro-benchmark code that you are running?,"02/Oct/17 21:44;kwboone;The format we are using most often is ISO8601, but would expect to see others based on offsets from UTC/GMT.

I'm not using a microbenchmark framework but do have a small program that I used to test the variations below.  It spawns a hundred threads that repeatedly hit the calls in question and times the results a couple of ways.

This test creates higher load than what we would expect in normal use, but was good enough to give me an idea what we might experience with it, as I was able to create a situation showing the effects of the contention with this.

Note: InstantType comes from http://hapifhir.io, but is basically a data type that when copied, converts an Instant from a Date back to a string of the appropriate precision, and when constructed, parses the given string into a Date object (and saves the precision of the original string).  The copy operation was in the stack trace of the locked threads we saw in our performance testing beneath calls to FastDateParser.parse().  Note: Some code in hapifhir.io also pays a penalty for its own internal use of TimeZone.getTimeZone() (in calls to a Date Formatter), which is in part why I felt this needed to be an externally available API.

   Keith 

import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;
import java.util.Date;

import org.hl7.fhir.instance.model.InstantType;

public class TimeZoneTester implements Runnable {
	private static int done = 0;
	private static Thread t[] = null;
	private static TimeZoneTester tester[] = null;
	private static long total;
	
	long timer = 0;
	long cpuTimer = 0;
	
	public static void main(String args[]) {
		 int numThreads = args.length > 0 ? Integer.parseInt(args[0]) : 4;
		 
		 t = new Thread[numThreads];
		 tester = new TimeZoneTester[numThreads];
		 
		 // Warm it up
		 runThisStuff(numThreads);

		 // Let it rip
		 runThisStuff(numThreads);
		 long sumTimer = 0, sumCPUTimer = 0;
		 for (int i = 0; i < numThreads; i++) {
			 System.out.printf(""%6d\t%10d\t%10d\n"", i, tester[i].timer, tester[i].cpuTimer);
			 sumTimer += tester[i].timer;
			 sumCPUTimer += tester[i].cpuTimer;
		 }
		 System.out.printf(""Total\t%10d\t%10d\n"", sumTimer, sumCPUTimer);
		 System.out.printf(""Actual\t%10d\n"", total);
		 System.out.printf(""Master\t%10d\n"", currentCPUTime());
	}
	
	static void runThisStuff(int numThreads) {
		 done = numThreads;

		 // Create all the threads.
		 for (int i = 0; i < t.length; i++) {
			 t[i] = new Thread(tester[i] = new TimeZoneTester());
			 t[i].setName(""TimeZoneTester-"" + i);
		 }
		 
		 
		 total = System.nanoTime();
		 for (int i = 0; i < t.length; i++) {
			 t[i].start();
		 }
		 while (done != 0) {
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
			}
			System.out.printf(""%d threads running\n"", done);
		 }
		 total = System.nanoTime() - total;
	}
	
	public void run() {
		timer = System.nanoTime();
		InstantType i = new InstantType(new Date());
		for (int loop = 0; loop < 100000; loop++) {
			// Force use of parser
			i = i.copy();
		}
		timer = System.nanoTime() - timer;
		cpuTimer = currentCPUTime();
		synchronized (TimeZoneTester.class) {
			--done;
		}
	}
	
	private static final ThreadMXBean THREADING = ManagementFactory.getThreadMXBean();
	private static final boolean IS_THREAD_CPU_SUPPORTED = THREADING.isThreadCpuTimeSupported();
	
	public static final long currentCPUTime() {
		return IS_THREAD_CPU_SUPPORTED ? THREADING.getCurrentThreadCpuTime() : 0;
	}

}
","08/Oct/17 20:43;chonton;In the JDK7 implementation, synchronized method java.util.TimeZone.getTimeZone(String id) ultimately invokes sun.util.calendar.ZoneInfo.getZoneInfo(String id) which consults a ConcurrentHashMap for the zone corresponding with the id.  For ""custom time zone IDs"", after this call is invoked and no Olson/IANA timezone is found, the custom TimeZone instance is created and returned.  This custom TimeZone instance is never cached.

I suggest that the logic be to first check if the timezone id is a ""custom time zone IDs"".  If so, create and return the custom TimeZone instance; otherwise invoke the java.util.TimeZone.getTimeZone(String id) method.  All ""custom time zone IDs"" will not hold the synchronized section open.","09/Oct/17 02:19;githubbot;GitHub user chonton opened a pull request:

    https://github.com/apache/commons-lang/pull/296

    LANG-1355: Add FastTimeZone to decrease TimeZone.getTimezone latency

    Adding FastTimeZone to decrease latency of timezone lookups.   I'll hold this PR open for 48 hours for commons committers' comments.  Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/chonton/commons-lang LANG-1355

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/296.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #296
    
----
commit a703646e949c277c5249c87e08486d2b7a69cb34
Author: Chas Honton <chas@apache.org>
Date:   2017-10-09T01:54:17Z

    LANG-1355: Add FasTimeZone to decrease TimeZone.getTimezone latency

commit 7670979033076f354af7e4cf852709d5403ffbd4
Author: Chas Honton <chas@apache.org>
Date:   2017-10-09T02:18:01Z

    Replace all TimeZone.getTimeZone(UTC) wiht FastTimeZone.getGmtTimeZone()

----
","09/Oct/17 02:23;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/296
  
    
    [![Coverage Status](https://coveralls.io/builds/13625524/badge)](https://coveralls.io/builds/13625524)
    
    Coverage decreased (-0.01%) to 95.198% when pulling **7670979033076f354af7e4cf852709d5403ffbd4 on chonton:LANG-1355** into **00feb98f807cf44c993296052726043a90d70b7e on apache:master**.

","10/Oct/17 03:43;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/296
  
    
    [![Coverage Status](https://coveralls.io/builds/13642621/badge)](https://coveralls.io/builds/13642621)
    
    Coverage decreased (-0.01%) to 95.192% when pulling **0476df2d4276da567e5f6bbf64813e9fff0fa7d5 on chonton:LANG-1355** into **15d5503215a4cd1efc1ae6659d82194a22ebee9b on apache:master**.

","10/Oct/17 08:08;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/296
  
    Looks good imho. 👍 
","10/Oct/17 09:00;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143664742
  
    --- Diff: src/main/java/org/apache/commons/lang3/time/GmtTimeZone.java ---
    @@ -0,0 +1,103 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import java.util.Date;
    +import java.util.TimeZone;
    +
    +/**
    + * Custom timezone that contains offset from GMT.
    + *
    + * @since 3.7
    + */
    +class GmtTimeZone extends TimeZone {
    --- End diff --
    
    TimeZone is Serializabe. Do we need to add a serialVersionUID here?
","10/Oct/17 09:00;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143660909
  
    --- Diff: src/main/java/org/apache/commons/lang3/time/FastTimeZone.java ---
    @@ -0,0 +1,90 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import java.util.TimeZone;
    +import java.util.regex.Matcher;
    +import java.util.regex.Pattern;
    +
    +/**
    + * Faster methods to produce custom time zones.
    + *
    + * @since 3.7
    + */
    +public class FastTimeZone {
    +
    +    private static final TimeZone GREENWICH = new GmtTimeZone(false, 0, 0);
    +
    +    /**
    +     * Get the GMT TimeZone.
    +     * @return A TimeZone with a raw offset of zero.
    +     */
    +    public static TimeZone getGmtTimeZone() {
    +        return GREENWICH;
    +    }
    +
    +    /**
    +     * Get a TimeZone, looking first for GMT custom ids, then falling back to Olson ids.
    +     * A GMT custom id has an optional prefix of GMT, followed by sign, hours digit(s), optional
    +     * colon(':'), and optional minutes digits: <em>[GMT] (+|-) Hours [[:] Minutes]</em>
    +     *
    +     * @param id A GMT custom id or Olsen id
    +     * @return A timezone
    +     */
    +    public static TimeZone getTimeZone(String id) {
    +        TimeZone tz = getGmtTimeZone(id);
    +        if (tz != null) {
    +            return tz;
    +        }
    +        return TimeZone.getTimeZone(id);
    +    }
    +
    +    private static final Pattern GMT_PATTERN = Pattern.compile(""^(?:(?i)GMT)?([+-])?(\\d\\d?)?(:?(\\d\\d?))?$"");
    +
    +    /**
    +     * Get a TimeZone with GMT offsets.  A GMT offset must be either 'Z' or match
    +     * (GMT)? hh?(:?mm?)?, where h and m are digits representing hours and minutes.
    --- End diff --
    
    Maybe instead of
    
    > A GMT offset must be either 'Z' or match (GMT)? hh?(:?mm?)?
    
    It should be
    
    > A GMT offset must be 'Z', or 'UTC', or match (GMT)? hh?(:?mm?)?
    
    ?
    

","10/Oct/17 09:00;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143663160
  
    --- Diff: src/main/java/org/apache/commons/lang3/time/FastTimeZone.java ---
    @@ -0,0 +1,90 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import java.util.TimeZone;
    +import java.util.regex.Matcher;
    +import java.util.regex.Pattern;
    +
    +/**
    + * Faster methods to produce custom time zones.
    + *
    + * @since 3.7
    + */
    +public class FastTimeZone {
    --- End diff --
    
    Do we need a private constructor to prevent instantiation of FastTimeZone? It seems to contain only static methods. Not sure if that's the intended design. But noticed it while looking at the cobertura report (which is looking great).
","10/Oct/17 09:00;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143667156
  
    --- Diff: src/test/java/org/apache/commons/lang3/time/GmtTimeZoneTest.java ---
    @@ -0,0 +1,80 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +/**
    + * Tests for GmtTimeZone
    + */
    +public class GmtTimeZoneTest {
    +
    +    @Test(expected = IllegalArgumentException.class)
    +    public void hoursOutOfRange() {
    +        new GmtTimeZone(false, 24, 0);
    +    }
    +
    +    @Test
    +    public void hoursInRange() {
    +        Assert.assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());
    +    }
    +
    +    @Test(expected = IllegalArgumentException.class)
    +    public void minutesOutOfRange() {
    +        Assert.assertEquals(0, new GmtTimeZone(false, 60, 0));
    --- End diff --
    
    This test is wrong. Its title states that the minutes will be out of range, but the hour is actually out of range (60). Minute is 0, but never gets checked.
","10/Oct/17 09:00;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143667312
  
    --- Diff: src/test/java/org/apache/commons/lang3/time/GmtTimeZoneTest.java ---
    @@ -0,0 +1,80 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +/**
    + * Tests for GmtTimeZone
    + */
    +public class GmtTimeZoneTest {
    +
    +    @Test(expected = IllegalArgumentException.class)
    +    public void hoursOutOfRange() {
    +        new GmtTimeZone(false, 24, 0);
    +    }
    +
    +    @Test
    +    public void hoursInRange() {
    +        Assert.assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());
    +    }
    +
    +    @Test(expected = IllegalArgumentException.class)
    +    public void minutesOutOfRange() {
    +        Assert.assertEquals(0, new GmtTimeZone(false, 60, 0));
    +    }
    +
    +    @Test
    +    public void minutesInRange() {
    +        Assert.assertEquals(59 * 60 * 1000, new GmtTimeZone(false, 0, 59).getRawOffset());
    +    }
    +
    +    @Test
    +    public void getOffset() {
    +        Assert.assertEquals(0, new GmtTimeZone(false, 0, 0).getOffset(234304));
    +    }
    +
    +    @Test(expected = UnsupportedOperationException.class)
    +    public void setRawOffset() {
    +        new GmtTimeZone(false, 0, 0).setRawOffset(0);
    +    }
    +
    +    @Test
    +    public void getRawOffset() {
    +        Assert.assertEquals(0, new GmtTimeZone(false, 0, 0).getRawOffset());
    +    }
    +
    +    @Test
    +    public void getID() {
    +        Assert.assertEquals(""GMT+00:00"", new GmtTimeZone(false, 0, 0).getID());
    +        Assert.assertEquals(""GMT+01:02"", new GmtTimeZone(false, 1, 2).getID());
    +        Assert.assertEquals(""GMT+11:22"", new GmtTimeZone(false, 11, 22).getID());
    +        Assert.assertEquals(""GMT-01:02"", new GmtTimeZone(true, 1, 2).getID());
    +        Assert.assertEquals(""GMT-11:22"", new GmtTimeZone(true, 11, 22).getID());
    +    }
    +
    +    @Test
    +    public void useDaylightTime() {
    +        Assert.assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
    +    }
    +
    +    @Test
    +    public void inDaylightTime() {
    +        Assert.assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
    +    }
    --- End diff --
    
    Maybe add something like
    
    ```
    @Test
        public void testToString() {
            Assert.assertEquals(""[GmtTimeZone id=\""GMT+23:00\"",offset=82800000]"", new GmtTimeZone(false, 23, 0).toString());
        }
    
        @Test
        public void testGetOffset() {
            Assert.assertEquals(82800000, new GmtTimeZone(false, 23, 0).getOffset(1, 1, 1, 1, 1, 1));
        }
    ```
    
    With these two tests we reach 100% for GmtTimeZone.
","10/Oct/17 14:41;githubbot;Github user chonton commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143748823
  
    --- Diff: src/main/java/org/apache/commons/lang3/time/FastTimeZone.java ---
    @@ -0,0 +1,90 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import java.util.TimeZone;
    +import java.util.regex.Matcher;
    +import java.util.regex.Pattern;
    +
    +/**
    + * Faster methods to produce custom time zones.
    + *
    + * @since 3.7
    + */
    +public class FastTimeZone {
    --- End diff --
    
    done
","10/Oct/17 14:41;githubbot;Github user chonton commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143748869
  
    --- Diff: src/main/java/org/apache/commons/lang3/time/FastTimeZone.java ---
    @@ -0,0 +1,90 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import java.util.TimeZone;
    +import java.util.regex.Matcher;
    +import java.util.regex.Pattern;
    +
    +/**
    + * Faster methods to produce custom time zones.
    + *
    + * @since 3.7
    + */
    +public class FastTimeZone {
    +
    +    private static final TimeZone GREENWICH = new GmtTimeZone(false, 0, 0);
    +
    +    /**
    +     * Get the GMT TimeZone.
    +     * @return A TimeZone with a raw offset of zero.
    +     */
    +    public static TimeZone getGmtTimeZone() {
    +        return GREENWICH;
    +    }
    +
    +    /**
    +     * Get a TimeZone, looking first for GMT custom ids, then falling back to Olson ids.
    +     * A GMT custom id has an optional prefix of GMT, followed by sign, hours digit(s), optional
    +     * colon(':'), and optional minutes digits: <em>[GMT] (+|-) Hours [[:] Minutes]</em>
    +     *
    +     * @param id A GMT custom id or Olsen id
    +     * @return A timezone
    +     */
    +    public static TimeZone getTimeZone(String id) {
    +        TimeZone tz = getGmtTimeZone(id);
    +        if (tz != null) {
    +            return tz;
    +        }
    +        return TimeZone.getTimeZone(id);
    +    }
    +
    +    private static final Pattern GMT_PATTERN = Pattern.compile(""^(?:(?i)GMT)?([+-])?(\\d\\d?)?(:?(\\d\\d?))?$"");
    +
    +    /**
    +     * Get a TimeZone with GMT offsets.  A GMT offset must be either 'Z' or match
    +     * (GMT)? hh?(:?mm?)?, where h and m are digits representing hours and minutes.
    --- End diff --
    
    done
","10/Oct/17 14:41;githubbot;Github user chonton commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143748954
  
    --- Diff: src/main/java/org/apache/commons/lang3/time/GmtTimeZone.java ---
    @@ -0,0 +1,103 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import java.util.Date;
    +import java.util.TimeZone;
    +
    +/**
    + * Custom timezone that contains offset from GMT.
    + *
    + * @since 3.7
    + */
    +class GmtTimeZone extends TimeZone {
    --- End diff --
    
    great catch! done
","10/Oct/17 14:42;githubbot;Github user chonton commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143749105
  
    --- Diff: src/test/java/org/apache/commons/lang3/time/GmtTimeZoneTest.java ---
    @@ -0,0 +1,80 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +/**
    + * Tests for GmtTimeZone
    + */
    +public class GmtTimeZoneTest {
    +
    +    @Test(expected = IllegalArgumentException.class)
    +    public void hoursOutOfRange() {
    +        new GmtTimeZone(false, 24, 0);
    +    }
    +
    +    @Test
    +    public void hoursInRange() {
    +        Assert.assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());
    +    }
    +
    +    @Test(expected = IllegalArgumentException.class)
    +    public void minutesOutOfRange() {
    +        Assert.assertEquals(0, new GmtTimeZone(false, 60, 0));
    --- End diff --
    
    great catch! thanks.
    done.
","10/Oct/17 14:42;githubbot;Github user chonton commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143749142
  
    --- Diff: src/test/java/org/apache/commons/lang3/time/GmtTimeZoneTest.java ---
    @@ -0,0 +1,80 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import org.junit.Assert;
    +import org.junit.Test;
    +
    +/**
    + * Tests for GmtTimeZone
    + */
    +public class GmtTimeZoneTest {
    +
    +    @Test(expected = IllegalArgumentException.class)
    +    public void hoursOutOfRange() {
    +        new GmtTimeZone(false, 24, 0);
    +    }
    +
    +    @Test
    +    public void hoursInRange() {
    +        Assert.assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());
    +    }
    +
    +    @Test(expected = IllegalArgumentException.class)
    +    public void minutesOutOfRange() {
    +        Assert.assertEquals(0, new GmtTimeZone(false, 60, 0));
    +    }
    +
    +    @Test
    +    public void minutesInRange() {
    +        Assert.assertEquals(59 * 60 * 1000, new GmtTimeZone(false, 0, 59).getRawOffset());
    +    }
    +
    +    @Test
    +    public void getOffset() {
    +        Assert.assertEquals(0, new GmtTimeZone(false, 0, 0).getOffset(234304));
    +    }
    +
    +    @Test(expected = UnsupportedOperationException.class)
    +    public void setRawOffset() {
    +        new GmtTimeZone(false, 0, 0).setRawOffset(0);
    +    }
    +
    +    @Test
    +    public void getRawOffset() {
    +        Assert.assertEquals(0, new GmtTimeZone(false, 0, 0).getRawOffset());
    +    }
    +
    +    @Test
    +    public void getID() {
    +        Assert.assertEquals(""GMT+00:00"", new GmtTimeZone(false, 0, 0).getID());
    +        Assert.assertEquals(""GMT+01:02"", new GmtTimeZone(false, 1, 2).getID());
    +        Assert.assertEquals(""GMT+11:22"", new GmtTimeZone(false, 11, 22).getID());
    +        Assert.assertEquals(""GMT-01:02"", new GmtTimeZone(true, 1, 2).getID());
    +        Assert.assertEquals(""GMT-11:22"", new GmtTimeZone(true, 11, 22).getID());
    +    }
    +
    +    @Test
    +    public void useDaylightTime() {
    +        Assert.assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
    +    }
    +
    +    @Test
    +    public void inDaylightTime() {
    +        Assert.assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
    +    }
    --- End diff --
    
    done
","10/Oct/17 14:45;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/296
  
    
    [![Coverage Status](https://coveralls.io/builds/13650527/badge)](https://coveralls.io/builds/13650527)
    
    Coverage decreased (-0.007%) to 95.199% when pulling **db5c0a208e26bbae13d1bd4700049e330569aa3b on chonton:LANG-1355** into **15d5503215a4cd1efc1ae6659d82194a22ebee9b on apache:master**.

","10/Oct/17 16:26;githubbot;Github user PascalSchumacher commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143781416
  
    --- Diff: src/main/java/org/apache/commons/lang3/time/FastTimeZone.java ---
    @@ -39,10 +43,11 @@ public static TimeZone getGmtTimeZone() {
     
         /**
          * Get a TimeZone, looking first for GMT custom ids, then falling back to Olson ids.
    -     * A GMT custom id has an optional prefix of GMT, followed by sign, hours digit(s), optional
    -     * colon(':'), and optional minutes digits: <em>[GMT] (+|-) Hours [[:] Minutes]</em>
    +     * A GMT custom id can be 'Z', or 'UTC', or has an optional prefix of GMT,
    +     * followed by sign, hours digit(s), optional colon(':'), and optional minutes digits.
    +     * i.e. <em>[GMT] (+|-) Hours [[:] Minutes]</em>
          *
    -     * @param id A GMT custom id or Olsen id
    +     * @param id A GMT custom id (or Olson id
    --- End diff --
    
    Nitpick: either a superfluous `(` or a missing `)`
","10/Oct/17 17:54;githubbot;Github user garydgregory commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/296#discussion_r143804862
  
    --- Diff: src/main/java/org/apache/commons/lang3/time/FastTimeZone.java ---
    @@ -0,0 +1,95 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements.  See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the ""License""); you may not use this file except in compliance with
    + * the License.  You may obtain a copy of the License at
    + *
    + *      http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an ""AS IS"" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.commons.lang3.time;
    +
    +import java.util.TimeZone;
    +import java.util.regex.Matcher;
    +import java.util.regex.Pattern;
    +
    +/**
    + * Faster methods to produce custom time zones.
    + *
    + * @since 3.7
    + */
    +public class FastTimeZone {
    +
    +    private static final TimeZone GREENWICH = new GmtTimeZone(false, 0, 0);
    +
    +    // do not instantiate
    +    private FastTimeZone() {
    +    }
    +
    +    /**
    +     * Get the GMT TimeZone.
    +     * @return A TimeZone with a raw offset of zero.
    +     */
    +    public static TimeZone getGmtTimeZone() {
    +        return GREENWICH;
    +    }
    +
    +    /**
    +     * Get a TimeZone, looking first for GMT custom ids, then falling back to Olson ids.
    --- End diff --
    
    In future patches, you can use the active voice for Javadocs: ""Gets a TimeZone..."" instead of ""Get..."". :-)
","10/Oct/17 17:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/296
","10/Oct/17 17:59;garydgregory;In git master, please verify and close.",,,,,,,,,
NumberUtils.isNumber bug,LANG-1353,13102489,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Not A Bug,,yusw,yusw,15/Sep/17 07:07,19/Sep/17 14:32,07/Apr/19 20:37,15/Sep/17 23:05,3.6,,,,3.7,,lang.math.*,,,0,,,,,,,,"
hi,I used to NumberUtils.isNumber()[version:3.6] find this error, this error is mainly caused by method isCreatable() in the 723 line of code。
See below for details:

            String str = ""0927"";
            System.out.println(NumberUtils.isNumber(str));
            {color:red}//result:false{color}

            String str1 = ""9027"";
            System.out.println(NumberUtils.isNumber(str1));
            //result:true

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-09-15 23:05:09.553,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Sep 19 14:32:39 UTC 2017,,,,,,0|i3k3x3:,9223372036854775807,,,,,,,,"15/Sep/17 23:05;sebb@apache.org;The leading 0 means octal.

09 is not valid octal","19/Sep/17 13:22;yusw;This is a trap, if you do not see the specific implementation of the method, who do not know will be treated as octal. I do not think it's a good practice.","19/Sep/17 14:32;sebb@apache.org;The behaviour is clearly explained in the Javadoc:

http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/math/NumberUtils.html#isNumber-java.lang.String-",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ConstructorUtils.invokeConstructor(Class, Object...) regression",LANG-1350,13094842,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bjkail,bjkail,15/Aug/17 19:25,10/Nov/17 16:41,07/Apr/19 20:37,21/Aug/17 15:29,3.5,3.6,,,3.7,,lang.reflect.*,,,0,,,,,,,,"As of LANG-1115, the following test program no longer works:
{noformat}
public class ConstructorUtilsTest {
	@Test
	public void test() throws Exception {
		ConstructorUtils.invokeConstructor(TestCtor.class, new A() {}, new B[0]);
	}

	public static class TestCtor {
		public TestCtor(A a, B... b) {}
	}

	public static class A {}
	public static class B {}
}
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-19 18:10:54.981,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Aug 26 12:59:37 UTC 2017,,,,,,0|i3itjz:,9223372036854775807,,,,,,,,19/Aug/17 18:10;garydgregory;Patches welcome ;-),"20/Aug/17 18:26;githubbot;GitHub user bjkail opened a pull request:

    https://github.com/apache/commons-lang/pull/283

    LANG-1350: Fix varargs array invokeConstructor

    If ConstructorUtils.invokeConstructor(Class, Object...) is invoked with an array of arguments whose classes do not match a constructor exactly (for example, a subclass is used) and an array is used for a varargs parameter, then the array is not matched to the varargs parameter type.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bjkail/commons-lang LANG-1350

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/283.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #283
    
----
commit a54613f4c8774c34a9942b3ffe93d803fcc452cd
Author: Brett Kail <bjkail@gmail.com>
Date:   2017-08-20T18:25:41Z

    LANG-1350: Fix varargs array invokeConstructor
    
    If ConstructorUtils.invokeConstructor(Class, Object...) is invoked with
    an array of arguments whose classes do not match a constructor exactly
    (for example, a subclass is used) and an array is used for a varargs
    parameter, then the array is not matched to the varargs parameter type.

----
","20/Aug/17 18:34;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/283
  
    
    [![Coverage Status](https://coveralls.io/builds/12913326/badge)](https://coveralls.io/builds/12913326)
    
    Coverage increased (+0.01%) to 95.194% when pulling **a54613f4c8774c34a9942b3ffe93d803fcc452cd on bjkail:LANG-1350** into **05d9518038ae8d2ac9f11b91b731f47b909a9bad on apache:master**.

","20/Aug/17 18:34;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/283
  
    
    [![Coverage Status](https://coveralls.io/builds/12913326/badge)](https://coveralls.io/builds/12913326)
    
    Coverage increased (+0.01%) to 95.194% when pulling **a54613f4c8774c34a9942b3ffe93d803fcc452cd on bjkail:LANG-1350** into **05d9518038ae8d2ac9f11b91b731f47b909a9bad on apache:master**.

",21/Aug/17 15:29;garydgregory;In Git master. Please verify and fix.,"26/Aug/17 10:21;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/283
  
    Thanks for the pull request! :+1: 
    
    It was merged by @garydgregory in https://github.com/apache/commons-lang/commit/cc94767e7eabdfcf9d1cab1d8d1d8556864394c6
    
    It would be nice if you could close the pull request.
    
    Thanks!
","26/Aug/17 12:59;githubbot;Github user bjkail closed the pull request at:

    https://github.com/apache/commons-lang/pull/283
",,,,,,,,,,,,,,,,,,,,,,,,
EqualsBuilder#isRegistered: swappedPair construction bug,LANG-1349,13094318,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,13/Aug/17 10:40,10/Nov/17 16:41,07/Apr/19 20:37,08/Sep/17 16:29,3.6,,,,3.7,,lang.builder.*,,,0,,,,,,,,"See

https://stackoverflow.com/questions/45603317/org-apache-commons-lang3-builder-equalsbuilder

and

https://github.com/apache/commons-lang/pull/282

for details.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-13 10:41:46.952,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 13 10:41:46 UTC 2017,,,,,,0|i3iqcn:,9223372036854775807,,,,,,,,"13/Aug/17 10:41;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/282
  
    created https://issues.apache.org/jira/browse/LANG-1349 to track this
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StackOverflowError on TypeUtils.toString(...) for a generic return type of Enum.valueOf,LANG-1348,13093496,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,dimitrovchi,dimitrovchi,09/Aug/17 14:31,10/Nov/17 16:41,07/Apr/19 20:37,07/Oct/17 09:57,3.6,,,,3.7,,lang.reflect.*,,,0,,,,,,,,"The following code
{code:java}
final Method method = Enum.class.getMethod(""valueOf"", Class.class, String.class);
final String typeText = TypeUtils.toString(method.getGenericReturnType());
{code}

throws the following

{code:none}
Exception in thread ""main"" java.lang.StackOverflowError
	at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.getRawType(ParameterizedTypeImpl.java:126)
	at sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.getRawType(ParameterizedTypeImpl.java:40)
	at org.apache.commons.lang3.reflect.TypeUtils.parameterizedTypeToString(TypeUtils.java:1790)
	at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1666)
	at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:1846)
	at org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(TypeUtils.java:1775)
	at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1672)
	at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:1846)
	at org.apache.commons.lang3.reflect.TypeUtils.parameterizedTypeToString(TypeUtils.java:1803)
	at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1666)
	at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:1846)
	at org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(TypeUtils.java:1775)
	at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1672)
	at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:1846)
	at org.apache.commons.lang3.reflect.TypeUtils.parameterizedTypeToString(TypeUtils.java:1803)
	at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1666)
	at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:1846)
	at org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(TypeUtils.java:1775)
	at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1672)
	at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:1846)
	at org.apache.commons.lang3.reflect.TypeUtils.parameterizedTypeToString(TypeUtils.java:1803)
	at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1666)
	at org.apache.commons.lang3.reflect.TypeUtils.appendAllTo(TypeUtils.java:1846)
	at org.apache.commons.lang3.reflect.TypeUtils.typeVariableToString(TypeUtils.java:1775)
	at org.apache.commons.lang3.reflect.TypeUtils.toString(TypeUtils.java:1672)
...
{code}",Java 8 update 144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-19 18:14:07.632,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 07 09:56:29 UTC 2017,,,,,,0|i3ilhj:,9223372036854775807,,,,,,,,19/Aug/17 18:14;garydgregory;Patches welcome ;-),"24/Sep/17 16:25;MarkDacek;I started poking into this. It's a sweet circular call. 
You wind up at TypeUtils, Line 1672. This calls typeVariableToString, into the if block.
This, line 1775, calls the appendToAll method. You will hit line 1846... which calls the same toString function that you called in the first place. 

I don't have a remediation plan. But maybe that will help!",28/Sep/17 20:59;mbusso;I'm working on a patch trying to stop the circular call.,"29/Sep/17 00:23;githubbot;GitHub user mbusso opened a pull request:

    https://github.com/apache/commons-lang/pull/291

    LANG-1348 - StackOverflowError on TypeUtils.toString

    StackOverflowError on TypeUtils.toString(...) for a generic return type of Enum.valueOf

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mbusso/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/291.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #291
    
----
commit 1ddc70df56a81a94e4b11813c6da6f107c2ebb0c
Author: mbusso <matiassbb@gmail.com>
Date:   2017-09-29T00:17:55Z

    LANG-1348 - StackOverflowError on TypeUtils.toString(...) for a generic return type of Enum.valueOf

----
","29/Sep/17 00:51;githubbot;Github user mbusso closed the pull request at:

    https://github.com/apache/commons-lang/pull/291
","29/Sep/17 00:56;githubbot;GitHub user mbusso opened a pull request:

    https://github.com/apache/commons-lang/pull/292

    LANG-1348 - StackOverflowError on TypeUtils.toString

    StackOverflowError on TypeUtils.toString(...) for a generic return type of Enum.valueOf

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mbusso/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/292.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #292
    
----
commit 39df422dd3f36be889d6e174a94a24449373de6d
Author: mbusso <matiassbb@gmail.com>
Date:   2017-09-29T00:51:24Z

    LANG-1348 - StackOverflowError on TypeUtils.toString(...) for a generic return type of Enum.valueOf

----
","29/Sep/17 01:00;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/292
  
    
    [![Coverage Status](https://coveralls.io/builds/13489028/badge)](https://coveralls.io/builds/13489028)
    
    Coverage increased (+0.01%) to 95.213% when pulling **39df422dd3f36be889d6e174a94a24449373de6d on mbusso:master** into **1406f2a4f2cda80a05b8dc2506ec9d0a25bdf2db on apache:master**.

","07/Oct/17 09:55;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/292
","07/Oct/17 09:56;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/292
  
    Great pull request! Thanks! :+1: 
    
    merged in https://github.com/apache/commons-lang/commit/cc6beb2d05347fba64d933906ae2b712b1a43302
",,,,,,,,,,,,,,,,,,,,,,
java.lang.NoClassDefFoundError: java.util.Objects on android < API 19,LANG-1347,13093079,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,vlavruk,vlavruk,08/Aug/17 06:40,08/Aug/17 09:08,07/Apr/19 20:37,08/Aug/17 09:08,3.6,,,,,,lang.tuple.*,,,0,,,,,,,,"The app is throwing a runtime error, as I understand, because the java.util.Objects is not available on Android below API 19.


{code:java}
         AndroidRuntime  E  FATAL EXCEPTION: main
                         E  java.lang.NoClassDefFoundError: java.util.Objects
                         E      at org.apache.commons.lang3.tuple.Pair.equals(Pair.java:134)
{code}
",Android API level below 19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-08-08 09:08:08.475,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 08 09:08:08 UTC 2017,,,,,,0|i3iixb:,9223372036854775807,,,,,,,,"08/Aug/17 09:08;britter;Commons Lang requires Java 7, which is not available on Android.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#abbreviate breaks up surrogate pairs,LANG-1343,13083411,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,dstrecker@web.de,dstrecker@web.de,29/Jun/17 09:44,29/Jun/17 09:44,07/Apr/19 20:37,,3.6,,,,,,lang.*,,,0,,,,,,,,"If the last char in the remaining substring is the first char of a surrogate pair, the resulting string has an illegal surrogate pair with the second char of the surrogate pair being the first char of the ellipsis.


{code:java}
StringUtils.abbreviate(""\uD83D\uDCA9\uD83D\uDCA9\uD83D\uDCA9"", 4); // returns ""\uD83D...""
{code}

In my case this breaks further along when the string is transformed to UTF-8 for a SOAP request.

Should this at least be mentioned in the Javadoc?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2017-06-29 09:44:54.0,,,,,,0|i3gvxj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaVersion is not consistent with JEP-223,LANG-1342,13082937,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,sesuncedu,sesuncedu,27/Jun/17 20:47,27/Jun/17 21:22,07/Apr/19 20:37,,3.6,,,,,,lang.*,,,1,,,,,,,,"[JEP 223: New Version-String Syntax|http://openjdk.java.net/jeps/223] introduces a new syntax for version strings. 
This syntax is sort-of not incompatible with JavaVersion in 3.5, but this is likely to change as soon as someone finds a bug in JDK 9 after it's released.  There is a third specified version number component for security releases. Unlike the rest of the full version string, this component is significant for ordering, and cannot reliably be mapped to float. 

JEP 223 defines some regular expressions.  It also defines an api class (java.lang.Runtime.Version).  This class can't be used directly (since it's new with JDK-9), and the  API can't be directly emulated, as it requires java.lang.Optional.  However, it's not rocket science  (it is however regular expressions, so now you have problems 2.0).    

I'll take a crack at a class implementing JEP-223 Versions and try to get them to play with JavaVersion.  

The existing mapping to float is unsuited to minor versions, so there has to be some new hackery  for java 9 even for two components.  ( JDK 9.11 should be >  JDK 9.2 )

Since there's no java minor releases yet, there's a bit of freedom.  If the range of minor and patch versions is restricted to values between 0 and 99 there should be a way to make things work. 

Ideally the floaty stuff can be deprecated for removal before that matters. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Jun 27 21:22:18 UTC 2017,,,,,,0|i3gt0f:,9223372036854775807,,,,,,,,"27/Jun/17 21:22;sesuncedu;Of course, JEP 223 is a little non-semantic-versiony on the semantics of specification.version .  A minor version may include non-breaking api changes from MR of specifications, but those versions aren't specification versions.


{panel:title=Minor}
$MINOR --- The minor version number, incremented for a minor update release that may contain compatible bug fixes, revisions to standard APIs mandated by a Maintenance Release of the relevant Platform Specification, and implementation features outside the scope of that Specification such as new JDK-specific APIs, additional service providers, new garbage collectors, and ports to new hardware architectures.

{panel}


*Major (GA)*
{noformat}
  java.version                    1.9.0         9
  java.runtime.version            1.9.0-b100    9+100
  java.vm.version                 1.9.0-b100    9+100
  java.specification.version      1.9           9
  java.vm.specification.version   1.9           9
{noformat}

*Minor #1 (GA)*
{noformat}
  java.version                    1.9.0_20      9.1.2
  java.runtime.version            1.9.0_20-b62  9.1.2+62
  java.vm.version                 1.9.0_20-b62  9.1.2+62
  java.specification.version      1.9           9
  java.vm.specification.version   1.9           9
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
equalsBuilder.appendSuper() has incorrect behavior if the object you call equals() on is a direct supertype of Object,LANG-1341,13082158,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,KBinswanger,KBinswanger,23/Jun/17 15:39,20/Aug/18 17:22,07/Apr/19 20:37,,,,,,,,,,,0,,,,,,,,"If you use EqualsBuilder.appendSuper(super.equals(Object)) on an Object whose direct supertype is Object, it will succeed if and only if the two references are the same (because that's what Object.equals does).

Reading it out loud, this is obvious, but I think the Javadoc for EqualsBuilder encourages you to make this mistake. In particular, here's some text in the summary of the Javadoc:
{quote}Typical use for the code is as follows:{quote}
{code}
 public boolean equals(Object obj) {
   if (obj == null) { return false; }
   if (obj == this) { return true; }
   if (obj.getClass() != getClass()) {
     return false;
   }
   MyClass rhs = (MyClass) obj;
   return new EqualsBuilder()
                 .appendSuper(super.equals(obj))
                 .append(field1, rhs.field1)
                 .append(field2, rhs.field2)
                 .append(field3, rhs.field3)
                 .isEquals();
  }{code}

There's also no mention of this in the javadocs for the appendSuper() method itself.

My suggestion is to fix the example at the beginning. The way HashCodeBuilder does this, which I think is the best, is to leave appendSuper out of the example and adds this line after: {quote}If required, the superclass hashCode() can be added using appendSuper(int).{quote}


For completeness, here's a snippet of code that illustrates this problem.
{code}
public class Thing {
    public String text;

    @Override
    public boolean equals(final Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (other.getClass() != getClass()) {
            return false;
        }
        final Thing thing = (Thing) other;
        return new EqualsBuilder()
                .appendSuper(super.equals(other))
                .append(text, thing.text)
                .isEquals();
    }
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-24 17:00:31.232,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Aug 20 17:22:07 UTC 2018,,,,,,0|i3go7j:,9223372036854775807,,,,,,,,24/Jun/17 17:00;britter;Patches welcome!,"20/Aug/18 09:23;githubbot;GitHub user swingfly opened a pull request:

    https://github.com/apache/commons-lang/pull/343

    LANG-1341 update java doc to clarify use case of appendSuper()

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/swingfly/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/343.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #343
    
----
commit c70b9bd9a98cde2f768c3b0894ec3b4ac63eab99
Author: jqiao <johnson.qiao@...>
Date:   2018-08-20T09:16:04Z

    LANG-1341 update java doc

----
","20/Aug/18 09:42;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/343
  
    
    [![Coverage Status](https://coveralls.io/builds/18566083/badge)](https://coveralls.io/builds/18566083)
    
    Coverage remained the same at 95.25% when pulling **c70b9bd9a98cde2f768c3b0894ec3b4ac63eab99 on swingfly:master** into **8f88799d4774c7c9f4be03d84b97ff3301e64479 on apache:master**.

","20/Aug/18 17:22;githubbot;Github user britter commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/343#discussion_r211342005
  
    --- Diff: src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java ---
    @@ -58,14 +58,17 @@
      *   }
      *   MyClass rhs = (MyClass) obj;
      *   return new EqualsBuilder()
    - *                 .appendSuper(super.equals(obj))
      *                 .append(field1, rhs.field1)
      *                 .append(field2, rhs.field2)
      *                 .append(field3, rhs.field3)
      *                 .isEquals();
      *  }
      * </pre>
      *
    + * <p>
    + * If required, the superclass <code>appendSuper()</code> can be added using {@link #appendSuper}.
    + * </p>
    --- End diff --
    
    The issues also suggested to add some documentation to `appendSuper(boolean)` making clear the implications of calling `super.equals(object)` when the class is a direct subclass ob `java.lang.Object`. I think we should add this.
","20/Aug/18 17:22;githubbot;Github user britter commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/343#discussion_r211341588
  
    --- Diff: src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java ---
    @@ -58,14 +58,17 @@
      *   }
      *   MyClass rhs = (MyClass) obj;
      *   return new EqualsBuilder()
    - *                 .appendSuper(super.equals(obj))
      *                 .append(field1, rhs.field1)
      *                 .append(field2, rhs.field2)
      *                 .append(field3, rhs.field3)
      *                 .isEquals();
      *  }
      * </pre>
      *
    + * <p>
    + * If required, the superclass <code>appendSuper()</code> can be added using {@link #appendSuper}.
    --- End diff --
    
    Better use a JavaDoc Link here: `{@link #appendSuper(boolean)}`
","20/Aug/18 17:22;githubbot;Github user britter commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/343#discussion_r211340995
  
    --- Diff: src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java ---
    @@ -25,10 +29,6 @@
     import java.util.List;
     import java.util.Set;
     
    -import org.apache.commons.lang3.ArrayUtils;
    -import org.apache.commons.lang3.ClassUtils;
    -import org.apache.commons.lang3.tuple.Pair;
    -
    --- End diff --
    
    Please don't reorganize imports
",,,,,,,,,,,,,,,,,,,,,,,,,
Fix test failures in IBM JDK 8 for ToStringBuilderTest,LANG-1337,13077642,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,kinow,kinow,kinow,06/Jun/17 11:37,12/Jun/17 12:04,07/Apr/19 20:37,07/Jun/17 07:58,3.5,,,,3.6,,lang.*,,,0,ibm,ibm-jdk,test,,,,,"From the 3.6 thread RC2. We had issues in the release. Two tests failed. One of these tests happened on IBM JDK 8, and was related to time zones. Gary Gregory quickly pointed that the very latest IBM JDK 8 released did not had this issue.

Indeed, I grabbed a JDK 8 from IBM and had this issue, and then after looking for the latest version, I had only one test failing. This test in question was ToStringBuilderTest#testReflectionHierarchyArrayList.

Debugging the test in Eclipse, with the JDK pointing to IBM JDK 8 (and taking care to not let the Eclipse maven integration change it), there is a part of the code that receives an ArrayList object to create a String with reflection.

In Oracle JDK 7, the object contains the default 10 empty positions, and thus the generated String is.

{noformat}
java.util.ArrayList@761a4a3d[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]
{noformat}

But with IBM JDK 8, the ArrayList is empty, nada, and then I get the following in the Eclipse debugger.

{noformat}
java.util.ArrayList@761a4a3d[elementData={},size=0,modCount=0]
{noformat}

The test is - as commented in LANG-727 - a bit flaky. However, the expected string assumes ArrayList will have an initial 10 null values. So the pull request in this issue simply creates an ArrayList with 10 initial capacity :-) a naïve approach, but that I believe fixes this test.

The changes in the pull request linked to this issue have all tests passing with the following set-ups:

{noformat}
Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T05:41:47+13:00)
Maven home: /opt/maven
Java version: 1.7.0_80, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""4.4.0-78-generic"", arch: ""amd64"", family: ""unix""
---
java version ""1.7.0_80""
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)

Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T05:41:47+13:00)
Maven home: /opt/maven
Java version: 1.8.0_131, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""4.4.0-78-generic"", arch: ""amd64"", family: ""unix""
---
java version ""1.8.0_131""
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)

Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T05:41:47+13:00)
Maven home: /opt/maven
Java version: 1.8.0, vendor: IBM Corporation
Java home: /home/kinow/Development/java/ibm-java-x86_64-80/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""4.4.0-78-generic"", arch: ""amd64"", family: ""unix""
---
java version ""1.8.0""
Java(TM) SE Runtime Environment (build pxa6480sr4fp6-20170518_02(SR4 FP6))
IBM J9 VM (build 2.8, JRE 1.8.0 Linux amd64-64 Compressed References 20170516_348050 (JIT enabled, AOT enabled)
J9VM - R28_20170516_1905_B348050
JIT  - tr.r14.java_20170516_348050
GC   - R28_20170516_1905_B348050_CMPRSS
J9CL - 20170516_348050)
JCL - 20170516_01 based on Oracle jdk8u131-b11
{noformat}","java version ""1.8.0""
Java(TM) SE Runtime Environment (build pxa6480sr4fp6-20170518_02(SR4 FP6))
IBM J9 VM (build 2.8, JRE 1.8.0 Linux amd64-64 Compressed References 20170516_348050 (JIT enabled, AOT enabled)
J9VM - R28_20170516_1905_B348050
JIT  - tr.r14.java_20170516_348050
GC   - R28_20170516_1905_B348050_CMPRSS
J9CL - 20170516_348050)
JCL - 20170516_01 based on Oracle jdk8u131-b11

Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T05:41:47+13:00)
Maven home: /opt/maven
Java version: 1.8.0, vendor: IBM Corporation
Java home: /home/kinow/Development/java/ibm-java-x86_64-80/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""4.4.0-78-generic"", arch: ""amd64"", family: ""unix""

git sha 551101299da7f75ea5478db1a6bc194963e0ac34",,,,,,,,,,,,,,,LANG-727,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-06 11:43:26.714,,,false,,,,,Patch,,,,,,,,,9223372036854775807,,,Wed Jun 07 07:58:24 UTC 2017,,,,,,0|i3fx87:,9223372036854775807,,,,,,,,"06/Jun/17 11:43;githubbot;GitHub user kinow opened a pull request:

    https://github.com/apache/commons-lang/pull/269

    LANG-1337: Fix test failures in IBM JDK 8 for ToStringBuilderTest by specifying the ArrayList initial capacity.

    See https://issues.apache.org/jira/browse/LANG-1337 for issue description and explanation of the changes here.
    
    In summary, we specify the ArrayList's initial capacity, this way the String built through reflection has the expected value. Tested with Oracle JDK 7 and 8, and IBM JDK 8.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kinow/commons-lang LANG-1337

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/269.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #269
    
----
commit 65b08c4f91a4e5d78eb645b46d06d7a46f8c62dd
Author: Bruno P. Kinoshita <kinow@apache.org>
Date:   2017-06-06T11:41:31Z

    LANG-1337: Fix test failures in IBM JDK 8 for ToStringBuilderTest by specifying the ArrayList initial capacity.

----
","06/Jun/17 12:15;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/269
  
    
    [![Coverage Status](https://coveralls.io/builds/11847788/badge)](https://coveralls.io/builds/11847788)
    
    Coverage remained the same at 95.17% when pulling **65b08c4f91a4e5d78eb645b46d06d7a46f8c62dd on kinow:LANG-1337** into **551101299da7f75ea5478db1a6bc194963e0ac34 on apache:master**.

","06/Jun/17 14:57;githubbot;Github user sebbASF commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/269#discussion_r120385458
  
    --- Diff: src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java ---
    @@ -316,7 +316,7 @@ public void testReflectionHierarchyArrayList() {
             // representation different for IBM JDK 1.6.0, LANG-727
             assumeFalse(""IBM Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".equals(SystemUtils.JAVA_SPECIFICATION_VERSION));
             assumeFalse(""Oracle Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".compareTo(SystemUtils.JAVA_SPECIFICATION_VERSION) < 0);
    -        final List<Object> list = new ArrayList<>();
    +        final List<Object> list = new ArrayList<>(10);
    --- End diff --
    
    I think that needs a comment.
    Is the magic number 10 significant?
    If so, what determines the value?
    Could it ever change?
","06/Jun/17 14:59;githubbot;Github user andyklimczak commented on the issue:

    https://github.com/apache/commons-lang/pull/269
  
    probably related to [this](https://stackoverflow.com/a/34250231)?
","06/Jun/17 15:00;githubbot;Github user andyklimczak commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/269#discussion_r120386094
  
    --- Diff: src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java ---
    @@ -316,7 +316,7 @@ public void testReflectionHierarchyArrayList() {
             // representation different for IBM JDK 1.6.0, LANG-727
             assumeFalse(""IBM Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".equals(SystemUtils.JAVA_SPECIFICATION_VERSION));
             assumeFalse(""Oracle Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".compareTo(SystemUtils.JAVA_SPECIFICATION_VERSION) < 0);
    -        final List<Object> list = new ArrayList<>();
    +        final List<Object> list = new ArrayList<>(10);
    --- End diff --
    
    probably related to [this](https://stackoverflow.com/a/34250231)?
","06/Jun/17 15:15;githubbot;Github user sebbASF commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/269#discussion_r120390348
  
    --- Diff: src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java ---
    @@ -316,7 +316,7 @@ public void testReflectionHierarchyArrayList() {
             // representation different for IBM JDK 1.6.0, LANG-727
             assumeFalse(""IBM Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".equals(SystemUtils.JAVA_SPECIFICATION_VERSION));
             assumeFalse(""Oracle Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".compareTo(SystemUtils.JAVA_SPECIFICATION_VERSION) < 0);
    -        final List<Object> list = new ArrayList<>();
    +        final List<Object> list = new ArrayList<>(10);
    --- End diff --
    
    Thanks!
    
    If the test fails when the initial size arg is omitted, does that not also affect the behaviour of the method being tested? i.e. do apps also have to ensure that they specify the min size when using ToStringBuilder.reflectionToString() ?
","07/Jun/17 06:45;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/269#discussion_r120545692
  
    --- Diff: src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java ---
    @@ -316,7 +316,7 @@ public void testReflectionHierarchyArrayList() {
             // representation different for IBM JDK 1.6.0, LANG-727
             assumeFalse(""IBM Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".equals(SystemUtils.JAVA_SPECIFICATION_VERSION));
             assumeFalse(""Oracle Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".compareTo(SystemUtils.JAVA_SPECIFICATION_VERSION) < 0);
    -        final List<Object> list = new ArrayList<>();
    +        final List<Object> list = new ArrayList<>(10);
    --- End diff --
    
    Fair enough on the magic number. I'd thought about that, then noticed a few other tests with numbers. But one broken window doesn't mean I can break another one :-) fixing in another commit.
","07/Jun/17 06:49;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/269#discussion_r120546260
  
    --- Diff: src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java ---
    @@ -316,7 +316,7 @@ public void testReflectionHierarchyArrayList() {
             // representation different for IBM JDK 1.6.0, LANG-727
             assumeFalse(""IBM Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".equals(SystemUtils.JAVA_SPECIFICATION_VERSION));
             assumeFalse(""Oracle Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".compareTo(SystemUtils.JAVA_SPECIFICATION_VERSION) < 0);
    -        final List<Object> list = new ArrayList<>();
    +        final List<Object> list = new ArrayList<>(10);
    --- End diff --
    
    >If the test fails when the initial size arg is omitted, does that not also affect the behaviour of the method being tested?
    
    Not really. The test simply checks the string built for an arraylist through reflection. The issue was caused for believing that the lazy initialization (as @andyklimczak) would work in the same independent of the JVM.
    
    What the test is verifying is correct, the current approach could be improved to make the test less flaky.
","07/Jun/17 06:56;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/269
  
    
    [![Coverage Status](https://coveralls.io/builds/11862419/badge)](https://coveralls.io/builds/11862419)
    
    Coverage increased (+0.05%) to 95.221% when pulling **0344ca3f2d43e3732bf16370262303be8761a523 on kinow:LANG-1337** into **551101299da7f75ea5478db1a6bc194963e0ac34 on apache:master**.

","07/Jun/17 06:56;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/269
  
    
    [![Coverage Status](https://coveralls.io/builds/11862419/badge)](https://coveralls.io/builds/11862419)
    
    Coverage increased (+0.05%) to 95.221% when pulling **0344ca3f2d43e3732bf16370262303be8761a523 on kinow:LANG-1337** into **551101299da7f75ea5478db1a6bc194963e0ac34 on apache:master**.

","07/Jun/17 07:13;githubbot;Github user britter commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/269#discussion_r120549733
  
    --- Diff: src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java ---
    @@ -316,7 +317,7 @@ public void testReflectionHierarchyArrayList() {
             // representation different for IBM JDK 1.6.0, LANG-727
             assumeFalse(""IBM Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".equals(SystemUtils.JAVA_SPECIFICATION_VERSION));
             assumeFalse(""Oracle Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".compareTo(SystemUtils.JAVA_SPECIFICATION_VERSION) < 0);
    -        final List<Object> list = new ArrayList<>();
    +        final List<Object> list = new ArrayList<>(arraylistInitialCapacity);
    --- End diff --
    
    Sorry to be nitpicking, but this should be a constant and wie should add a comment referencing JIRA-1337 with an explanation why we need to pass the initial capacity.
","07/Jun/17 07:15;githubbot;Github user kinow commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/269#discussion_r120550160
  
    --- Diff: src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java ---
    @@ -316,7 +317,7 @@ public void testReflectionHierarchyArrayList() {
             // representation different for IBM JDK 1.6.0, LANG-727
             assumeFalse(""IBM Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".equals(SystemUtils.JAVA_SPECIFICATION_VERSION));
             assumeFalse(""Oracle Corporation"".equals(SystemUtils.JAVA_VENDOR) && ""1.6"".compareTo(SystemUtils.JAVA_SPECIFICATION_VERSION) < 0);
    -        final List<Object> list = new ArrayList<>();
    +        final List<Object> list = new ArrayList<>(arraylistInitialCapacity);
    --- End diff --
    
    Roger that. Will add a note to myself to fix the other final member variables later... trying to be concise, but I'm clearly missing the point here :-) was supposedly to be a very simple fix for this issue. Pushing a new commit in a few minutes, just finishing to review commons-fileupload vote.
","07/Jun/17 07:25;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/269
  
    Comments added, received some feedback, but would still be useful someone with the last IBM JDK 8 to give it a try and confirm it works for him/her :)
","07/Jun/17 07:32;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/269
  
    
    [![Coverage Status](https://coveralls.io/builds/11862777/badge)](https://coveralls.io/builds/11862777)
    
    Coverage increased (+0.05%) to 95.221% when pulling **c68285bb3392665827595ac408a5fad828b0351f on kinow:LANG-1337** into **551101299da7f75ea5478db1a6bc194963e0ac34 on apache:master**.

","07/Jun/17 07:57;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/269
",07/Jun/17 07:58;britter;Merged PR. Thank you!,,,,,,,,,,,,,,,
ThresholdCircuitBreaker checkState method contradicts javadoc/interface,LANG-1333,13072406,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,kinow,vasusridhar,vasusridhar,16/May/17 11:44,15/Jun/17 22:25,07/Apr/19 20:37,,3.5,,,,,,lang.concurrent.*,,,1,,,,,,,,"The [ThresholdCircuitBreaker impl |https://github.com/apache/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.java]
does not seem to comply with the interface. The [checkState | https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.html#checkState--] method should return whether the circuit is closed or not. However, it returns isOpen(). This contradicts what's given in the java doc example 

Example:

ThresHoldCircuitBreaker breaker = new ThresholdCircuitBreaker(10L);

breaker.incrementAndCheckState(9L) returns false meaning the circuit is closed and the requests should pass through. The checkState method should return true for below example in javadoc to be correct
{code}/**
public void handleRequest(Request request) {
 *     long memoryUsed = estimateMemoryUsage(request);
 *     if (breaker.incrementAndCheckState(memoryUsed)) {
 *         // actually handle this request
 *     } else {
 *         // do something else, e.g. send an error code
 *     }
 * }
*/{code}",java 8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-06-15 10:40:09.29,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 15 22:24:51 UTC 2017,,,,,,0|i3f1qf:,9223372036854775807,,,,,,,,15/Jun/17 10:40;atulagrawal;Your observation looks correct to me. An easy way is to fix documentation but it wouldn't be natural in terms of code readability.,"15/Jun/17 22:24;kinow;Indeed, good points. We are going to probably re-work some of the circuit breakers for upcoming Java 9 module system. So we might as well update this one too, either adjusting documentation or code. Will think about for a while and re-read the code of all circuit breakers during the next days.

Thanks for reporting a clear and detailed issue.
Bruno",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassUtils.getClass Bug,LANG-1329,13070252,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,jstarcraft,jstarcraft,09/May/17 02:47,10/May/17 14:36,07/Apr/19 20:37,10/May/17 14:36,3.4,,,,,,lang.*,,,0,,,,,,,,"When you use ClassUtils.getClass(""void"");
it will return ClassNotFoundException.
because the abbreviationMap contains ""void"" with ""V"".
but in Java, [V or void[].class was not existed.",,,,,,,,,,,,,,LANG-1214,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-09 04:15:36.086,,,false,,,,,Important,,,,,,,,,9223372036854775807,,,Tue May 09 04:15:36 UTC 2017,,,,,,0|i3eogv:,9223372036854775807,,,,,,,,"09/May/17 04:15;kinow;I do not get that with 3.5 version of Commons Lang. I believe this was fixed in fbb5d31a581c24e925c442a7754358d2b62a669d, for LANG-1214. I believe this can be closed as this has already been fixed in the latest release.

Would you like to confirm it works for you [~jstarcraft] ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat does not support 'EEE' and 'MMM' abbreviations for pt_PT,LANG-1328,13069097,Bug,Reopened,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,par.nils.amsen@gmail.com,par.nils.amsen@gmail.com,04/May/17 10:41,30/Mar/19 11:03,07/Apr/19 20:37,,3.3.2,,,,,,,,,0,,,,,,,,"For the following statement:
{code:java}
FastDateFormat.getInstance(""MMM"", timeZone, new Locale(""pt"", ""pt"")).format(1494115200);
{code}
The outcome will be ""dormingo"" instead of ""dor"" in Portugese (pt_PT). I expect this to be a bug since the only reason for FastDateFormat to not abbreviate the weekdays would be that Portugese does not allow it, not very likely.",Android,,,,,,,,,,,,,,,,,,,,,,,,,06/May/17 02:49;kinow;android.png;https://issues.apache.org/jira/secure/attachment/12866714/android.png,06/May/17 02:49;kinow;oracle.png;https://issues.apache.org/jira/secure/attachment/12866713/oracle.png,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2017-05-04 11:07:23.903,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat May 06 02:49:10 UTC 2017,,,,,,0|i3ehcf:,9223372036854775807,,,,,,,,"04/May/17 11:07;kinow;Hello  [~par.nils.amsen@gmail.com],

>The outcome will be ""dormingo"" instead of ""dor"" in Portugese (pt_PT)

Actually, with 3.3.2 or 3.5, I'm getting the following from using pretty much your code.

{code}
String s = FastDateFormat.getInstance(""MMM"", TimeZone.getDefault(), new Locale(""pt"", ""pt"")).format(1494115200);
System.out.println(s);
{code}

Gives me:

{noformat}
jan
{noformat}

As M is the month of the year, and MMM is the three letter abbreviation for it. In Portuguese, MMM -> jan is correct (janeiro abbreviated as jan).

Using EEE, with either 3.5 or 3.3.2:

{code}
String s = FastDateFormat.getInstance(""EEE"", TimeZone.getDefault(), new Locale(""pt"", ""pt"")).format(1494115200);
System.out.println(s);
{code}

Gives me:

{noformat}
Dom
{noformat}

Which is again correct, as Domingo gets correctly abbreviated as Dom.","04/May/17 11:13;par.nils.amsen@gmail.com;Thanks for your superfast and thorough reply [~kinow]! Give me a minute and I will make a test in another context than the production code I'm working on, I'll close this if it works.","04/May/17 11:15;kinow;Sure [~par.nils.amsen@gmail.com], happy to re-open if we identify a bug/improvement with your new test.","04/May/17 11:36;par.nils.amsen@gmail.com;[~kinow] I'm able to reproduce it in a fresh project! 
Here's a simple repo demonstrating the issue on [Github|https://github.com/paramsen/fastdateformatissue] (Android). In [MainActivity#18|https://github.com/paramsen/fastdateformatissue/blob/master/app/src/main/java/com/paramsen/fastdateformatissue/MainActivity.java#L18] the formatting happens, which produces ""Domingo"" instead of ""Dom"" on Android, the two relevant lines:

{code:java}
String formatted = FastDateFormat.getInstance(""EEE"", TimeZone.getTimeZone(""UTC""), new Locale(""pt"", ""pt"")).format(1494115200);
((TextView) findViewById(R.id.dateFormat)).setText(formatted);
{code}

The result is ""Domingo"".","04/May/17 11:48;kinow;I still get Dom. Will re-open the issue, as I suspect this could be caused by some difference in Android JVM implementation.","04/May/17 14:16;par.nils.amsen@gmail.com;[~kinow] Yes I suspect that it is _device specific_ aswell, the abbreviations/weekdays are provided by the system right? My teammate tested on a couple of different devices:

*Samsung S3:*
PT_br: OK (Dor)
PT_pt: OK (Dor)

*Google Pixel:*
PT_br: OK (Dor)
PT_pt: NOK (Dormingo)

*Generic Android emulator*
PT_br: OK (Dor)
PT_pt: NOK (Dormingo)

Seems like the localization is provided by the device manufacturer or smth.","06/May/17 02:49;kinow;Hello,

Downloaded Android Studio (latest version), added Commons Lang 3.5 via Gradle, added your code minus the Android specific line, and then put a breakpoint to see what's happening.

In my case, I'm getting for pt_PT domingo for the EEE mask. Same code in Oracle JVM gives me dom for EEE. I'm guessing the extra R that appears for you is a typo? Or are you really seeing Dor and Dormingo? Dormingo does not exist in Portuguese (except as a slang, recently created).

Debugging, I could see that my Oracle JDK was using a ResourceBundle to load the Locale specific strings, while in Android, it was using ICU (import libcore.icu.LocaleData). Attaching some images from my IDE's with breakpoints around where I think the code differs.

I tried reproducing the issue with Oracle JDK + ICU here https://github.com/kinow/commons-sandbox/blob/master/src/main/java/br/eti/kinoshita/commons/LangDateTests.java, but I still get Dom for Oracle JDK, and dom with IBM ICU4J (tried recent versions, and the oldest I tried was 4.0.1).

I wonder if the following excerpt from Google's libcore helps:

{quote}
From: https://android.googlesource.com/platform/libcore/+/5d930ca/luni/src/main/java/java/util/Locale.java

 * 
<p>Note that locale data is not necessarily available for any of the locales pre-defined as
 * constants in this class except for en_US, which is the only locale Java guarantees is always
 * available.
 *
 * <p>It is also a mistake to assume that all devices have the same locales available.
 * A device sold in the US will almost certainly support en_US and es_US, but not necessarily
 * any locales with the same language but different countries (such as en_GB or es_ES),
 * nor any locales for other languages (such as de_DE). The opposite may well be true for a device
 * sold in Europe.

Versions of ICU:

 * <p>Here are the versions of ICU (and the corresponding CLDR and Unicode versions) used in
 * various Android releases:
 * <table BORDER=""1"" WIDTH=""100%"" CELLPADDING=""3"" CELLSPACING=""0"" SUMMARY="""">
 * <tr><td>Android 1.5 (Cupcake)/Android 1.6 (Donut)/Android 2.0 (Eclair)</td>
 *     <td>ICU 3.8</td>
 *     <td><a href=""http://cldr.unicode.org/index/downloads/cldr-1-5"">CLDR 1.5</a></td>
 *     <td><a href=""http://www.unicode.org/versions/Unicode5.0.0/"">Unicode 5.0</a></td></tr>
 * <tr><td>Android 2.2 (Froyo)</td>
 *     <td>ICU 4.2</td>
 *     <td><a href=""http://cldr.unicode.org/index/downloads/cldr-1-7"">CLDR 1.7</a></td>
 *     <td><a href=""http://www.unicode.org/versions/Unicode5.1.0/"">Unicode 5.1</a></td></tr>
 * <tr><td>Android 2.3 (Gingerbread)/Android 3.0 (Honeycomb)</td>
 *     <td>ICU 4.4</td>
 *     <td><a href=""http://cldr.unicode.org/index/downloads/cldr-1-8"">CLDR 1.8</a></td>
 *     <td><a href=""http://www.unicode.org/versions/Unicode5.2.0/"">Unicode 5.2</a></td></tr>
 * <tr><td>Android 4.0 (Ice Cream Sandwich)</td>
 *     <td><a href=""http://site.icu-project.org/download/46"">ICU 4.6</a></td>
 *     <td><a href=""http://cldr.unicode.org/index/downloads/cldr-1-9"">CLDR 1.9</a></td>
 *     <td><a href=""http://www.unicode.org/versions/Unicode6.0.0/"">Unicode 6.0</a></td></tr>
 * <tr><td>Android 4.1 (Jelly Bean)</td>
 *     <td><a href=""http://site.icu-project.org/download/48"">ICU 4.8</a></td>
 *     <td><a href=""http://cldr.unicode.org/index/downloads/cldr-2-0"">CLDR 2.0</a></td>
 *     <td><a href=""http://www.unicode.org/versions/Unicode6.0.0/"">Unicode 6.0</a></td></tr>
 * <tr><td>Android 4.3 (Jelly Bean MR2)</td>
 *     <td><a href=""http://site.icu-project.org/download/50"">ICU 50</a></td>
 *     <td><a href=""http://cldr.unicode.org/index/downloads/cldr-22-1"">CLDR 22.1</a></td>
 *     <td><a href=""http://www.unicode.org/versions/Unicode6.2.0/"">Unicode 6.2</a></td></tr>
 * <tr><td>Android 4.4 (KitKat)</td>
 *     <td><a href=""http://site.icu-project.org/download/51"">ICU 51</a></td>
 *     <td><a href=""http://cldr.unicode.org/index/downloads/cldr-23"">CLDR 23</a></td>
 *     <td><a href=""http://www.unicode.org/versions/Unicode6.2.0/"">Unicode 6.2</a></td></tr>
 * <tr><td>Android 4.? (STOPSHIP)</td>
 *     <td><a href=""http://site.icu-project.org/download/53"">ICU 53</a></td>
 *     <td><a href=""http://cldr.unicode.org/index/downloads/cldr-25"">CLDR 25</a></td>
 *     <td><a href=""http://www.unicode.org/versions/Unicode6.3.0/"">Unicode 6.3</a></td></tr>
 * </table>
{quote}

Before trying anything, it would be helpful to have some code [~par.nils.amsen@gmail.com]. Code that can be imported into an IDE, as well as detailed instructions to reproduce the issue. Then someone would need to dig a bit deeper than I did, and understand why the differences for the abbreviated week day name.

I don't see what could be done in [lang], and believe we will be able to find something missing in Android/libcore/icu for pt_PT, and then users will simply need to update their dependencies, without any change here in [lang].",,,,,,,,,,,,,,,,,,,,,,,,
"org.apache.commons.lang3.time.DateFormatUtils.formatUTC (10L, """") throws java.lang.StringIndexOutOfBoundsException exception",LANG-1327,13068441,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,glebrito,glebrito,02/May/17 14:23,03/May/17 05:36,07/Apr/19 20:37,03/May/17 05:26,3.4,3.5,,,,,lang.time.*,,,0,,,,,,,,"I am calling method formatUTC() of class
org.apache.commons.lang3.time.DateFormatUtils
as in this code:
java.lang.String var2 = org.apache.commons.lang3.time.DateFormatUtils.formatUTC (10L, """")
In version 3.4, the call is throwing a
java.lang.StringIndexOutOfBoundsException exception.
But in version 3.5 it returns an empty string ("""").
According the documentation, the parameter patter can not be null.
Is correct this method accept empty string as pattern parameter?",JRE 8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-03 05:26:13.838,,,false,,,,,Important,,,,,,,,,9223372036854775807,,,Wed May 03 05:36:37 UTC 2017,,,,,,0|i3edan:,9223372036854775807,,,,,,,,"03/May/17 05:26;chonton;Empty format is legal, even if non-sensical. Since there are no format specifiers, the output should be an empty string. ","03/May/17 05:36;kinow;(was writing probably at the same time [~chonton] closed the issue. Agree with his comment, but will leave mine here too FWIW)

Looks like that changed indeed from 3.4 to 3.5, but not in DateFormatUtils, but in FastDatePrinter. See:

{noformat}git diff LANG_3_4 master src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java{noformat}

Instead of simply calling the format method, now it's checking which rules it can apply, and in your case not applying anything, and simply returning an empty String.

Adding a note to DateFormatUtils#format(Long, String) for that, would mean adding a note to all other methods that receive a pattern argument iff the behaviour is consistent (i.e. if for all these methods, passing an empty pattern, returns an empty string). However, I would argue that it would make more sense to document an exception, such as StringIndexOutOfBoundsException, rather than document that we won't throw an exception, and instead will return empty.

Passing an empty pattern, users might guess that they will receive an empty date. I would be fine if the consensus was to document all methods stating that an empty pattern will return an empty formatted date but, my preferred solution is to close this as Won't Fix. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#isAllEmpty and #isAllBlank should return false for an empty array,LANG-1326,13067949,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,arshad0789,arshad0789,29/Apr/17 19:17,29/Apr/17 19:27,07/Apr/19 20:37,,3.6,,,,,,lang.*,,,0,,,,,,,,"If the description of https://issues.apache.org/jira/browse/LANG-1271 is what is the agreed behavior, then I believe isAllEmpty and isAllBlank method should be updated as well. Please let me know if i'm missing something on this.  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-29 19:20:47.133,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 29 19:27:20 UTC 2017,,,,,,0|i3ea9b:,9223372036854775807,,,,,,,,"29/Apr/17 19:20;githubbot;GitHub user arbasha opened a pull request:

    https://github.com/apache/commons-lang/pull/267

    LANG-1326 - Fixed isAllEmpty and isAllBlank

    If the description of https://issues.apache.org/jira/browse/LANG-1271 is what is the agreed behavior, then I believe isAllEmpty and isAllBlank method should be updated as well. Please let me know if i'm missing something on this.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/arbasha/commons-lang bug_fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/267.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #267
    
----
commit 35ba1e2f344d87f77f2782a188ea436cbe596a53
Author: Basha <arbasha@paypalcorp.com>
Date:   2017-04-29T19:18:24Z

    LANG-1326 - Fixed isAllEmpty and isAllBlank

----
","29/Apr/17 19:27;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/267
  
    
    [![Coverage Status](https://coveralls.io/builds/11304534/badge)](https://coveralls.io/builds/11304534)
    
    Coverage remained the same at 94.655% when pulling **35ba1e2f344d87f77f2782a188ea436cbe596a53 on arbasha:bug_fix** into **c8e648b92cc133a604b5e1f4da1ced943788e64b on apache:master**.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Type implementations in TypeUtils compute hash code that breaks Object.equals() with Sun's OpenJDK,LANG-1323,13065926,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,skilpat,skilpat,21/Apr/17 15:54,24/Apr/17 15:07,07/Apr/19 20:37,,3.2,3.5,,,,,lang.reflect.*,,,0,,,,,,,,"{{TypeUtils}} in {{lang.reflect}} provides convenient methods for creating objects of the interface {{Type}}. Those objects are defined by the following classes:

* ParameterizedTypeImpl (implements {{ParameterizedType}})
* WildcardTypeImpl (implements {{WildcardType}})
* GenericArrayTypeImpl (implements {{GenericArrayType}})

Similarly, there are corresponding classes, which implement the same interfaces, defined in one's particular JDK. And it's these latter classes that are instantiated when you get objects of type {{Type}} via reflection. Let's call these the ""internal {{Type}} implementations."" In the case of Sun's OpenJDK, [they are defined|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/generics/reflectiveObjects] in package {{sun.reflect.generics.reflectiveObjects}}.

Each of the {{TypeUtils}} classes implements {{Object.equals(Object)}} in a general way that's compatible with the internal {{Type}} implementations. For example, if I access a field declared with type {{Map<String, Integer>}} and get its generic type, via {{Field.getGenericType()}}, then that will be equal to the {{TypeUtils}} object returned by:
{code:java}
TypeUtils.parameterize(Map.class, String.class, Integer.class)
{code}
That's what I'd expect, so that's great.

However, the {{TypeUtils}} classes implement their {{Object.hashCode()}} method in a _different_ way from the corresponding implementations in Sun OpenJDK implementations. That's not so surprising, _but it breaks the contract of {{Object.hashCode()}}_:

bq. If two objects are equal according to the {{equals(Object)}} method, then calling the {{hashCode}} method on each of the two objects must produce the same integer result.

In other words, the two {{Type}} objects above will both consider themselves {{equals}} to each other, but they have different hash codes.

One example of a negative consequence of this problem is a collection class that implements its equality (to other collections) by checking hash codes of its elements, e.g., Guava's immutable collections. If you have {{Type}} objects in those collections, with {{TypeUtils}} {{Type}} objects in {{c1}} and Sun OpenJDK {{Type}} objects in {{c2}}, you will see that {{c1.equals(c2)}} returns {{false}} -- because their elements don't all have the same hash codes -- even though those elements are all considered equal.",Sun OpenJDK,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-04-21 17:02:24.57,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 24 15:07:01 UTC 2017,,,,,,0|i3dxs7:,9223372036854775807,,,,,,,,"21/Apr/17 15:58;skilpat;Hash code implementation comparisons:

* {{GenericArrayTypeImpl}}: [TypeUtils|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blob;f=src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java;h=8db6ca47813389708781c5117f3109865c815d2c;hb=HEAD#l134] vs. [OpenJDK|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/generics/reflectiveObjects/GenericArrayTypeImpl.java#l89]

* {{ParameterizedTypeImpl}}: [TypeUtils|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blob;f=src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java;h=8db6ca47813389708781c5117f3109865c815d2c;hb=HEAD#l203] vs. [OpenJDK|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/generics/reflectiveObjects/ParameterizedTypeImpl.java#l198]

* {{WildcardTypeImpl}}: [TypeUtils|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blob;f=src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java;h=8db6ca47813389708781c5117f3109865c815d2c;hb=HEAD#l270] vs. [OpenJDK|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/reflect/generics/reflectiveObjects/WildcardTypeImpl.java#l224]","21/Apr/17 17:02;sebb@apache.org;Are you saying that some of the TypeUtils classes have incompatible equals() and hashCode() implementations?

If so, then that is clearly a bug. A test case would be useful.

However it is OK to provide a hashCode() implementation that is different from the 'standard' implementation, so long as it is consistent with the equals() defintion.

For example, if the hashCode() implementation always returns 42.
It's a terrible hash, but it does not break the hash/equals contract.
There is no requirement for unequal objects to have different hashes.

Indeed any class that assumes that equal hashCodes mean equal Objects is broken.
Object.hashCode() can produce equal hashCodes for unequal objects.","21/Apr/17 17:39;skilpat;Here's an example in JUnit:

{code:java}
    static class OneField {
        Map<String, Integer> f;
    }

    @Test
    public void test() throws NoSuchFieldException
    {
        final Type openJdkType = OneField.class.getDeclaredField(""f"").getGenericType();
        final Type apacheType = TypeUtils.parameterize(Map.class, String.class, Integer.class);
        Assert.assertTrue(openJdkType.equals(apacheType));
        Assert.assertTrue(apacheType.equals(openJdkType));
        Assert.assertFalse(openJdkType.hashCode() == apacheType.hashCode());

        // Example with Guava's ImmutableSet, which for N > 1 uses
        // hash code for set equality, and Iterables.elementsEqual.
        final Type other = OneField.class;
        final ImmutableSet<Type> c1 = ImmutableSet.of(openJdkType, other);
        final ImmutableSet<Type> c2 = ImmutableSet.of(apacheType, other);
        Assert.assertFalse(c1.equals(c2));
        Assert.assertFalse(c2.equals(c1));
        Assert.assertTrue(c1.size() == c2.size());
        Assert.assertTrue(Iterables.elementsEqual(c1, c2));
    }
{code}

Is this not a violation of the contract on {{Object.hashCode()}} that I quoted above? Here are two objects that are equal according to the {{equals(Object)}} method, but calling the {{hashCode}} method on each of the two objects produces different integer results.","21/Apr/17 20:28;skilpat;[~sebb@apache.org]: Right, the contract does not say anything about two objects that produce equal hash codes. But it does indeed say something about two objects that are equal, i.e., that they must produce the same hash code. So I'm not saying that anything in {{TypeUtils}} is inconsistent _within itself_, but that

# the {{hashCode}} in {{TypeUtils}} is inconsistent with the {{hashCode}} in the OpenJDK and
# the contract of {{Object.hashCode}} requires that their {{hashCode}}'s be consistent since their {{equals}} are consistent.","21/Apr/17 21:49;sebb@apache.org;bq. the hashCode in TypeUtils is inconsistent with the hashCode in the OpenJDK and

This is not a requirement

bq. the contract of Object.hashCode requires that their hashCode's be consistent since their equals are consistent.

Agreed.

But the unit test you provided only shows that the ImmutableSet implementation of hashCode/equals is broken.
It does not say anything about TypeUtils.
Or if there is a problem with TypeUtils, this needs to be exposed by a unit test that only uses the LANG classes.","21/Apr/17 22:04;skilpat;The Guava stuff was just an _additional example_ of a sneaky manifestation of the bug; it's not crucial to the bug. Sorry to have included more than necessary in that example.

For posterity, here's the example demonstrating the broken contract, without the additional broken use case: (EDIT: rewritten to clarify that an assertion fails, whereas previously it was written such that they pass)

{code:java}
    static class OneField {
        Map<String, Integer> f;
    }

    @Test
    public void testOfBrokenContract() throws NoSuchFieldException
    {
        // An object of class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl
        final Type openJdkType = OneField.class.getDeclaredField(""f"").getGenericType();

        // An object of class org.apache.commons.lang3.reflect.TypeUtils.ParameterizedTypeImpl
        final Type apacheType = TypeUtils.parameterize(Map.class, String.class, Integer.class);

        // These two objects are equal...
        Assert.assertTrue(openJdkType.equals(apacheType));
        Assert.assertTrue(apacheType.equals(openJdkType));

        // ... so their hash codes should be the same. But this assertion fails.
        Assert.assertTrue(openJdkType.hashCode() == apacheType.hashCode());
    }
{code}","21/Apr/17 23:27;sebb@apache.org;I see what you mean now. 
It seems that there are additional equals/hashCode requirements for instances of the Type interface hierarchy which go beyond the normal equals/hashCode contract.
Unfortunately the requirements don't appear to be fully documented.

The ParameterizedType Javadoc specifies how the equals() method is to be implemented, but it does not say anything about the hashCode requirements.

The variables to be compared are known, so the equals() method is easily written from the Javadoc.

However there are potentially multiple ways to derive the hashCode.
I don't see how it's possible to code alternate implementations from the Javadoc alone.
So it looks to me as though the Javadoc is incomplete.
If the OpenJDK source were not available it would be impossible to implement an object that conforms to the ParameterizedType Javadoc and the equals/hashCode contract.","24/Apr/17 14:44;skilpat;Yeah, that makes sense. I understand that the Java SE doesn't -- _but should!_ -- define how to implement {{Type.hashCode}}. There seems to be a years-old JDK bug report about this exact issue: https://bugs.openjdk.java.net/browse/JDK-7082069.

Given the size and importance of the OpenJDK, however, would it not make sense to treat that as the canonical definition of {{Type.hashCode()}}, and modify the Commons Lang implementations to adhere to that?","24/Apr/17 15:07;sebb@apache.org;Thanks for the bug URL, very useful.

There are two difficulties with using the bug text as the definition:
1) It has not been accepted, and could be modified.
2) what license covers its use?

AFAICT we cannot use the actual implementation, as that is under the GPL+Classpath exception [1]

[1] http://www.apache.org/legal/resolved.html#category-x",,,,,,,,,,,,,,,,,,,,,,
ToStringStyle should not use WeakHashMap as registry,LANG-1322,13065881,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,fillg1,fillg1,21/Apr/17 13:41,21/Apr/17 13:41,07/Apr/19 20:37,,3.5,,,,,,lang.builder.*,,,0,,,,,,,,"org.apache.commons.lang3.builderToStringStyle uses a WeakHashMap as REGISTRY to detect that an object was already added to the StringBuilder to avoid recursion for cyclic object graphs. This is used by RecursiveToStringStyle.
In a low memory situation when the garbage collector starts, the WeakHashMap is cleared and some parts of the potentially cyclic object graph will be logged again.
We run in this problem, when we accidentally logged an HttpServletRequest and a HttpSession using a ReflectiontoStringBuilder   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2017-04-21 13:41:14.0,,,,,,0|i3dxi7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LocaleUtils#toLocale does not support language followed by UN M.49 numeric-3 area code followed by variant,LANG-1320,13064380,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,britter,britter,17/Apr/17 10:49,12/Jun/17 12:04,07/Apr/19 20:37,17/Apr/17 10:58,3.5,,,,3.6,,lang.*,,,0,,,,,,,,"Follow up for LANG-1312:

It is possible to parse ""en_001"" but not ""en_001_US"". When parsing a string with three segments, it should be possible to use UN M.49 area codes as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Apr 17 10:58:06 UTC 2017,,,,,,0|i3dotz:,9223372036854775807,,,,,,,,17/Apr/17 10:58;britter;Fixed in fb4803623b8f089a8dfd265a68461f4283e7ffad,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MultilineRecursiveToStringStyle StackOverflowError when object is an array ,LANG-1319,13062106,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,dmjones500,sergpro,sergpro,06/Apr/17 13:37,19/May/17 20:45,07/Apr/19 20:37,19/May/17 20:45,3.5,,,,3.6,,lang.builder.*,,,1,,,,,,,,"
MultilineRecursiveToStringStyle style = new MultilineRecursiveToStringStyle();
String result = ToStringBuilder.reflectionToString(new String[] {""1"",""2""}, style);

java.lang.StackOverflowError
	at org.apache.commons.lang3.builder.ToStringStyle.appendStart(ToStringStyle.java:409)
	at org.apache.commons.lang3.builder.ToStringBuilder.<init>(ToStringBuilder.java:262)
	at org.apache.commons.lang3.builder.ReflectionToStringBuilder.<init>(ReflectionToStringBuilder.java:481)
	at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:300)
	at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:157)
	at org.apache.commons.lang3.builder.RecursiveToStringStyle.appendDetail(RecursiveToStringStyle.java:74)
	at org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.reflectionAppendArrayDetail(MultilineRecursiveToStringStyle.java:142)
	at org.apache.commons.lang3.builder.ReflectionToStringBuilder.reflectionAppendArray(ReflectionToStringBuilder.java:633)
	at org.apache.commons.lang3.builder.ReflectionToStringBuilder.appendFieldsIn(ReflectionToStringBuilder.java:538)
	at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:711)
	at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:301)
	at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:157)
	at org.apache.commons.lang3.builder.RecursiveToStringStyle.appendDetail(RecursiveToStringStyle.java:74)
	at org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle.reflectionAppendArrayDetail(MultilineRecursiveToStringStyle.java:142)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-05-19 20:45:54.683,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri May 19 20:45:54 UTC 2017,,,,,,0|i3datz:,9223372036854775807,,,,,,,,19/May/17 20:45;dmjones500;Thanks for the report. Fixed in commit 7587431.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser parse method parses without considering timezone,LANG-1315,13049236,Bug,Resolved,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Cannot Reproduce,,sudheendra,sudheendra,08/Mar/17 11:26,09/Mar/17 11:43,07/Apr/19 20:37,09/Mar/17 11:43,,,,,,,,,,0,DateParser,FastDateParser,parse,,,,,"Using commons-lang3 3.5
FastDateParser parse(String ,ParsePosition ) internally calls calendar.getTime(). This method created a new Date object which will ignore the timezone and locale. Hence will default to system TZ and locale.

The parse should happen with respect to the formatter's time zone but that is currently ignored",,,,,,,,,,,,,,,,,,,,,,,,,,09/Mar/17 07:48;sudheendra;learn-fast-date.zip;https://issues.apache.org/jira/secure/attachment/12856954/learn-fast-date.zip,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2017-03-08 16:04:56.04,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 09 11:43:14 UTC 2017,,,,,,0|i3b44n:,9223372036854775807,,,,,,,,08/Mar/17 16:04;chonton;Please attach a unit test that demonstrates a failure.,09/Mar/17 07:48;sudheendra;Pls run the main method present in class FastDateMain,"09/Mar/17 11:43;sebb@apache.org;The test case is hard to use as it's in two files buried deep in a file structure.

In future, please provide a single file which exihibts the problem.
Ideally as a unit test (LANG uses JUnit).

As it stands, the test proves nothing, as it does not compare the output of FastDateFormat with the output of SimpleDateFormat.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc creation broken with Java 8,LANG-1314,13048369,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,mureinik,mureinik,05/Mar/17 16:09,12/Jun/17 12:04,07/Apr/19 20:37,06/Mar/17 18:34,,,,,3.6,,General,,,0,,,,,,,,"Java 8's javadoc seems to be stricter than the Java 7 one. With the current HEAD (commit e5ed4ff), mvn javadoc:javadoc passes with Java 7, but fails on the same machine with Java 8 (environment described above) with the following errors:

[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:2.10.4:javadoc (default-cli) on project commons-lang3: An error has occurred in JavaDocs report generation:
[ERROR] Exit code: 1 - /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/ArrayUtils.java:8421: warning: no @param for <T>
[ERROR] public static <T> T[] insert(final int index, final T[] array, final T... values) {
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:316: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:316: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:347: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:347: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:370: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:370: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:403: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:403: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:436: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:436: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:1946: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:1946: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:7092: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:7092: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:7241: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java:7241: error: unexpected end tag: </p>
[ERROR] * </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/concurrent/Computable.java:21: error: self-closing element not allowed
[ERROR] * <p/>
[ERROR] ^
[ERROR] /home/amureini/src/git/commons-lang/src/main/java/org/apache/commons/lang3/concurrent/Computable.java:21: warning: empty <p> tag
[ERROR] * <p/>
[ERROR] ^
","amureini@mureinik ~ $ mvn -version
Apache Maven 3.3.9 (NON-CANONICAL_2016-07-01T11:53:38Z_mockbuild; 2016-07-01T14:53:38+03:00)
Maven home: /usr/share/maven
Java version: 1.8.0_121, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-1.b14.fc25.x86_64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""4.9.12-200.fc25.x86_64"", arch: ""amd64"", family: ""unix""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-05 16:12:32.946,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 06 18:59:55 UTC 2017,,,,,,0|i3ayxj:,9223372036854775807,,,,,,,,"05/Mar/17 16:12;githubbot;GitHub user mureinik opened a pull request:

    https://github.com/apache/commons-lang/pull/252

    [LANG-1314] Fix javadoc creation on with Java 8

    Java 8's javadoc seems to be stricter than Java 7's, and the current head current fails to generate javadoc (`mvn javadoc:javadoc`) with Java 8.
    
    This PR contains a series of fixes to the various classes' javadoc which are required for Java 8 (but would also improve the javadoc generated with earlier java versions) and then adds the `javadoc:javadoc` target to Travis CI so we can guarantee it won't break again.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mureinik/commons-lang javadoc

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/252.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #252
    
----
commit 972d29447d115224674154e0150d51bf9ccf6524
Author: Allon Mureinik <amureini@redhat.com>
Date:   2017-03-05T09:50:34Z

    Add @param for <T> in ArrayUtils#insert

commit e4147a700f6c49b954a6f91dc8f2f1499777e92c
Author: Allon Mureinik <amureini@redhat.com>
Date:   2017-03-05T09:53:33Z

    Fix StirngUtils </p> tags in javadoc
    
    The paragraph
    
    </p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>
    
    appears in several places in the javadoc (presumably, copy-pasted from
    the original one to the others). This is obviously a mistake, as a
    paragraph should start with <p>, not with </p>.
    
    This patch fixes all the occurrences of this paragraph to the proper
    form:
    
    <p>Whitespace is defined by {@link Character#isWhitespace(char)}.</p>

commit 54eff5e8a55f591c1ae3fe31fd04dce663bbe4e1
Author: Allon Mureinik <amureini@redhat.com>
Date:   2017-03-05T09:56:05Z

    Remove </p> tag from Computable's javadoc
    
    The standard javadoc doclet does not allow self closing tags (such as
    </p>). This patch removes such a tag from Computable's javadoc, as it's
    redundant anyway, as it's only used to create spaces between two
    existing paragraphs.

commit 632431f9433ce228407218dabef7b00fa8464ef4
Author: Allon Mureinik <amureini@redhat.com>
Date:   2017-03-05T16:03:01Z

    Add javadoc creation to Travis CI

----
","05/Mar/17 16:16;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/252
  
    
    [![Coverage Status](https://coveralls.io/builds/10440062/badge)](https://coveralls.io/builds/10440062)
    
    Coverage decreased (-0.007%) to 94.529% when pulling **632431f9433ce228407218dabef7b00fa8464ef4 on mureinik:javadoc** into **e5ed4ffe5df9bd5fe796e95acf0b35f4c858e1a2 on apache:master**.

","05/Mar/17 16:39;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/252
  
    
    [![Coverage Status](https://coveralls.io/builds/10440200/badge)](https://coveralls.io/builds/10440200)
    
    Coverage decreased (-0.007%) to 94.529% when pulling **ac5584040440fc426dea4bf046ccd80973066df8 on mureinik:javadoc** into **e5ed4ffe5df9bd5fe796e95acf0b35f4c858e1a2 on apache:master**.

","06/Mar/17 18:28;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/252
  
    Thanks!
","06/Mar/17 18:28;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/252
","06/Mar/17 18:32;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/252
  
    @mureinik Sorry it wasn't my intention to steal the authorship of your commits with the javadoc fixes. :( I wasn't aware that a `git rebase` changes the author.
    

",06/Mar/17 18:34;pascalschumacher;Thanks for reporting and thanks for the pull request!,"06/Mar/17 18:59;githubbot;Github user mureinik commented on the issue:

    https://github.com/apache/commons-lang/pull/252
  
    @PascalSchumacher no harm done. I'd rather have commons-lang's javadoc build properly than one patch more or less to my so-called name.
",,,,,,,,,,,,,,,,,,,,,,,
LocaleUtils#toLocale does not support language followed by UN M.49 numeric-3 area code,LANG-1312,13044319,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,19/Feb/17 19:08,12/Jun/17 12:04,07/Apr/19 20:37,21/Feb/17 20:14,3.5,,,,3.6,,,,,0,,,,,,,,"These all work:

{code:java}
System.out.println(new Locale(""en"", ""001""));
System.out.println(new Locale(""en"", ""150""));
System.out.println(new Locale(""ar"", ""001""));
{code}

but these all fail with an IllegalArgumentException:

{code:java}
System.out.println(LocaleUtils.toLocale(""en_001""));
System.out.println(LocaleUtils.toLocale(""en_150""));
System.out.println(LocaleUtils.toLocale(""ar_001""));
{code}
",,,,,,,,,,,,,,,,LANG-1320,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-19 19:40:38.994,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 21 20:14:08 UTC 2017,,,,,,0|i3aafb:,9223372036854775807,,,,,,,,"19/Feb/17 19:40;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/239

    LANG-1312: LocaleUtils#toLocale does not support language followed by…

    … UN M.49 numeric-3 area code

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang lang_1312_area_code

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/239.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #239
    
----
commit ce3e3e03e4d561dfae565186b431a879a9afa920
Author: pascalschumacher <pascalschumacher@gmx.net>
Date:   2017-02-19T19:39:05Z

    LANG-1312: LocaleUtils#toLocale does not support language followed by UN M.49 numeric-3 area code

----
","19/Feb/17 19:43;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/239
  
    
    [![Coverage Status](https://coveralls.io/builds/10226324/badge)](https://coveralls.io/builds/10226324)
    
    Coverage increased (+0.02%) to 94.549% when pulling **ce3e3e03e4d561dfae565186b431a879a9afa920 on PascalSchumacher:lang_1312_area_code** into **954ade4c1ae2adc0aaac3a1dbe800495c519520c on apache:master**.

","19/Feb/17 19:43;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/239
  
    
    [![Coverage Status](https://coveralls.io/builds/10226324/badge)](https://coveralls.io/builds/10226324)
    
    Coverage increased (+0.02%) to 94.549% when pulling **ce3e3e03e4d561dfae565186b431a879a9afa920 on PascalSchumacher:lang_1312_area_code** into **954ade4c1ae2adc0aaac3a1dbe800495c519520c on apache:master**.

","20/Feb/17 00:23;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/239
  
    Yesterday learned something new about `String.format` via pull request #238, and now learning about [UN M.49](https://en.wikipedia.org/wiki/UN_M.49). Thanks again @PascalSchumacher :-)
    
    Code and test look good, checked out locally, all tests passing. +1
","20/Feb/17 07:59;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/239
  
    @kinow: Thanks for the review. :-)
    
    I also did not know about UN M.49 till yesterday. I just stumbled over this while analyzing commons-lang test failures on java 9 for https://issues.apache.org/jira/browse/LANG-1265
","21/Feb/17 00:27;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/239
  
    Will merge it tomorrow if there's no objection (or feel free to merge it @PascalSchumacher  :-) )
","21/Feb/17 20:14;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/239
",,,,,,,,,,,,,,,,,,,,,,,,
TypeUtils.toString() doesn't handle primitive and Object arrays correctly,LANG-1311,13043678,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,digulla,digulla,16/Feb/17 15:51,12/Jun/17 12:04,07/Apr/19 20:37,17/Feb/17 17:36,3.4,3.5,,,3.6,,lang.reflect.*,,,0,,,,,,,,"TypeUtils.toString() doesn't handle primitive and Object arrays correctly.

Specifically, these tests will fail:

{code}
assertEquals(""int[]"", TypeUtils.toString(int[].class));
assertEquals(""java.lang.Integer[]"", TypeUtils.toString(Integer[].class));
{code}

If you declare a field with type {{List<String>[]}}, then you can add this test:

{code}
assertEquals(""java.util.List<java.lang.String>[]"", TypeUtils.toString(field.getGenericType()));
{code}

This patch fixes the issue:

{code}
    private static String classToString(final Class<?> c) {
// begin patch
        if (c.isArray()) {
            return toString(c.getComponentType()) + ""[]"";
        }
// end patch 
       
        final StringBuilder buf = new StringBuilder();
{code}",,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-02-17 17:36:14.801,,,false,,,,,Patch,,,,,,,,,9223372036854775807,,,Mon Feb 20 21:35:44 UTC 2017,,,,,,0|i3a6on:,9223372036854775807,,,,,,,,"17/Feb/17 17:36;pascalschumacher;Patch applied. Thanks!

{code}assertEquals(""java.util.List<java.lang.String>[]"", TypeUtils.toString(field.getGenericType()));{code} worked on current master and most probably on 3.5 (even before applying the patch).","20/Feb/17 20:20;digulla;Thanks.

The generics list worked but I didn't see a unit test for a mix of generics and arrays, so I added one for good measure.",20/Feb/17 21:35;pascalschumacher;Thanks for clarifying! :),,,,,,,,,,,,,,,,,,,,,,,,,,,,
MethodUtils.invokeMethod throws ArrayStoreException if using varargs arguments and smaller types than the method defines,LANG-1310,13039464,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,eicki,eicki,01/Feb/17 13:36,12/Jun/17 12:04,07/Apr/19 20:37,19/Mar/17 16:17,3.5,,,,3.6,,lang.reflect.*,,,1,,,,,,,,"Since release 3.5 and due to the changes of LANG-1115 an ArrayStoreException occurs on MethodUtils.invokeMethod if using varargs arguments and smaller types than the method defines (e.g. int vs long).

{code}
  @Test
  public void testMethodUtilsInvokeMethodVarArgs () throws Exception {
    MyObject object = new MyObject ();
    MethodUtils.invokeMethod (object, ""doSomething"", 1);
  }

  public static class MyObject {
    public void doSomething (long... args) {
      System.out.println (""doSomething"");
    }
  }
{code}

throws 

{code}
java.lang.ArrayStoreException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.commons.lang3.reflect.MethodUtils.getVarArgs(MethodUtils.java:497)
	at org.apache.commons.lang3.reflect.MethodUtils.toVarArgs(MethodUtils.java:463)
	at org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(MethodUtils.java:234)
	at org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(MethodUtils.java:270)
	at org.apache.commons.lang3.reflect.MethodUtils.invokeMethod(MethodUtils.java:147)
{code}

In 3.4. a NoSuchMethodException had been thrown, but in 3.5 the code now finds the matching method but fails then with above exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-03-12 16:35:26.696,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 19 16:17:35 UTC 2017,,,,,,0|i39grb:,9223372036854775807,,,,,,,,"12/Mar/17 16:35;drajakumar;The issue is because in the below line from method getVarArgs (in MethodUtils class)

System.arraycopy(args, methodParameterTypes.length - 1, varArgsArray, 0, varArgLength);

for the example shared in the ticket 
args is of type java.lang.Integer and varArgsArray is of type java.lang.Long

and hence the exception ArrayStoreException is thrown.

The reason for args to be of type java.lang.Integer is because at the top of the execution of invokeMethod, in the below line, when args is passed (which is nothing but 1 a primitive type) is considered as  java.lang.Integer and not primitive type int
final Class<?>[] parameterTypes = ClassUtils.toClass(args);

parameterTypes in this case is java.lang.Integer and not primitive type int.

This is the inference made on this so far.

Working on it further, will update the ticket with more details/fix.","13/Mar/17 16:52;githubbot;GitHub user drajakumar opened a pull request:

    https://github.com/apache/commons-lang/pull/256

    fix for LANG-1310

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/drajakumar/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/256.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #256
    
----

----
","14/Mar/17 13:35;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/256
  
    
    [![Coverage Status](https://coveralls.io/builds/10583606/badge)](https://coveralls.io/builds/10583606)
    
    Coverage increased (+0.06%) to 94.588% when pulling **6daa417fe9826d0bfa9c2366fc520a1519e8579f on drajakumar:master** into **39a2a6fa38c5e4d1293e00f98a89698a962d6775 on apache:master**.

","14/Mar/17 15:32;githubbot;Github user jvz commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/256#discussion_r105941464
  
    --- Diff: src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java ---
    @@ -110,32 +114,32 @@ private void privateStuff() {
     
             @SuppressWarnings(""unused"")
             private String privateStringStuff() {
    -        	return ""privateStringStuff()"";
    +         return ""privateStringStuff()"";
    --- End diff --
    
    Think you could fix the formatting here?
","14/Mar/17 20:30;githubbot;Github user Abrasha commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/256#discussion_r106018789
  
    --- Diff: src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java ---
    @@ -357,16 +369,23 @@ public void testInvokeMethod() throws Exception {
             assertEquals(""foo(int)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     NumberUtils.BYTE_ONE));
             assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"",
    -                NumberUtils.LONG_ONE));
    -        assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     NumberUtils.DOUBLE_ONE));
             assertEquals(""foo(String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     ""a"", ""b"", ""c""));
             assertEquals(""foo(String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     ""a"", ""b"", ""c""));
             assertEquals(""foo(int, String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     5, ""a"", ""b"", ""c""));
    -
    +        assertEquals(""foo(long...)"", MethodUtils.invokeMethod(testBean, ""foo"",
    +                1L, 2L));
    +        
    +        try {
    +            MethodUtils.invokeMethod(testBean, ""foo"",
    +                    1, 2);
    +            fail(""should throw NoSuchMethodException"");
    +        } catch (final NoSuchMethodException e) {
    --- End diff --
    
    Maybe it will be better to extract it to another test method with expected exception?
    
    ```
    @Test(expected = NoSuchMethodException.class)
    public void methodName(){
    
    }
    ```
","14/Mar/17 20:49;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/256
  
    @drajakumar It's really great to get a pull request for this. :+1:  
    
    I took a look at this issue some time ago, but gave up trying to solve it. Sadly I'm too tired for a review at the moment. I will get back to you in a few days, if nobody has reviewed/merged the pull request already.
","14/Mar/17 20:50;githubbot;Github user PascalSchumacher commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/256#discussion_r106023700
  
    --- Diff: src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java ---
    @@ -357,16 +369,23 @@ public void testInvokeMethod() throws Exception {
             assertEquals(""foo(int)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     NumberUtils.BYTE_ONE));
             assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"",
    -                NumberUtils.LONG_ONE));
    -        assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     NumberUtils.DOUBLE_ONE));
             assertEquals(""foo(String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     ""a"", ""b"", ""c""));
             assertEquals(""foo(String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     ""a"", ""b"", ""c""));
             assertEquals(""foo(int, String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     5, ""a"", ""b"", ""c""));
    -
    +        assertEquals(""foo(long...)"", MethodUtils.invokeMethod(testBean, ""foo"",
    +                1L, 2L));
    +        
    +        try {
    +            MethodUtils.invokeMethod(testBean, ""foo"",
    +                    1, 2);
    +            fail(""should throw NoSuchMethodException"");
    +        } catch (final NoSuchMethodException e) {
    --- End diff --
    
    In general I agree, but commons lang has a lot similar tests, so it's o.k/more consistent with existing code. 
","14/Mar/17 21:13;githubbot;Github user Abrasha commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/256#discussion_r106028522
  
    --- Diff: src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java ---
    @@ -357,16 +369,23 @@ public void testInvokeMethod() throws Exception {
             assertEquals(""foo(int)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     NumberUtils.BYTE_ONE));
             assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"",
    -                NumberUtils.LONG_ONE));
    -        assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     NumberUtils.DOUBLE_ONE));
             assertEquals(""foo(String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     ""a"", ""b"", ""c""));
             assertEquals(""foo(String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     ""a"", ""b"", ""c""));
             assertEquals(""foo(int, String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     5, ""a"", ""b"", ""c""));
    -
    +        assertEquals(""foo(long...)"", MethodUtils.invokeMethod(testBean, ""foo"",
    +                1L, 2L));
    +        
    +        try {
    +            MethodUtils.invokeMethod(testBean, ""foo"",
    +                    1, 2);
    +            fail(""should throw NoSuchMethodException"");
    +        } catch (final NoSuchMethodException e) {
    --- End diff --
    
    @PascalSchumacher what do you think about refactoring existing tests? Or it is fine to community? I can take care about it
","18/Mar/17 11:29;githubbot;Github user Claudenw commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/256#discussion_r106778971
  
    --- Diff: src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java ---
    @@ -357,16 +369,23 @@ public void testInvokeMethod() throws Exception {
             assertEquals(""foo(int)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     NumberUtils.BYTE_ONE));
             assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"",
    -                NumberUtils.LONG_ONE));
    -        assertEquals(""foo(double)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     NumberUtils.DOUBLE_ONE));
             assertEquals(""foo(String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     ""a"", ""b"", ""c""));
             assertEquals(""foo(String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     ""a"", ""b"", ""c""));
             assertEquals(""foo(int, String...)"", MethodUtils.invokeMethod(testBean, ""foo"",
                     5, ""a"", ""b"", ""c""));
    -
    +        assertEquals(""foo(long...)"", MethodUtils.invokeMethod(testBean, ""foo"",
    +                1L, 2L));
    +        
    +        try {
    +            MethodUtils.invokeMethod(testBean, ""foo"",
    +                    1, 2);
    +            fail(""should throw NoSuchMethodException"");
    +        } catch (final NoSuchMethodException e) {
    --- End diff --
    
    I find that the expect exception works well only with very short tests.  In this case if any of the earlier method calls throws the NoSuchMethodException the test will not fail.  In my opinion the current construct is the better one.
","18/Mar/17 11:50;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/256
  
    
    [![Coverage Status](https://coveralls.io/builds/10660236/badge)](https://coveralls.io/builds/10660236)
    
    Coverage increased (+0.04%) to 94.571% when pulling **2ef748c444b50ccce4819d876225cd134a903139 on drajakumar:master** into **39a2a6fa38c5e4d1293e00f98a89698a962d6775 on apache:master**.

","18/Mar/17 11:53;githubbot;Github user drajakumar commented on the issue:

    https://github.com/apache/commons-lang/pull/256
  
    the comment on indentation from@jvz is fixed now.
","19/Mar/17 16:15;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/256
","19/Mar/17 16:15;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/256
  
    Thanks! :+1: 
",19/Mar/17 16:17;pascalschumacher;Thanks for reporting and thanks for the pull request!,,,,,,,,,,,,,,,,,
FastDateFormat in 3.5 failed test of 3.3.2 while parsing 2014-12-15T19:50:00-05:00,LANG-1305,13031028,Bug,Resolved,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,chonton,nathanael4ever@gmail.com,nathanael4ever@gmail.com,29/Dec/16 07:44,20/Feb/17 03:24,07/Apr/19 20:37,20/Feb/17 03:24,3.5,,,,,,lang.time.*,,,0,,,,,,,,"FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ssZ"", TimeZone.getTimeZone(""GMT-05:00"")).parse(""2014-12-15T19:50:00-05:00"");

This will work on 3.3.2, however, when I upgraded to 3.5 it failed like this:

Exception in thread ""main"" java.text.ParseException: Unparseable date: 2014-12-15T19:50:00-05:00

This made me suprized and I have to carefully check my unit tests to see whether upgrade to 3.5 is reliable.","Windows7, JDK1.8U112",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2017-01-28 15:06:39.296,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 20 03:24:33 UTC 2017,,,,,,0|i383f3:,9223372036854775807,,,,,,,,"28/Jan/17 15:06;Ayush Chaubey;According to the API the date pattern in FastDateFormat follows SimpleDateFormat.
In the issue above the specified date is -
2014-12-15T19:50:00-05:00

whereas it should be -
2014-12-15T19:50:00-0500

The reason is that letter 'Z' is used to represent RFC 822 time zone and its format is like - 0500","20/Feb/17 03:24;chonton;If you need the colon in the input, then use the 'X' format specifier.  Without the colon, use the 'z' or 'Z' format specifier.  The fact that a prior version of FastDateFormat would accept the colon was a bug.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
java.lang.StringIndexOutOfBoundsException resulting in WordUtils.wrap,LANG-1302,13030113,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,dmjones500,developer1011,developer1011,22/Dec/16 13:49,12/Jun/17 12:04,07/Apr/19 20:37,22/Dec/16 15:25,3.5,,,,3.6,,,,,0,,,,,,,,"Commons-lang3:3.5

Issue code:
String appName = ""Google Play Store"";
appName = WordUtils.wrap(appName, appName.length()/2);
System.out.println(appName);

Resulting exception:
Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String index out of range: -3
	at java.lang.String.substring(String.java:1967)
	at org.apache.commons.lang3.text.WordUtils.wrap(WordUtils.java:328)
	at org.apache.commons.lang3.text.WordUtils.wrap(WordUtils.java:176)
	at org.apache.commons.lang3.text.WordUtils.wrap(WordUtils.java:100)
	at removedups.Main2.main(Main2.java:32)

This exception does not occur in commons-lang3:3.4 though","Mac, Android, Linux",,,,,,,,,,,,,LANG-1292,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-22 15:25:03.611,,,false,,,,,Important,,,,,,,,,9223372036854775807,,,Thu Dec 22 15:25:03 UTC 2016,,,,,,0|i37xrr:,9223372036854775807,,,,,,,,"22/Dec/16 15:25;dmjones500;I can't reproduce this from the current trunk. Suspect this is a duplicate of LANG-1292 and is now fixed. Will be released in 3.6.

Thanks for reporting the issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayUtils.addAll() has unsafe use of varargs,LANG-1296,13027464,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,dmjones500,dmjones500,12/Dec/16 14:33,08/Sep/17 17:10,07/Apr/19 20:37,,3.5,,,,,,lang.*,,,0,,,,,,,,"{{ArrayUtils.addAll()}} is marked as {{@SafeVarargs}}, but I suspect the use of the varargs is unsafe.

An example, drawn heavily from [this StackOverflow answer|http://stackoverflow.com/a/14252221/474189], demonstrates this:

{code:java}
static <T> T[] arrayOfTwo(T a, T b) {
   return ArrayUtils.addAll(null, a, b);
}

@Test
public void testBadVarArgs() throws Exception {
   @SuppressWarnings(""unused"") // Need to assign to trigger exception
   String[] result = arrayOfTwo(""foo"", ""bar"");
}
{code}

the above code throws an exception: {{java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;}}.

Here, the {{null}} input array causes the method to return a clone of the vararg array. This is what triggers the problem.

I faced a similar issue when adding the {{ArrayUtils.insert(...)}} methods and I solved it by returning {{null}} if the input array is {{null}}. We can't do this here without breaking behaviour.",,,,,,,,,,,,,,,,LANG-1295,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-12 22:48:00.568,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 20 16:50:44 UTC 2017,,,,,,0|i37hfj:,9223372036854775807,,,,,,,,"12/Dec/16 22:48;pascalschumacher;A version of commons-lang containing this method with the @SafeVarargs annotation has not been released yet, so the annotation can just be removed.",20/Jan/17 16:50;pascalschumacher;I have just removed the SafeVarargs annotation from the method.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayUtils.toArray(T... items) has unsafe use of varargs,LANG-1295,13027421,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,dmjones500,dmjones500,12/Dec/16 11:09,08/Sep/17 17:10,07/Apr/19 20:37,,3.5,,,,,,lang.*,,,0,,,,,,,,"{{ArrayUtils.toArray(T... items)}} is marked as {{@SafeVarargs}}, but I suspect the use of the varargs is unsafe.

An example, drawn heavily from [this StackOverflow answer|http://stackoverflow.com/a/14252221/474189], demonstrates this:

{code:java}
static <T> T[] arrayOfTwo(T a, T b) {
    return ArrayUtils.toArray(a, b);
}

@Test
public void testBadVarArgs() throws Exception {
    @SuppressWarnings(""unused"") // Need to assign to trigger exception
    String[] result = arrayOfTwo(""foo"", ""bar"");
}
{code}

the above code throws an exception: {{java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-12 22:48:54.081,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed May 24 19:54:26 UTC 2017,,,,,,0|i37h5z:,9223372036854775807,,,,,,,,"12/Dec/16 14:29;dmjones500;Unfortunately, this method seems to do exactly what you're not supposed to do with varargs.

We may have to deprecate this and warn people off using it.

I'm going to create another issue for the {{addAll}} method, since the solution (and discussion thereof) is likely to be different.","12/Dec/16 22:48;pascalschumacher;A version of commons-lang containing this method with the @SafeVarargs annotation has not been released yet, so the annotation can just be removed.","14/Dec/16 05:48;dmjones500;Agreed, but the bigger question on this issue and LANG-1296 is can we fix the underlying problem and, if not, how best to cope with that.","18/Dec/16 07:20;dmjones500;The only solution I can think of here is to deprecate the original method and instead offer:

{code:java}
    @SafeVarargs
    public static <T> T[] toArrayOf(Class<T> clazz, final T... items) {
        if (items == null) {
            return null;
        }
        
        @SuppressWarnings(""unchecked"")
        T[] result = (T[]) Array.newInstance(clazz, items.length);
        
        System.arraycopy(items, 0, result, 0, items.length);
        return result;
    }
{code}

I believe this new method is safe, since it only relies on the items being of type {{T}}, but doesn't care whether {{items}} is a {{T[]}}.

Thoughts and comments on this issue very welcome!",20/Jan/17 16:53;pascalschumacher;As I first step I have just removed the SafeVarargs annotation from the method.,"24/May/17 19:54;joehni;I am definitely -1 for deprecation. We have a lot of unit tests for this method, that demonstrate, what actually works (incl. indirect generic calls). In the case above, you get a compiler warning for the return value of the method arrayOfTwo if the @SafeVarargs is missing.",,,,,,,,,,,,,,,,,,,,,,,,,
WordUtils.wrap throws StringIndexOutOfBoundsException,LANG-1292,13023739,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,dmjones500,mhankus,mhankus,28/Nov/16 14:00,22/Dec/16 15:25,07/Apr/19 20:37,01/Dec/16 19:32,3.5,,,,3.6,,,,,0,,,,,,,,"
Running following line of code results in StringIndexOutOfBoundsException (in 3.5 release)
{code}
WordUtils.wrap(""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"",70);
{code}

{code}
java.lang.StringIndexOutOfBoundsException: String index out of range: -1

	at java.lang.String.substring(String.java:1967)
	at org.apache.commons.lang3.text.WordUtils.wrap(WordUtils.java:328)
	at org.apache.commons.lang3.text.WordUtils.wrap(WordUtils.java:176)
	at org.apache.commons.lang3.text.WordUtils.wrap(WordUtils.java:100)
	at pl.netpr.commons.string.TextToolsTest.testWrap(TextToolsTest.java:245)
	
{code}

It worked fine with 3.4 releae. 





",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-28 21:58:04.242,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Dec 01 19:31:31 UTC 2016,,,,,,0|i36ufr:,9223372036854775807,,,,,,,,28/Nov/16 21:58;pascalschumacher;caused by this commit: https://github.com/apache/commons-lang/commit/0fe9685c8a78ba2d780a3ec1e1a323990dc6d218,"01/Dec/16 19:31;dmjones500;Thanks for reporting this. Now fixed:

{quote}
Repository: commons-lang
Updated Branches:
 refs/heads/master 8c1a0d2ee -> a08ec31db


Fixes LANG-1292: WordUtils.wrap throws StringIndexOutOfBoundsException

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/a08ec31d
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/a08ec31d
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/a08ec31d
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomStringUtils#random can enter infinite loop if end parameter is to small,LANG-1287,13021776,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,18/Nov/16 15:41,12/Jun/17 12:04,07/Apr/19 20:37,18/Nov/16 15:53,3.5,,,,3.6,,lang.*,,,0,,,,,,,,"{quote}I faced that the random method can cause an infinite loop. It can be caused if the end parameter is too low for generating either numbers (< 48) or letters (<65). I added some exception tests to make the cases clear. Basically, if we call the random function with for example numbers = true && end < 48 the validation for Character.isDigit(ch) will fail and we increment count count++.{quote}

Ivan Morozov https://github.com/apache/commons-lang/pull/211",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2016-11-18 15:41:33.0,,,,,,0|i36ibj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomStringUtils random method can overflow and return characters outside of specified range,LANG-1286,13021590,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,dmjones500,dmjones500,dmjones500,17/Nov/16 21:00,14/Dec/16 06:34,07/Apr/19 20:37,14/Dec/16 06:34,3.5,,,,3.6,,lang.*,,,0,,,,,,,,"{{RandomStringUtils.random()}} can overflow and return characters that are outside the range specified by the {{start}} and {{end}} parameters. This is because it casts a random integer in the range {{[start,end)}} to a character, without checking if this will overflow.

Example failing test case:

{code}
@Test
public void testCharOverflow() throws Exception {
    int start = 65535;
    int end = Integer.MAX_VALUE;
    
    @SuppressWarnings(""serial"")
    Random fixedRandom = new Random() {
        @Override
        public int nextInt(int n) {
            // Prevents selection of 'start' as the character
            return 1;
        }
    };
    
    String result = RandomStringUtils.random(1, start, end, false, false, null, fixedRandom);
    char c = result.charAt(0);
    assertTrue(c >= start && c < end);
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Dec 14 06:34:34 UTC 2016,,,,,,0|i36h67:,9223372036854775807,,,,,,,,"14/Dec/16 06:34;dmjones500;Fixed in commit 7f7fa03ea.

The class needs an overhaul to make better use of the code point methods in {{Character}}. I'll work on that in future commits.

{quote}
Repository: commons-lang
Updated Branches:
 refs/heads/master 35c27d025 -> 7f7fa03ea


Fix for LANG-1286: RandomStringUtils random method can overflow...

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/f643b4fa
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/f643b4fa
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/f643b4fa
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in FastDateParser$TimeZoneStrategy,LANG-1285,13021044,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,ilgrosso,ilgrosso,16/Nov/16 06:06,12/Jun/17 12:04,07/Apr/19 20:37,16/Nov/16 20:47,3.5,,,,3.6,,lang.time.*,,,0,,,,,,,,"It seems that after LANG-1186 was fixed, and before 3.5 went out, the bug was re-introduced.

One of my customers is getting the following error (I am actually not able to reproduce it) with 3.5:

{code}
java.lang.NullPointerException
        at org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy.<init>(FastDateParser.java:869)
        at org.apache.commons.lang3.time.FastDateParser.getLocaleSpecificStrategy(FastDateParser.java:637)
        at org.apache.commons.lang3.time.FastDateParser.getStrategy(FastDateParser.java:606)
        at org.apache.commons.lang3.time.FastDateParser.access$100(FastDateParser.java:73)
        at org.apache.commons.lang3.time.FastDateParser$StrategyParser.letterPattern(FastDateParser.java:234)
        at org.apache.commons.lang3.time.FastDateParser$StrategyParser.getNextStrategy(FastDateParser.java:220)
        at org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:167)
        at org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:153)
        at org.apache.commons.lang3.time.FastDateFormat.<init>(FastDateFormat.java:394)
        at org.apache.commons.lang3.time.FastDateFormat.<init>(FastDateFormat.java:378)
        at org.apache.commons.lang3.time.FastDateFormat$1.createInstance(FastDateFormat.java:100)
        at org.apache.commons.lang3.time.FastDateFormat$1.createInstance(FastDateFormat.java:97)
        at org.apache.commons.lang3.time.FormatCache.getInstance(FormatCache.java:81)
        at org.apache.commons.lang3.time.FastDateFormat.getInstance(FastDateFormat.java:128)
{code}","Centos 7, en_GB locale",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-16 06:09:42.993,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Nov 16 20:46:51 UTC 2016,,,,,,0|i36dsv:,9223372036854775807,,,,,,,,"16/Nov/16 06:09;githubbot;GitHub user ilgrosso opened a pull request:

    https://github.com/apache/commons-lang/pull/212

    [LANG-1285] Replicate the fix for LANG-1186

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ilgrosso/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/212.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #212
    
----
commit b61c9b3594bec226dd26ef9af966ebaa6ebf78dc
Author: Francesco Chicchiriccò <ilgrosso@apache.org>
Date:   2016-11-16T06:07:43Z

    [LANG-1285] Replicate the fix for LANG-1186

----
","16/Nov/16 06:11;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/212
  
    
    [![Coverage Status](https://coveralls.io/builds/8847626/badge)](https://coveralls.io/builds/8847626)
    
    Coverage increased (+0.0004%) to 93.563% when pulling **b61c9b3594bec226dd26ef9af966ebaa6ebf78dc on ilgrosso:master** into **0f6a292a29fedd49741310cd517ac4ba907bf8d4 on apache:master**.

","16/Nov/16 20:46;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/212
","16/Nov/16 20:46;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/212
  
    Thanks! 👍
",,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomStringUtils' random method goes into an infinite loop,LANG-1284,13020016,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,pascalschumacher,anedumar,anedumar,11/Nov/16 03:45,25/May/17 12:58,07/Apr/19 20:37,25/May/17 12:58,3.5,,,,,,,,,0,,,,,,,,"The following code goes into an infinite loop.

{code}
RandomStringUtils.random(1, 0, 0, false, true, new char[]{ 'a' })
{code}

I know it doesn't make sense to pass letters=false and then a letter array, but a bug in the caller's code will make him fall into this trap.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-12 07:13:39.541,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu May 25 12:58:36 UTC 2017,,,,,,0|i367gf:,9223372036854775807,,,,,,,,"12/Nov/16 07:13;dmjones500;I'm not sure if this can be prevented without very inefficient scanning of the input array. Perhaps the best approach here is a warning in the Javadocs.

The Javadocs need a clean up anyway, I can't really understand the opening paragraphs:

{quote}
If start and end are both 0, start and end are set to ' ' and 'z', the ASCII printable characters, will be used, unless letters and numbers are both false, in which case, start and end are set to 0 and Integer.MAX_VALUE.

If set is not null, characters between start and end are chosen.{quote}",16/Nov/16 22:44;eltonnunes;Maybe the better is a warning in the Javadoc.,25/May/17 12:58;pascalschumacher;RandomStringUtils will be deprecated in commons-lang 3.6 in favor of RandomStringGenerator from commons-text. Please use [RandomStringGenerator|https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/RandomStringGenerator.html] instead.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RecursiveToStringStyle does not handle nested Maps correctly,LANG-1283,13019545,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,dominik.stadler@gmx.at,dominik.stadler@gmx.at,09/Nov/16 14:14,23/Nov/16 19:35,07/Apr/19 20:37,,3.4,,,,,,lang.builder.*,,,0,,,,,,,,"When using {{RecursiveToStringStyle}} to include all member fields of all nested objects, it works for simple Maps, but as soon as I have Maps as values inside another Map, the contents is not included any more, but only a Object.toString() seems to be appended for the objects instead.

A possible fix would be to add  the following to RecursiveToStringStyle, although there might be a better way to fix this:

{code}
        @Override
        protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {
            appendClassName(buffer, map);
            appendIdentityHashCode(buffer, map);
            appendDetail(buffer, fieldName, map.entrySet());
        }
{code}

See the attached unit-test for a reproducer.

Please also note that {{RecursiveToStringStyleTest}} in commons-lang seems to mostly work on the DefaultStyle instead, see https://github.com/apache/commons-lang/blob/master/src/test/java/org/apache/commons/lang3/builder/RecursiveToStringStyleTest.java#L38, only one method, {{testPerson()}}, seems to actually do a real test here!",,,,,,,,,,,,,,,,,,,,,,,,,,09/Nov/16 21:44;centic;LANG_1283__Make_RecursiveToStringStyleTest_actually_test_the_correct_class.patch;https://issues.apache.org/jira/secure/attachment/12838230/LANG_1283__Make_RecursiveToStringStyleTest_actually_test_the_correct_class.patch,09/Nov/16 14:15;dominik.stadler@gmx.at;RecursiveToStringTest.java;https://issues.apache.org/jira/secure/attachment/12838180/RecursiveToStringTest.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2016-11-09 21:44:06.148,,,false,,,,,Patch,,,,,,,,,9223372036854775807,,,Wed Nov 23 19:35:10 UTC 2016,,,,,,0|i364jr:,9223372036854775807,,,,,,,,09/Nov/16 21:44;centic;A small patch to actually use RecursiveToStringStyle in the test-case.,"23/Nov/16 19:35;dmjones500;Thanks for the test case patch, I've applied that in commit 41bc4cd02.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#normalizeSpace normalizeSpace should not replace non-breaking spaces with normal whitespace,LANG-1282,13017830,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,pascalschumacher,pascalschumacher,03/Nov/16 21:25,14/Nov/17 17:41,07/Apr/19 20:37,,3.5,,,,,,,,,1,,,,,,,,"As of 3.4 StringUtils#normalizeSpace does not normalize non-breaking whitespace anymore. Therefore it shouldn't replace a non-breaking whitespace white breaking whitespace, but both assertions succeed:

{code}
assertEquals(""a b"", StringUtils.normalizeSpace(""a\u00A0b""));
assertEquals(""a  b"", StringUtils.normalizeSpace(""a\u00A0 b""));
{code}

source: https://github.com/apache/commons-lang/pull/184",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-04 08:35:43.087,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Nov 14 17:41:13 UTC 2017,,,,,,0|i35tz3:,9223372036854775807,,,,,,,,"04/Dec/16 08:35;dmjones500;I agree with this. 

If {{Character.isWhitespace()}} is the test, then the Javadocs also need to be updated to make this crystal clear. The current documentation waffles on a bit about XML vs Java white-space conventions; IMO we should just concisely explain what this method does.","14/Nov/17 17:41;dh_gis;IMO StringUtils#normalizeSpace should be idempotent, i.e.
{code:java}
String s = ""a\u00A0 b"";
assertEquals(StringUtils.normalizeSpace(s), StringUtils.normalizeSpace(StringUtils.normalizeSpace(s)));
{code}
Hence non-breaking spaces should not be replaced by normal spaces. Simply remove the replacement in the following line
{code:java}
newChars[count++] = (actualChar == 160 ? 32 : actualChar);
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc of StringUtils.ordinalIndexOf is contradictory.,LANG-1281,13017670,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,aioobe,aioobe,03/Nov/16 14:57,12/Jun/17 12:04,07/Apr/19 20:37,06/Nov/16 11:20,3.5,,,,3.6,,lang.*,,,0,,,,,,,,"Javadoc of StringUtils.ordinalIndexOf states the following:

""The code increments the starting index by one, rather than by the length of the match string, so matches may overlap.""

But then gives the following example:

StringUtils.ordinalIndexOf(""aabaabaa"", """", 2) = 0

which clearly indicates that it does *not* increment the starting index by one in case of the empty string.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-11-03 20:15:28.112,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 06 11:20:58 UTC 2016,,,,,,0|i35szb:,9223372036854775807,,,,,,,,"03/Nov/16 20:15;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/205

    LANG-1281: Javadoc of StringUtils.ordinalIndexOf is contradictory

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang StringUtils#ordialIndexOf_javadoc

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/205.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #205
    
----
commit e5997106b568d321462278911980b8c81d0679e6
Author: pascalschumacher <pascalschumacher@gmx.net>
Date:   2016-11-03T20:14:36Z

    LANG-1281: Javadoc of StringUtils.ordinalIndexOf is contradictory

----
","03/Nov/16 21:52;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    +1
","03/Nov/16 21:55;githubbot;Github user aioobe commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    But the implementation of the method does NOT increment by 1 if given the empty string. So this change causes the documentation to contradict the implementation.
","03/Nov/16 22:09;kinow;I had voted +1 for the pull request, but then read the Javadoc again, and now I'm not sure about it :-)

>""The code increments the starting index by one, rather than by the length of the match string, so matches may overlap.""

I'm not sure if there's anything wrong with the above statement for StringUtils#ordinalOf.

> But the implementation of the method does NOT increment by 1 if given the empty string. So this change causes the documentation to contradict the implementation.

Given the empty string, as far as I can tell, the implementation returns (as in the doc) ""the n-th index of the search CharSequence"", which is 0. It never increments the starting index (which is done here https://github.com/apache/commons-lang/blob/ff4497aff8cc9de4e0b2c6e5e23e5b6550f76f29/src/main/java/org/apache/commons/lang3/StringUtils.java#L1477).

As it was given an empty string, this check in ordinalOf method returns the empty string: https://github.com/apache/commons-lang/blob/ff4497aff8cc9de4e0b2c6e5e23e5b6550f76f29/src/main/java/org/apache/commons/lang3/StringUtils.java#L1466","03/Nov/16 22:19;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    `...incrementing the starting index by one after each successful match, so matches may overlap.` For empty String there is no match, so no incrementing is done.
    
    Please do not hesitate to suggest better solution for this issue. Thanks!
","03/Nov/16 22:36;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    I guess we should hide the implementation details and just state `Note: Matches may overlap.`.
    
    What do you think?
","03/Nov/16 22:51;githubbot;Github user aioobe commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    Of course there are matches for the empty string. a) there is both a leading and trailing empty string in ""a"" for instance. b) the implementation doesn't return INDEX_NOT_FOUND when given the empty string.
    
    As far as I can tell, the implementation increments the position with 1 each time a match is found, except if the sought string is the empty string, in which case it increments with 0 (conceptually that is; in practice it obviously returns 0 right away for that case, since if it increments by 0 each match, it will never move away from 0).
    
    Personally I think the implementation is messy and hard to formalize. It would have been much better if the implementation consistently stuck the idea of incrementing by 1 for each match. This would not rule out the optimization because one would simply return n for the empty search string case.
    
    Given the situation I guess it's not an option to change the implementation though, so the only option left is to adjust the documentation to reflect the current behavior. Here are two suggestions:
    
    ""increments by 1 unless the search string is the empty string in which case the position is never incremented""
    
    or something like
    
    ""always returns 0 if the search string is the empty string, otherwise it increments the position by 1 for each match found""
","04/Nov/16 00:27;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    
    [![Coverage Status](https://coveralls.io/builds/8658876/badge)](https://coveralls.io/builds/8658876)
    
    Coverage increased (+0.007%) to 93.563% when pulling **e5997106b568d321462278911980b8c81d0679e6 on PascalSchumacher:StringUtils#ordialIndexOf_javadoc** into **ff4497aff8cc9de4e0b2c6e5e23e5b6550f76f29 on apache:master**.

","04/Nov/16 02:42;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    Oh, now it makes sense @aioobe 
    
    I like 
    
    ""increments by 1 unless the search string is the empty string in which case the position is never incremented""
","04/Nov/16 16:23;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    Updated the pull request using ""increments by 1 unless the search string is the empty string in which case the position is never incremented"".
","04/Nov/16 19:20;githubbot;Github user aioobe commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    Looks good to me, even though I think it's a terrible idea to view empty strings as some form of special strings and treat them differently than other strings.
","04/Nov/16 19:46;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    
    [![Coverage Status](https://coveralls.io/builds/8673668/badge)](https://coveralls.io/builds/8673668)
    
    Coverage increased (+0.02%) to 93.58% when pulling **ac05015befda654b2cd6e7a07c2eca5785d49045 on PascalSchumacher:StringUtils#ordialIndexOf_javadoc** into **ff4497aff8cc9de4e0b2c6e5e23e5b6550f76f29 on apache:master**.

","06/Nov/16 11:20;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/205
  
    Thanks everybody!
","06/Nov/16 11:20;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/205
",06/Nov/16 11:20;pascalschumacher;Thanks for reporting.,,,,,,,,,,,,,,,,
BooleanUtils javadoc issues,LANG-1278,13014264,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,pascalschumacher,dukeyin,dukeyin,21/Oct/16 15:06,12/Jun/17 12:04,07/Apr/19 20:37,21/Oct/16 19:08,3.1,3.5,,,3.6,,,,,0,documentation,,,,,,,"1.  Every instance of {{NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean.}} needs to be fixed, for example: https://github.com/apache/commons-lang/blob/LANG_3_5/src/main/java/org/apache/commons/lang3/BooleanUtils.java#L51

{{autoboxed}} -> {{unboxed}}

reference: https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html

2.  https://github.com/apache/commons-lang/blob/LANG_3_5/src/main/java/org/apache/commons/lang3/BooleanUtils.java#L1025

The examples are duplicated: lines 1029~1031 are identical to lines 1026~1028.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-21 19:08:03.985,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 21 19:08:03 UTC 2016,,,,,,0|i357zb:,9223372036854775807,,,,,,,,21/Oct/16 19:08;pascalschumacher;Fixed. Thanks for reporting!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrBuilder#replaceAll ArrayIndexOutOfBoundsException,LANG-1276,13013460,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,skotsj,skotsj,19/Oct/16 10:17,12/Jun/17 12:04,07/Apr/19 20:37,23/Oct/16 15:07,3.2.1,3.4,3.5,,3.6,,lang.text.*,,,0,,,,,,,,"There is a bug in replace for StrBuilder, seems the use of nonupdated buffer and character count is off.

new StrBuilder(""Dear X, hello X."").replaceAll(StrMatcher.stringMatcher(""X""), ""012345678901234567"");

yields

{noformat}
java.lang.ArrayIndexOutOfBoundsException: 49
	at org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(StrMatcher.java:372)
	at org.apache.commons.lang3.text.StrBuilder.replaceImpl(StrBuilder.java:2115)
	at org.apache.commons.lang3.text.StrBuilder.replace(StrBuilder.java:2088)
	at org.apache.commons.lang3.text.StrBuilder.replaceAll(StrBuilder.java:2049)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-19 11:08:27.283,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Oct 23 15:07:01 UTC 2016,,,,,,0|i3530n:,9223372036854775807,,,,,,,,"19/Oct/16 11:08;britter;[~skotsj] we just released Commons Lang 3.5 Do you see the same problem with 3.5?

Thank you!",19/Oct/16 11:13;skotsj;Seems to be still present in 3.5,20/Oct/16 06:43;britter;Patches welcome!,"23/Oct/16 02:11;githubbot;GitHub user andyklimczak opened a pull request:

    https://github.com/apache/commons-lang/pull/200

    LANG-1276

    Fix issue of buf using nonupdated buffer in StrBuilder replaceImpl
    Avoid array OoB error by keeping variable buf consistent with buffer

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/andyklimczak/commons-lang LANG-1276

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/200.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #200
    
----
commit 0dd44493d70188ed6145cdb130537532cbc68522
Author: Andy Klimczak <andyklimczak@fastmail.com>
Date:   2016-10-23T01:54:14Z

    LANG-1276
    Avoid array OOB error by keeping variable buf consistent with buffer in
    StrBuilder replaceImpl

----
","23/Oct/16 02:16;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/200
  
    
    [![Coverage Status](https://coveralls.io/builds/8463388/badge)](https://coveralls.io/builds/8463388)
    
    Coverage increased (+0.02%) to 93.57% when pulling **0dd44493d70188ed6145cdb130537532cbc68522 on andyklimczak:LANG-1276** into **e2dbe55d56bd6c1209276050f527d36717e33e1d on apache:master**.

","23/Oct/16 02:16;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/200
  
    
    [![Coverage Status](https://coveralls.io/builds/8463388/badge)](https://coveralls.io/builds/8463388)
    
    Coverage increased (+0.02%) to 93.57% when pulling **0dd44493d70188ed6145cdb130537532cbc68522 on andyklimczak:LANG-1276** into **e2dbe55d56bd6c1209276050f527d36717e33e1d on apache:master**.

","23/Oct/16 15:05;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/200
","23/Oct/16 15:05;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/200
  
    Thanks! :+1: 
",23/Oct/16 15:07;pascalschumacher;Pull request merged. Thanks for the pull request and thanks for reporting!,,,,,,,,,,,,,,,,,,,,,,
StringUtils#isAnyEmpty and #isAnyBlank should return false for an empty array,LANG-1271,13007688,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,26/Sep/16 20:05,12/Jun/17 12:04,07/Apr/19 20:37,19/Oct/16 16:55,,,,,3.6,,lang.*,,,0,,,,,,,,"An empty array does not contain any empty/blank CharSequences, so isAnyEmpty/isAnyBlank should return false for an empty array.",,,,,,,,,,,,,,,,LANG-1270,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 19 16:55:55 UTC 2016,,,,,,0|i343k7:,9223372036854775807,,,,,,,,19/Oct/16 16:55;pascalschumacher;Pull request merged. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong name or result of StringUtils::getJaroWinklerDistance,LANG-1269,13006450,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,pascalschumacher,jmkeil,jmkeil,21/Sep/16 10:19,19/Mar/17 13:28,07/Apr/19 20:37,19/Mar/17 13:28,3.3,3.4,3.5,,,,,,,0,,,,,,,,"The name of the method StringUtils::getJaroWinklerDistance is misleading.
Currently for equal strings {{1}} is returned, for completely different strings {{0}} is returned. That is a measure of similarity, not of a distance. A distance must be {{0}} for equal strings. I read on the issues LANG-591 and LANG-944, that it was decided to have a similar name to StringUtils::getLevenshteinDistance, but that requires also the change of the methods result.

Could you please (1) rename the method to StringUtils::getJaroWinklerSimilarity or (2) change the method to return {{1 - currentResult}}?

First option has the disadvantage to lose the similar naming of the similar methods, second option implies the risk to unnoticed introduce bugs in depending code. So I think it is preferable to use the first option.
",,,,,,,,,,,,,,,,,,,,,,,TEXT-9,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-24 10:27:30.941,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 19 13:28:15 UTC 2017,,,,,,0|i33vy7:,9223372036854775807,,,,,,,,24/Sep/16 10:27;britter;This probably also affects Commons Text,"12/Oct/16 07:45;kinow;Indeed Benedikt. I'll file a ticket for [text].

If methods like this are going to be deprecated (and maybe removed in the 4.x release?) in [lang], then I'd think we should just add the @deprecated annotation to the method. Other wise, I'd be inclined to leave the method name as-is (so we keep binary compatibility), return 1 - currentResult as suggested by [~jmkeil]; and maybe update the Javadocs as well.
","22/Oct/16 09:40;pascalschumacher;What about deprecating the current method (letting it stay as it is) and adding renamed copy (getJaroWinklerSimilarity). This ensures that we do not break any existing code. What do you think?
","22/Oct/16 09:56;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/198

    LANG-1269: Wrong name or result of StringUtils#getJaroWinklerDistance

    deprecat StringUtils#getJaroWinklerDistance and add StringUtils#getJaroWinklerSimilarity instead

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang jarowinklerdistance_name

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/198.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #198
    
----
commit d2e6338a8ec46ebc80156ef9dcdd83dfe63ee8b5
Author: pascalschumacher <pascalschumacher@gmx.net>
Date:   2016-10-22T09:55:32Z

    LANG-1269: Wrong name or result of StringUtils#getJaroWinklerDistance
    
    deprecat StringUtils#getJaroWinklerDistance and add StringUtils#getJaroWinklerSimilarity instead

----
","22/Oct/16 10:02;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/198
  
    
    [![Coverage Status](https://coveralls.io/builds/8458576/badge)](https://coveralls.io/builds/8458576)
    
    Coverage increased (+0.004%) to 93.545% when pulling **d2e6338a8ec46ebc80156ef9dcdd83dfe63ee8b5 on PascalSchumacher:jarowinklerdistance_name** into **91d6bd74fa358fdc8d7cb7681c76c509fd9a8e7d on apache:master**.

","22/Oct/16 12:26;githubbot;Github user kinow commented on the issue:

    https://github.com/apache/commons-lang/pull/198
  
    +1
","22/Oct/16 13:13;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/198
  
    
    [![Coverage Status](https://coveralls.io/builds/8459485/badge)](https://coveralls.io/builds/8459485)
    
    Coverage increased (+0.02%) to 93.57% when pulling **436d2801899827a2651b8b44d680aaf9e17acca7 on PascalSchumacher:jarowinklerdistance_name** into **8274993e293a79fc75829df398233915a6387a4b on apache:master**.

","22/Oct/16 13:13;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/198
  
    
    [![Coverage Status](https://coveralls.io/builds/8459485/badge)](https://coveralls.io/builds/8459485)
    
    Coverage increased (+0.02%) to 93.57% when pulling **436d2801899827a2651b8b44d680aaf9e17acca7 on PascalSchumacher:jarowinklerdistance_name** into **8274993e293a79fc75829df398233915a6387a4b on apache:master**.

","28/Oct/16 17:22;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/198
",19/Mar/17 13:28;pascalschumacher;I reverted the addition of StringUtils#getJaroWinklerSimilarity in https://github.com/apache/commons-lang/commit/f4ee399e31eb61741f5f2167d6af8f49c0e991b6 because all string distance methods of commons-lang are now deprecated in favor of commons-text.,,,,,,,,,,,,,,,,,,,,,
FastDateFormat does not support timezone X/XX/XXX in SimpleDateFormat,LANG-1267,13005609,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Cannot Reproduce,,hyukjin.kwon,hyukjin.kwon,17/Sep/16 05:56,19/Sep/16 08:55,07/Apr/19 20:37,19/Sep/16 08:48,3.3.2,,,,,,lang.time.*,,,0,,,,,,,,"It sees {{FastDateFormat}} does not support timezone {{X}}/{{XX}}/{{XXX}} in {{SimpleDateFormat}}.

For example, 

{code}
FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX"")
{code}

throws an exception as below:

{code}
Illegal pattern component: XXX
java.lang.IllegalArgumentException: Illegal pattern component: XXX
	at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:282)
	at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:149)
	at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:142)
{code}


{{X}}/{{XX}}/{{XXX}} are different with {{Z}} or {{ZZ}} as described in https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html#iso8601timezone

-It supports to read all {{+0800}}, {{+08}} and {{+08:00}} whereas it seems there is no way to include those all.-

I looked though the documentation multiple times but I could not find the explicit mention about this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-17 14:55:22.566,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Sep 19 08:55:28 UTC 2016,,,,,,0|i33qrz:,9223372036854775807,,,,,,,,17/Sep/16 14:55;britter;Patches welcome,18/Sep/16 19:46;nbeyer;It looks like 'X' has been added to master: https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blob;f=src/main/java/org/apache/commons/lang3/time/FastDateParser.java;h=8275ddfd2b5eade34a4a19048c1b0b869d8f1eda;hb=refs/heads/master#l600.,19/Sep/16 07:00;britter;[~hyukjin.kwon] which constructor are you using for FastDateFormat? There is no constructor using only a single String parameter.,"19/Sep/16 07:13;hyukjin.kwon;Oh, I am so sorry. I use {{FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX"")}}. It wrote this wrong during testing between {{SimpleDateFormat}} and {{FastDateFormat}}.",19/Sep/16 08:48;britter;This works with the current code base. See  commit bdb074610c87a210ea4c0d91d579cb4558f4b19f,19/Sep/16 08:55;hyukjin.kwon;Thank you for your help.,,,,,,,,,,,,,,,,,,,,,,,,,
Build failures when building with Java 9 EA,LANG-1265,13004155,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,britter,britter,11/Sep/16 15:58,12/Jun/17 12:04,07/Apr/19 20:37,28/Feb/17 22:38,,,,,3.6,,,,,0,,,,,,,,"When building with Java 9 EA I get: 

{code}
Failed tests:
 FastDateFormat_ParserTest>FastDateParserTest.testLocales_LongNoEra_AD:304->FastDateParserTest.testLocales:342 Locale no failed with yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE era AD
java.text.ParseException: Unparseable date: 2003/februar/0010/0012/0000/00/AM/mandag
  FastDateFormat_ParserTest>FastDateParserTest.testLocales_LongNoEra_BC:309->FastDateParserTest.testLocales:342 Locale no failed with yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE era BC
java.text.ParseException: Unparseable date: 2003/februar/0010/0012/0000/00/AM/lørdag
  FastDateFormat_ParserTest>FastDateParserTest.testLocales_Long_AD:284->FastDateParserTest.testLocales:342 Locale no failed with GGGG/yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE era AD
java.text.ParseException: Unparseable date: AD/2003/februar/0010/0012/0000/00/AM/mandag
  FastDateFormat_ParserTest>FastDateParserTest.testLocales_Long_BC:289->FastDateParserTest.testLocales:342 Locale qu_EC failed with GGGG/yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE era BC
java.text.ParseException: Unparseable date: ""/2003/Hatun puquy/0010/0012/0000/00/a.m./Sábado""
  FastDateFormat_ParserTest>FastDateParserTest.testLocales_ShortNoEra_AD:314->FastDateParserTest.testLocales:342 Locale no failed with y/M/d/h/a/m/s/E era AD
java.text.ParseException: Unparseable date: 2003/2/10/12/AM/0/0/ma
  FastDateFormat_ParserTest>FastDateParserTest.testLocales_ShortNoEra_BC:319->FastDateParserTest.testLocales:342 Locale no failed with y/M/d/h/a/m/s/E era BC
java.text.ParseException: Unparseable date: 2003/2/10/12/AM/0/0/lø
  FastDateFormat_ParserTest>FastDateParserTest.testLocales_Short_AD:294->FastDateParserTest.testLocales:342 Locale no failed with G/y/M/d/h/a/m/s/E era AD
java.text.ParseException: Unparseable date: e.Kr./2003/2/10/12/AM/0/0/ma
  FastDateFormat_ParserTest>FastDateParserTest.testLocales_Short_BC:299->FastDateParserTest.testLocales:342 Locale qu_EC failed with G/y/M/d/h/a/m/s/E era BC
java.text.ParseException: Unparseable date: ""/2003/2/10/12/a.m./0/0/Sab""
  FastDateParserTest.testLocales_LongNoEra_AD:304->testLocales:342 Locale no failed with yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE era AD
java.text.ParseException: Unparseable date: 2003/februar/0010/0012/0000/00/AM/mandag
  FastDateParserTest.testLocales_LongNoEra_BC:309->testLocales:342 Locale no failed with yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE era BC
java.text.ParseException: Unparseable date: 2003/februar/0010/0012/0000/00/AM/lørdag
  FastDateParserTest.testLocales_Long_AD:284->testLocales:342 Locale no failed with GGGG/yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE era AD
java.text.ParseException: Unparseable date: AD/2003/februar/0010/0012/0000/00/AM/mandag
  FastDateParserTest.testLocales_Long_BC:289->testLocales:342 Locale qu_EC failed with GGGG/yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE era BC
java.text.ParseException: Unparseable date: ""/2003/Hatun puquy/0010/0012/0000/00/a.m./Sábado""
  FastDateParserTest.testLocales_ShortNoEra_AD:314->testLocales:342 Locale no failed with y/M/d/h/a/m/s/E era AD
java.text.ParseException: Unparseable date: 2003/2/10/12/AM/0/0/ma
  FastDateParserTest.testLocales_ShortNoEra_BC:319->testLocales:342 Locale no failed with y/M/d/h/a/m/s/E era BC
java.text.ParseException: Unparseable date: 2003/2/10/12/AM/0/0/lø
  FastDateParserTest.testLocales_Short_AD:294->testLocales:342 Locale no failed with G/y/M/d/h/a/m/s/E era AD
java.text.ParseException: Unparseable date: e.Kr./2003/2/10/12/AM/0/0/ma
  FastDateParserTest.testLocales_Short_BC:299->testLocales:342 Locale qu_EC failed with G/y/M/d/h/a/m/s/E era BC
java.text.ParseException: Unparseable date: ""/2003/2/10/12/a.m./0/0/Sab""
Tests in error:
  LocaleUtilsTest.testParseAllLocales:578 » IllegalArgument Invalid locale forma...
  FastDateFormat_ParserTest>FastDateParserTest.testParses:252->FastDateParserTest.validateSdfFormatFdpParseEquality:228 » Parse
  FastDateFormat_ParserTest>FastDateParserTest.testTzParses:275 » Parse Unparsea...
  FastDateParserTest.testParses:252->validateSdfFormatFdpParseEquality:228 » Parse
  FastDateParserTest.testTzParses:275 » Parse Unparseable date: 2000/02/10 北美东部标...

Tests run: 3882, Failures: 16, Errors: 5, Skipped: 5
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-26 14:32:00.639,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 28 22:38:27 UTC 2017,,,,,,0|i33hsv:,9223372036854775807,,,,,,,,26/Sep/16 14:32;bodewig;Looks as if the changed default locale provider might be the root cause: http://openjdk.java.net/jeps/252,26/Sep/16 14:43;stain;I had similar issues in BEANUTILS-495,"27/Sep/16 04:34;chonton;At least two of the failures are actually SimpleDateFormat problems:

SimpleDateFormat failed: 
locale=qu_EC format=GGGG/yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE input=/2003/Hatun puquy/0010/0012/0000/00/a.m./Sábado
locale=qu_EC format=G/y/M/d/h/a/m/s/E input=/2003/2/10/12/a.m./0/0/Sab",27/Sep/16 05:24;chonton;Quechua (Ecuador) locale does not have era information.,"28/Sep/16 17:37;chtompki;Based upon [Dalibor's email|https://lists.apache.org/thread.html/e034bf56aafeef278682b7c9cab2d47be39c61a3e9218b3375bcb3e8@%3Cdev.commons.apache.org%3E] to the ML, the following does work running the tests in java 9:
{code}
mvn -Djava.locale.providers=JRE clean test
{code}",29/Sep/16 13:18;stain;So I guess the unit tests could use System.setProperty to make them pass.. but would this not just hide the problems that actual users of FastDateParser will struggle with because they have not set that provider?,"30/Sep/16 19:07;chtompki;Right, I'm not entirely sure what we should do here. It feels like if SimpleDateFormat is indeed the root cause of the issue, which it seems to be, then we should open a ticket with Java to resolve its parsing issues.","01/Oct/16 20:43;chonton;Created bug report concerning timezone parsing for Oracle Ea 9, [JDK-8167143|http://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8167143]",02/Oct/16 10:32;britter;Setting this to 3.6 since we have the workaround with the locale provider.,"19/Feb/17 17:15;pascalschumacher;The FastDateFormat related failures do not occur with java 9 build 157.

There are now test failures in FieldUtilsTest and ToStringBuilderTest related to much stricter restrictions on reflection. These disappear if you open up jdk modules for reflection. For example the tests pass when run with:

{code}
mvn test -DargLine=""--add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED""
{code}

The test failure ""LocaleUtilsTest.testParseAllLocales:578 » IllegalArgument Invalid locale forma..."" remains.

Edit: The LocaleUtilsTest.testParseAllLocales test failure is caused by the String ""ji_001"". This is actually a valid locale, I created [LANG-1312] for this.

","24/Feb/17 17:56;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/244

    LANG-1265: Build failures when building with Java 9 EA

    Fix build on Java 9 Build 157 by adding a java-9 maven profile. This is activated by default on Java 9 and opens up java.base classes for reflection which makes all unit tests pass.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang fix_build_on_java_9

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/244.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #244
    
----
commit e0b8d45ac7d7f2f15d670298fe5e1d4762efbce2
Author: pascalschumacher <pascalschumacher@gmx.net>
Date:   2017-02-24T17:51:03Z

    LANG-1265: Build failures when building with Java 9 EA
    
    Fix build on Java 9 Build 157 by adding a java-9 maven profile. This is activated by default on Java 9 and opens up java.base classes for reflection which makes all unit tests pass.

----
","25/Feb/17 23:47;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/244
  
    
    [![Coverage Status](https://coveralls.io/builds/10331779/badge)](https://coveralls.io/builds/10331779)
    
    Coverage increased (+0.04%) to 94.565% when pulling **e0b8d45ac7d7f2f15d670298fe5e1d4762efbce2 on PascalSchumacher:fix_build_on_java_9** into **36b00f803a0b307c30f79378cd758323c242cc65 on apache:master**.

","28/Feb/17 22:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/244
",,,,,,,,,,,,,,,,,,
JavaVersion does not correctly handle Java 9,LANG-1264,13004153,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,britter,britter,britter,11/Sep/16 15:47,11/Sep/16 19:55,07/Apr/19 20:37,11/Sep/16 19:54,3.4,,,,,,,,,0,,,,,,,,"See http://markmail.org/message/bgrhxr6ef2axubcf

JavaVersion assumes that the version String for Java 9 will be ""1.9"".",,,,,,,,,,,,,,LANG-1197,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2016-09-11 15:47:30.0,,,,,,0|i33hsf:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CompareToBuilder.append(Object,Object,Comparator) method is too big to be inlined",LANG-1262,13001098,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,cheremin,cheremin,29/Aug/16 19:44,19/Oct/16 07:00,07/Apr/19 20:37,30/Aug/16 19:54,3.4,,,,3.5,,lang.builder.*,,,0,,,,,,,,"Issue is the same as in LANG-1218: CompareToBuilder.append(Object,Object,Comparator) is quite big, due to in-place arrays processing, and thus breaching inlining threshold (325 bytecodes):
{noformat}
....
o.a.c.l.b.CompareToBuilder::append (346 bytes)   hot method too big
....
{noformat}

This prevents CompareToBuilder object itself from being scalarized.

Fix may be the same, as in LANG-1218: extract arrays processing into separate method.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-30 19:54:43.144,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 30 19:54:43 UTC 2016,,,,,,0|i32yyf:,9223372036854775807,,,,,,,,30/Aug/16 19:54;pascalschumacher;Done as suggested. Thanks for reporting!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayUtils.contains returns false for instances of subtypes,LANG-1261,12999139,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,h0m3r_j4y,h0m3r_j4y,23/Aug/16 08:33,19/Oct/16 07:01,07/Apr/19 20:37,18/Sep/16 16:02,3.4,,,,3.5,,lang.*,,,0,array,equals,,,,,,"ArrayUtils.contains(Object[] array, Object objectToFind) wrongly returns false.

STEPS TO REPRODUCE
=========================================================
-Create a superclass ""Parent"" and override equals and hashcode based on some member id variable.
-Create a class ""Child"" extending ""Parent"". Do not override equals nor hashcode.

-Let ""childrens"" be an array of type Child[] containing several instances.
Create an instance of Parent ""p"" with the same id as childrens[0], such that childrens[0].equals(p) returns true and p.equals(childrens[0]) returns true as well.

Because they are equals, ArrayUtils.contains(childrens, p) should return true. However it returns false.


WHERE THE BUG IS LOCATED
=====================================================
-Go to ArrayUtils.class, line 1917. In the ""indexOf"" method implementation, before going into calling equals for each element of the input array, there is some sort of optimization check to make sure the instance to be found is an instance of the array type:

} else if (array.getClass().getComponentType().isInstance(objectToFind)) {

That line is wrong. In our case, the array contains elements of type ""Child"", whereas the object to be found is of type ""Parent"". They are equals according to the equals implementation of ""Parent"", but obviously Children.class.isInstance(p) is false.


EXPECTED BEHAVIOR
================================================
Since the method signature accepts an array of Object[] and an instance of Object, it should ignore the classes of the arguments. It should be possible to call ""ArrayUtils.contains(Child[] children, Parent p)"", in fact it should be possible to do this with any combination of classes, not only the ones assignable from the class hierarchy.",Android,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-23 17:24:40.764,,,false,,,,,Important,,,,,,,,,9223372036854775807,,,Sun Sep 18 16:02:59 UTC 2016,,,,,,0|i32mvz:,9223372036854775807,,,,,,,,"23/Aug/16 17:24;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/183

    LANG-1261: ArrayUtils#contains ArrayUtils#indexOf should compare obje…

    …cts with different types

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang LANG_1261

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/183.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #183
    
----
commit 82a54681e2e7ffbb21fbc7de4b252f0749201f12
Author: pascalschumacher <pascalschumacher@gmx.net>
Date:   2016-08-23T17:22:55Z

    LANG-1261: ArrayUtils#contains ArrayUtils#indexOf should compare objects with different types

----
","23/Aug/16 17:29;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/183
  
    
    [![Coverage Status](https://coveralls.io/builds/7572398/badge)](https://coveralls.io/builds/7572398)
    
    Coverage increased (+0.02%) to 93.483% when pulling **82a54681e2e7ffbb21fbc7de4b252f0749201f12 on PascalSchumacher:LANG_1261** into **f30c4607a2b6dcc7dc4476d321fc1de32ce9b780 on apache:master**.

","23/Aug/16 18:04;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/183
  
    
    [![Coverage Status](https://coveralls.io/builds/7572948/badge)](https://coveralls.io/builds/7572948)
    
    Coverage increased (+0.02%) to 93.49% when pulling **d004551983ea3efac4fb8b8cf22d74e9938fd457 on PascalSchumacher:LANG_1261** into **f30c4607a2b6dcc7dc4476d321fc1de32ce9b780 on apache:master**.

","30/Aug/16 20:23;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/183
  
    
    [![Coverage Status](https://coveralls.io/builds/7676541/badge)](https://coveralls.io/builds/7676541)
    
    Coverage increased (+0.02%) to 93.477% when pulling **1f56bd103d53c8c6ba7502c6586c26be01bfdb80 on PascalSchumacher:LANG_1261** into **c7c85ee39892df3ca007c6596c41654865be7e43 on apache:master**.

","18/Sep/16 16:02;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/183
",18/Sep/16 16:02;britter;Fixed in 42f2058c83f256d8654b349d5249d6f59920f88b,,,,,,,,,,,,,,,,,,,,,,,,,
LocaleUtils.toLocale() produces arbitrary locales,LANG-1260,12998927,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,pmundt,pmundt,22/Aug/16 15:27,23/Aug/16 16:57,07/Apr/19 20:37,,3.4,,,,,,,,,0,,,,,,,,"When passing an invalid locale string ({{len != 2 && len != 5 && len < 7}}) to {{org.apache.commons.lang3.LocaleUtils#toLocale(String)}} the method would previously (3.1) throw an {{IllegalArgumentException}}.

With version 3.4 the method will – at least for any string with {{len == 3}} – create an arbitrary locale:

{code}
// GIVEN
String localeString = ""xyz"";
// WHEN
Locale xyz = LocaleUtils.toLocale(localeString);
// THEN
assertEquals(xyz.toString(), localeString); // What?
{code}

We are relying on this behaviour ({{IllegalArgumentException}}) and were quite surprised to not find any mention in the changelog.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-08-22 18:03:05.916,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 23 16:57:15 UTC 2016,,,,,,0|i32lkv:,9223372036854775807,,,,,,,,22/Aug/16 18:03;pascalschumacher;This was changed with https://github.com/apache/commons-lang/commit/8ea0c0284810bd6ec00f608be31abd20dbd4b72b for [LANG-915].,"23/Aug/16 16:57;pascalschumacher;The description of [LANG-915] claims:

{quote}... parse 3-char locale strings, which are completelly valid BCP47 locales.{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils.isNumber and NumberUtils.createNumber resolve inconsistently,LANG-1252,12993216,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chtompki,chtompki,chtompki,28/Jul/16 11:33,19/Oct/16 07:01,07/Apr/19 20:37,11/Sep/16 20:36,3.4,,,,3.5,,lang.math.*,,,0,,,,,,,,"In considering the issues LANG-1060, LANG-1040, LANG-1038, and LANG-992, it seems that there are times when {{NumberUtils.isNumber}} resolves to {{false}} while {{NumberUtils.createNumber}}, given the same input, does not throw an exception, returning a valid {{java.lang.Number}}. This inconsistency should be resolved either by making {{isNumber}} more lenient or {{createNumber}} more stringent.",,,,,,,,,,,,,,,,LANG-1038,LANG-1040,LANG-992,LANG-1060,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-11 01:21:06.176,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 11 20:36:38 UTC 2016,,,,,,0|i31mcf:,9223372036854775807,,,,,,,,28/Jul/16 11:35;chtompki;Linking issues that I think this issue generalizes.,"11/Aug/16 14:32;chtompki;Regarding LANG-1038, {{NumberUtils.isNumber(""-2"")}} returns {{true}}. However, {{NumberUtils.isNumber(""+2"")}} returns {{false}}. Further, _in Java 1.6_, the following throw exceptions:
{code:java}
Byte.parseByte(""+2"");
Integer.parseInt(""+2"");
Long.parseLong(""+2"");
Short.parseShort(""+2"");
{code}
whereas the following succeed,
{code:java}
Double.parseDouble(""+2"");
Float.parseFloat(""+2"");
{code}

_*Note.*_ Benedikt suggested that {{NumberUtils.parseNumber(str)}} should not throw a {{NumberFormatException}} and return a valid {{java.lang.Number}} if and only if {{NumberUtils.isParsable(str)}} returns true for the same {{str}}. This seems to not be the case as:
{code:java}
NumberUtils.isParsable(""+2""); // false
NumberUtils.parseNumber(""+2""); // the value 2
{code}

This may be because in Java 6 only Float and Double return with a Valid number without exception.","11/Sep/16 00:24;chtompki;In Java 1.6 
{code}
NumberUtils.createNumber(""+2"");
{code}
throws the following exception
{code}
java.lang.NumberFormatException: For input string: ""+2""

	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
	at java.lang.Integer.parseInt(Integer.java:449)
	at java.math.BigInteger.<init>(BigInteger.java:316)
	at org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:769)
	at org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:593)
{code}

In Java 1.7 the call succeeds.","11/Sep/16 01:21;githubbot;GitHub user chtompki opened a pull request:

    https://github.com/apache/commons-lang/pull/186

    LANG-1252: rename isNumber, isCreatable. Accommodate for java 6 ""+"" handing.

    Associated with: https://issues.apache.org/jira/browse/LANG-1252
    
    @britter, do you have any thoughts on this. I think that it sufficiently covers the issue, but I wasn't sure about the mechanics about predicating functionality on java version. The main issue is that `new java.math.BigInteger(""+2"")` works for Java 1.7 and up, but not in Java 1.6. On the other hand `java.math.Float.valueOf(""+2.0"")` works on all versions of java. So I tried to accommodate for that in the `isCreatable` method.
    
    Based on your email about releases and my being slightly deadline driven person, I figured I'd try to put something reasonable together for the 3.5 release candidate. That said, if the diff on the PR doesn't look solid enough, I'm willing to work on the changes some more.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/chtompki/commons-lang LANG-1252

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/186.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #186
    
----
commit c503d742f094dc2048b72c3f78f5e2e6070a44e1
Author: Rob Tompkins <chtompki@gmail.com>
Date:   2016-09-11T01:01:08Z

    LANG-1252: better naming and java 6 specifics around handling a leading +

commit 0a0a35f54f5e7ab2d10022d3ee244cbc876bdde2
Author: Rob Tompkins <chtompki@gmail.com>
Date:   2016-09-11T01:07:42Z

    LANG-1252: updates to package-info, adding name to pom.xml

----
","11/Sep/16 01:25;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    
    [![Coverage Status](https://coveralls.io/builds/7832604/badge)](https://coveralls.io/builds/7832604)
    
    Coverage increased (+0.009%) to 93.463% when pulling **0a0a35f54f5e7ab2d10022d3ee244cbc876bdde2 on chtompki:LANG-1252** into **d53d0419f1c948d3cc7454254ab9a3cb18ca9d3a on apache:master**.

","11/Sep/16 01:46;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    
    [![Coverage Status](https://coveralls.io/builds/7832670/badge)](https://coveralls.io/builds/7832670)
    
    Coverage increased (+0.02%) to 93.471% when pulling **71d9e00d42b278ce9d216b33bf1a9c8606fbcb49 on chtompki:LANG-1252** into **d53d0419f1c948d3cc7454254ab9a3cb18ca9d3a on apache:master**.

","11/Sep/16 01:47;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    
    [![Coverage Status](https://coveralls.io/builds/7832675/badge)](https://coveralls.io/builds/7832675)
    
    Coverage increased (+0.003%) to 93.457% when pulling **71d9e00d42b278ce9d216b33bf1a9c8606fbcb49 on chtompki:LANG-1252** into **d53d0419f1c948d3cc7454254ab9a3cb18ca9d3a on apache:master**.

","11/Sep/16 12:11;githubbot;Github user britter commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/186#discussion_r78293587
  
    --- Diff: src/main/java/org/apache/commons/lang3/math/NumberUtils.java ---
    @@ -1374,8 +1407,11 @@ public static boolean isNumber(final String str) {
             boolean hasDecPoint = false;
             boolean allowSigns = false;
             boolean foundDigit = false;
    +        boolean isJava6 = StringUtils.startsWith(
    +                System.getProperty(""java.version""), ""1.6"");
    --- End diff --
    
    You can better use `SystemUtils`for this. But I'm about to extend `JavaVersion` in for [LANG-1263](https://issues.apache.org/jira/browse/LANG-1263) so that will make this even easier. I'll ping you when I have that finished.
","11/Sep/16 12:12;githubbot;Github user britter commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/186#discussion_r78293625
  
    --- Diff: src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java ---
    @@ -1216,91 +1217,104 @@ public void testIsDigits() {
         }
     
         /**
    -     * Tests isNumber(String) and tests that createNumber(String) returns
    -     * a valid number iff isNumber(String) returns false.
    +     * Tests isCreatable(String) and tests that createNumber(String) returns
    +     * a valid number iff isCreatable(String) returns false.
          */
         @Test
    -    public void testIsNumber() {
    -        compareIsNumberWithCreateNumber(""12345"", true);
    --- End diff --
    
    Don't remove this tests. Although we have deprecated `isNumber` we will probably have to maintain the code for a while before it can be dropped in Lang 4.0
","11/Sep/16 14:55;githubbot;Github user chtompki commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    I think the following commits satisfy what you were looking for there. Let me know your thoughts.
","11/Sep/16 15:01;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    
    [![Coverage Status](https://coveralls.io/builds/7835151/badge)](https://coveralls.io/builds/7835151)
    
    Coverage increased (+0.1%) to 93.574% when pulling **b3c31a379e9ad7cd22cb7f0669b82361ced84992 on chtompki:LANG-1252** into **d53d0419f1c948d3cc7454254ab9a3cb18ca9d3a on apache:master**.

","11/Sep/16 15:08;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    
    [![Coverage Status](https://coveralls.io/builds/7835184/badge)](https://coveralls.io/builds/7835184)
    
    Coverage increased (+0.1%) to 93.593% when pulling **204ed0048f4812201ef65c9a0c44fa54a7d1e04f on chtompki:LANG-1252** into **d53d0419f1c948d3cc7454254ab9a3cb18ca9d3a on apache:master**.

","11/Sep/16 15:08;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    
    [![Coverage Status](https://coveralls.io/builds/7835184/badge)](https://coveralls.io/builds/7835184)
    
    Coverage increased (+0.1%) to 93.593% when pulling **204ed0048f4812201ef65c9a0c44fa54a7d1e04f on chtompki:LANG-1252** into **d53d0419f1c948d3cc7454254ab9a3cb18ca9d3a on apache:master**.

","11/Sep/16 16:33;githubbot;Github user britter commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/186#discussion_r78298119
  
    --- Diff: src/main/java/org/apache/commons/lang3/math/NumberUtils.java ---
    @@ -1360,11 +1361,44 @@ public static boolean isDigits(final String str) {
          * <p><code>null</code> and empty/blank {@code String} will return
          * <code>false</code>.</p>
          *
    +     * <p>Note, {@link #createNumber(String)} should return a number for every
    +     * input resuling in <code>true</code>.</p>
    +     *
          * @param str  the <code>String</code> to check
          * @return <code>true</code> if the string is a correctly formatted number
    -     * @since 3.3 the code supports hex {@code 0Xhhh} and octal {@code 0ddd} validation
    +     * @since 3.3 the code supports hex {@code 0Xhhh} an
    +     *        octal {@code 0ddd} validation
    +     * @deprecated This feature will be removed in Lang 4.0,
    +     *             use {@link NumberUtils#isCreatable(String)} instead
          */
    +    @Deprecated
         public static boolean isNumber(final String str) {
    +        return isCreatable(str);
    +    }
    +
    +    /**
    +     * <p>Checks whether the String a valid Java number.</p>
    +     *
    +     * <p>Valid numbers include hexadecimal marked with the <code>0x</code> or
    +     * <code>0X</code> qualifier, octal numbers, scientific notation and
    +     * numbers marked with a type qualifier (e.g. 123L).</p>
    +     *
    +     * <p>Non-hexadecimal strings beginning with a leading zero are
    +     * treated as octal values. Thus the string <code>09</code> will return
    +     * <code>false</code>, since <code>9</code> is not a valid octal value.
    +     * However, numbers beginning with {@code 0.} are treated as decimal.</p>
    +     *
    +     * <p><code>null</code> and empty/blank {@code String} will return
    +     * <code>false</code>.</p>
    +     *
    +     * <p>Note, {@link #createNumber(String)} should return a number for every
    +     * input resuling in <code>true</code>.</p>
    +     *
    +     * @param str  the <code>String</code> to check
    +     * @return <code>true</code> if the string is a correctly formatted number
    +     * @since 3.3 the code supports hex {@code 0Xhhh} and octal {@code 0ddd} validation
    --- End diff --
    
    should be changed to simply `@since 3.5`
","11/Sep/16 16:34;githubbot;Github user britter commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    Please also add your change to `src/changes/changes.xml`. Thank you!
","11/Sep/16 17:09;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/186
  
    
    [![Coverage Status](https://coveralls.io/builds/7835771/badge)](https://coveralls.io/builds/7835771)
    
    Coverage decreased (-0.005%) to 93.568% when pulling **dad86bc0a29689fd29bf03b382a39621718e8b05 on chtompki:LANG-1252** into **05a6beba76b3195b26f2b15919d4f3a95b22c580 on apache:master**.

","11/Sep/16 17:20;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/186
",11/Sep/16 20:36;chtompki;https://github.com/apache/commons-lang/pull/186 fixes this and all of the other issues.,,,,,,,,,,,,,
SerializationUtils.ClassLoaderAwareObjectInputStream should use static initializer to initialize primitiveTypes map.,LANG-1251,12992801,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,ueshin,ueshin,27/Jul/16 05:18,19/Oct/16 07:00,07/Apr/19 20:37,31/Jul/16 17:51,3.2,3.3,3.4,,3.5,,lang.*,,,0,,,,,,,,{{SerializationUtils.ClassLoaderAwareObjectInputStream}} should use static initializer to initialize {{primitiveTypes}} map because initializing the map in the constructor of {{ClassLoaderAwareObjectInputStream}} would break thread safety. {{java.util.HashMap}} is not thread safe.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-27 05:23:07.659,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 31 17:51:29 UTC 2016,,,,,,0|i31js7:,9223372036854775807,,,,,,,,"27/Jul/16 05:23;githubbot;GitHub user ueshin opened a pull request:

    https://github.com/apache/commons-lang/pull/180

    LANG-1251: SerializationUtils.ClassLoaderAwareObjectInputStream should use static initializer to initialize primitiveTypes map.

    `SerializationUtils.ClassLoaderAwareObjectInputStream` should use static initializer to initialize `primitiveTypes` map because initializing the map in the constructor of `ClassLoaderAwareObjectInputStream` would break thread safety. `java.util.HashMap` is not thread safe.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ueshin/apache-commons-lang issues/LANG-1251

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/180.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #180
    
----
commit c8cf32f8f242f8a2b17865fee58b71c04db6b908
Author: Takuya UESHIN <ueshin@happy-camper.st>
Date:   2016-07-27T05:00:46Z

    Modify to use static initializer to initialize primitiveTypes map.

----
","27/Jul/16 05:27;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/180
  
    
    [![Coverage Status](https://coveralls.io/builds/7179409/badge)](https://coveralls.io/builds/7179409)
    
    Coverage decreased (-0.06%) to 93.382% when pulling **c8cf32f8f242f8a2b17865fee58b71c04db6b908 on ueshin:issues/LANG-1251** into **bd9adbb637a8a4aa5eb61c6fde2c576d0ab3c4fa on apache:master**.

","31/Jul/16 17:49;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/180
","31/Jul/16 17:49;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/180
  
    Thanks! :+1: 
",31/Jul/16 17:51;pascalschumacher;Pull request merged. Thanks for reporting and thanks for fixing.,,,,,,,,,,,,,,,,,,,,,,,,,,
Exclude Fields on ReflectionToStringBuilder doesn't work for inner objects,LANG-1249,12987646,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,bchatla,bchatla,08/Jul/16 00:30,10/May/17 14:42,07/Apr/19 20:37,,,,,,,,,,,1,,,,,,,,"
Class Foo {
String a;
Bar bar;
}

Class Bar {
String b;
}

Foo f = new Foo();

 ReflectionToStringBuilder builder = new ReflectionToStringBuilder(f, new RecursiveToStringStyle());
 builder.setExcludeFieldNames(""bar""); // this works

 builder.setExcludeFieldNames(""b""); // this doesn't work (It doesn't exclude this field. It only excludes top level fields of Class Foo (f in the example above)
",,,,,,,,,,,,,,,,LANG-1330,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2016-07-08 00:30:22.0,,,,,,0|i30oi7:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDatePrinter Memory allocation regression,LANG-1248,12986838,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,benoitw,benoitw,05/Jul/16 14:54,19/Oct/16 07:01,07/Apr/19 20:37,17/Jul/16 02:33,3.4,,,,3.5,,lang.time.*,,,0,,,,,,,,"when the code was migrated from StringBuffer to Appendable in LANG-1152.
We've lost the ability to modify the buffer (setCharAt) 
The new implementation of appendFullDigits allocate a temporary char array to work around that limitation.
This is a major source of memory allocation which is not present in version 3.4.",,,,,,,,,,,,,,,,,,,,,,,,,,11/Jul/16 09:50;benoitw;MyBenchmark.java;https://issues.apache.org/jira/secure/attachment/12817109/MyBenchmark.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-07-05 19:40:26.693,,,false,,,,,Patch,,,,,,,,,9223372036854775807,,,Sun Jul 17 02:33:38 UTC 2016,,,,,,0|i30jin:,9223372036854775807,,,,,,,,05/Jul/16 15:37;benoitw;We could add a specialized version of appendFullDigits for 4 digits (year) and 3 digits (millis).,"05/Jul/16 19:40;chonton;Do you have a benchmark that compares 3.4 to 3.5?  If so, could you share the code and results?","05/Jul/16 19:58;chonton;Specializing appendFullDigits for 4 and 3 digits does not work in general case.  SimpleDateFormat documentation states: ""Number: For formatting, the number of pattern letters is the minimum number of digits"".","05/Jul/16 20:07;chonton;There is a defect in current code.  If client has more than ten repeats of formatting character, then appendFullDigits will throw IndexOutOfBoundsException.","05/Jul/16 20:27;chonton;Misread the code, IndexOutOfBoundsException does not occur.","05/Jul/16 20:52;sebb@apache.org;Another possible approach is to check for an instance of AbstractStringBuffer; if so, then use setCharAt(int, char)

In the case of CharBuffer, one can use put(int, char)

In any other case (e.g. PrintStream or Writer), use the existing implementation.

That should reduce the memory allocation for the commonest cases.","06/Jul/16 06:54;benoitw;???
I don't want to limit appendFullDigits to 4 or 3 digits !
I want to implement fast path for 4 and 3 digits (there's already such implementations for 1 and 2 digits)","06/Jul/16 07:11;benoitw;Single fastdateformat instance
100000 format of long 
pattern : yyyy-MM-dd'T'HH:mm:ss.SSSZ

lang 3.4
~30 MB allocated

lang 3.5
~40 MB allocated
-> ~9.3 MB are coming from appendFullDigits called from PaddedNumberField
PaddedNumberField is used for the year and the millis
","06/Jul/16 07:40;githubbot;GitHub user benbenw opened a pull request:

    https://github.com/apache/commons-lang/pull/169

    LANG-1248 FastDatePrinter Memory allocation regression

    When the code was migrated from StringBuffer to Appendable in LANG-1152.
    We've lost the ability to modify the buffer (setCharAt) 
    The new implementation of appendFullDigits allocate a temporary char
    array to work around that limitation.
    This is a major source of memory allocation which is not present in
    version 3.4.
    Test case : 
    Single fastdateformat instance
    100000 format of long 
    pattern : yyyy-MM-dd'T'HH:mm:ss.SSSZ
    lang 3.4 : ~30 MB allocated
    lang 3.5-snapshot : ~40 MB allocated
    -> ~9.3 MB are coming from appendFullDigits called from
    PaddedNumberField
    
    This commit add a fast path for 1 to 4 digits which avoid the memory
    allocation from the temporary work array.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/benbenw/commons-lang LANG-1248

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/169.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #169
    
----
commit d201ad32af1e71140539fbd7efe701f6b2e89ffe
Author: benoit <b.wiart@ubik-ingenierie.com>
Date:   2016-07-06T07:14:08Z

    LANG-1248 FastDatePrinter Memory allocation regression
    
    When the code was migrated from StringBuffer to Appendable in LANG-1152.
    We've lost the ability to modify the buffer (setCharAt) 
    The new implementation of appendFullDigits allocate a temporary char
    array to work around that limitation.
    This is a major source of memory allocation which is not present in
    version 3.4.
    Test case : 
    Single fastdateformat instance
    100000 format of long 
    pattern : yyyy-MM-dd'T'HH:mm:ss.SSSZ
    lang 3.4 : ~30 MB allocated
    lang 3.5-snapshot : ~40 MB allocated
    -> ~9.3 MB are coming from appendFullDigits called from
    PaddedNumberField
    
    This commit add a fast path for 1 to 4 digits which avoid the memory
    allocation from the temporary work array.

----
","06/Jul/16 07:44;benoitw;PR : https://github.com/apache/commons-lang/pull/169
add a specialized implementation for 3 and 4 digits in appendFullDigits.
This remove the memory allocation for the commonest cases.","06/Jul/16 07:48;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/169
  
    
    [![Coverage Status](https://coveralls.io/builds/6884804/badge)](https://coveralls.io/builds/6884804)
    
    Coverage decreased (-0.03%) to 93.417% when pulling **d201ad32af1e71140539fbd7efe701f6b2e89ffe on benbenw:LANG-1248** into **ce0c082898e3551d313fb5b73763f399232b3fd5 on apache:master**.

","06/Jul/16 13:49;chonton;Thanks for the data points!
I will look at patch tonight.","10/Jul/16 22:14;githubbot;Github user chonton commented on the issue:

    https://github.com/apache/commons-lang/pull/169
  
    Are you OK with using this [alternative implementation](https://github.com/chonton/commons-lang/commit/4d26fa6c107636c0f986c45379edcb18ac1ec3f5)?
","10/Jul/16 22:20;sebb@apache.org;The Javadoc comment says that the value must be positive; this is not checked, so is it guaranteed that the value won't be negative?
If it is negative, what happens?","11/Jul/16 09:29;benoitw;I didn't do any memory measurement on the alternative implementation.
I did a JMH benchmark :
Benchmark                              Mode  Cnt   Score   Error  Units
MyBenchmark.testAppendFullDigits1      avgt  200  19,049 ± 0,215  ns/op
MyBenchmark.testAppendFullDigits2      avgt  200  27,371 ± 0,310  ns/op

Where 
testAppendFullDigits1 = initial patch (PR 169)
testAppendFullDigits2 = alternative implementation

the benchmark was for a value = 2016 and minFieldWidth = 3

So the initial patch is ugly BUT faster than the alternative implementation.",11/Jul/16 09:37;sebb@apache.org;Can you attach the benchmark code for reference please?,11/Jul/16 09:50;benoitw;Simple jmh benchmark for execution time.,"12/Jul/16 03:41;chonton;Another JMH test simulating yyyy-MM-dd'T'HH:mm shows

Benchmark                                       Mode  Cnt    Score   Error  Units
FastDatePrinterBenchmark.testAppendFullDigits1  avgt  200   56.737 ± 0.477  ns/op
FastDatePrinterBenchmark.testAppendFullDigits2  avgt  200  119.727 ± 3.802  ns/op
","12/Jul/16 04:57;chonton;These values come from Calendar.get(int).  Looking at the javadoc, the only fields that might return a negative number are DST_OFFSET and ZONE_OFFSET.  These are not printed through this method.","13/Jul/16 08:04;githubbot;Github user benbenw commented on the issue:

    https://github.com/apache/commons-lang/pull/169
  
    Discussion was done on the jira
    https://issues.apache.org/jira/browse/LANG-1248
","17/Jul/16 02:28;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/169
","17/Jul/16 02:33;chonton;Test of FastDatePrinter(""yyyy-MM-dd'T'HH:mm:ssZ"").format(new Date()) comparing committed implementation (testAppendFullDigits1) with suggested implementation (testAppendFullDigits2)

Benchmark                                       Mode  Cnt    Score   Error  Units
FastDatePrinterBenchmark.testAppendFullDigits1  avgt  200  492.378 ± 3.642  ns/op
FastDatePrinterBenchmark.testAppendFullDigits2  avgt  200  491.250 ± 3.733  ns/op

I could not bring myself to commit the full amount of additional code to gain a nS.",17/Jul/16 02:33;chonton;commit bd9adbb637a8a4aa5eb61c6fde2c576d0ab3c4fa,,,,,,,,
"signature change of applyRules(java.util.Calendar, java.lang.StringBuffer) is not binary compatible",LANG-1245,12978572,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Blocker,Fixed,chonton,chonton,chonton,14/Jun/16 05:15,19/Oct/16 15:24,07/Apr/19 20:37,15/Jun/16 17:40,3.5,,,,3.5,,lang.time.*,,,0,,,,,,,,"add back method
 java.lang.StringBuffer applyRules(java.util.Calendar, java.lang.StringBuffer)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 15 17:40:52 UTC 2016,,,,,,0|i2zf1r:,9223372036854775807,,,,,,,,15/Jun/16 17:40;chonton;Commit [10ebb32ce1806821518f52074f0d171fab20b3ea|https://github.com/apache/commons-lang/commit/10ebb32ce1806821518f52074f0d171fab20b3ea],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
" ""\u2284"":""&nsub;"" mapping missing from EntityArrays#HTML40_EXTENDED_ESCAPE",LANG-1242,12974037,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,30/May/16 18:59,19/Oct/16 07:01,07/Apr/19 20:37,02/Jun/16 20:16,3.4,,,,3.5,,lang.text.translate.*,,,0,,,,,,,,see: https://github.com/apache/commons-lang/pull/159,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-30 19:00:54.253,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Jun 02 20:16:24 UTC 2016,,,,,,0|i2ypgf:,9223372036854775807,,,,,,,,"30/May/16 19:00;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/159#issuecomment-222541510
  
    jira issue for this fix: https://issues.apache.org/jira/browse/LANG-1242
",02/Jun/16 20:16;pascalschumacher;Pull request merged. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.ordinalIndexOf broken,LANG-1241,12973809,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,pascalschumacher,pascalschumacher,29/May/16 15:34,19/Oct/16 15:24,07/Apr/19 20:37,10/Jun/16 10:55,3.4,,,,,,lang.*,,,0,,,,,,,,"Quoting rousej from the discussion of [https://github.com/apache/commons-lang/pull/93]

I agree with britter. StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) == 1 would be true because the sequence 'aa' is at every index. There seems to be confusion around this method, but it seems to me the original code had it correct.

{code:java}
int index = lastIndex ? str.length() : INDEX_NOT_FOUND;

do {

if (lastIndex) {

index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);

} else {

index = CharSequenceUtils.indexOf(str, searchStr, index + 1);

}
{code}

I'm not sure why StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) == 3 would ever be true.
StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) == 2 is easier to see where it's coming from, but StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) == 1 is still the correct answer, and it also works for other tests. I found my way here because I wanted to use this method in a project, but found that the current release is broken by commit [e5a3039|https://github.com/apache/commons-lang/commit/e5a3039f7a1e727fca40db7357a9191b6a7cf41d] . With the current release if the first index is between 0 and searchStr.length() -1 the method will return the index for ordinal + 1.....in other words the wrong index.

This fact is missed in a test like
assertEquals(3, StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2));
/* Note the above test from commit [e5a3039|https://github.com/apache/commons-lang/commit/e5a3039f7a1e727fca40db7357a9191b6a7cf41d] is incorrect since the array of chars begins at 0.*/

The following test should pass, but will fail in the current release due to the broken method:
{code:java}
assertEquals(0, StringUtils.ordinalIndexOf(""abaabaab"", ""ab"", 1);
assertEquals(3, StringUtils.ordinalIndexOf(""abaabaab"", ""ab"", 2);
assertEquals(6, StringUtils.ordinalIndexOf(""abaabaab"", ""ab"", 3);
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-10 05:56:53.491,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 10 17:12:25 UTC 2016,,,,,,0|i2yo1z:,9223372036854775807,,,,,,,,10/Jun/16 05:56;nmanley;[~sebb@apache.org]'s commit [d75fe46|https://github.com/apache/commons-lang/commit/d75fe46b8f1b0d5c27887052ee4714d6a9c7ea4b] reverts LANG-1077 which was closed as invalid. So what's considered broken here?,"10/Jun/16 10:55;sebb@apache.org;No longer a problem, now that LANG-1077 has been reverted.

Repository: commons-lang
Updated Branches:
  refs/heads/master f08c4f6ae -> 7fd021d82


LANG-1241 StringUtils.ordinalIndexOf broken

Show that the method is no longer broken, now that LANG-1077 has been
reverted

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/7fd021d8
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/7fd021d8
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/7fd021d8","10/Jun/16 17:12;pascalschumacher;[~nmanley], [~sebb@apache.org] I was not aware that LANG-1077 has been reverted, else I would not have created this issue. Thanks for clarifying.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils.equals("""",new StringBuffer(""foo"")) throws StringIndexOutOfBoundsException",LANG-1239,12973332,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,ramanvesh,ramanvesh,27/May/16 07:59,27/May/16 10:04,07/Apr/19 20:37,27/May/16 10:04,3.4,,,,,,lang.*,,,0,easyfix,newbie,patch,,,,,,,,,,,,,,,,,,,LANG-1162,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,Important,Patch,,,,,,,,9223372036854775807,,,2016-05-27 07:59:56.0,,,,,,0|i2yl3z:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DiffBuilder: Add null check on fieldName when appending Object or Object[],LANG-1232,12971219,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,pascalschumacher,pascalschumacher,19/May/16 17:39,19/Oct/16 07:00,07/Apr/19 20:37,19/May/16 17:54,3.4,,,,3.5,,lang.builder.*,,,0,,,,,,,,"The other append methods throw an IllegalArgumentException if fieldName is null. So, append(Object) and append(Object[]) should also do this.

source: [https://github.com/apache/commons-lang/pull/121]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-19 17:40:11.278,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu May 19 17:54:38 UTC 2016,,,,,,0|i2y833:,9223372036854775807,,,,,,,,"19/May/16 17:40;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/121#issuecomment-220398409
  
    I created a issue to track this: https://issues.apache.org/jira/browse/LANG-1232
",19/May/16 17:54;pascalschumacher;Pull request merged. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove unnecessary synchronization from registry lookup in EqualsBuilder and HashCodeBuilder,LANG-1230,12969934,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,marschall,marschall,16/May/16 08:29,19/Oct/16 07:00,07/Apr/19 20:37,21/Aug/16 17:18,2.6,,,,3.5,,lang.builder.*,,,0,,,,,,,,"We're running into contention issues in registry lookup in EqualsBuilder and HashCodeBuilder. We believe the synchronization for the registry lookup is unnecessary. ThreadLocals are thread safe, each thread gets own value. Therefore no other thread can read or change the value of the current thread. As a consequence access to ThreadLocals does not need to be synchronized.

Since IDKey uses object identity and the identity hashCode it does use neither EqualsBuilder nor HashCodeBuilder. This means that recursive calls to register and unregister are not possible even if the registered objects use EqualsBuilder or HashCodeBuilder. This also makes re-reading redundant.

The issue was likely introduced in 2.5 by LANG-586 but 2.6 is the oldest version we can select.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-16 17:33:00.804,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 21 17:19:00 UTC 2016,,,,,,0|i2y05z:,9223372036854775807,,,,,,,,"16/May/16 17:33;garydgregory;Can you please provide a patch to expedite things?

",16/May/16 17:52;marschall;Sure https://github.com/apache/commons-lang/pull/143,05/Jun/16 15:31;pascalschumacher;[~garydgregory] It would be nice if you could take a look at the pull request. I do not feel confident enough in this area to judge whether to merge it or not. Thanks!,"21/Aug/16 17:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/143
",21/Aug/16 17:18;pascalschumacher;Thanks!,"21/Aug/16 17:19;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/143
  
    Thanks!
",,,,,,,,,,,,,,,,,,,,,,,,,
Performance regression due to cyclic hashCode guard,LANG-1229,12969830,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,marschall,marschall,15/May/16 14:27,08/Jun/16 20:34,07/Apr/19 20:37,08/Jun/16 20:34,3.5,,,,3.5,,lang.builder.*,,,0,,,,,,,,"We observed a severe performance regression in HashCodeBuilder in 3.5 trunk compared to 3.4 release. We get about 20% of the throughput in 3.5 trunk for common cases compared to 3.4 release. Previously there was no noticeable overhead of using HashCodeBuilder. Investigating we found the performance degradation was caused by the fix for LANG-456. It causes the method to be too large to be inlined and escape analysis to fail (see LANG-1218 for a related discussion).

We currently do not see a way to keep the 3.4 performance and support cyclic graphs. The append methods have not supported cycles for so long we feel it's de facto part of the contract by now. Since neither the JDK nor the Guava hashCode helper methods support cyclic graphs we don't believe this is an unreasonable assumption. In addition EqualsBuilder#append(Object,Object) doesn't support cycles.

If supporting cycles is a requirement we propose the introduction of new #appendRecursive (or named differently) methods to both HashCodeBuilder and EqualsBuilder that add cycle guards. If that is an acceptable compromise we would be willing to provide patches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-15 18:04:27.95,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 08 20:33:05 UTC 2016,,,,,,0|i2xziv:,9223372036854775807,,,,,,,,15/May/16 18:04;garydgregory;Or maybe the new method is still called append but takes a boolean indicating support for cycles/recursion.,16/May/16 08:24;marschall;Personally I don't like boolean flags to methods that change the behaviour of methods. Personally I prefer two different methods for two different things. But if a boolean flag is an acceptable compromise then I'll take it.,16/May/16 17:52;marschall;A potential patch https://github.com/apache/commons-lang/pull/142,27/May/16 15:46;pascalschumacher;The patch is missing the new method (maybe call it something similar to #appendWithCycleCheck?).,28/May/16 10:19;marschall;The patch is indeed missing the new method. I'm unsure what to name it.,"05/Jun/16 15:18;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/142
  
    To keep the code clean the pull request should also undo the other additions to `HashCodeBuilderTest` done with https://github.com/apache/commons-lang/commit/b5749b4f54b30c0c2050e456c12cfcf516434f13
","08/Jun/16 20:28;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/142
","08/Jun/16 20:28;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/142
  
    Thanks! :+1: 
",08/Jun/16 20:33;pascalschumacher;Pull request applied. Thanks. I reopened LANG-456.,,,,,,,,,,,,,,,,,,,,,,
IllegalAccessException swallowed in indexOfThrowable and indexOfType,LANG-1228,12966600,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,bdhess,bdhess,10/May/16 03:46,19/Oct/16 07:00,07/Apr/19 20:37,28/May/16 10:52,,,,,3.5,,,,,0,,,,,,,,"If {{ExceptionUtils.getCause}} is provided a throwable whose cause method cannot be interrogated by reflection due to an IllegalAccessError, the cause is not presented to the client.

In principle this is to be expected from this legacy method.  However, {{indexOfThrowable}} and {{indexOfType}} rely on {{getCause}}, and are not marked as deprecated.

Now that {{Throwable.getCause}} has been in the language for quite some time, I'd like to propose that, until {{ExceptionUtils.getCause}} is actually removed, that its behavior be modified to first attempt to get the exception cause using normal invocation, falling back to reflection if no cause is found.

I'll be pushing a GitHub PR to this effect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-10 03:49:38.724,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue May 24 18:17:38 UTC 2016,,,,,,0|i2xfnb:,9223372036854775807,,,,,,,,"10/May/16 03:49;githubbot;GitHub user bdhess opened a pull request:

    https://github.com/apache/commons-lang/pull/139

    [LANG-1228] Prefer Throwable.getCause() in ExceptionUtils.getCause()

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bdhess/commons-lang get-cause

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/139.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #139
    
----
commit 2644ee0afc6fbc36f4f00990e4bffc55ca588f3f
Author: Bradley Hess <bdhess@pobox.com>
Date:   2016-05-10T03:38:13Z

    [LANG-1228] Prefer Throwable.getCause() in ExceptionUtils.getCause()

----
","10/May/16 03:51;githubbot;Github user bdhess commented on the pull request:

    https://github.com/apache/commons-lang/pull/139#issuecomment-218052683
  
    For convenience: https://issues.apache.org/jira/browse/LANG-1228
","22/May/16 10:20;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/139#issuecomment-220824801
  
    +1
","24/May/16 18:16;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/139
","24/May/16 18:16;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/139#issuecomment-221358056
  
    Thanks! :+1: 
","24/May/16 18:17;pascalschumacher;Pull request merged. Thanks!

Can somebody please resolve this? Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#normalizeSpace does not trim the string anymore,LANG-1226,12965915,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,pascalschumacher,pascalschumacher,08/May/16 18:10,19/Oct/16 07:00,07/Apr/19 20:37,31/Jul/16 17:58,3.4,,,,3.5,,lang.*,,,0,,,,,,,,"These work with 3.3.2, but fail with 3.4:

{code}
assertEquals(""b"", StringUtils.normalizeSpace(""\u0000b""));
assertEquals(""b"", StringUtils.normalizeSpace(""b\u0000""));
{code}

Java doc still says ""... Additionally #trim(String)} removes control characters (char &lt;= 32) from both ends of this String.""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-08 23:49:59.755,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 31 17:58:42 UTC 2016,,,,,,0|i2xbhj:,9223372036854775807,,,,,,,,"08/May/16 23:49;garydgregory;Ugh, my initial impression is that I'd like to have a {{normalizeSpace()}} that works à la Java spaces and another {{normalizeXmlSpace()}} that works à la XML.","09/May/16 12:52;sebb@apache.org;See LANG-1227 - any XML methods need to be sensitive to the XML spec version.
Maybe such methods belong in the XMLCharacter class.
StringUtils could have a wrapper that delegates to it.

e.g.

StringUtils.normalizeXmlSpace(String input, XMLCharacter#enum XML version) {
    return XMLCharacter.getInstance(version).normalizeSpace(input);
}","21/May/16 16:13;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/150

    LANG-1226: StringUtils#normalizeSpace does not trim the string anymore

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang normalizeSpace_trim

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/150.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #150
    
----
commit b2b926ae5b8cb01e6ea415e5d040c10b9d4d206f
Author: pascalschumacher <pascalschumacher@gmx.net>
Date:   2016-05-21T16:13:03Z

    LANG-1226: StringUtils#normalizeSpace does not trim the string anymore

----
","31/Jul/16 17:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/150
",,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat doesn't respect summer daylight in localized strings,LANG-1219,12960763,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,yossaa,yossaa,21/Apr/16 14:09,19/Oct/16 07:00,07/Apr/19 20:37,23/Apr/16 20:04,3.4,,,,3.5,,lang.time.*,,,0,timezone,,,,,,,"FastDateFormat can't properly parse dates with daylight saving in the ""z"" pattern. It always returns date without daylight saving. Test case:

{code:java}
		SimpleDateFormat format = new SimpleDateFormat(""dd.MM.yyyy HH:mm:ss z"", Locale.GERMANY);
		Date d1 = format.parse(""26.10.2014 02:00:00 MESZ"");
		Date d2 = format.parse(""26.10.2014 02:00:00 MEZ"");
		System.out.println(d1);
		System.out.println(d2);
		FastDateFormat formatt = FastDateFormat.getInstance(""dd.MM.yyyy HH:mm:ss z"", Locale.GERMANY);
		Date d3 = formatt.parse(""26.10.2014 02:00:00 MESZ"");
		Date d4 = formatt.parse(""26.10.2014 02:00:00 MEZ"");
		System.out.println(d3);
		System.out.println(d4);	
{code}

returns:
SDF: Sun Oct 26 02:00:00 CEST 2014
SDF: Sun Oct 26 02:00:00 CET 2014
FDF: Sun Oct 26 02:00:00 CET 2014
FDF:  Sun Oct 26 02:00:00 CET 2014

FastDateFormat returns the same date, which is wrong.

Bug is in the FastDateParser.TimeZoneStrategy.setCalendar:
{code:java}
@Override
        void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
            TimeZone tz;
            if(value.charAt(0)=='+' || value.charAt(0)=='-') {
                tz= TimeZone.getTimeZone(""GMT""+value);
            }
            else if(value.startsWith(""GMT"")) {
                tz= TimeZone.getTimeZone(value);
            }
            else {
                tz= tzNames.get(value);
                if(tz==null) {
                    throw new IllegalArgumentException(value + "" is not a supported timezone name"");
                }
            }
            cal.setTimeZone(tz);
        }
{code}

It's not enough to just call: cal.setTimeZone.
If zone names in standard and daylight time are different, you have to check the name in DateFormatSymbols.getInstance(locale).getZoneStrings(); and if it's >= 3, you have to activate daylight mode.Just like SimpleDateFormat does it:
{code:java}
1491            // (abbreviation) for both standard and daylight time,
1492            // let the time zone in the Calendar decide which one.
1493            if (!useSameName) {
1494                calendar.set(Calendar.ZONE_OFFSET, tz.getRawOffset());
1495                calendar.set(Calendar.DST_OFFSET,
1496                             j >= 3 ? tz.getDSTSavings() : 0);
1497            }
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-04-23 06:09:57.312,,,false,,,,,Important,,,,,,,,,9223372036854775807,,,Sat Apr 23 20:04:01 UTC 2016,,,,,,0|i2wga7:,9223372036854775807,,,,,,,,"21/Apr/16 15:09;yossaa;Just to clarify: on 26.10.2014, we have changed CEST time to CET (switched from 3:00 to 2:00), so we had double 2:00, once in CEST and once in CET.","23/Apr/16 06:09;chonton;While testing a potential solution, found a possible regression in java version ""1.8.0_60-b27"".  The date produced by Gregorian calendar is incorrect when setting both TimeZone and DST offset fields.","23/Apr/16 20:00;chonton;Upon further investigation, in the update DateFormatSymbols.getInstance(locale).getZoneStrings() provides more zoneNames. As an example:
[0]	""Europe/Paris""
[1]	""Mitteleuropäische Zeit""
[2]	""MEZ""
[3]	""Mitteleuropäische Sommerzeit""
[4]	""MESZ""
[5]	""Mitteleuropäische Zeit""
[6]	""MEZ""

I'm going to drop any duplicate entries and any keys past index 4 are in standard time",23/Apr/16 20:04;chonton;commit 3c92830ec51fb6b6e9a7ca2fb8fda324cd33e48a,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils.isNumber bug,LANG-1216,12957138,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,yusw,yusw,08/Apr/16 08:13,22/Oct/16 12:31,07/Apr/19 20:37,22/Oct/16 12:31,3.4,,,,3.5,,lang.math.*,,,0,,,,,,,,"I found that when using NumberUtils【org.apache.commons.lang3.math.NumberUtils.isNumber(version3.4)】 isNumber method the following phenomenon, 
when the parameter is 1.0 is true, but when the parameter is 0.1 is displayed is false.
When I use 0.1 as the parameter tuning isNumber method, 
view the source code in the method of the method of line 1370 discovered a problem.
When the analytical parameter is "". "", this time the chars [I] value is 46, direct return false.
I think to do so is not very reasonable, please give me your guidance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-10-22 12:30:50.588,,,false,,,,,Patch,,,,,,,,,9223372036854775807,,,Sat Oct 22 12:31:21 UTC 2016,,,,,,0|i2vtxb:,9223372036854775807,,,,,,,,"22/Oct/16 12:30;kinow;Just in case the code changes, here's the code aforementioned, on line 1370

https://github.com/apache/commons-lang/blob/91d6bd74fa358fdc8d7cb7681c76c509fd9a8e7d/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1370

{code}
     * @param str  the <code>String</code> to check
     * @return <code>true</code> if the string is a correctly formatted number
     * @since 3.3 the code supports hex {@code 0Xhhh} an
-->*        octal {@code 0ddd} validation
     * @deprecated This feature will be removed in Lang 4.0,
     *             use {@link NumberUtils#isCreatable(String)} instead
     */
{code}

Tip: if you need to mention code and code lines in the ticket, it might be a good idea to say what is the HEAD commit, so that if the code changes others can still work on the issue later :-) Or just include the code in the ticket.","22/Oct/16 12:31;pascalschumacher;Thanks for reporting. In version 3.5 NumberUtils#isNumber returns true for ""0.1"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils.createNumber() method lost precision sometimes,LANG-1215,12954902,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Duplicate,,cylot,cylot,31/Mar/16 09:18,12/Jun/16 11:31,07/Apr/19 20:37,12/Jun/16 08:25,2.6,3.4,,,,,lang.math.*,,,0,github-import,,,,,,,"For example:
    System.out.println(NumberUtils.createNumber(""193343.82""));

The result  is   193343.81。

The bug because of  code in the class  NumberUtils of the org.apache.commons.lang3.math package。

    public static Float createFloat(final String str) {
        if (str == null) {
            return null;
        }
        return Float.valueOf(str);
    }","Windows 7,Jdk1.6,Eclipse 3.5",,259200,259200,,0%,259200,259200,,,,,,LANG-1018,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-06-12 11:31:30.416,,,false,,,,,Important,,,,,,,,,9223372036854775807,,,Sun Jun 12 11:31:30 UTC 2016,,,,,,0|i2vg5j:,9223372036854775807,,,,,,,,"12/Jun/16 11:31;pascalschumacher;The fix for LANG-1018 also solves this, so this will be fixed in 3.5.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ClassUtils.getClass(ClassLoader, String) fails for ""void""",LANG-1214,12954258,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,henryptung,henryptung,29/Mar/16 10:36,10/May/17 14:35,07/Apr/19 20:37,21/Aug/16 11:19,3.4,,,,3.5,,lang.*,,,0,,,,,,,,"ClassUtils.getClass(ClassUtils.class.getClassLoader(), ""void"") throws ""ClassNotFoundException: [V"".

Root cause: ClassUtils contains an abbreviationMap for use in dealing with abbreviated primitive types like ""[I"" and ""[J"". However, [this commit|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blobdiff;f=src/main/java/org/apache/commons/lang3/ClassUtils.java;h=c15636ed99af1913d8436a2761d2e3e45b0c8b1a;hp=2492182dd6a383bbec970be3c58799bf89929ccf;hb=1d6ab5b8c0bcc69fe5984b882374e856ec198d0e;hpb=609319df2216e00d8f158e5fc5ce7756134b7cb0] introduces a ""void -> V"" mapping for ""completeness"".

This seems wholly erroneous, since the maps are used only for [primitive array abbreviations|http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName%28%29], and ""void/V"" is not among them.","Mac OS X
java version ""1.8.0_66""
Java(TM) SE Runtime Environment (build 1.8.0_66-b17)
Java HotSpot(TM) 64-Bit Server VM (build 25.66-b17, mixed mode)",,600,600,,0%,600,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-22 10:32:06.259,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Aug 21 11:19:11 UTC 2016,,,,,,0|i2vc67:,9223372036854775807,,,,,,,,"22/May/16 10:32;pascalschumacher;""abbreviationMap"" is also used by the ""primitiveToWrapper"" method and for this the ""void -> V"" mapping seems correct.

A patch/pull request for this issue would be most welcome.","22/May/16 23:57;henryptung;I'm not sure I understand; as far as I can tell, {{primitiveToWrapper}} uses the {{primitiveWrapperMap}}, which has a separate entry for {{void}} (though that entry is also confusing; {{void}} is not autoboxed to/from {{Void}} by Java, and the entry maps anyway to {{Void.TYPE == void.class}} instead of {{Void.class}}; I feel like it's a confusing substitute for what is actually a special case in the autoboxing-handling code).

This is independent of {{abbreviationMap}} and {{reverseAbbreviationMap}}, all uses of which seem to relate to array type class names (see https://github.com/apache/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/ClassUtils.java).","23/May/16 02:00;githubbot;GitHub user henryptung opened a pull request:

    https://github.com/apache/commons-lang/pull/155

    LANG-1214 Handle ""void"" in ClassUtils.getClass()

    `getClass()` previously deferred to an array type to get the class,
    but this fails for `void`, which lacks an array type.
    Instead, map explicitly from primitive name to primitive class.
    
    Added unit test line fails before change, passes after change.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/henryptung/commons-lang lang-1214-getclass-void

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/155.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #155
    
----
commit 792f75436b81e9941bcd30b31dc3ad4424de602a
Author: Henry Tung <htung@stanford.edu>
Date:   2016-05-23T01:45:49Z

    LANG-1214 Handle ""void"" in ClassUtils.getClass()
    
    getClass() previously deferred to an array type to get the class,
    but this fails for void, which lacks an array type.
    Instead, map explicitly from primitive name to primitive class.

----
","21/Aug/16 11:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/155
","21/Aug/16 11:18;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/155
  
    Thanks!
",21/Aug/16 11:19;pascalschumacher;Thanks for reporting and thanks for the pull request!,,,,,,,,,,,,,,,,,,,,,,,,,
ordinalIndexOf may skip first occurrence when searched string is longer than 1 char,LANG-1213,12951147,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Resolved,,alexgallotta@gmail.com,alexgallotta@gmail.com,17/Mar/16 10:24,28/May/16 16:15,07/Apr/19 20:37,17/Mar/16 10:45,,,,,3.4,,,,,0,,,,,,,,"The method
{code:java}
private static int ordinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal, final boolean lastIndex) 
{code}
[source | https://commons.apache.org/proper/commons-lang/apidocs/src-html/org/apache/commons/lang3/StringUtils.html]
at the line
{code:java}
1028                index = CharSequenceUtils.indexOf(str, searchStr, index + searchStr.length());
{code}
is using as starting index for search the _index+searchStr.length()_ .In case where the _searchStr_ is a single character, the first run will start from index
{code:java}
-1+1 = 0
{code}
if the _searchStr_ is long N, it will start at N-1 index and if _str_ contains the _searchStr_ before N-1 it will miss it",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Mar 17 10:44:44 UTC 2016,,,,,,0|i2utg7:,9223372036854775807,,,,,,,,17/Mar/16 10:44;alexgallotta@gmail.com;it seems it has been fixed at [3.4|https://commons.apache.org/proper/commons-lang/release-notes/RELEASE-NOTES-3.4.txt] with [this|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=commitdiff;h=e5a3039f7a1e727fca40db7357a9191b6a7cf41d],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
When searching the avaliable locales for Greece I get two locales which is not correct,LANG-1212,12948029,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,joehni,karkaletsis,karkaletsis,08/Mar/16 14:49,19/Oct/16 15:24,07/Apr/19 20:37,08/Mar/16 18:12,,,,,,,,,,0,,,,,,,,"List<Locale> locales = LocaleUtils.languagesByCountry(""GR"");
        String languageCode = ""en_US"";
        for (Locale locale : locales) {
            System.out.println(locale.toString() + "" "" + locale.getDisplayLanguage());
        }

The result is:

el_GR Greek
de_GR German",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-03-08 18:12:08.925,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 08 18:12:08 UTC 2016,,,,,,0|i2uc5r:,9223372036854775807,,,,,,,,08/Mar/16 18:12;joehni;This is defined in [JDK 8|http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/util/resources/de/CurrencyNames_de_GR.properties]. For whatever reason.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#startsWithAny has error in Javadoc,LANG-1210,12945473,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,j4nu5,j4nu5,29/Feb/16 14:00,19/Oct/16 07:00,07/Apr/19 20:37,01/Mar/16 02:41,3.3.2,3.4,,,3.5,,lang.*,,,0,,,,,,,,"startsWithAny says in its javaDoc: 
{code:java}
/** 
@return {@code true} if the CharSequence starts with any of the the prefixes, case insensitive, or both {@code null} 
**/
{code} 

but uses startsWith(final CharSequence str, final CharSequence prefix) which is *case sensitive*.

Either the JavaDoc of startsWithAny method should be changed or startsWithIgnoreCase() or startsWith(CharSequence,CharSequence,boolean) should be used.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-29 14:16:10.186,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 01 08:43:31 UTC 2016,,,,,,0|i2twy7:,9223372036854775807,,,,,,,,"29/Feb/16 14:16;githubbot;GitHub user mniehoff opened a pull request:

    https://github.com/apache/commons-lang/pull/126

    LANG-1210 Fixed JavaDoc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mniehoff/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/126.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #126
    
----
commit 447846e111bddbb2fb98ea1c12bc356ad993c8ab
Author: Matthias Niehoff <matthias.niehoff@codecentric.de>
Date:   2016-02-29T14:14:25Z

    LANG-1210 Fixed JavaDoc

----
","01/Mar/16 02:40;githubbot;Github user garydgregory commented on the pull request:

    https://github.com/apache/commons-lang/pull/126#issuecomment-190505830
  
    Fixed with https://issues.apache.org/jira/browse/LANG-1211 and commit d1a3255600da34f4b69dc082c4441ae140452fee
","01/Mar/16 02:41;garydgregory;Fixed with commit d1a3255600da34f4b69dc082c4441ae140452fee, Please verify and close.","01/Mar/16 08:43;githubbot;Github user mniehoff closed the pull request at:

    https://github.com/apache/commons-lang/pull/126
",,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat does not support the 'u' pattern element,LANG-1209,12945030,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,glennmcg,glennmcg,26/Feb/16 20:04,28/May/16 16:24,07/Apr/19 20:37,01/Mar/16 06:48,2.6,3.4,,,,,,,,0,,,,,,,,java.lang.IllegalArgumentException: Illegal pattern component: u,,,,,,,,,,,,,,LANG-1192,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-28 20:35:51.737,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Mar 01 20:52:00 UTC 2016,,,,,,0|i2tu7j:,9223372036854775807,,,,,,,,28/Feb/16 20:35;dmjones500;Please can you include a code sample to reproduce this issue?,"29/Feb/16 05:48;glennmcg;FastDateFormat.getInstance( ""u"" );","29/Feb/16 20:14;dmjones500;I can reproduce this with the 3.4 release, but not the latest code in Git. Clearly something has ""solved"" the problem, although looking at recent commits I'm struggling to pin down where the fix happened, inadvertent or otherwise.

Not sure we can take this much further without a reproducible issue to fix.","29/Feb/16 20:46;glennmcg;I'd expect the change to be in FastDateParser.

The 3.4 version is missing

case 'u':
            return DAY_OF_WEEK_STRATEGY;","01/Mar/16 06:46;chonton;1. Look at [apache/commons-lang|https://github.com/apache/commons-lang] repository in github,
2. find file [FastDatePrinter.java|https://github.com/apache/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java]
3. push [blame|https://github.com/apache/commons-lang/blame/master/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java]
4. search for 'u' - you will see that the code was committed in [cc340ad|https://github.com/apache/commons-lang/commit/2ebf9a21d2dc99ab2f434111cac9dcd6da99d574] as part of LANG-1192",01/Mar/16 20:52;dmjones500;Thanks Charles!,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.equals with CharSequence - IndexOutOfBoundsException,LANG-1207,12942969,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,yogo95,yogo95,24/Feb/16 14:23,24/Feb/16 15:04,07/Apr/19 20:37,24/Feb/16 14:45,3.4,,,,3.5,,lang.*,,,0,,,,,,,,"Good day,

This is my first report here, so I'm really sorry if I did not fill in the form right .

I just ran into a bug with the method 
*public static boolean equals(final CharSequence cs1, final CharSequence cs2)*.

If one of the object is not the String object, the method use the CharSequenceUtils to check the equality. 

The problem is that using Math.max(cs1.length(), cs2.length()) give the max length of the 2 objects. Then 1 of the object throw *IndexOutOfBoundsException*.

I think it will be better to check the size before using CharSequenceUtils as the method equalsIgnoreCase.

Maybe this code could correct the bug :

if (cs1 == cs2) {
    return true;
} else if (cs1 == null || cs2 == null) {
    return false;
} else if (cs1.length() != cs2.length()) {
    return false;
} else if (cs1 instanceof String && cs2 instanceof String) {
    return cs1.equals(cs2);
} else {
    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());
}

Kind regards,",,,,,,,,,,,,,,LANG-1162,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-24 14:45:03.328,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 24 15:04:52 UTC 2016,,,,,,0|i2thhj:,9223372036854775807,,,,,,,,"24/Feb/16 14:45;rikles;Hello Eric,
Thank you for your interest in Commons-Lang and for this bug report.

This issue have already been fixed in the current development version and will be available in the next release of Commons-Lang.","24/Feb/16 15:04;yogo95;Hello Loic,

Thank you for your fast reply. I'll wait the new release.

Regards,",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils.createNumber() behaves inconsistently with NumberUtils.isNumber(),LANG-1205,12941448,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,dbrown_bps,dbrown_bps,23/Feb/16 16:40,19/Oct/16 07:00,07/Apr/19 20:37,24/Apr/16 03:37,3.1,,,,3.5,,lang.math.*,,,0,,,,,,,,"The {{NumberUtils.createNumber()}} method fails to check for multiple trailing characters, and as a result, it returns a value even though {{NumberUtils.isNumber()}} indicates that it should not.  For example:

{code}
boolean isNumber = NumberUtils.isNumber(""81.5514DD"");   // returns false

Number numValue = NumberUtils.createNumber(""81.5514DD"");  // returns a Double value, 81.5514
{code}

I would expect the {{createNumber()}} method to throw a {{NumberFormatException}} in this case.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-02-24 21:45:31.089,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun May 08 12:28:13 UTC 2016,,,,,,0|i2t83j:,9223372036854775807,,,,,,,,24/Feb/16 21:45;garydgregory;Patches with unit tests are welcome! ,"17/Mar/16 14:26;githubbot;GitHub user pbrose opened a pull request:

    https://github.com/apache/commons-lang/pull/130

    [LANG-1205] NumberUtils.createNumber() behaves inconsistently with Nu…

    …mberUtils.isNumber()

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pbrose/commons-lang LANG-1205

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/130.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #130
    
----
commit 568b1ded1bb6c11bfcf4f86767b52fb4ee5e125b
Author: patrick.brose <patrick.brose@mailbox.tu-berlin.de>
Date:   2016-03-17T14:23:57Z

    [LANG-1205] NumberUtils.createNumber() behaves inconsistently with NumberUtils.isNumber()

----
","17/Mar/16 14:34;pbrose;This bug only worked with doubles or floats that have two trailing characters. The reason is that one trailing character was stripped off the source string and used for identifying the data type. This left one trailing character in the substring which was used in Double.valueOf(substring) or Float.valueOf(substring). Instead, one should use Double.valueOf(source string) or Float.valueOf(source string), which throws the expected NumberFormatException.

FYI: Long does not have the same problem because here Long.decode() is used instead of Long.valueOf().

Pull request:
https://github.com/apache/commons-lang/pull/130",24/Apr/16 03:37;chonton;commit b877fb9abef4a19eec9cc7329acbd433648b8f7b,"08/May/16 12:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/130
","08/May/16 12:28;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/130#issuecomment-217714251
  
    Thanks! :+1: Commit has been merged: https://github.com/apache/commons-lang/commit/b877fb9abef4a19eec9cc7329acbd433648b8f7b
",,,,,,,,,,,,,,,,,,,,,,,,,
Separated annotations HashCodeExclude and EqualsExclude break the general contract for the hashCode method in java.lang.Object,LANG-1203,12935948,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,wildhai,wildhai,02/Feb/16 12:27,04/Dec/16 16:20,07/Apr/19 20:37,,3.5,,,,,,lang.builder.*,,,0,,,,,,,,"Since version 3.5-SNAPSHOT the annotations HashCodeExclude and EqualsExclude exist in component [lang.builder.*|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=tree;f=src/main/java/org/apache/commons/lang3/builder;hb=HEAD].

A separated handling of both annotations breaks the general contract for the hashCode method in java.lang.Object (""If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result."").

Rather there should exist only one exclude annotation dedicated to both methods, like 'EqualsAndHashCodeExclude'.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-12-04 16:20:57.483,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 04 16:20:57 UTC 2016,,,,,,0|i2sagv:,9223372036854775807,,,,,,,,"04/Dec/16 16:20;dmjones500;There may be some reasons why excluding a value from a hash code makes sense. See [this StackOverflow question|http://stackoverflow.com/questions/4748211/java-equal-and-hashcode-based-on-different-fields] for some discussion on that topic.

I think there's an argument for having two annotations:

* HashCodeExclude
* EqualsAndHashCodeExclude

I can't see how you can exclude something from equals and not from hash code.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
parseDateStrictly does't pass specified locale,LANG-1202,12932186,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,markus17,markus17,18/Jan/16 16:34,19/Oct/16 15:24,07/Apr/19 20:37,26/Jul/16 03:18,3.4,,,,3.5,,lang.time.*,,,0,,,,,,,,"LANG-799 added support for specifying a locale, but parseDateStrictly() doesn't pass it to the final parseDateWithLeniency() method.",,,,,,,,,,,,,,,,,,,,,,,,,,18/Jan/16 16:47;markus17;LANG-1202.patch;https://issues.apache.org/jira/secure/attachment/12782901/LANG-1202.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2016-07-26 03:18:58.891,,,false,,,,,Patch,,,,,,,,,9223372036854775807,,,Tue Jul 26 03:18:58 UTC 2016,,,,,,0|i2rnan:,9223372036854775807,,,,,,,,"18/Jan/16 16:47;markus17;Patch! For some reason it also contains a lot of files i didn't modify. I'm new to git but did a git clone, only modified DateUtils and the test. I don't know why it thinks i modified:

{code}
        modified:   src/main/java/org/apache/commons/lang3/ArrayUtils.java
        modified:   src/main/java/org/apache/commons/lang3/time/DateUtils.java
        modified:   src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderConcurrencyTest.java
        modified:   src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderMutateInspectConcurrencyTest.java
        modified:   src/test/java/org/apache/commons/lang3/builder/ToStringStyleConcurrencyTest.java
        modified:   src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java
        modified:   src/test/resources/java.policy
{code}","18/Jan/16 16:49;markus17;Anyway, these are the changes due to lack of producing a normal patch file

{code}
    @Test
    public void testLANG799whichDidNotWork() throws ParseException {
        DateUtils.parseDateStrictly(""09 abril 2008 23:55:38 GMT"", new Locale(""es""), new String[]{""dd MMM yyyy HH:mm:ss zzz""});
    }
{code}

{code}
    /**
     * <p>Parses a string representing a date by trying a variety of different parsers,
     * using the default date format symbols for the given locale..</p>
     * 
     * <p>The parse will try each parse pattern in turn.
     * A parse is only deemed successful if it parses the whole of the input string.
     * If no parse patterns match, a ParseException is thrown.</p>
     * The parser parses strictly - it does not allow for dates such as ""February 942, 1996"". 
     * 
     * @param str  the date to parse, not null
     * @param locale the locale whose date format symbols should be used. If <code>null</code>,
     * the system locale is used (as per {@link #parseDateStrictly(String, String...)}).
     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null
     * @return the parsed date
     * @throws IllegalArgumentException if the date string or pattern array is null
     * @throws ParseException if none of the date patterns were suitable
     * @since 3.2
     */
    public static Date parseDateStrictly(final String str, final Locale locale, final String... parsePatterns) throws ParseException {
        return parseDateWithLeniency(str, locale, parsePatterns, false);
    }  
{code}",10/Feb/16 12:23;markus17;Any comments on this?,26/Jul/16 03:18;chonton;committed in [c99a787752770b8952297e24e07bd404cb2f4f74|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=commitdiff;h=c99a787752770b8952297e24e07bd404cb2f4f74],,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.ordinalIndexOf: Add missing right parenthesis in JavaDoc example,LANG-1200,12930280,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,garydgregory,garydgregory,garydgregory,14/Jan/16 22:08,02/Oct/16 16:22,07/Apr/19 20:37,14/Jan/16 22:12,3.4,,,,3.5,,,,,0,,,,,,,,https://github.com/apache/commons-lang/pull/120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-01-14 22:11:04.668,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 14 22:12:21 UTC 2016,,,,,,0|i2rbjb:,9223372036854775807,,,,,,,,"14/Jan/16 22:11;githubbot;Github user garydgregory commented on the pull request:

    https://github.com/apache/commons-lang/pull/120#issuecomment-171797905
  
    In Git master, please verify and close. Offically tracked here: https://issues.apache.org/jira/browse/LANG-1200
",14/Jan/16 22:12;garydgregory;In Git master.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fix implementation of StringUtils.getJaroWinklerDistance(),LANG-1199,12929858,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,msteiger,msteiger,13/Jan/16 15:54,03/Apr/17 12:45,07/Apr/19 20:37,05/Jun/16 15:40,3.4,,,,3.5,,lang.*,,,2,,,,,,,,"The current implementation of StringUtils.getJaroWinklerDistance() does not compute the correct result in some cases. See #LANG-944 for the initial code contribution.

StringUtils.getJaroWinklerDistance(""Haus Ingeborg"", ""Ingeborg Esser"") == 0.0

This is due to the incorrect computation of common characters, which causes the algorithm to exit prematurely.

In contrast, the implementation in Lucene gives ~0.63, which is about right.

    JaroWinklerDistance d = new JaroWinklerDistance();
    getDistance(""Haus Ingeborg"", ""Ingeborg Esser"");

See https://lucene.apache.org/core/3_0_3/api/contrib-spellchecker/org/apache/lucene/search/spell/JaroWinklerDistance.html",,,,,,,,,,,,,,,,TEXT-26,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-20 19:20:28.372,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Jun 05 16:12:46 UTC 2016,,,,,,0|i2r8xr:,9223372036854775807,,,,,,,,"20/May/16 19:20;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/148

    LANG-1199: Incorrect implementation of StringUtils#getJaroWinklerDist…

    …ance()
    
    replace current implementation with Jaro-Winkler distance implementation of Apache Lucene

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang jaro

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/148.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #148
    
----
commit 3d8ff5286f174cfd8ceb8b98ff22b73897f2470d
Author: pascalschumacher <pascalschumacher@gmx.net>
Date:   2016-05-20T19:18:47Z

    LANG-1199: Incorrect implementation of StringUtils#getJaroWinklerDistance()
    
    replace current implementation with Jaro-Winkler distance implementation of Apache Lucene

----
",05/Jun/16 15:40;pascalschumacher;Fixed by replacing the current implementation with the one of Apache Lucene. Thanks for reporting.,"05/Jun/16 16:12;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/148
  
    merged: https://github.com/apache/commons-lang/commit/c35a04102274b330aa833030c15f722b00062812
","05/Jun/16 16:12;githubbot;Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/commons-lang/pull/148
",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Travis-ci build fails occasionally with ""Killed"" message",LANG-1194,12924315,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Done,chonton,chonton,chonton,25/Dec/15 16:49,19/Oct/16 07:01,07/Apr/19 20:37,25/Dec/15 20:41,3.4,,,,3.5,,lang.*,,,0,,,,,,,,"travis-ci build occasionally fails with a ""Killed"" message in the log.

The killed test is usually one of:
org.apache.commons.lang3.StringEscapeUtilsTest
org.apache.commons.lang3.HashSetvBitSetTest
org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest
org.apache.commons.lang3.time.FastDateFormat_ParserTest

If travis build is restarted, the build will eventually pass.

The build with same code in other environments does not occur on any local environment.",,,,,,,,,,,LANG-1192,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 25 20:41:05 UTC 2015,,,,,,0|i2qb5j:,9223372036854775807,,,,,,,,"25/Dec/15 16:55;chonton;travis-ci documentation mentions that build will be killed if more than 10 minutes passes between log messages or if total memory of VM exceeds 3G.  Since entire build takes less than 8 minutes, I've investigated the memory concern.","25/Dec/15 17:00;chonton;Dumping the memory usage using the MemoryMXBean:

heap init:493,929,088 commited:2,930,245,632 max:7,025,983,488 used:2,307,514,072
non-heap init:24,576,000 commited:25,034,752 max:224,395,264 used:17,364,104

The committed heap memory is close to 3G limit.  Travis 3G limit is probably total footprint.  We'll need to allow for the maven footprint and jvm non-heap memory.","25/Dec/15 20:41;chonton;limit heap memory to prevent from bumping into Travis CI 3G memory limit.
commit 39ed92fff74cfd4be4ca728fc4258feea26b696c",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ordinalIndexOf(""abc"", ""ab"", 1) gives incorrect answer of -1 (correct answer should be 0)",LANG-1193,12921028,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,qin.li@everydayratings.com,qin.li@everydayratings.com,11/Dec/15 10:30,19/Oct/16 07:00,07/Apr/19 20:37,11/Dec/15 13:47,3.4,,,,3.5,,,,,0,,,,,,,,"In Apache Commons Lang 3.4, StringUtils.ordinalIndexOf(""abc"", ""ab"", 1) gives incorrect answer of -1 (correct answer should be 0)。but StringUtils.ordinalIndexOf(""abc"", ""a"", 1) gives correct answer of 0.

Based on the above mentioned observation, the bug occurrs if the searchStr is of length > 1, and locates at the index 0 of the str.

In Apache Commons Lang 2.6, this bug is not observed.",OS X Yosemite 10.10.5. Maven project.,,,,,,,,,,,,,,,LANG-1077,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-12-11 13:46:20.26,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 11 13:47:20 UTC 2015,,,,,,0|i2prhj:,9223372036854775807,,,,,,,,"11/Dec/15 13:46;sebb@apache.org;Thanks for the report.  I agree that there is a bug here.

Looks like the problem was introduced as a fix for LANG-1077 (which was invalid).


","11/Dec/15 13:47;sebb@apache.org;LANG-1193 ordinalIndexOf(""abc"", ""ab"", 1) gives incorrect answer of -1
(correct answer should be 0)
Revert LANG-1077

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/d75fe46b
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/d75fe46b
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/d75fe46b

Branch: refs/heads/master
Commit: d75fe46b8f1b0d5c27887052ee4714d6a9c7ea4b
Parents: 15e1ea2
Author: Sebb <sebb@apache.org>
Authored: Fri Dec 11 13:41:22 2015 +0000
Committer: Sebb <sebb@apache.org>
Committed: Fri Dec 11 13:41:22 2015 +0000

----------------------------------------------------------------------
 src/changes/changes.xml                            |  2 +-
 .../java/org/apache/commons/lang3/StringUtils.java | 15 ++++++++++++---
 .../lang3/StringUtilsEqualsIndexOfTest.java        | 17 +++++++++++++++--
 3 files changed, 28 insertions(+), 6 deletions(-)
----------------------------------------------------------------------",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat does not support the week-year component (uppercase 'Y'),LANG-1192,12920697,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,dominik.stadler@gmx.at,dominik.stadler@gmx.at,10/Dec/15 08:16,19/Oct/16 07:01,07/Apr/19 20:37,25/Dec/15 20:50,3.4,,,,3.5,,lang.time.*,,,0,easytest,,,,,,,"The Java SimpleDateFormat supports two year-components, 'y' for normal year and 'Y' for 'Week year', see http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html

However when we try to use FastDateFormat to parse a format which uses the week-year, it fails with an exception

{noformat}
java.lang.IllegalArgumentException: Illegal pattern component: YYYY
	at org.apache.commons.lang3.time.FastDatePrinter.parsePattern(FastDatePrinter.java:282)
	at org.apache.commons.lang3.time.FastDatePrinter.init(FastDatePrinter.java:149)
	at org.apache.commons.lang3.time.FastDatePrinter.<init>(FastDatePrinter.java:142)
	at org.apache.commons.lang3.time.FastDateFormat.<init>(FastDateFormat.java:384)
	at org.apache.commons.lang3.time.FastDateFormat.<init>(FastDateFormat.java:369)
	at org.apache.commons.lang3.time.FastDateFormat$1.createInstance(FastDateFormat.java:91)
	at org.apache.commons.lang3.time.FastDateFormat$1.createInstance(FastDateFormat.java:88)
	at org.apache.commons.lang3.time.FormatCache.getInstance(FormatCache.java:82)
	at org.apache.commons.lang3.time.FastDateFormat.getInstance(FastDateFormat.java:119)
{noformat}

Simple unit test to reproduce this:

{code}
    @Test
    public void testCommonsLang() {
    	Date date = new Date();

    	Format dateFormat = new SimpleDateFormat(""YYYY"");
		assertNotNull(dateFormat.format(date));

        dateFormat = FastDateFormat.getInstance(""YYYY"");
		assertNotNull(dateFormat.format(date));
    }
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-12-11 18:11:07.626,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 25 20:50:17 UTC 2015,,,,,,0|i2ppfz:,9223372036854775807,,,,,,,,"11/Dec/15 18:11;sebb@apache.org;Comparison with http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html shows that Java 7 added 'X', 'Y' and 'u'.
Only 'X' has been implemented so far.",12/Dec/15 04:39;chonton;'u' is straight forward.  implemented with commit 2ebf9a21d2dc99ab2f434111cac9dcd6da99d574,"12/Dec/15 17:50;chonton;To make 'Y' useful, the internal Calendar must be exposed to allow the minimalDaysInFirstWeek and firstDayOfWeek to be set.  Unfortunately, this has side-effect of limiting thread safety.  To obtain ISO8601 behavior, we could set internal calendar instances to have minimalDaysInFirstWeek=4 and firstDayOfWeek=MONDAY.  Or, we could provide a way for client to provide Calendar instance (also useful for  LANG-933)",17/Dec/15 14:58;chonton;commit 2fa0b168d62a07365b2787d0ed97fa1c2cfb673b reverted while investigating travis failures (https://travis-ci.org/apache/commons-lang/builds/96652842),"24/Dec/15 20:30;chonton;Maybe a travis-ci issue.  Did not reproduce on any local environment.  Logs from travis-ci builds show ""Killed"" message.  See (https://travis-ci.org/apache/commons-lang/builds/96652842)

Using a github fork, I was able to get the code to pass if I re-ran tests multiple times.  I walked back several commits and was able to get similar Killed message going back three more commits.  (See https://travis-ci.org/chonton/commons-lang/builds)

The killed test is one of:

org.apache.commons.lang3.StringEscapeUtilsTest
org.apache.commons.lang3.HashSetvBitSetTest
org.apache.commons.lang3.builder.ToStringStyleConcurrencyTest
org.apache.commons.lang3.time.FastDateFormat_ParserTest
","25/Dec/15 20:50;chonton;commit afc942c7b2bc0317cb549a3fd05080646e7274fc

reapply prior work after investigating Travis failures.",,,,,,,,,,,,,,,,,,,,,,,,,
"Incorrect Javadoc StringUtils.containsAny(CharSequence, CharSequence...) ",LANG-1191,12920051,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,garydgregory,qed,qed,08/Dec/15 11:56,19/Oct/16 07:01,07/Apr/19 20:37,26/Jan/16 18:52,3.4,,,,3.5,,lang.*,,,0,,,,,,,,"Javadoc for boolean org.apache.commons.lang3.StringUtils.containsAny(CharSequence cs, CharSequence... searchCharSequences) says:

StringUtils.containsAny(""abcd"", ""ab"", ""cd"") = false

which is not true. It should be:

StringUtils.containsAny(""abcd"", ""ab"", ""cd"") = true",,,,,,,,,,,,,,,,,,,,,,,,,,26/Jan/16 04:27;brentworden;LANG-1191.diff;https://issues.apache.org/jira/secure/attachment/12784338/LANG-1191.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-12-09 14:10:46.02,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 26 18:52:03 UTC 2016,,,,,,0|i2plgf:,9223372036854775807,,,,,,,,"09/Dec/15 14:10;yasar.siddiqui;This has been fixed in the javadoc
Reference URL - http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#containsAny(java.lang.CharSequence,%20java.lang.CharSequence...)
","26/Jan/16 04:25;brentworden;There does appear to be an inconsistency with:

StringUtils.containsAny(""abcd"", ""ab"", null) = false

This does assert to true when added as a test case.","26/Jan/16 17:01;qed;@Brent: StringUtils.containsAny(""abcd"", ""ab"", ""cd"") = false, not StringUtils.containsAny(""abcd"", ""ab"", null) = false","26/Jan/16 17:03;qed;@Brent: I'm sorry, I didn't notice you are talking about the line above.","26/Jan/16 18:52;garydgregory;In Git master, please verify and close.",,,,,,,,,,,,,,,,,,,,,,,,,,
TypeUtils.isAssignable throws NullPointerException when fromType has type variables and toType generic superclass specifies type variable,LANG-1190,12919821,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,lyuhau,lyuhau,07/Dec/15 19:39,19/Oct/16 07:01,07/Apr/19 20:37,31/Jul/16 18:03,3.4,,,,3.5,,lang.reflect.*,,,0,,,,,,,,"{code:java}
import static org.apache.commons.lang3.reflect.TypeUtils.*;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.util.ArrayList;

public class Demonstration {

    public static <U> Iterable<U> someMethod() { return null; }
    
    public static class WorkingClass extends ArrayList { }
    public static class FailingClass extends ArrayList<Object> { }
    
    
    public static void main(String[] args) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        Type fromType = Demonstration.class.getDeclaredMethod(""someMethod"").getGenericReturnType();
        Type workingToType = wildcardType().withLowerBounds(WorkingClass.class).build();
        Type failingToType = wildcardType().withLowerBounds(FailingClass.class).build();
        
        System.out.println(fromType);
        System.out.println(workingToType);
        System.out.println(failingToType);
        
        System.out.println(isAssignable(fromType, workingToType));
        System.out.println(isAssignable(fromType, failingToType));
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-29 18:34:01.445,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 31 18:03:21 UTC 2016,,,,,,0|i2pk1b:,9223372036854775807,,,,,,,,"29/May/16 18:34;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/158

    LANG-1190: TypeUtils.isAssignable throws NullPointerException when fr…

    …omType has type variables and toType generic superclass specifies type variable
    
    Not sure if this is the right/best solution, so review carefully.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang lang_1190

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/158.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #158
    
----
commit b1ed6725807382608ed45d9803f80b129a79c5a8
Author: pascalschumacher <pascalschumacher@gmx.net>
Date:   2016-05-29T18:30:36Z

    LANG-1190: TypeUtils.isAssignable throws NullPointerException when fromType has type variables and toType generic superclass specifies type variable

----
","29/May/16 18:40;githubbot;Github user coveralls commented on the pull request:

    https://github.com/apache/commons-lang/pull/158#issuecomment-222375773
  
    
    [![Coverage Status](https://coveralls.io/builds/6379480/badge)](https://coveralls.io/builds/6379480)
    
    Coverage increased (+0.03%) to 93.391% when pulling **b1ed6725807382608ed45d9803f80b129a79c5a8 on PascalSchumacher:lang_1190** into **afedbae8aca69a092d65766640361801bf2b5d9b on apache:master**.

","31/Jul/16 18:03;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/158
",31/Jul/16 18:03;pascalschumacher;Thanks for reporting.,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#join(T...): warning: [unchecked] Possible heap pollution from parameterized vararg type T,LANG-1188,12916435,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,simonkramer,simonkramer,26/Nov/15 12:45,12/Jun/17 12:04,07/Apr/19 20:37,23/Oct/16 19:59,3.4,,,,3.6,,lang.*,,,0,,,,,,,,"commons-lang3-3.4-src/src/main/java/org/apache/commons/lang3/StringUtils.java:3302: warning: [unchecked] Possible heap pollution from parameterized vararg type T
    public static <T> String join(final T... elements) {
                                             ^

usage: String.join("" "", stringarray)",javac 1.8.0_25,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-29 17:41:10.103,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 12 09:26:32 UTC 2016,,,,,,0|i2oz5z:,9223372036854775807,,,,,,,,"29/May/16 17:41;pascalschumacher;Once commons-lang requires at least java 7 we can use @SafeVarargs, but for now I guess there is nothing we can do.","02/Jun/16 10:21;sebb@apache.org;We could start adding comments to state why the warning is not a problem (if indeed that is the case).
This means analysing the true cause of the warning, which will have to be done at some point anyway.

This would at least indicate to developers/maintainers/3rd parties that the warning has been taken into acount.

It's obviously important not to suppress the warning without first ensuring that the code is safe.","12/Oct/16 09:26;kinow;+1 [~sebb@apache.org] for adding comments now in the code. Never used @SafeVarargs, but sounds like a good plan when we have >java 7 [~pascalschumacher]",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Method createNumber from NumberUtils doesn't work for floating point numbers other than Float,LANG-1187,12915772,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Duplicate,,leizhiyuan,leizhiyuan,24/Nov/15 12:06,12/Jun/16 11:31,07/Apr/19 20:37,12/Jun/16 08:27,3.4,,,,,,lang.math.*,,,0,,,,,,,,"demo:

 Number n = org.apache.commons.lang3.math.NumberUtils.createNumber(""6264583.33"");
        System.out.println(""lang3_createNumber_6264583.33---->"" + n);


while n will be 6264583.5. not 6264583.33",,,,,,,,,,,,,,LANG-1018,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-24 13:42:16.623,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Jun 12 11:31:25 UTC 2016,,,,,,0|i2ov2n:,9223372036854775807,,,,,,,,"24/Nov/15 13:42;rikles;I just take a quick look and it's seem to be caused by the order of conversion priority for decimal number (Float > Double > BigDecimal) and the test for select between those types is based on the number of digits past the decimal point.
But wouldn't it be on significant digits instead ? (if significant digits >=7 there is a risk that float can be unable to represents the entire number)","12/Jun/16 11:31;pascalschumacher;The fix for LANG-1018 also solves this, so this will be fixed in 3.5.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in FastDateParser$TimeZoneStrategy,LANG-1186,12914741,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,chonton,nmanley,nmanley,20/Nov/15 05:34,16/Nov/16 20:42,07/Apr/19 20:37,18/Dec/15 01:34,3.4,,,,3.5,,lang.time.*,,,0,,,,,,,,"Java 8u60 has a change where {{DateFormatSymbols.getZoneStrings}} returns arrays with 7 elements instead of 5 like it previously had. For some locales, the additional two elements are null.

{code}
Running org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.597 sec <<< FAILURE! - in org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest
testTimeZoneStrategyPattern(org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest)  Time elapsed: 0.597 sec  <<< ERROR!
java.lang.NullPointerException: null
	at org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy.<init>(FastDateParser.java:856)
	at org.apache.commons.lang3.time.FastDateParser.getLocaleSpecificStrategy(FastDateParser.java:647)
	at org.apache.commons.lang3.time.FastDateParser.getStrategy(FastDateParser.java:616)
	at org.apache.commons.lang3.time.FastDateParser.access$100(FastDateParser.java:74)
	at org.apache.commons.lang3.time.FastDateParser$StrategyParser.letterPattern(FastDateParser.java:230)
	at org.apache.commons.lang3.time.FastDateParser$StrategyParser.getNextStrategy(FastDateParser.java:214)
	at org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:161)
	at org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:147)
	at org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)
	at org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest.testTimeZoneStrategyPattern(FastDateParser_TimeZoneStrategyTest.java:31)
{code}
",,,,,,,,,,,,,,,,LANG-1285,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-20 05:34:57.714,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 18 01:34:53 UTC 2015,,,,,,0|i2oopr:,9223372036854775807,,,,,,,,"20/Nov/15 05:34;githubbot;GitHub user NickManley opened a pull request:

    https://github.com/apache/commons-lang/pull/117

    LANG-1186 Fix NullPointerException in FastDateParser$TimeZoneStrategy

    Java 8u60 has a change where `DateFormatSymbols.getZoneStrings` returns arrays with 7 elements instead of 5 like it previously had. For some locales, the additional two elements are null.
    
    Example from the unit tests:
    ```
    Running org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest
    Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.597 sec <<< FAILURE! - in org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest
    testTimeZoneStrategyPattern(org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest)  Time elapsed: 0.597 sec  <<< ERROR!
    java.lang.NullPointerException: null
    	at org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy.<init>(FastDateParser.java:856)
    	at org.apache.commons.lang3.time.FastDateParser.getLocaleSpecificStrategy(FastDateParser.java:647)
    	at org.apache.commons.lang3.time.FastDateParser.getStrategy(FastDateParser.java:616)
    	at org.apache.commons.lang3.time.FastDateParser.access$100(FastDateParser.java:74)
    	at org.apache.commons.lang3.time.FastDateParser$StrategyParser.letterPattern(FastDateParser.java:230)
    	at org.apache.commons.lang3.time.FastDateParser$StrategyParser.getNextStrategy(FastDateParser.java:214)
    	at org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:161)
    	at org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:147)
    	at org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)
    	at org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest.testTimeZoneStrategyPattern(FastDateParser_TimeZoneStrategyTest.java:31)
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/NickManley/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/117.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #117
    
----
commit 5556026ed1dc17e70946a4a030842ade3a33baeb
Author: Nick Manley <nm3n8@mail.umkc.edu>
Date:   2015-11-20T05:24:05Z

    Fix NullPointerException in FastDateParser$TimeZoneStrategy

----
","17/Dec/15 15:47;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/117
",18/Dec/15 01:34;chonton;merged pull request,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#normalizeSpace no longer normalizes unicode non-breaking spaces (\u00A0),LANG-1184,12910480,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,pascalschumacher,pascalschumacher,04/Nov/15 21:09,03/Nov/16 21:40,07/Apr/19 20:37,,3.4,,,,,,lang.*,,,0,,,,,,,,"This works with 3.3.2, but fails with 3.4

{code:java}assertEquals(""a b"", StringUtils.normalizeSpace(""a\u00A0 b""));{code}",,,,,,,,,,,,,,,,LANG-1148,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-06 19:45:25.773,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 18 17:55:42 UTC 2016,,,,,,0|i2nynr:,9223372036854775807,,,,,,,,"06/Nov/15 19:45;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/113

    LANG-1184: StringUtils#normalizeSpace no longer normalizes unicode no…

    …n-breaking spaces (\u00A0) and does not trim control chars at the end anymore
    
    https://issues.apache.org/jira/browse/LANG-1184

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang LANG-1184

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/113.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #113
    
----
commit 0ee9bcb2e7ad662829276cd207f0a5ceeee616ea
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-11-06T19:41:21Z

    LANG-1184: StringUtils#normalizeSpace no longer normalizes unicode non-breaking spaces (\u00A0) and does not trim control chars at the end anymore

----
","17/Jan/16 04:21;githubbot;Github user hen commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/113#discussion_r49941043
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -8026,34 +8026,31 @@ private static boolean endsWith(final CharSequence str, final CharSequence suffi
          * @since 3.0
          */
         public static String normalizeSpace(final String str) {
    -        // LANG-1020: Improved performance significantly by normalizing manually instead of using regex
    -        // See https://github.com/librucha/commons-lang-normalizespaces-benchmark for performance test
             if (isEmpty(str)) {
                 return str;
             }
    +        if (isBlank(str)){
    --- End diff --
    
    Noting that this means the isEmpty above is unnecessary.
","17/Jan/16 04:25;githubbot;Github user hen commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/113#discussion_r49941082
  
    --- Diff: src/main/java/org/apache/commons/lang3/StringUtils.java ---
    @@ -8026,34 +8026,31 @@ private static boolean endsWith(final CharSequence str, final CharSequence suffi
          * @since 3.0
          */
         public static String normalizeSpace(final String str) {
    -        // LANG-1020: Improved performance significantly by normalizing manually instead of using regex
    -        // See https://github.com/librucha/commons-lang-normalizespaces-benchmark for performance test
             if (isEmpty(str)) {
                 return str;
             }
    +        if (isBlank(str)){
    +           return EMPTY;
    +        }
    +        
             final int size = str.length();
             final char[] newChars = new char[size];
             int count = 0;
             int whitespacesCount = 0;
    -        boolean startWhitespaces = true;
             for (int i = 0; i < size; i++) {
                 char actualChar = str.charAt(i);
    -            boolean isWhitespace = Character.isWhitespace(actualChar);
    +            boolean isWhitespace = Character.isWhitespace(actualChar) || actualChar == '\u00A0';
    --- End diff --
    
    Noting that the javadoc doesn't indicate that nbsp is escaped. I'm +1 to also escaping nbsp, but javadoc should be updated. 
","17/Jan/16 04:26;githubbot;Github user hen commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-172290723
  
    Made a couple of notes, one on code that can be removed and one on documentation; but looks good to me otherwise. 
","17/Jan/16 04:42;githubbot;Github user garydgregory commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-172291572
  
    Thank you for your interest in [lang].
    
    Java says a non-breaking whitespace is not a whitespace:
    
    ```java
    Character.isWhitespace('\u00A0'));
    ```
    
    returns `false`.
    
    So I am not sure this patch is valid.

","17/Jan/16 06:51;githubbot;Github user hen commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-172296208
  
    Given one of the behaviours of nbsp is not to collapse down, there is a logic in normalizeWhitespace not normalizing the nbsp characters. 
","17/Jan/16 17:23;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-172354689
  
    @garydgregory @hen Thanks for the reviews. :)
    
    As mentioned in the jira issue the goal of this pull request is not to add anything, but to restore pre-3.4 functionality: 
    
    These work with 3.3.2, but fail with 3.4:
    
    ```java
    assertEquals(""a b"", StringUtils.normalizeSpace(""a\u00A0 b""));
    assertEquals(""b"", StringUtils.normalizeSpace(""b\u0000""));
    ```
    
    while keeping in place most of the performance improvement added in https://github.com/apache/commons-lang/commit/bc8e23808b9d8d0c9b67270ef35d04ebd9d89cc8 
    
    I used same tests https://github.com/librucha/commons-lang-normalizespaces-benchmark and there is only a 10% performance regression for the restored pre-3.4 behavior (the trimming of the string and the normalization of non-braking spaces). 
    
    

","17/Jan/16 17:39;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-172357021
  
    @hen  Thanks again for the in-depth review.
    
    Part of the is `isEmpty()` is necessary, because `normalizeSpace` has to return `null` for `null` parameters according to javadoc `@return the modified string with whitespace normalized, {@code null} if null String input`
    
    I have updated the pull request and replaced the is `isEmpty()` check by `str == null`.
    
    I have also updated javadoc to reflect that non-breaking space is normalized.
","17/Jan/16 19:37;githubbot;Github user garydgregory commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-172369835
  
    Hi All,
    
    I'm more concerned about what the proper behavior of the method is, rather than its behavior in some past arbitrary version. Since Java does not define a nbsp as a whitespace, it should not be normalized away IMO. Now, if you want it normalized, we could talk about adding another method or documenting how to deal with this special use case. 
    
    Are there other characters that are ws-like characters that return false for Character.isWhitespace(). Unicode is pretty rich, maybe there is more. What would this new method be called?
","26/Jan/16 21:10;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-175231559
  
    Hi Gary,
    
    3.0 had the same behavior as 3.3.2, but I guess this is not a productive discussion.
    
    I know that `Character.isWhitespace` defines `\u00A0` as not a white space, but for example guava https://github.com/google/guava/blob/8fbeb9038cbe8b382b1ee188ae8459203cd04fb5/guava/src/com/google/common/base/CharMatcher.java#L1217 classifies it as whitespace.
    
    If you want to keep the changed behavior I suggest at least to re-add the `trim()` call or to remove the `Additionally <code>{@link #trim(String)}</code> removes control characters (char &lt;= 32) from both ends of this String.` part of the java doc.
    
    I'm not unicode expert, but https://en.wikipedia.org/wiki/Non-breaking_space has a list of some more non-breaking-space unicode characters.
    
    As for the method name I guess the easy way out would be to add a flag to normalize space. I can not come up with a good method name at the moment `normalizeAllSpace`, is my best try.
","24/Apr/16 06:11;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-213900174
  
    Hi all,
    
    an comments?
","08/May/16 18:22;pascalschumacher;I the ""non-trimming"" part of the issue and created an new issue for it [https://issues.apache.org/jira/browse/LANG-1226].","08/May/16 18:25;githubbot;Github user garydgregory commented on the pull request:

    https://github.com/apache/commons-lang/pull/113#issuecomment-217737900
  
    Yes, let's add a new method.
","11/Sep/16 14:20;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/184
  
    @phoenix384 The problem is that starting with 3.4 StringUtils#normalizeSpace no longer normalizes unicode non-breaking spaces. I reported this as a bug and argued for reverting this behavior, but other people disagreed. :( 
    
    For details see:
    https://github.com/apache/commons-lang/pull/113
    https://issues.apache.org/jira/browse/LANG-1184 
","18/Sep/16 17:55;githubbot;Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/commons-lang/pull/113
",,,,,,,,,,,,,,,,
Clarify JavaDoc of StringUtils.containsAny(),LANG-1182,12909364,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,britter,larry_west,larry_west,31/Oct/15 00:13,19/Oct/16 07:00,07/Apr/19 20:37,16/Nov/15 19:19,3.4,,,,3.5,,lang.*,,,0,,,,,,,,"(1) The javadoc for StringUtils.containsAny(CharSequence cs, CharSequence... searchCharSequences) confusingly says 

     * StringUtils.containsAny(""abcd"", ""ab"", ""cd"") = false

You can verify this actually returns true by running this:

        if (!StringUtils.containsAny(""abcd"", ""ab"", ""cd"")) 
            throw new AssertionError(""Third sample from StringUtils 3.4 javadoc"");

(2) The javadoc for containsAny(final CharSequence cs, final CharSequence searchChars) is inadequate, and could easily mislead naive readers to believe this containsAny() looks for a matching sequence (substring) rather than characters in a set:

     * StringUtils.containsAny(""zzabyycdxx"", ""za"") = true
     * StringUtils.containsAny(""zzabyycdxx"", ""by"") = true

In other words, both examples would be equally true for StringUtils.contains().  I suggest adding clarifying examples, like:

      * StringUtils.containsAny(""zzabyycdxx"", ""\tx"") = true
      * StringUtils.containsAny(""zzabyycdxx"", ""$.#yF"") = true

",,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-08 21:53:15.158,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Nov 16 19:19:34 UTC 2015,,,,,,0|i2nrpz:,9223372036854775807,,,,,,,,"08/Nov/15 21:53;githubbot;GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/commons-lang/pull/114

    LANG-1182: adding clarifying examples to StringUtils#containsAny javadoc

    as suggested by Larry West in https://issues.apache.org/jira/browse/LANG-1182

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/commons-lang LANG-1182

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/114.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #114
    
----
commit 1260e09d6f2314c7099d061f1c65e6b4275cb8a1
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-11-08T21:44:07Z

    LANG-1182: adding clarifying examples to StringUtils#containsAny javadoc
    
    as suggested by Larry West in https://issues.apache.org/jira/browse/LANG-1182

----
","16/Nov/15 19:18;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/114
","16/Nov/15 19:19;britter;{code}
commit 56907c9a96a50af44415111fcea3e76ce4d1890f
Merge: 4811375 7f0d6b4
Author: Benedikt Ritter <britter@apache.org>
Date:   Mon Nov 16 20:16:52 2015 +0100

    Merge branch 'LANG-1182'

    LANG-1182: Clarify JavaDoc of StringUtils.containsAny(). Thanks to
    Larry West for the suggestion and to Pascal Schuhmacher for implementing
    it. This fixes #114 from github.
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,
MultilineRecursiveToStringStyle is not public,LANG-1181,12908769,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Duplicate,,Jeff.Guinness@wexinc.com,Jeff.Guinness@wexinc.com,29/Oct/15 01:33,19/Nov/15 21:28,07/Apr/19 20:37,19/Nov/15 21:28,3.4,,,,,,lang.builder.*,,,0,,,,,,,,The public access modifier is missing from the MultilineRecursiveToStringStyle class. ,,,,,,,,,,,,,,LANG-1112,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-01 21:46:16.005,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Nov 05 19:51:05 UTC 2015,,,,,,0|i2no1r:,9223372036854775807,,,,,,,,"01/Nov/15 21:46;xasx;The class looks absolutely {{public}} to me:
https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=blob;f=src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java;h=d54e8b9cc2d40c50967f5aebcbed579f2b1c7ecc;hb=HEAD#l65

What exactly are you referring to?","02/Nov/15 13:01;Jeff.Guinness@wexinc.com;I include the library in my project as compile(""org.apache.commons:commons-lang3:3.4"") and the class is defined as:

class MultilineRecursiveToStringStyle extends RecursiveToStringStyle {

","05/Nov/15 19:35;pascalschumacher;[~Jeff.Guinness@wexinc.com] Thanks for reporting :), but this is a duplicate of [LANG-1112].",05/Nov/15 19:43;Jeff.Guinness@wexinc.com;Sorry about that. I thought I searched on MultilineRecursiveToStringStyle and didn't find any results but I may have done something wrong.,05/Nov/15 19:51;pascalschumacher;No problem. :),,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeEcmaScript incorrectly handles single-quotes,LANG-1180,12908681,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Not A Problem,,dwallach,dwallach,28/Oct/15 20:01,19/Oct/16 15:24,07/Apr/19 20:37,28/Oct/15 22:43,3.4,,,,,,,,,0,,,,,,,,"The following code illustrates the problem:

{noformat}
public void testEscapes() {
    String ecmaSingleEscape = StringEscapeUtils.escapeEcmaScript(""X'Y"");
    String ecmaDoubleEscape = StringEscapeUtils.escapeEcmaScript(""X\""Y"");

    assertEquals(""X\\\""Y"", ecmaDoubleEscape); // works correctly
    assertEquals(""X'Y"", ecmaSingleEscape); // incorrectly inserts a backslash
}
{noformat}

According to json.org, single-quote is not a valid character for being backslash-escaped in a string. The only valid backslash escapes are:

\""
\\
\/
\b
\f
\n
\r
\t
\u four-hex-digits

Digging deeper, it seems that this is a difference between JSON (single-quote must not be escaped, since strings can only be delimited with double-quotes) and JavaScript (single-quote can be escaped because strings can also be delimited with single-quotes). This suggests that you really want two different versions of escapeEcmaScript -- one focused on JSON and the other focuses on the broader JavaScript language.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 28 21:24:58 UTC 2015,,,,,,0|i2nni7:,9223372036854775807,,,,,,,,28/Oct/15 21:24;dwallach;Never mind. Didn't notice escapeJson as distinct from escapeEcmaScript.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ArrayUtils.removeAll(Object array, int... indices) should do the clone, not its callers",LANG-1178,12907645,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,sebb@apache.org,sebb@apache.org,24/Oct/15 13:42,19/Oct/16 07:00,07/Apr/19 20:37,28/May/16 11:16,3.4,,,,3.5,,lang.*,,,1,,,,,,,,"The method ArrayUtils.removeAll(Object array, int... indices) currently sorts the input indices array. Therefore the array needs to be cloned; this is currently done by the callers.

However the sort is an implementation detail of the method, so should be done by the method itself, not by the callers, which is fragile (easy to overlook when creating a new method) and unnecessary.

This would also allow the method to be more easily changed to a different implementation that does not need to sort the array (e.g. using BitSet)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-11-19 21:59:17.506,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed May 18 21:03:16 UTC 2016,,,,,,0|i2nh67:,9223372036854775807,,,,,,,,"19/Nov/15 21:59;githubbot;GitHub user hyandell opened a pull request:

    https://github.com/apache/commons-lang/pull/116

    Moving the clone inside removeAll(Object,int...);Object per LANG-1178

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hyandell/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/116.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #116
    
----
commit 4df139db7ad0049044458be843d107b935642e84
Author: Henri Yandell <hyandell@amazon.com>
Date:   2015-11-19T21:58:47Z

    Moving the clone inside removeAll(Object,int...);Object per LANG-1178

----
","18/May/16 20:46;pascalschumacher;Pull request merged. Thanks!

This issue can be resolved.",18/May/16 20:54;michael-o;You should assign to yourself and set a fix version.,"18/May/16 20:59;pascalschumacher;I would if I could, but as I'm not commons-lang committer I do not have the necessary permissions. (I just used the apache wide commit access to commons-lang to merge the pull request.)","18/May/16 21:03;michael-o;Merged by [~pascalschumacher], thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,
LocaleUtils.toLocale does not handle extensions,LANG-1172,12902708,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,djbuhler,djbuhler,06/Oct/15 14:33,16/Oct/15 15:43,07/Apr/19 20:37,,3.3,,,,,,,,,0,,,,,,,,"The {{toLocale()}} method is unable to handle locale strings that have custom extensions that are completely valid according to the [BCP47 spec|https://tools.ietf.org/html/bcp47#section-4]. Oracle documentation for sub tag extensions can be [found here|https://docs.oracle.com/javase/tutorial/i18n/locale/extensions.html].

An example locale string with a custom extension might be {{fr-CA-x-nb}}.

This issue seems to have been introduced with ticket LANG-915.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-10-16 15:43:59.426,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 16 15:43:59 UTC 2015,,,,,,0|i2mn2n:,9223372036854775807,,,,,,,,"16/Oct/15 15:43;britter;Hello [~djbuhler],

thank you for the report. Can you provide a unit test which shows the problem?

TIA!
Benedikt",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Data Race in StringEscapeUtils.escapeXml,LANG-1170,12895726,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Not A Problem,,ThomasKrieger,ThomasKrieger,23/Sep/15 09:33,16/Oct/15 22:36,07/Apr/19 20:37,16/Oct/15 22:36,2.6,,,,,,lang.*,,,0,,,,,,,,"Calling StringEscapeUtils.escapeXml from many threads creates a data race in the methods:

{code:java}
  private String[] lookupTable() {
            if (lookupTable == null) {
                createLookupTable();
            }
            return lookupTable;
        }
{code}

Here are the stacktraces from my test:

{code}
com/anarsoft/MultiThreadedOneInstanceTemplate.run
com/anarsoft/mit/TestCommonsLang.exec
org/apache/commons/lang/StringEscapeUtils.escapeXml
org/apache/commons/lang/Entities.escape
org/apache/commons/lang/Entities.escape
org/apache/commons/lang/Entities.entityName
org/apache/commons/lang/Entities$LookupEntityMap.name
org/apache/commons/lang/Entities$LookupEntityMap.lookupTable
org/apache/commons/lang/Entities$LookupEntityMap.createLookupTable 


com/anarsoft/MultiThreadedOneInstanceTemplate.run
com/anarsoft/mit/TestCommonsLang.exec
org/apache/commons/lang/StringEscapeUtils.escapeXml
org/apache/commons/lang/Entities.escape
org/apache/commons/lang/Entities.escape
org/apache/commons/lang/Entities.entityName
org/apache/commons/lang/Entities$LookupEntityMap.name
org/apache/commons/lang/Entities$LookupEntityMap.lookupTable
{code}

Data Race was found using http://vmlens.com



",Windows JDK 1.8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-09-23 09:51:52.76,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 16 22:36:26 UTC 2015,,,,,,0|i2lg6n:,9223372036854775807,,,,,,,,"23/Sep/15 09:51;sebb@apache.org;Note that version 2.6 is a legacy release; it is 4 years old.

Please consider upgrading to 3.4.","16/Oct/15 22:36;sebb@apache.org;The current code has been completely rewritten in this area and does not appear to have the same problem.

Feel free to open a new JIRA issue if there is a problem with LANG 3.4 or later",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat does not honour 'ZZ' pattern,LANG-1166,12855826,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,chonton,abg1979,abg1979,13/Aug/15 11:41,28/May/16 16:19,07/Apr/19 20:37,26/Aug/15 02:26,3.4,,,,,,lang.time.*,,,0,,,,,,,,"A date format of ""yyyy-MM-dd'T'HH:mm:ss.SSS ZZ"" returns ""2015-08-13T11:37:13.203  Z"" for UTC timezone in version 3.4.

Same format with version 3.3.2 returns ""2015-08-13T11:39:28.452 +00:00""

The code which i am using to test this is as follows:
{code:java}
import org.apache.commons.lang3.time.FastDateFormat;

import java.util.Date;
import java.util.TimeZone;

public class FastDateFormatTest {
    private static final String         DATE_FORMAT    = ""yyyy-MM-dd'T'HH:mm:ss.SSS ZZ"";
    private static       FastDateFormat fastDateFormat = FastDateFormat.getInstance(DATE_FORMAT, TimeZone.getTimeZone(""UTC""));

    public static void main(String[] args) {
        System.out.println(""fastDateFormat = "" + fastDateFormat.format(new Date()));
    }
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-08-26 02:25:41.443,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Aug 26 02:25:41 UTC 2015,,,,,,0|i2ivdr:,9223372036854775807,,,,,,,,"26/Aug/15 02:25;chonton;FastDatePrinter javadoc explicitly states:
{code} 
Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent
time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).
This pattern letter can be used here (on all JDK versions).

In addition, the pattern {@code 'ZZ'} has been made to represent
ISO 8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).
This introduces a minor incompatibility with Java 1.4, but at a gain of
useful functionality.
 
 Starting with JDK7, ISO 8601 support was added using the pattern {@code 'X'}.
 To maintain compatibility, {@code 'ZZ'} will continue to be supported, but using
 one of the {@code 'X'} formats is recommended.
 {code}

The SimpleDateFormat javadoc states:
{code}
RFC 822 time zone: For formatting, the RFC 822 4-digit time zone format is used:
     RFC822TimeZone:
             Sign TwoDigitHours Minutes
     TwoDigitHours:
             Digit Digit
{code}
SimpleDateFormat will output +0000 whether 'Z', 'ZZ', 'ZZZ', or 'ZZZZ' or however many 'Z' are used. 
FastDateFormat will output +0000 for 'Z' and Z (ISO8601) for 'ZZ'

It's not just UTC that has the formatting difference.  In Paris, FastDateFormat will output +02:00 instead of +0200; and in Los Angeles, -07:00 instead of -0700.

So, for compatible with SimpleDateFormat use 'Z'. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
There are no tests for CharSequenceUtils.regionMatches,LANG-1163,12854153,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,11/Aug/15 13:26,19/Oct/16 07:00,07/Apr/19 20:37,11/Aug/15 13:30,3.4,,,,3.5,,,,,0,,,,,,,,"There are no tests for CharSequenceUtils.regionMatches.

It ought to behave the same way as the String version.

This includes not failing with Index OOBE if the CharSequences are not long enough.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 11 13:30:50 UTC 2015,,,,,,0|i2il53:,9223372036854775807,,,,,,,,"11/Aug/15 13:30;sebb@apache.org;Repository: commons-lang
Updated Branches:
  refs/heads/master 68acbc803 -> e8a2c2972


LANG-1163 There are no tests for CharSequenceUtils.regionMatches

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/e8a2c297
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/e8a2c297
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/e8a2c297
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#equals fails with Index OOBE on non-Strings with identical leading prefix,LANG-1162,12853971,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,sebb@apache.org,sebb@apache.org,sebb@apache.org,10/Aug/15 21:11,19/Oct/16 07:00,07/Apr/19 20:37,11/Aug/15 13:28,3.4,,,,3.5,,,,,0,,,,,,,,"From the Commons User mailing list:

{quote}
StringUtils.equals(cs1,cs2) delegates to CharSequence.regionMatches(...) in a way that causes IndexOutOfBounds when either of cs1/cs2 isn't a String.

Specifically, comparing ""foo"" and ""foobar"" for non-String CharSequences bombs due to CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length())) because regionMatches doesn't check for input exhaustion.
{quote}
",,,,,,,,,,,,,,,,LANG-1163,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-07-31 15:57:14.763,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 31 16:21:57 UTC 2016,,,,,,0|i2ik0v:,9223372036854775807,,,,,,,,"10/Aug/15 21:26;sebb@apache.org;The equals(...) method could check that the lengths are equal before calling regionMatches(...) as there is no point checking the contents if they differ.
This is already done by the related equalsIgnoreCase(...) method.

However the underlying method CharSequence.regionMatches(...) should ideally behave the same way as String.regionMatches(...), i.e. it should return false if the regions are different lengths.","10/Aug/15 21:44;sebb@apache.org;Fixed equals():

Repository: commons-lang
Updated Branches:
  refs/heads/master fad946a1d -> 6849dfc8a


LANG-1162 StringUtils#equals fails with Index OOBE on non-Strings with
identical leading prefix

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/6849dfc8
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/6849dfc8
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/6849dfc8

TODO: fix regionMatches?",11/Aug/15 13:28;sebb@apache.org;Will deal with the CharSequenceUtils.regionMatches issues as part of LANG-1163,"31/Jul/16 15:57;githubbot;GitHub user RamAnvesh opened a pull request:

    https://github.com/apache/commons-lang/pull/181

    Adding test cases for StringUtils.equals methods to cover LANG-1162/LANG-1239 etc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/RamAnvesh/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/181.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #181
    
----
commit b20d9b84c9d30b43c36f137b753e18950519be5e
Author: Ram Anvesh Reddy <sudran534112@gmail.com>
Date:   2016-07-31T15:32:45Z

    Merge pull request #1 from apache/master
    
    Updating from apache:master

commit 8dea56a0a7d20ba61f8edb49da3b0a6233252d05
Author: Ram Anvesh Reddy <ram.kasam@ramanvesh-macbook-pro.local>
Date:   2016-07-31T15:46:45Z

    LANG-1239 : Adding test cases for StringUtils.equals

----
","31/Jul/16 16:00;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/181
  
    
    [![Coverage Status](https://coveralls.io/builds/7239890/badge)](https://coveralls.io/builds/7239890)
    
    Coverage decreased (-0.02%) to 93.411% when pulling **8dea56a0a7d20ba61f8edb49da3b0a6233252d05 on RamAnvesh:master** into **1a1fc65b04bcbe2e95d0fa300fce110e1224906e on apache:master**.

","31/Jul/16 16:05;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/181
  
    
    [![Coverage Status](https://coveralls.io/builds/7239919/badge)](https://coveralls.io/builds/7239919)
    
    Coverage decreased (-0.06%) to 93.375% when pulling **b8b36dcbe67de2160329ac2db8113c601aafe628 on RamAnvesh:master** into **1a1fc65b04bcbe2e95d0fa300fce110e1224906e on apache:master**.

","31/Jul/16 16:12;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/181
  
    Hi RamAnvesh,
    
    thanks for the pull request.
    
    There are already a lot of test for `StringUtils#equals` here https://github.com/RamAnvesh/commons-lang/blob/master/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java#L558
","31/Jul/16 16:21;githubbot;Github user RamAnvesh commented on the issue:

    https://github.com/apache/commons-lang/pull/181
  
    Ouch!.. ok.. closing..
","31/Jul/16 16:21;githubbot;Github user RamAnvesh closed the pull request at:

    https://github.com/apache/commons-lang/pull/181
",,,,,,,,,,,,,,,,,,,,,,
StrSubstitutor - escape character not working just before a variable,LANG-1158,12848585,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,woon_san,woon_san,23/Jul/15 14:33,23/Jul/15 20:30,07/Apr/19 20:37,23/Jul/15 20:30,3.4,,,,,,,,,0,,,,,,,,"I tried to use the following, expecting ""...ick brown fox paid $20.00 to jump over the la…"":

{code}
    // In org.apache.commons.lang3.text.StrSubstitutorTest.java locally
    // after cloning https://github.com/woonsan/commons-lang.
    @Test
    public void testReplaceEscapingDollarSign() {
        values.put(""amount"", ""20.00"");
        doTestReplace(""The quick brown fox paid $20.00 to jump over
the lazy dog."",
                      ""The ${animal} paid $$${amount} to jump over the
${target}."", true);
    }
{code}

{noformat}
(I put double dollar signs like $$${amount} because $ is the default escape character.)
Because I put three dollar signs in total, it should give one dollar sign followed by the resolved amount value: ""$20.00"".

But, the result was:""...ick brown fox paid $${amount} to jump over the la…"".
{noformat}

I also tried using a different escape character like this:

{code}
    @Test
    public void testReplaceEscapingDollarSign() {
        values.put(""amount"", ""20.00"");

        final StrSubstitutor sub = new StrSubstitutor(values);
        sub.setEscapeChar('<');

        String replaceTemplate = ""The <${animal} jumps over the ${target}."";
        String expectedResult = ""The ${animal} jumps over the lazy dog."";
        String replacedResult = sub.replace(replaceTemplate);
        assertEquals(expectedResult, replacedResult);

        replaceTemplate = ""The ${animal} paid <$${amount} to jump over the ${target}."";
        expectedResult = ""The quick brown fox paid $20.00 to jump over the lazy dog."";
        replacedResult = sub.replace(replaceTemplate);
        assertEquals(expectedResult, replacedResult);
    }
{code}

However, it fails like this:

{noformat}
Tests run: 41, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.048 sec <<< FAILURE! - in org.apache.commons.lang3.text.StrSubstitutorTest
testReplaceEscapingDollarSign(org.apache.commons.lang3.text.StrSubstitutorTest)  Time elapsed: 0.009 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...uick brown fox paid []$20.00 to jump over ...> but was:<...uick brown fox paid [<]$20.00 to jump over ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscapingDollarSign(StrSubstitutorTest.java:182)
{noformat}

{noformat}
The second assertion failed. So, it seems working in case of ""<${animal}"", but not working in case of ""<$${amount}"".
{noformat}

I think escape character handling is inconsistent.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Jul 23 20:29:26 UTC 2015,,,,,,0|i2hudr:,9223372036854775807,,,,,,,,"23/Jul/15 14:50;woon_san;I also tried this one as a workaround, but it also fails:
{code}
    @Test
    public void testReplaceEscapingDollarSign() {
        values.put(""amount"", ""20.00"");
        values.put(""dollar"", ""$"");
        doTestReplace(""The quick brown fox paid $20.00 to jump over the lazy dog."",
                      ""The ${animal} paid ${dollar}${amount} to jump over the ${target}."", false);
    }
{code}
{noformat}
org.junit.ComparisonFailure: expected:<...ick brown fox paid $[20.00] to jump over the la...> but was:<...ick brown fox paid $[{amount}] to jump over the la...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at org.apache.commons.lang3.text.StrSubstitutorTest.doTestReplace(StrSubstitutorTest.java:643)
	at org.apache.commons.lang3.text.StrSubstitutorTest.testReplaceEscapingDollarSign(StrSubstitutorTest.java:171)
{noformat}

If you set the 'amount' variable with a dollar sign prefix, or if you put a space between dollar variable and amount variable, then it may look working, but it gives a big limitation in my use case.","23/Jul/15 20:29;woon_san;Anthony gave a good explanation about what the escape character means and how I can circumvent the issue in the user@ list [1]:

{noformat}
The escape character just tells StrSubstitutor ""Ignore the following
variable reference."" When you change the default escape character, you
don't need to use it get a dollar sign before a variable reference in your
interpolated string. Try the following:

@Test
    public void testReplaceEscapingDollarSign() {
        values.put(""amount"", ""20.00"");

        final StrSubstitutor sub = new StrSubstitutor(values);
        sub.setEscapeChar('<');

        String replaceTemplate = ""The <${animal} jumps over the ${target}."";
        String expectedResult = ""The ${animal} jumps over the lazy dog."";
        String replacedResult = sub.replace(replaceTemplate);
        assertEquals(expectedResult, replacedResult);

        replaceTemplate = ""The ${animal} paid $${amount} to jump over
the ${target}."";
        expectedResult = ""The quick brown fox paid $20.00 to jump over
the lazy dog."";
        replacedResult = sub.replace(replaceTemplate);
        assertEquals(expectedResult, replacedResult);
    }
{noformat}

{noformat}
Sorry, the second sentence in the first paragraph should read: ""When you
change the default escape character, you don't need to use it _to_ get a
dollar sign before a variable reference in your interpolated string.""

To explain a little more, consider what happens to "" $${amount}"" when
you're using StrSubstitutor's default escape character. StrSubstitutor sees
that you've got a variable reference (""${amount}""), and that you've got the
escape character (""$"") before it, so it replaces ""$${amount}"" with
""${amount}"".

Now consider what happens to "" $${amount}"" when you've set StrSubstitutor's
escape character to something other than the default. StrSubstitutor sees
the variable reference (""${amount}""), notes that the character (""$"") before
the variable reference is _not_ the user-defined escape character, and so
replaces ""${amount}"" with the appropriate value form the map.
{noformat}

I think I can live with using a different escape character for my use case. So I'll close this issue.

[1] http://markmail.org/message/6p74g52hxkdaswtv",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EqualsExclude is not in package org.apache.commons.lang3.builder,LANG-1157,12846351,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,pascalschumacher,preetham.jain@gmail.com,preetham.jain@gmail.com,20/Jul/15 20:29,28/May/16 10:55,07/Apr/19 20:37,28/May/16 10:55,3.4,,,,,,lang.builder.*,,,0,,,,,,,,"The annotation EqualsExclude as described in http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsExclude.html does not exist in the commons-lang3 jar (bin or source).
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-05-21 15:07:35.145,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat May 21 15:07:35 UTC 2016,,,,,,0|i2hgqn:,9223372036854775807,,,,,,,,"21/May/16 15:07;pascalschumacher;[http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsExclude.html] shows the javadoc of the next version. EqualsExclude will released with commons-lang 3.5. 

Javadoc for the current version can be found here: [https://commons.apache.org/proper/commons-lang/javadocs/api-3.4/]

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat seems to behave differently with very large dates than simple date format,LANG-1152,12843211,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,chonton,pasfilip,pasfilip,07/Jul/15 15:11,19/Oct/16 07:00,07/Apr/19 20:37,08/Jul/15 04:16,3.x,,,,3.5,,lang.time.*,,,0,,,,,,,,"Inconsistent behaviour compared to SimpleDateFormat.
StringIndexOutOfBoundsException using one format and no exception when using another format. (both legal).
Different results when using another format.

Testcase:

import org.apache.commons.lang3.time.FastDateFormat;
import org.hamcrest.Matchers;
import org.junit.Assert;
import org.junit.Test;

import java.text.SimpleDateFormat;
import java.util.Date;

public class FastDateFormatBug {



    @Test
    public void testFastFormatWitLongMaxValue(){
        Date date = new Date(Long.MAX_VALUE);
        String dateAsString = FastDateFormat.getInstance(""yyyy-MM-dd"").format(date);
        Assert.assertThat(dateAsString, Matchers.equalTo(""292278994-08-17""));
    }

    @Test
    public void testWeirdResultWithMaxValue(){
        Date date = new Date(Long.MAX_VALUE);
        String dateAsString = FastDateFormat.getInstance(""dd/MM/yyyy"").format(date);
        Assert.assertThat(dateAsString, Matchers.equalTo(""292278994-08-17""));
    }

    @Test
    public void testSimpleFormatWithLongMaxValueWithLenientOff(){
        Date date = new Date(Long.MAX_VALUE);
        SimpleDateFormat fft = new SimpleDateFormat(""yyyy-MM-dd"");
        fft.setLenient(false);
        String dateAsString = fft.format(date);
        Assert.assertThat(dateAsString, Matchers.equalTo(""292278994-08-17""));
    }

    @Test
    public void testSimpleFormatWithLongMaxValueWithLenientOn(){
        Date date = new Date(Long.MAX_VALUE);
        SimpleDateFormat fft = new SimpleDateFormat(""yyyy-MM-dd"");
        fft.setLenient(true);
        String dateAsString = fft.format(date);
        Assert.assertThat(dateAsString, Matchers.equalTo(""292278994-08-17""));
    }

}
",ANY,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Jul 07 15:12:45 UTC 2015,,,,,,0|i2gxxr:,9223372036854775807,,,,,,,,07/Jul/15 15:12;pasfilip;I only tested the behavior on version 3.4 but I assume it's present in earler and later version too.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NumberUtils.isParsable returns true for ""-""",LANG-1150,12839517,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,juanpablo,juanpablo,22/Jun/15 11:34,22/Jun/15 18:39,07/Apr/19 20:37,22/Jun/15 11:43,3.4,,,,,,lang.math.*,,,0,,,,,,,,"NumberUtils.isParsable returns true for ""-"", which is not recognized by  \*.parse* methods",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-22 18:39:18.42,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Jun 22 18:39:18 UTC 2015,,,,,,0|i2gbxz:,9223372036854775807,,,,,,,,"22/Jun/15 11:43;juanpablo;invalid ticket, was making tests against an older release :-/

apologies for the noise",22/Jun/15 18:39;britter;No problem! :-),,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.isBlank does not work correctly with strings containing non-breakable whitespace characters,LANG-1148,12837413,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,alexbogush,alexbogush,12/Jun/15 14:07,12/Dec/16 17:07,07/Apr/19 20:37,,2.6,,,,4.0,,lang.*,,,1,test,,,,,,,"isBlank uses java.lang.Character.isWhitespace(char ch) method, which has not been changed for a long time for backward compatibility. Over the years non-breakable whitespaces were introduced and are now used in some cases. So if we execute the code

{noformat}org.apache.commons.lang.StringUtils.isBlank(""\u00A0""); //returns false
org.apache.commons.lang.StringUtils.isBlank(""\u202F""); //returns false
org.apache.commons.lang.StringUtils.isBlank(""\u2007""); //returns false{noformat}

we will get 3 falses, which is not right, according to StringUtils.isBlank documentation: {noformat}Checks if a String is whitespace, empty ("""") or null.{noformat}

I suggest fixing it by using regex pattern {noformat}""^[\\p{Z}]*$""{noformat} instead of looping over the string characters. I know that it is a bit less fast than it works now, but it will work much more correctly. I would be glad to do it myself and write unit tests for it, so if you want, please contact me via email alex.bohush@gmail.com

Additionally, I would modify the documentation itself too, because it does not tell that it returns true when meeting multiple whitespaces.","Windows 8.1 x64 , Java 1.8, but can be reproduced in any environment with an official Oracle JDK or JRE",,10800,10800,,0%,10800,10800,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-12 15:22:30.987,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 12 17:07:42 UTC 2016,,,,,,0|i2fz5b:,9223372036854775807,,,,,,,,"12/Jun/15 15:22;sebb@apache.org;There is also the question of backward compatibility of StringUtils.isBlank.
Also there are other methods which use Character.isWhiteSpace, for example isNumericSpace.

I'm not convinced that the behaviour should be changed.","13/Jun/15 07:07;alexbogush;[~sebb@apache.org], first of all thank you for the reply.

I agree with the backward compatibility point.

However, I stumbled upon this issue using this method in my work project when parsing emails. The thing was that some email clients inserted non-break whitespaces instead of usual ones in their letters. It cost me a few angry letters from users, so I suggest at least mentioning this issue in the documentation ([like JDK developers did|http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isWhitespace(char)]), because I had to dig into the source code and investigate what was wrong, so the proper docs would save me some time.

Anyway, now when you know about the issue, you can decide if the library needs new methods which consider non-break whitespaces.","13/Jun/15 13:25;sebb@apache.org;Note that isWhiteSpace has been documented as excluding non-breaking spaces since at least Java 1.5 [1], probably earlier.


[1] http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Character.html#isWhitespace%28char%29","21/May/16 15:15;pascalschumacher;I agree that non-breakable whitespace should be treated as whitespace. For example guava https://github.com/google/guava/blob/8fbeb9038cbe8b382b1ee188ae8459203cd04fb5/guava/src/com/google/common/base/CharMatcher.java#L1217 classifies non-breaking space as whitespace.

Of course there is the compatibility issue, so I guess a change like this should only be done in commons-lang 4.0.",03/Nov/16 21:27;pascalschumacher;I think we should consider changing this for 4.0.,"12/Dec/16 14:51;dmjones500;FYI - [~pascalschumacher] has updated the Javadoc for this method to make it clear which test is used:

{quote}
Checks if a CharSequence is empty (""""), null or whitespace only.

Whitespace is defined by {{Character.isWhitespace(char)}}.
{quote}

Since the test is now clearly defined and there isn't much appetite for breaking backwards compatibility, I vote we don't attempt to fix this.",12/Dec/16 17:07;garydgregory;I agree that this method should not break. We can add a NEW method though. A isAnyWhitespace()? Good Javadocs are key.,,,,,,,,,,,,,,,,,,,,,,,,
EnumUtils *BitVector issue with more than 32 values Enum,LANG-1147,12837344,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,,rikles,rikles,12/Jun/15 08:16,19/Oct/16 07:01,07/Apr/19 20:37,12/Jun/15 23:40,3.4,,,,3.5,,lang.*,,,0,,,,,,,,"In *EnumUtils* all _BitVector_ related methods fail in handling Enums with more than 32 values.
This is due to a implicit _int_ -> _long_ conversion in generating the Enum value _long_ mask.


*Bad code :* here *1* is an _int_ value so the *<<* operation is done into an _int_ context and then, the result is converted to a _long_ value
{code}
long mask = 1 << 32;    // -> mask = 1 and not 4294967296 (0x100000000)
{code}

*Good code :* here *1L* is a _long_ value so the *<<* operation is done into an _long_ context
{code}
long mask = 1L << 32;    // -> mask = 4294967296 (0x100000000)
{code}

See PR#97 : https://github.com/apache/commons-lang/pull/97",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-06-12 08:25:01.3,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 12 23:40:06 UTC 2015,,,,,,0|i2fyq7:,9223372036854775807,,,,,,,,"12/Jun/15 08:25;githubbot;GitHub user rikles opened a pull request:

    https://github.com/apache/commons-lang/pull/97

    LANG-1147 : Fix EnumUtils *BitVector issue with more than 32 values Enums

    In `EnumUtils` all _BitVector_ related methods fail in handling Enum with more than 32 values.
    This is due to a implicit `int` -> `long` conversion in generating the Enum value `long` mask.
    
    ```java
    // Bad code : here `1` is an `int` value so the `<<` operation is done into an `int` context and then, the result is converted to a `long` value
    long mask = 1 << 32;    // -> mask = 1 and not 4294967296 (0x100000000)
    
    // Good code : here `1L` is a `long` value so the `<<` operation is done into an `long` context
    long mask = 1L << 32;    // -> mask = 4294967296 (0x100000000)
    ```
    
    I fixed this and add some tests into `EnumUtilsTest` with a 64 values Enum.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rikles/commons-lang fix-LANG-1147

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/97.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #97
    
----
commit 1c9e5139f2b515f8741fbcb9c9b0f398d22d73ca
Author: Loic Guibert <lfdummy-apache@yahoo.fr>
Date:   2015-06-12T08:19:37Z

    LANG-1147 : Fix EnumUtils *BitVector issue with more than 32 values Enums

----
","12/Jun/15 23:38;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/97
","12/Jun/15 23:40;sebb@apache.org;Thanks for the report and thorough patch.
Applied:

Repository: commons-lang
Updated Branches:
  refs/heads/master 529964961 -> 06b7cd3a3


LANG-1147 EnumUtils *BitVector issue with more than 32 values Enum
This closes #97

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/06b7cd3a
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/06b7cd3a
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/06b7cd3a

Branch: refs/heads/master
Commit: 06b7cd3a31c4565ceb0a127273ef800a3d084caf
Parents: 5299649
Author: Sebb <sebb@apache.org>
Authored: Sat Jun 13 00:38:27 2015 +0100
Committer: Sebb <sebb@apache.org>
Committed: Sat Jun 13 00:38:27 2015 +0100

----------------------------------------------------------------------
 src/changes/changes.xml                         |  1 +
 .../org/apache/commons/lang3/EnumUtils.java     |  8 +--
 .../org/apache/commons/lang3/EnumUtilsTest.java | 51 ++++++++++++++++++++
 3 files changed, 56 insertions(+), 4 deletions(-)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Multiple calls of org.apache.commons.lang3.concurrent.LazyInitializer.initialize() are possible,LANG-1144,12836937,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,waldemar,waldemar,10/Jun/15 20:07,12/Jun/17 12:04,07/Apr/19 20:37,23/Oct/16 17:37,3.4,3.5,,,3.6,,lang.concurrent.*,,,0,,,,,,,,"It is possible to create a construct, that allows multiple calls of LazyInitializer.initialize, when calculations (which can be very expensive) return null as result. 
In the Javadoc is described that the initialize method will be called only on the first access

{code:java}
    /**
     * Creates and initializes the object managed by this {@code
     * LazyInitializer}. This method is called by {@link #get()} when the object
     * is accessed for the first time. An implementation can focus on the
     * creation of the object. No synchronization is needed, as this is already
     * handled by {@code get()}.
     *
     * @return the managed data object
     * @throws ConcurrentException if an error occurs during object creation
     */
    protected abstract T initialize() throws ConcurrentException;
{code}

The Junit Test can be something like this:
*(fix can be appplied from attached patch-file)*
{code:java}
package edu.test;

import static org.junit.Assert.assertEquals;

import org.apache.commons.lang3.concurrent.ConcurrentException;
import org.apache.commons.lang3.concurrent.LazyInitializer;
import org.junit.Test;

public class LazyInitializerTest {

  private int lazyinitCounter = 0;

  private LazyInitializer<Object> lazyIinit = new LazyInitializer<Object>() {

    @Override
    protected Object initialize() throws ConcurrentException {
      lazyinitCounter++;
      return doSomeVeryExpensiveOperations();
    }
  };
  
  
  private Object doSomeVeryExpensiveOperations() {
    // do db calls
    // do some complex math calculations
    // the result of them all is null
    return null;
  }
  
  
  @Test
  public void testInitialization() throws Exception {
    lazyIinit.get();
    lazyIinit.get();
    assertEquals(""Multiple call of LazyInitializer#initialize"", 1, lazyinitCounter);
  }

}


{code}",Java 1.8 on Windows 7 x64,,,,,,,,,,,,,,,,,,,,,,,,,10/Jun/15 21:00;waldemar;0001-LANG-1144-allow-nulls-as-return-value.patch;https://issues.apache.org/jira/secure/attachment/12738916/0001-LANG-1144-allow-nulls-as-return-value.patch,22/Oct/16 20:04;garydgregory;commons-lang.patch;https://issues.apache.org/jira/secure/attachment/12834824/commons-lang.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-06-11 20:03:44.899,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Oct 23 17:37:32 UTC 2016,,,,,,0|i2fwbj:,9223372036854775807,,,,,,,,"11/Jun/15 20:03;oliver.heger@t-online.de;I do not think that this is really a critical problem. The use case that a longer and complex calculation yields a null result at the end seems a bit odd to me.

And - as you have a demonstrated in your patch - there is an easy work-around for the problem: Just use a special null object or a wrapper type like MutableObject or the new Java 8 type Optional. I would be reluctant to add such means to the current implementation because this increases complexity and is (slightly) less efficient. This is IMHO a too high price for such a corner use case.

What should be done in any case is to add a note to the Javadocs describing this problem.","22/Oct/16 16:47;garydgregory;This seems like a valid bug report to me.

I do not think it reasonable to ask user to create a ""special"" null value for a JDBC Connection or Statement, for example:

{code:java}
LazyInitializer<java.sql.Connection>
LazyInitializer<java.sql.Statement>
{code}

Now, I have to go and implement a ""null"" implementation of all the interfaces I want to use? That's not acceptable.

Furthermore, what if I have a {{ComplexSomething}} class with many private final fields that get initialized on construction to create a valid object? I now have to change the class to allow for all null values? Not acceptable either.","22/Oct/16 16:51;garydgregory;I wish I had paid more attention when this class was added because {{org.apache.commons.lang3.concurrent.LazyInitializer.get()}} throwing a custom {{ConcurrentException}} does not make sense to me either. That's because if I catch an error while I am building my object, it might have nothing to do with concurrency. The fact that the LI class helps me deal with concurrency matters, yes. This should be an {{IllegalStateException}}. We could change this for 4.0 I suppose.","22/Oct/16 17:19;garydgregory;Proposed patch. You could do away with the Null class and just use a ""new Object()"" as the null value.",22/Oct/16 20:04;garydgregory;Patch that follows the same double lock idiom.,"23/Oct/16 16:13;oliver.heger@t-online.de;The patch looks good to me, but I would propose to make the special noInit object even *static*.

Regarding exception handling: I think, the currently implemented solution is in-line with the approach taken by the JDK. See for instance {{Future.get()}}, which throws an {{ExecutionException}}. There is also some support for the exception type in the {{ConcurrentUtils}} class.","23/Oct/16 17:37;garydgregory;In Git master. 

Please verify and close.",,,,,,,,,,,,,,,,,,,,,,,,
StringUtils#capitalize: Javadoc says toTitleCase; code uses toUpperCase,LANG-1142,12835778,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,05/Jun/15 17:24,19/Jul/15 08:28,07/Apr/19 20:37,19/Jul/15 08:27,3.4,,,,3.5,,lang.*,,,0,,,,,,,,"The capitalize Javadoc says the code uses  Character#toTitleCase, however the code actually uses Character#toUpperCase.

Generally these produce the same result, but some charsets may have different characters for upper and title case - see for example the Javadoc [1] for Character#isTitleCase.

The way I read this, the character that looks like ""lj"" is lower-case, ""LJ"" is upper case and ""Lj"" is title case - i.e. not the same.

The question here is: should the code be corrected to use TitleCase or should the Javadoc be corrected to use UpperCase?

[1] http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isTitleCase%28char%29",,,,,,,,,,,,,,,,LANG-1059,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-07-19 08:21:04.883,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Jul 19 08:27:07 UTC 2015,,,,,,0|i2fozj:,9223372036854775807,,,,,,,,"19/Jul/15 08:21;bayard;It definitely should use toTitleCase. I wonder when that changed. :(

Looks like it was changed in http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java?r1=1673944&r2=1673943&pathrev=1673944 - https://issues.apache.org/jira/browse/LANG-1058 - which fortunately is unreleased.","19/Jul/15 08:27;bayard;$ git commit
[master 421db38] Switched capitalize back to using toTitleCase. Added a test for this using the 'Lj' letter. LANG-1142
 2 files changed, 4 insertions(+), 1 deletion(-)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrLookup.systemPropertiesLookup() no longer reacts on changes on system properties,LANG-1141,12834790,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,oliver.heger@t-online.de,oliver.heger@t-online.de,02/Jun/15 20:13,19/Oct/16 07:00,07/Apr/19 20:37,24/Jun/15 20:26,3.4,,,,3.5,,lang.text.*,,,0,,,,,,,,"In versions of Commons Lang before 3.4 a {{Lookup}} object created from the {{systemPropertiesLookup()}} method offered a live view of system properties. So if a system property was changed after the creation of the lookup object, the new value was visible. In version 3.4 this is no longer the case.

The change seems to be related to LANG-1055. Here a fix was implemented which initializes a lookup object for system properties with a snapshot copy of the current properties. Changes made later on system properties are no longer reflected. I do not understand the background for this change because this is not really related to the original bug report.

I would propose an implementation which fixes the reported problem in LANG-1055 and allows a live view on system properties. Maybe the snapshot use case could still be supported by an overloaded method.",,,,,,,,,,,,,,,,,,,,,,,,,,04/Jun/15 19:34;oliver.heger@t-online.de;lang-1141.patch;https://issues.apache.org/jira/secure/attachment/12737666/lang-1141.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-06-22 17:45:41.135,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 24 20:26:56 UTC 2015,,,,,,0|i2fj8v:,9223372036854775807,,,,,,,,04/Jun/15 19:34;oliver.heger@t-online.de;Proposed patch to solve both LANG-1055 and LANG-1141. This patch implements the lookup for system properties in a very straight-forward way. It ensures live access to system properties in all cases in a consistent way.,"22/Jun/15 17:45;britter;Hello Oliver,

patch looks good to me. I'm not sure but I think that os.name is set to HAL-9000 on the ASF build servers. So maybe it would be better to set the {{differentOsName}} like this:

{code:java}
final String differentOsName = originalOsName + ""-TEST"";
System.setProperty(osName, differentOsName);
{code}",22/Jun/15 19:25;oliver.heger@t-online.de;I am fine with a different name. This test was from the original report for LANG-1055.,"22/Jun/15 19:50;britter;[~oliver.heger@t-online.de], feel free to apply the patch yourself.",24/Jun/15 20:26;oliver.heger@t-online.de;Patch applied in commit 80644cdab9a77db0a52d09d9ebb1f406912997d1.,,,,,,,,,,,,,,,,,,,,,,,,,,
lang.reflect.FieldUtils.getAllFields() returns false result,LANG-1140,12833926,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,yungho,yungho,30/May/15 01:01,30/May/15 04:15,07/Apr/19 20:37,30/May/15 04:15,3.5,,,,Patch Needed,,lang.reflect.*,,,0,,,,,,,,"JUnit test returns errors below.
   FieldUtilsTest.testGetAllFields:154 expected:<5> but was:<7>
   FieldUtilsTest.testGetAllFieldsList:168 expected:<5> but was:<7>

Both methods has a parameter ""FieldUtils.getAllFields(PublicChild.class).length .""
PublicChild which has 1 field extends Parent which has 4 fields.

I made a dummy class which contains no field, the result of getAllFields() was 1, not 0.
Lang-3.4 doesn't have this problem.


{code:title=PublicChild2.java|borderStyle=solid}
public class PublicChild2 {

	static final String VALUE = ""child"";
}
{code}

{code:title=FieldUtilsTest.java|borderStyle=solid}
assertEquals(1, PublicChild2.class.getDeclaredFields().length);
{code}

Result: fails. returns 2","Linux ubuntu 3.16.0-38-generic x86_64 GNU/Linux
java version ""1.7.0_79""
OpenJDK Runtime Environment (IcedTea 2.5.5) (7u79-2.5.5-0ubuntu0.14.10.2)
OpenJDK 64-Bit Server VM (build 24.79-b02, mixed mode)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat May 30 04:15:23 UTC 2015,,,,,,0|i2fek7:,9223372036854775807,,,,,,,,30/May/15 04:15;yungho;Not the problem of lang. The problem was caused by jacoco plugin.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser_TimeZoneStrategyTest#testTimeZoneStrategyPattern fails on Windows with German Locale,LANG-1133,12827827,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,chonton,pascalschumacher,pascalschumacher,06/May/15 21:34,19/Oct/16 07:01,07/Apr/19 20:37,09/May/15 23:48,3.5,,,,3.5,,lang.time.*,,,0,,,,,,,,"FastDateParser_TimeZoneStrategyTest#testTimeZoneStrategyPattern() on current master fails:

{quote}java.lang.AssertionError: Französisch:Heure d'Europe de l'Est UTC+3
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.apache.commons.lang3.time.FastDateParser_TimeZoneStrategyTest.testTimeZoneStrategyPattern(FastDateParser_TimeZoneStrategyTest.java:39){quote}

I'm unsure why. I guess it has something to do with my German Locale and maybe Windows too.

","Windows 7, German Locale, Java7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-09 23:48:04.419,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat May 09 23:48:04 UTC 2015,,,,,,0|i2ee1z:,9223372036854775807,,,,,,,,09/May/15 23:48;chonton;commit 71d7c3264239c55b6e2daf89c44c5685085f26dd,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ReflectionToStringBuilder doesn't throw IllegalArgumentException when the constructor's object param is null,LANG-1132,12827530,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,jacktan1991,jacktan1991,06/May/15 03:32,19/Oct/16 07:01,07/Apr/19 20:37,07/May/15 18:46,3.4,,,,3.5,,lang.builder.*,,,0,github,github-pullrequest,,,,,,"Placeholder for https://github.com/apache/commons-lang/pull/85
{quote}
As described in it's [javadoc|http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/builder/ReflectionToStringBuilder.html#ReflectionToStringBuilder(java.lang.Object)], ReflectionToStringBuilder constructor will throw IllegalArgumentException if the Object to build a toStringfor is null, while in fact it won't.
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-07 18:45:52.614,,,false,,,85,https://github.com/apache/commons-lang/pull/85,,,,,,,,,,9223372036854775807,,,Thu May 07 18:46:08 UTC 2015,,,,,,0|i2ec7r:,9223372036854775807,,,,,,,,"07/May/15 18:45;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/85
",07/May/15 18:46;britter;Fixed in commit dee94449e6abb1b999213a0e8efbe937bcff693b. Thank you!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrBuilder.equals(StrBuilder) doesn't check for null inputs,LANG-1131,12827351,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,britter,britter,05/May/15 17:15,19/Oct/16 07:01,07/Apr/19 20:37,05/May/15 17:18,,,,,3.5,,lang.text.*,,,0,,,,,,,,"The following test will fail because the {{equals(StrBuilder)}} overload in {{StrBuilder}} does not check for null inputs:

{code:java}
    @Test
    public void testEqualsWithNullStrBuilder() throws Exception {
        final StrBuilder sb = new StrBuilder();
        final StrBuilder other = null;
        assertFalse(sb.equals(other));
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue May 05 17:18:37 UTC 2015,,,,,,0|i2ebaf:,9223372036854775807,,,,,,,,05/May/15 17:18;britter;Fixed in fc73151cfca36ea2641f340700dbe339b9e1f103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
JsonToStringStyle doesn't handle chars and objects correctly,LANG-1128,12826651,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,britter,britter,01/May/15 21:40,19/Oct/16 07:00,07/Apr/19 20:37,01/May/15 22:04,3.4,,,,3.5,,lang.builder.*,,,0,github,,,,,,,"Placeholder for https://github.com/apache/commons-lang/pull/74

{quote}
except number, boolean, Array and nested object structures, other types like char, String, Date etc. in java should be appendAsString.

add method {{appendDetail(StringBuffer buffer, String fieldName, char value) to JsonToStringStyle}}
modify {{appendDetail(StringBuffer buffer, String fieldName, Object value)}}
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,74,https://github.com/apache/commons-lang/pull/74,,,,,,,,,,9223372036854775807,,,Fri May 01 22:04:08 UTC 2015,,,,,,0|i2e76v:,9223372036854775807,,,,,,,,01/May/15 22:04;britter;Fixed in 4a882e76d9c9940ac561e8f17ede77c85e3dbeda,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateFormatUtilsTest.testSMTP depends on the default Locale,LANG-1126,12826526,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,britter,britter,01/May/15 09:52,19/Oct/16 07:00,07/Apr/19 20:37,01/May/15 20:09,3.5,,,,3.5,,lang.time.*,,,0,,,,,,,,"DateFormatUtilsTest.testSMTP depends on the default Locale and expects this to be Locale.EN. When running the test with the different default Locale (e.g. Locale.GERMANY) it will fail with the following message:

{code}
org.junit.ComparisonFailure: 
Expected :Sun, 08 Jun 2003 10:11:12 -0300
Actual   :So, 08 Jun 2003 10:11:12 -0300
{code}

Solution: Set the default Locale before the test runs and reset it afterwards.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri May 01 20:09:19 UTC 2015,,,,,,0|i2e6f3:,9223372036854775807,,,,,,,,"01/May/15 20:09;britter;{code}
$ git merge LANG-1126 --no-ff
Merge made by the 'recursive' strategy.
 src/changes/changes.xml                                              |  1 +
 src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java | 34 ++++++++++++++++++++--------------
 2 files changed, 21 insertions(+), 14 deletions(-)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No release notes for version 3.4,LANG-1125,12826338,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,arendvr.com,arendvr.com,30/Apr/15 15:49,28/May/16 16:26,07/Apr/19 20:37,01/May/15 19:59,3.4,,,,,,Website,,,0,,,,,,,,"- Go to the release history page
  https://commons.apache.org/proper/commons-lang/release-history.html
- click the link ""release notes for 3.4""

Result is a 404 error ""Not Found"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-05-01 10:12:16.859,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat May 09 19:13:43 UTC 2015,,,,,,0|i2e59r:,9223372036854775807,,,,,,,,01/May/15 10:12;britter;I'm currently unable to write to the site svn repository location. I'll try again later. In the mean time you can get the release notes for 3.4 from https://dist.apache.org/repos/dist/release/commons/lang/RELEASE-NOTES.txt,"01/May/15 19:59;britter;{code}
$ svn ci -m ""LANG-1125: No release notes for version 3.4"" lang-site/
Adding         lang-site/release-notes/RELEASE-NOTES-3.4.txt
Transmitting file data .
Committed revision 949862.
{code}",09/May/15 19:13;arendvr.com;Release notes for 3.4 are now there. Thanks :-),,,,,,,,,,,,,,,,,,,,,,,,,,,,
Unit test FastDatePrinterTimeZonesTest needs a timezone set,LANG-1123,12826190,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,cpm,cpm,30/Apr/15 02:38,19/Oct/16 07:01,07/Apr/19 20:37,01/May/15 02:24,,,,,3.5,,lang.time.*,,,0,,,,,,,,"In file :
{noformat}
src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java
{noformat}

The unit test testCalendarTimezoneRespected set a timezone for the expectedValue but none for the actualValue. Because the actualValue use always the default timezone, then It has to fail.

Actually, there is no fail because of a bug in FastDatePrinter.format() method (see LANG-916).

When applying the LANG-916 patch, the unit test flood more than 600 failed:
{noformat}
cpm > mvn test
Failed tests:
[...]
  FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected:61 expected:<[2:19PM EDT]> but was:<[6:19PM UTC]>
  FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected:61 expected:<[2:19PM AST]> but was:<[6:19PM UTC]>
  FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected:61 expected:<[12:19PM MDT]> but was:<[6:19PM UTC]>
  FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected:61 expected:<[1:19PM ACT]> but was:<[6:19PM UTC]>
[...]
Tests run: 3544, Failures: 617, Errors: 0, Skipped: 5
{noformat}


","Java 6, timezone is ""Europe/Paris"" (GMT/UTC +01:00), GNU/Linux.",,,,,,,,,,,,,,,,,,,,,,,,,30/Apr/15 02:53;cpm;LANG-1123-fix-git.patch;https://issues.apache.org/jira/secure/attachment/12729381/LANG-1123-fix-git.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-30 07:03:38.546,,,false,,,,,Important,,,,,,,,,9223372036854775807,,,Fri May 01 02:24:45 UTC 2015,,,,,,0|i2e4dj:,9223372036854775807,,,,,,,,30/Apr/15 02:53;cpm;Git patch to fix missing timezone set in actualValue,30/Apr/15 03:05;cpm;LANG-1123 bug appears now because it was hidden by LANG-916 bug.,30/Apr/15 07:03;britter;If I understand correctly this has to be fixed before LANG-916 can be fixed. Setting this to be required by LANG-916.,30/Apr/15 08:22;cpm;I confirm that this order is fine :-),"01/May/15 02:24;chonton;changelist 775203dd2cfce017910d04c58a0b1b4e0a64923c

Note that there were other unit tests needing repair.  Many of DateFormatUtilsTest made improper assumptions about the active TimeZone.",,,,,,,,,,,,,,,,,,,,,,,,,,
Inconsistent behavior of swap for malformed inputs,LANG-1122,12826024,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,britter,britter,29/Apr/15 17:37,19/Oct/16 07:01,07/Apr/19 20:37,07/May/15 18:33,,,,,3.5,,lang.*,,,0,,,,,,,,"Following the discussion at https://github.com/apache/commons-lang/pull/47 we need to decide how malformed inputs should be handled by the swap method. We have to handle several forms of malformed inputs and we should decide how to do that based on the current behavior of ArrayUtils. Malformed inputs are:

# array == null
# array.length == 0
# offset1 < 0
# offset2 < 0
# len < 0
# offset1 > offset2
# offset1 > array.length
# offset2 > array.length
# offset1 + len > array.length
# offset2 + len > array.length",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-29 17:38:04.715,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu May 07 18:33:08 UTC 2015,,,,,,0|i2e3dr:,9223372036854775807,,,,,,,,"29/Apr/15 17:38;githubbot;Github user britter commented on the pull request:

    https://github.com/apache/commons-lang/pull/47#issuecomment-97514318
  
    Hello @beradrian,
    
    sorry for being so oblivious. Yes it would be best to create a separate PR for this issue. I've already created a new jira issue for tracking this: https://issues.apache.org/jira/browse/LANG-1122
","30/Apr/15 08:46;beradrian;I guess start is the start of first block (in swap methods - offset1), end is the start of second block (in swap methods - offset2) and offset is the length of block to swap (in swap methods - len).
For case 1, 2, 3, 4, 5, 7, 8 I propose to result in no op. For case 6, it actually doesn't matter which block is first.
For case 9 and 10 - what do you think it should happen with swap([1, 2, 3, 4, 5], 0, 3, 3)? It should result in no op or it should result in [4, 5, 3, 1, 2], meaning that it will swap as many as possible? I would incline to go for the latter.","01/May/15 22:27;britter;Hello [~beradrian],

yes I meant offset1, offset2 and len. I've adjusted the description of this issue.

I agree with your assessment of 1, 2, and 6, 7, 8. For 3, 4, and 5 we should take into account how other methods with index parameters behave for negative inputs. For example the indexOf methods treat a negative startIndex as zero. However the remove methods throw an {{IndexOutOfBoundsException}}. We should do either of this, but we shouldn't introduce yet another way of handling negative indicies.

For case 9 and 10, I'm fine with the proposed solution.
","04/May/15 08:35;beradrian;For case 5, even if we promote len to zero, it will have the same result - no op.
If we will use the principle ""swap as many as possible from the given offset onwards"" in all cases then 5 and 6 will promote the indices to zero. And then it will be consistent with 9 and 10 behavior too. And it will also be easy to document it too :).
What do you think?",04/May/15 20:04;britter;Go for it!,"07/May/15 08:37;githubbot;GitHub user beradrian opened a pull request:

    https://github.com/apache/commons-lang/pull/86

    Fix issue 1122

    Fixes issue https://issues.apache.org/jira/browse/LANG-1122 as discussed.
    I also added a link to an article on my blog about shift algorithm, as it was discussed previously. Hope it's fine, if not, I can remove it.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/beradrian/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/86.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #86
    
----
commit 5b7608d1549989d92dd159392c19d9ba8ce0e62e
Author: beradrian <beradrian@yahoo.com>
Date:   2015-05-07T06:50:41Z

    consistent treatment for negative indices for swap method

commit e79a590e0cdabd93883aca964db2a862ff3f8490
Author: beradrian <beradrian@yahoo.com>
Date:   2015-05-07T08:31:28Z

    new test case
    explanations about algorithm

----
","07/May/15 18:32;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/86
",07/May/15 18:33;britter;Fixed in commit 13d7ce9fb65e8f05014daf4ee6cebc76f4781e6c,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat.parse() does not handle wrong length string,LANG-1121,12825791,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Invalid,chonton,freeism,freeism,29/Apr/15 04:57,19/Oct/16 15:24,07/Apr/19 20:37,30/Apr/15 16:18,3.3.2,,,,,,lang.time.*,,,0,,,,,,,,"FDFP does not handled wrong length string.

for example,
{code}
// Wed Apr 29 00:00:00 KST 2015
FastDateFormat.getInstance(""yyyyMMdd"").parse(""20150429"");
// throws ParseException
FastDateFormat.getInstance(""yyyyMMdd"").parse(""2015"");
// Thu Mar 16 00:00:00 KST 81724
FastDateFormat.getInstance(""yyyyMMdd"").parse(""20150429113100"");
{code}
I think result of third throws ParseException,
but FastDateFormat.parse() returns wrong year, ex, 81724 instead of 2015.

As I tested,
regex.matcher.group => (2015)(04)(29113100) => setCalendar => March 16, 81724

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-29 06:09:51.366,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri May 08 04:40:05 UTC 2015,,,,,,0|i2e1xr:,9223372036854775807,,,,,,,,29/Apr/15 06:09;britter;Patches welcome! Don't forget to include a junit test :-),30/Apr/15 16:18;chonton;Commit cb83f7cb31e50f265e098c5380b3f0051e257f46 has a test to show that this is same behavior as SimpleDateFormat.,"07/May/15 05:25;freeism;Thanks for commit tests.
I agree that is same behavior as SimpleDateFormat.
However, It is incorrect operation, I think.

format : yyyyMMdd
input : 20150429113100

It matches pattern below
{code}(\p{Nd{4}}+)(\p{Nd{2}+)(\p{Nd}++){code}
It works yyyy, MM, and the others are dd (don't care how long digits)

Is there any plan for patches, or not?","07/May/15 19:34;britter;[~freeism], no I don't think so, because FastDateFormat is supposed to be a replacement for SimpleDateFormat, so it has to behave the same way.","08/May/15 04:40;freeism;Ok, Thank you for reply. Have a nice day :)",,,,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils.stripAccents from ""Ł"" and ""ł""",LANG-1120,12825473,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,kwalczewski,kwalczewski,28/Apr/15 09:55,19/Oct/16 07:01,07/Apr/19 20:37,28/May/16 10:57,3.4,,,,3.5,,lang.*,,,1,,,,,,,,"{code}
import org.apache.commons.lang3.StringUtils;

public class Main {

    public static void main(String[] args) {
        System.out.println(StringUtils.stripAccents(""ĄŁÓŚŻŹĆŃ ąłóśżźćń""));
    }
}
{code}",win,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-28 20:08:32.514,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue May 10 19:23:04 UTC 2016,,,,,,0|i2e02n:,9223372036854775807,,,,,,,,"28/Apr/15 20:08;britter;I can confirm that this is a bug. The following test will fail:

{code:java}
    @Test
    public void testLANG1120() throws Exception {
        assertEquals(""ALOSZZCN aloszzcn"", StringUtils.stripAccents(""ĄŁÓŚŻŹĆŃ ąłóśżźćń""));
    }
{code}

Output is:

{code}
org.junit.ComparisonFailure: 
Expected :ALOSZZCN aloszzcn
Actual   :??�????? ??�?????
{code}

Patches welcome!","14/Jul/15 00:02;githubbot;GitHub user kaching88 opened a pull request:

    https://github.com/apache/commons-lang/pull/105

    [LANG-1120] Bugfix: StringUtils#stripAccents Ł and ł.

    Solution and unit test. 


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kaching88/commons-lang stripAccents

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/105.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #105
    
----
commit 0a203baf42fa8d7399ddf9be4beae4254108624a
Author: kaching88 <waved@o2.pl>
Date:   2015-07-13T23:54:35Z

    [LANG-1120] Bugfix: StringUtils#stripAccents Ł and ł.

----
","11/Feb/16 07:26;githubbot;Github user fracz commented on the pull request:

    https://github.com/apache/commons-lang/pull/105#issuecomment-182746493
  
    +1
","24/Apr/16 03:58;githubbot;Github user chonton commented on the pull request:

    https://github.com/apache/commons-lang/pull/105#issuecomment-213879732
  
    Patch does not apply.  Please update pull request.
","10/May/16 19:21;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/105
","10/May/16 19:22;githubbot;Github user PascalSchumacher commented on the pull request:

    https://github.com/apache/commons-lang/pull/105#issuecomment-218262780
  
    Thanks! :+1: 
","10/May/16 19:23;pascalschumacher;Pull request merged. Thanks!

Issue can be resolved.",,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils.repeat('z', -1) throws NegativeArraySizeException",LANG-1118,12823378,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,britter,rikles,rikles,23/Apr/15 11:30,19/Oct/16 07:01,07/Apr/19 20:37,28/Apr/15 19:38,,,,,3.5,,lang.*,,,0,,,,,,,,"Unlike what is said in JavaDoc comment, when passing a negative repeat value to the *StringUtils.repeat(char, int)* function, it doesn't return an empty String but throws a _NegativeArraySizeException_.

See PR #72 : https://github.com/apache/commons-lang/pull/72",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-23 11:50:31.646,,,false,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 30 17:43:33 UTC 2015,,,,,,0|i2dnlj:,9223372036854775807,,,,,,,,"23/Apr/15 11:50;githubbot;GitHub user rikles opened a pull request:

    https://github.com/apache/commons-lang/pull/68

    LANG-1118 Fix StringUtils.repeat(char, int)

    Now doing what is said in JavaDoc comment :
    when passing a negative repeat value to the StringUtils.repeat(char, int) function, it returns an empty String instead of throwing a NegativeArraySizeException.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rikles/commons-lang fix-LANG-1118

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/68.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #68
    
----
commit daa95a18a153190ec9928dc19f3e9c0433954ee9
Author: Loic Guibert <lfdummy-apache@yahoo.fr>
Date:   2015-04-23T11:41:51Z

    LANG-1118 Fix StringUtils.repeat(char, int) dealing with negative repeat value

commit b3a36ae0fa0fc2a892f04ac53b1100ff7c5e9f4c
Author: Loic Guibert <lfdummy-apache@yahoo.fr>
Date:   2015-04-23T11:43:21Z

    LANG-1118 Adding a test case for StringUtils.repeat(String, int) checking dealing with negative repeat value

----
",26/Apr/15 10:37;britter;We're in the middle of the SVN -> git migration. I will apply this fix after the migration has finished.,"27/Apr/15 19:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/68
","27/Apr/15 19:46;githubbot;GitHub user rikles reopened a pull request:

    https://github.com/apache/commons-lang/pull/68

    LANG-1118 Fix StringUtils.repeat(char, int)

    Now doing what is said in JavaDoc comment :
    when passing a negative repeat value to the StringUtils.repeat(char, int) function, it returns an empty String instead of throwing a NegativeArraySizeException.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rikles/commons-lang fix-LANG-1118

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/68.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #68
    
----
commit daa95a18a153190ec9928dc19f3e9c0433954ee9
Author: Loic Guibert <lfdummy-apache@yahoo.fr>
Date:   2015-04-23T11:41:51Z

    LANG-1118 Fix StringUtils.repeat(char, int) dealing with negative repeat value

commit b3a36ae0fa0fc2a892f04ac53b1100ff7c5e9f4c
Author: Loic Guibert <lfdummy-apache@yahoo.fr>
Date:   2015-04-23T11:43:21Z

    LANG-1118 Adding a test case for StringUtils.repeat(String, int) checking dealing with negative repeat value

----
","27/Apr/15 19:57;githubbot;Github user britter commented on the pull request:

    https://github.com/apache/commons-lang/pull/68#issuecomment-96796970
  
    @rikles Commons Lang has been migrated from svn to git. Because of this the main branch has been renamed to 'master'. Can you please rebase your work against the master branch? Thank you!
","28/Apr/15 15:29;githubbot;Github user rikles commented on the pull request:

    https://github.com/apache/commons-lang/pull/68#issuecomment-97105866
  
    Close due to rebase on master
","28/Apr/15 15:29;githubbot;Github user rikles closed the pull request at:

    https://github.com/apache/commons-lang/pull/68
","28/Apr/15 15:34;githubbot;GitHub user rikles opened a pull request:

    https://github.com/apache/commons-lang/pull/72

     LANG-1118: Fix StringUtils.repeat(char, int)

    _Close PR #68. Recreated due to rebase on master._
    
    Now doing what is said in JavaDoc comment :
    when passing a negative repeat value to the *StringUtils.repeat(char, int)* function, it returns an empty String instead of throwing a _NegativeArraySizeException_.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rikles/commons-lang fix-LANG-1118

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/72.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #72
    
----
commit 78b30f509834d81b8814d46471b75e3167a6460f
Author: Loic Guibert <lfdummy-apache@yahoo.fr>
Date:   2015-04-23T11:41:51Z

    LANG-1118 Fix StringUtils.repeat(char, int) dealing with negative repeat value

commit 9cc91332ff252f6e3f41719526f930dcb5908c31
Author: Loic Guibert <lfdummy-apache@yahoo.fr>
Date:   2015-04-23T11:43:21Z

    LANG-1118 Adding a test case for StringUtils.repeat(String, int) checking dealing with negative repeat value

----
","28/Apr/15 16:23;githubbot;Github user coveralls commented on the pull request:

    https://github.com/apache/commons-lang/pull/72#issuecomment-97126145
  
    
    [![Coverage Status](https://coveralls.io/builds/2441805/badge)](https://coveralls.io/builds/2441805)
    
    Coverage decreased (-0.0%) to 93.83% when pulling **9cc91332ff252f6e3f41719526f930dcb5908c31 on rikles:fix-LANG-1118** into **63d8a025e6f38ddfc966c4104ac783bcb59031e0 on apache:master**.

",28/Apr/15 19:38;britter;PR #72 has been merged. Thank you for contributing to Apache Commons Lang!,"28/Apr/15 19:39;githubbot;Github user britter commented on the pull request:

    https://github.com/apache/commons-lang/pull/72#issuecomment-97181212
  
    Hello @rikles I'm still trying to find out how to correctly merge PRs from the command line. Looks like it didn't work with this PR. Your changes have been merged. Can you close this PR please? :) Thank you!
","30/Apr/15 17:43;githubbot;Github user rikles commented on the pull request:

    https://github.com/apache/commons-lang/pull/72#issuecomment-97894359
  
    Merged into master. Close PR.
","30/Apr/15 17:43;githubbot;Github user rikles closed the pull request at:

    https://github.com/apache/commons-lang/pull/72
",,,,,,,,,,,,,,,,,,
DateUtilsTest.testLang530 fails for some timezones,LANG-1116,12821994,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,asheldon,asheldon,17/Apr/15 20:46,19/Oct/16 07:00,07/Apr/19 20:37,30/Apr/15 23:29,3.4,,,,3.5,,lang.time.*,,,0,,,,,,,,"Unit test for testLang530 fails when the isoDateStr comes out with just a Z instead of +00:00.

{code}
Tests run: 38, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.014 sec <<< FAILURE! - in org.apache.commons.lang3.time.DateUtilsTest
testLang530(org.apache.commons.lang3.time.DateUtilsTest)  Time elapsed: 0.005 sec  <<< ERROR!
java.text.ParseException: Unable to parse the date: 2015-04-17T18:51:52Z
        at org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(DateUtils.java:401)
        at org.apache.commons.lang3.time.DateUtils.parseDate(DateUtils.java:301)
        at org.apache.commons.lang3.time.DateUtils.parseDate(DateUtils.java:278)
        at org.apache.commons.lang3.time.DateUtilsTest.testLang530(DateUtilsTest.java:1222)
{code}

On a Linux machine where this test passes, isoDateStr is 2015-04-17T19:26:03+00:00.",Redhat 5 / Java8u45,,,,,,,,,,,,,,,,,,,,,,,,,27/Apr/15 20:33;asheldon;lang-1116.patch;https://issues.apache.org/jira/secure/attachment/12728502/lang-1116.patch,17/Apr/15 23:54;asheldon;lang-1116.patch;https://issues.apache.org/jira/secure/attachment/12726302/lang-1116.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2015-04-18 18:41:02.495,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri May 01 08:07:32 UTC 2015,,,,,,0|i2df9b:,9223372036854775807,,,,,,,,17/Apr/15 23:54;asheldon;Patch to test and code.,"18/Apr/15 18:41;britter;Hello [~asheldon],

after applying your patch I get:

{code}
java.lang.AssertionError: Date not equal to itself ISO formatted and parsed expected:<1429382379517> but was:<1429382383517>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:645)
	at org.apache.commons.lang3.time.DateUtilsTest.testLang530(DateUtilsTest.java:1209)
{code}","18/Apr/15 21:06;asheldon;I modified the test locally to run 100,000 times and unfortunately I cannot reproduce this failure. The unix time of these appears to differ by four seconds in your run.

1429382379.517
1429382383.517

{code:java}
    // http://issues.apache.org/jira/browse/LANG-530
    @Test
    public void testLang530() throws ParseException {
        for (int i = 0 ; i < 100000; i++) {
            for (final String timezoneId : TimeZone.getAvailableIDs()) {
                final TimeZone timezone = TimeZone.getTimeZone(timezoneId);
                final Calendar calendar = new GregorianCalendar(timezone);

                final String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(calendar);
                final Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() });
                // the format loses milliseconds so have to reintroduce them
                assertEquals(""Date not equal to itself ISO formatted and parsed"", calendar.getTimeInMillis(), d2.getTime() + calendar.getTimeInMillis() % 1000); 
            }
        }
    }

{code}

I artificially added 1 second sleeps in my test code between each step but I still don't have test failures. It might be worth noting that I tested this patch against the 3.4 release rather than trunk.","27/Apr/15 20:04;britter;Okay, this needs more time for investigation. I hope to find some time this week end. In the mean time, can you check out if your fix is working when applying it against HEAD (note that we have migrated to git, you can find the new repository location at http://commons.apache.org/proper/commons-lang/source-repository.html)?","27/Apr/15 20:32;asheldon;I checked out master with Git, applied my patch and it works for me. Attaching the updated patch.",27/Apr/15 20:44;britter;[~asheldon] what time zone are you in? Maybe this helps to reproduce the problem.,"27/Apr/15 20:55;asheldon;My machine runs in UTC, though I'm physically in UTC-8.

% cat /etc/sysconfig/clock
ZONE=""UTC""
UTC=true","29/Apr/15 19:24;britter;[~asheldon] Thank you! I found out that testLang530 seems to fail when you're in UTC! So modifing the test like so:

{code:java}
    @Test
    public void testLang530() throws ParseException {
        TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));
        final Date d = new Date();
        final String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);
        final Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() });
        // the format loses milliseconds so have to reintroduce them
        assertEquals(""Date not equal to itself ISO formatted and parsed"", d.getTime(), d2.getTime() + d.getTime() % 1000); 
    }
{code}

Will make it fail on my machine. I'll update the description of this ticket. Now we have to find a fix that works on your machine and on my machine :-) I'm currently in CEST.","30/Apr/15 23:29;chonton;commit bea1ae92aa52a985f8c171c6e17ff7fc4aa61fe4 
Using FastDateParser which can handle Z formats

(feel free to rollback if you think the solution too radical)","01/May/15 08:07;kinow;+1 [~chonton]! Tests passing in UTC, America/Sao Paulo and Pacific/Auckland! Thanks a lot",,,,,,,,,,,,,,,,,,,,,
TypeUtils.ParameterizedType#equals doesn't work with wildcard types,LANG-1114,12820914,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,BigAndy,BigAndy,14/Apr/15 19:09,19/Oct/16 07:01,07/Apr/19 20:37,29/Apr/15 17:50,3.3.2,3.4,,,3.5,,lang.reflect.*,,,0,,,,,,,,"There is a bug in TypeUtils.equals(WilcardType, Type).  It returns true if the other type is not a WildcardType, it should return false.  See TypeUtils@1629 for v3.3.2 and TypeUtils@791 for v3.4

Bug can be seen with the following test:

{code}
@Test
    public void shouldHandleEqualityOfParameterizedTypesWithWildcards() throws Exception {
        // Given:
        class SomeType {
            Collection<?> field;
        }

        final ParameterizedType wildcardCollectionType = (ParameterizedType) SomeType.class.getDeclaredField(""field"").getGenericType();
        final WildcardType wildcard = (WildcardType) wildcardCollectionType.getActualTypeArguments()[0];
        final ParameterizedType ptWithWildcard = TypeUtils.parameterize(Collection.class, wildcard);
        final ParameterizedType otherPt = TypeUtils.parameterize(Collection.class, String.class);

        // Then:
        assertThat(otherPt, is(not(equalTo(ptWithWildcard))));  // Passes
        assertThat(ptWithWildcard, is(not(equalTo(otherPt))));  // Fails
    }
{code}

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-18 18:17:49.181,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 29 17:50:28 UTC 2015,,,,,,0|i2d8t3:,9223372036854775807,,,,,,,,18/Apr/15 18:17;britter;Patches welcome!,"18/Apr/15 20:25;BigAndy;CLA emailed. I can't assign to myself, but I fork and create a PR.","18/Apr/15 21:17;githubbot;GitHub user datalorax opened a pull request:

    https://github.com/apache/commons-lang/pull/65

    #LANG-1114 TypeUtils.equals is broken for WildcardType

    TypeUtils.equals is broken for WildcardType, when compared with non-wildcard type.
    
    It was broken because it was returning true! Now returns false. Also added test to cover the issue.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/datalorax/commons-lang bug/LANG-1114-TypeUtils.ParameterizedType#equals_does_not_work_with_wildcard_types

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/65.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #65
    
----
commit b053737c2e64303cfcaca0fb07c1f13d352a7b8e
Author: The Datalorax <datalorax@gmail.com>
Date:   2015-04-18T21:14:06Z

    #LANG-1114 TypeUtils.equals is broken for WildcardType, when compared with non-wildcard type.
    
    It was broken because it was returning true! Now returns false. Also added test to highlight issue.

----
",18/Apr/15 21:18;BigAndy;PR https://github.com/apache/commons-lang/pull/65 added to cover this.,20/Apr/15 16:10;BigAndy;I've now had an email from James Carman saying my CLA has been received. Could you please tell me how I get permissions to assign this Jira to myself?,"26/Apr/15 10:39;britter;Hello [~BigAndy],

we usually don't assign special permissions to contirbutors. It's just to much managment overhead for us. Usually the committer who reviews the patch assigns the issue to himself so that everybody can see who is working on an issue.

We're currently in the middle of a SVN -> git migration. I'll apply your patch after that has finished.

Thank you!","26/Apr/15 10:39;britter;Hello [~BigAndy],

we usually don't assign special permissions to contirbutors. It's just to much managment overhead for us. Usually the committer who reviews the patch assigns the issue to himself so that everybody can see who is working on an issue.

We're currently in the middle of a SVN -> git migration. I'll apply your patch after that has finished.

Thank you!","26/Apr/15 18:37;BigAndy;OK, good to know. New to all of this!","27/Apr/15 19:19;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/65
","27/Apr/15 19:45;githubbot;GitHub user datalorax reopened a pull request:

    https://github.com/apache/commons-lang/pull/65

    #LANG-1114 TypeUtils.equals is broken for WildcardType

    TypeUtils.equals is broken for WildcardType, when compared with non-wildcard type.
    
    It was broken because it was returning true! Now returns false. Also added test to cover the issue.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/datalorax/commons-lang bug/LANG-1114-TypeUtils.ParameterizedType#equals_does_not_work_with_wildcard_types

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/65.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #65
    
----
commit b053737c2e64303cfcaca0fb07c1f13d352a7b8e
Author: The Datalorax <datalorax@gmail.com>
Date:   2015-04-18T21:14:06Z

    #LANG-1114 TypeUtils.equals is broken for WildcardType, when compared with non-wildcard type.
    
    It was broken because it was returning true! Now returns false. Also added test to highlight issue.

commit d55588f1cb7775d655c0cde091899b2443854617
Author: The Datalorax <datalorax@gmail.com>
Date:   2015-04-18T22:00:34Z

    #LANG-1114 Update changes.xml with fix

----
","27/Apr/15 19:57;githubbot;Github user britter commented on the pull request:

    https://github.com/apache/commons-lang/pull/65#issuecomment-96796890
  
    @datalorax Commons Lang has been migrated from svn to git. Because of this the main branch has been renamed to 'master'. Can you please rebase your work against the master branch? Thank you!
","28/Apr/15 06:37;BigAndy;Sure., No worries. (Btw, I notice a comment above about reopening the pull request - this was not my intent!).
","28/Apr/15 19:03;githubbot;Github user britter commented on the pull request:

    https://github.com/apache/commons-lang/pull/65#issuecomment-97171431
  
    Hello @datalorax it looks like rebasing did not work the way we wanted. The diff shows more then 500 touched filed. Maybe it's easier to close this PR and recreate it against the master branch. Sorry for the inconvenience!
","28/Apr/15 19:56;githubbot;Github user datalorax commented on the pull request:

    https://github.com/apache/commons-lang/pull/65#issuecomment-97187550
  
    Sorry (this is a bit embarrassing!), I was just playing around with the rebase and didn't mean to raise a PR against this.
","28/Apr/15 19:56;githubbot;Github user datalorax closed the pull request at:

    https://github.com/apache/commons-lang/pull/65
",29/Apr/15 17:50;britter;Fixed in 640953167adf3580a2c21077d78e7e7ce84ead03,,,,,,,,,,,,,,,
MultilineRecursiveToStringStyle largely unusable due to being package-private,LANG-1112,12819600,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,britter,liamjones,liamjones,09/Apr/15 07:47,19/Oct/16 07:00,07/Apr/19 20:37,18/Apr/15 18:45,3.4,,,,3.5,,lang.builder.*,,,1,,,,,,,,"The new MultilineRecursiveToStringStyle which was added under LANG-1052 is a package-private scoped class (no specific scope is specified for the class). I'm assuming, like RecursiveToStringStyle, it should be public instead?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-18 13:54:27.069,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Jun 22 08:23:31 UTC 2016,,,,,,0|i2d0qv:,9223372036854775807,,,,,,,,18/Apr/15 13:54;donarus;I also think it should be fixed and marked as public,"18/Apr/15 18:45;britter;{code}
$ svn ci -m ""LANG-1112: MultilineRecursiveToStringStyle largely unusable due to being package-private. Thanks to Liam Jones for reporting this.""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/builder/MultilineRecursiveToStringStyle.java
Transmitting file data ..
Committed revision 1674549.
{code}

MultilineRecursiveToStringStyle is no public.","21/Jun/16 11:55;aconstantin;Are there any plans, when this gets available? Are there any plans for a 3.5 or 3.4.1 release including this issue? ",21/Jun/16 16:49;britter;[~aconstantin]: I'm currently planning 3.5 together with [~pascalschumacher]. I think we will release it in the next few weeks.,"22/Jun/16 08:23;aconstantin;great news, thanks for the information",,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils equals() method produces wrong result for the below scenario,LANG-1106,12787956,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,naren_k,naren_k,03/Apr/15 09:43,09/Apr/15 14:24,07/Apr/19 20:37,03/Apr/15 11:54,2.6,3.3.2,,,,,lang.*,,,0,bug,,,,,,,"When we use StringUtils equals() method with below scenario, it returns wrong results.
Scenario : StringUtils.equals(""someStr"", null);
Result : true
Expected result : false
Explanation:
Some logical / typo mistake on the below line.

return ((str1 == null) ? false : (str2 == null) ? true : str1.equals(str2));

Instead of ""true"" it should be ""false"", when str2 is checked.
","java version ""1.7.0_02""
Java(TM) SE Runtime Environment (build 1.7.0_02-b13)
windows 7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-04-03 11:53:57.799,,,false,AMBARI-8146,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 09 14:17:41 UTC 2015,,,,,,0|i27qzr:,9223372036854775807,,,,,,,,"03/Apr/15 11:53;britter;Please have a look at [StringUtilsEqualsIndexOfTest|http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java?view=markup], line 543:

{code}
assertFalse(StringUtils.equals(fooCs, null));
{code}

Where fooCs is initialized with the value {{""foo""}}. The test succeeds, so I think this issue is invalid. The Code you've posted with the wrong logic doesn't look like the logic from {{org.apache.commons.lang3.StringUtils}}. Maybe you're talking about a different class with the same name?","09/Apr/15 12:11;naren_k;I have checked with ""org.apache.commons.lang3.StringUtils"" class for the equals method. It produces wrong results.
please find the logic which is present in the ""org.apache.commons.lang3.StringUtils"" class and try it.

package org.apache.commons.lang3;
 public static boolean equals(CharSequence cs1, CharSequence cs2)
  {
    return cs1 == null ? false : cs2 == null ? true : cs1.equals(cs2);
  }

If cs2 is null, the above logic returns ""true"", that means it doesn't produce correct result.","09/Apr/15 12:41;britter;[~naren_k], I don't know what code you're looking at. The current implementation is:

{code:java}
    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {
        if (cs1 == cs2) {
            return true;
        }
        if (cs1 == null || cs2 == null) {
            return false;
        }
        if (cs1 instanceof String && cs2 instanceof String) {
            return cs1.equals(cs2);
        }
        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));
    }
{code}

(see https://github.com/apache/commons-lang/blob/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java#L784)

Please make sure you're using the latest release of Commons Lang, which is 3.4 (http://search.maven.org/#artifactdetails%7Corg.apache.commons%7Ccommons-lang3%7C3.4%7Cjar)","09/Apr/15 14:17;naren_k;Sorry Benedikt.. I was checking version 3.3 , my mistake.. got it.. thanks for your time :)",,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParserTest.testParses fails in TimeZone America/Sao_Paulo,LANG-1104,12787227,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,chonton,chonton,01/Apr/15 02:10,06/Apr/15 17:28,07/Apr/19 20:37,01/Apr/15 04:10,4.0,,,,3.4,,lang.time.*,,,1,,,,,,,,"Build works fine with Java 7 and Maven 3.2

Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T15:29:23-02:00)
Maven home: /opt/apache-maven-3.2.5
Java version: 1.7.0_76, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.16.0-33-generic"", arch: ""amd64"", family: ""unix""

The following test failed though:

org.apache.commons.lang3.time.FastDateFormat_ParserTest:
java.lang.AssertionError: ms_MY Sat Feb 10 01:53:32 BRT 1900 GGGG/yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE/ZZZZ
America/New_York expected:<Sat Feb 10 01:53:32 BRT 1900> but was:<Sat Feb 10 01:53:04
BRT 1900>

Build fails with Java 8 and Maven 3.2. Same test fails.

Failed tests: 
  FastDateFormat_ParserTest>FastDateParserTest.testParses:250->FastDateParserTest.validateSdfFormatFdpParseEquality:227 
Sat Feb 10 01:53:32 BRT 1900 GGGG/yyyy/MMMM/dddd/hhhh/mmmm/ss/aaaa/EEEE/ZZZZ America/New_York
expected:<Sat Feb 10 01:53:32 BRT 1900> but was:<Sat Feb 10 01:53:04 BRT 1900>

My time zone is set to America/Sao_Paulo, GMT -3,
and I suspect that that failing test is in someway related to my time zone.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Apr 01 04:10:23 UTC 2015,,,,,,0|i27min:,9223372036854775807,,,,,,,,"01/Apr/15 03:25;chonton;In 1900, Sao Paulo was 3 hours, 6 minutes, and 28 seconds behind GMT.  The ZZ format will encode that difference as ""-0306"", which introduces a 28 seconds difference in the round trip.  The ZZ format cannot be considered a high fidelity format for historic time in certain time zones.  (Atlantic/Reykjavik happened to be 1:27:48 behind GMT in 1900)

A couple of instructive unit tests which only use JRE classes:

{noformat}
   @Test
    public void test1104_a() throws ParseException {
        TimeZone tzSaoPaulo = TimeZone.getTimeZone(""America/Sao_Paulo"");
        Locale usLocale = Locale.US;

        final SimpleDateFormat sdf = new SimpleDateFormat(""yyyy/MM/dd/ZZ"", usLocale);
		sdf.getCalendar().setTimeZone(tzSaoPaulo);

        final Calendar cal = Calendar.getInstance(tzSaoPaulo, usLocale);
        cal.clear();        
        cal.set(Calendar.MONTH, 1);
        cal.set(Calendar.DAY_OF_MONTH, 10);
        cal.set(Calendar.YEAR, 1900);

        final Date expected = cal.getTime();
        String formattedDate = sdf.format(expected);
        Assert.assertTrue(formattedDate.endsWith(""-0306"")); // Surprise! Historically, Sao Paulo is 3 hours and 6 minutes behind GMT
        
        final Date actual = sdf.parse(formattedDate);
        Assert.assertEquals(tzSaoPaulo, sdf.getCalendar().getTimeZone());
        
        long diff = TimeUnit.SECONDS.toMillis(28);	 // Surprise!! In February of 1900, Sao Paulo was 3 hours, 6 minutes, and 28 seconds behind GMT
        Assert.assertEquals(diff, expected.getTime() - actual.getTime());        
    }
    
    @Test
    public void test1104_b() throws ParseException {
        TimeZone tzSaoPaulo = TimeZone.getTimeZone(""America/Sao_Paulo"");
        Locale usLocale = Locale.US;

        final Calendar cal = Calendar.getInstance(tzSaoPaulo, usLocale);
        cal.clear();        
        cal.set(Calendar.MONTH, 1);
        cal.set(Calendar.DAY_OF_MONTH, 10);
        cal.set(Calendar.YEAR, 1900);
        final Date expected = cal.getTime();

        TimeZone tzEratzSaoPaulo = TimeZone.getTimeZone(""GMT-0306"");       
        final Calendar eratz = Calendar.getInstance(tzEratzSaoPaulo, usLocale);
        eratz.clear();        
        eratz.set(Calendar.MONTH, 1);
        eratz.set(Calendar.DAY_OF_MONTH, 10);
        eratz.set(Calendar.YEAR, 1900);
        final Date actual = eratz.getTime();
        
        long diff = TimeUnit.SECONDS.toMillis(28);	 // Surprise!! In February of 1900, Sao Paulo was 3 hours, 6 minutes, and 28 seconds behind GMT
        Assert.assertEquals(diff, expected.getTime() - actual.getTime());
    }
{noformat}",01/Apr/15 04:08;chonton;Committed revision 1670560.,01/Apr/15 04:10;chonton;decoupled testing timezone name parsing from other tests.  testParse is trying to do too much at once.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc is not encoding spaces correctly,LANG-1094,12781490,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,dmjones500,dmjones500,12/Mar/15 12:51,22/Oct/16 14:56,07/Apr/19 20:37,22/Oct/16 14:56,,,,,3.5,,General,,,0,,,,,,,,"I've noticed the Javadocs include links to methods with spaces incorrectly encoded. For example, the Javadocs for [DateUtils|http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/time/DateUtils.html] describes a method:

{code:java}
public static boolean isSameDay(Calendar cal1, Calendar cal2)
{code}

The link to this is:

{noformat}
[...]/DateUtils.html#isSameDay(java.util.Calendar, java.util.Calendar)
{noformat}

whereas it should be:

{noformat}
[...]/DateUtils.html#isSameDay(java.util.Calendar,%20java.util.Calendar)
{noformat}

Not sure what's causing this problem. But it certainly hinders efforts to link to our docs from other sites (like Stack Overflow).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-12 14:13:06.273,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Oct 22 14:55:31 UTC 2016,,,,,,0|i26oqn:,9223372036854775807,,,,,,,,12/Mar/15 14:13;britter;Are we sure this is a bug in lang? Sounds more like a bug in the JavaDoc tool.,"12/Mar/15 14:29;dmjones500;I'm not sure, but I wanted to raise it before I forgot about it. It could be an error in how we've configured our Javadoc output or it might be that we need to choose a different version of a Javadoc plugin to avoid a bug in Javadoc.

I've removed the ""patch needed"" label, since we don't' know what we're dealing with yet.","12/Mar/15 15:23;sebb@apache.org;It's not a bug in LANG.

It is either in Javadoc or in Maven's handling of Javadoc.

It may also depend on the browser being used; when I copy/paste from Firefox it automatically converts the spaces and other unsafe chars.

What browser did you use to copy/paste the link?","12/Mar/15 15:48;dmjones500;I was using Chrome. However, I've looked at other Javadocs (most notably the main Oracle docs) and I don't see this problem. So something different is happening with the Lang docs. I'm happy to change this issue to a different type or close it and continue discussion on the ML if that's preferable.","12/Oct/16 10:05;kinow;Hmmm, interesting. Just tried `mvn javadoc:javadoc` for [lang] master branch in my local environment, and the links now seem to be slightly different.

{noformat}
file:///....../commons-lang/target/site/apidocs/org/apache/commons/lang3/time/DateUtils.html#isSameDay-java.util.Calendar-java.util.Calendar-
{noformat}

So now links contain the arguments separated by a single dash. Couldn't find any reference to this change in Java 8 release notes.

Could someone else try it as well, please? If someone else confirms it is working now, I can try to chase the change in JDK.

{noformat}
$ java -version
java version ""1.8.0_101""
Java(TM) SE Runtime Environment (build 1.8.0_101-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)
{noformat}","15/Oct/16 11:53;kinow;Just checked the website [~britter] created for the 3.5 release and the links there look good too

http://home.apache.org/~britter/commons/lang/3_5_RC2/apidocs/org/apache/commons/lang3/time/DateUtils.html#isSameDay-java.util.Calendar-java.util.Calendar-

So I believe this issue can be marked as Won't Fix, as it is now working with the latest Java 8 version.",22/Oct/16 14:55;pascalschumacher;I can confirm that [http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/time/DateUtils.html#isSameDay-java.util.Calendar-java.util.Calendar-] works for me.,,,,,,,,,,,,,,,,,,,,,,,,
Wrong formating of time zones with daylight saving time in FastDatePrinter,LANG-1092,12781034,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,bayard,bayard,10/Mar/15 23:28,06/Apr/15 17:28,07/Apr/19 20:37,13/Mar/15 20:30,3.3.2,,,,3.4,,lang.time.*,,,0,,,,,,,,"At work we're getting build issues with Lang 3.3.2 (and any since 3.2 when the test code was introduced in LANG-818).  The test org.apache.commons.lang3.time.FastDatePrinterTest.testCalendarTimezoneRespected picks a timezone and runs a test on it. One assumes that timezones usually work, but some are not - so it depends on the order of timezones returned by TimeZone.getAvailableIDs().

This would seem to imply a daylight savings time bug in FastDateFormat. This may be the same issue as LANG-916.

If you adjust the for loop such that the test is within the loop and happens on every timezone, you will hit timezones that fail.  e.g.:

{code}
Index: FastDatePrinterTest.java
===================================================================
--- FastDatePrinterTest.java	(revision 1665715)
+++ FastDatePrinterTest.java	(working copy)
@@ -269,8 +269,6 @@
         for (final String zone : availableZones) {
             if (!zone.equals(currentZone.getID())) {
                 anotherZone = TimeZone.getTimeZone(zone);
-            }
-        }
         
         assertNotNull(""Cannot find another timezone"", anotherZone);
         
@@ -282,6 +280,8 @@
         final String expectedValue = sdf.format(cal.getTime());
         final String actualValue = FastDateFormat.getInstance(pattern).format(cal);
         assertEquals(expectedValue, actualValue);
+            }
+        }
     }
     
     @Test
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-03-12 09:09:13.225,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Mar 14 07:32:36 UTC 2015,,,,,,0|i26lz3:,9223372036854775807,,,,,,,,12/Mar/15 09:09;britter;The time package is killing me... Feel free to commit the suggested improvements.,"13/Mar/15 02:06;bayard;I hear you, I winced when I saw the build was failing in the time package.

My improvement is merely one that makes the test 'work', and fail for everyone.

I think we should remove the time package from 3.4, putting it in its own 'legacy' jar :)","13/Mar/15 18:25;britter;After applying the proposed changes, I still get

{code}
Failed tests:
  FastDateFormat_PrinterTest>FastDatePrinterTest.testCalendarTimezoneRespected:282 expected:<2:24PM A[D]T> but was:<2:24PM A[S]T>
  FastDatePrinterTest.testCalendarTimezoneRespected:282 expected:<2:24PM A[D]T> but was:<2:24PM A[S]T>
{code}

I'm not sure whether this is related...",13/Mar/15 18:35;britter;Sorry I misunderstood the suggested changes. We're talking about the same thing and I'm now looking into that.,"13/Mar/15 18:41;britter;This works with:

{code}
java version ""1.7.0_71""
Java(TM) SE Runtime Environment (build 1.7.0_71-b14)
Java HotSpot(TM) 64-Bit Server VM (build 24.71-b01, mixed mode)
{code}

but fails with:

{code}
java version ""1.7.0_75""
Java(TM) SE Runtime Environment (build 1.7.0_75-b13)
Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode)
{code}","13/Mar/15 19:25;britter;The problem is in {{FastDatePrinter$TimeZoneNameRule}}, line 1165-1166. The TimeZone returns true for useDaylight, but the offset is 0, so the wrong branch is executed resulting in the wrong time zone name being added to the result.","13/Mar/15 20:30;britter;{code}
$ svn ci -m ""LANG-1092: Wrong formating of time zones with daylight saving time in FastDatePrinter""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
Sending        src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
Transmitting file data ...
Committed revision 1666568.
{code}

I've changed the TimeZoneNameRule to only check the calendar for DST_OFFSET. All tests pass with the following JDKs:
* 1.6
* 1.7.0_71
* 1.7.0_75
* 1.8.0_25
* 1.9.0 EA",14/Mar/15 07:32;bayard;Thank you Benedikt :),,,,,,,,,,,,,,,,,,,,,,,
FastDateParser does not set error indication in ParsePosition,LANG-1090,12778850,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,02/Mar/15 20:52,06/Apr/15 17:28,07/Apr/19 20:37,02/Mar/15 21:40,,,,,3.4,,,,,0,,,,,,,,"FastDateParser#parse(String,ParsePosition) does not throw ParseException if the input cannot be matched.

If the parse succeeds, the ParsePosition is updated to the index of the next character after the last one used, and the error index is left as -1.

If the parse fails, at present the ParsePosition is not updated at all, unlike SimpleDateFormat which is able to set the error Index to the location where the error occurr.

It does not appear to be possible to determine the error location because the matching against the format string is all or nothing.

This means that a successful parse can only be detected by checking whether the ParsePosition has been updated.

This needs to be documented, and some unit tests added.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 02 21:40:20 UTC 2015,,,,,,0|i2699r:,9223372036854775807,,,,,,,,"02/Mar/15 21:40;sebb@apache.org;URL: http://svn.apache.org/r1663438
Log:
LANG-1090 FastDateParser does not set error indication in ParsePosition

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser does not handle excess hours as per SimpleDateFormat,LANG-1089,12778650,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,02/Mar/15 01:06,06/Apr/15 17:28,07/Apr/19 20:37,02/Mar/15 16:30,,,,,3.4,,,,,0,,,,,,,,"FastDateParser does not do any validation of dates/times.
It acts similarly to SimpleDateFormat (SDF) in lenient mode.

However it does not generate the same output as SDF for input where the number of hours is greater than the normal range (e.g. > 12 for hh or > 23 for HH)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 02 16:30:37 UTC 2015,,,,,,0|i2682f:,9223372036854775807,,,,,,,,"02/Mar/15 11:54;sebb@apache.org;The 'h' and 'k' formats display hour 0 as 12/24 respectively, so the code needs to convert 12/24 to 0 on input.

The code uses modulo arithmetic to handle the conversion from 12 => 0 and 24 => 0.
Modulo has the same result for 12/24, but behaves differently from SDF lenient mode when the values are greater than 12/24.

Furthermore, the code applies the modulo conversion to the 'h' and 'H' formats, instead of the 'h' and 'k' formats.

This was not picked up by the unit tests as there were no tests that covered the conditions.","02/Mar/15 16:30;sebb@apache.org;URL: http://svn.apache.org/r1663348
Log:
LANG-1089 FastDateParser does not handle excess hours as per SimpleDateFormat

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils#createNumber() returns positive BigDecimal when negative Float is expected,LANG-1087,12778509,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,renat,renat,28/Feb/15 19:52,06/Apr/15 17:28,07/Apr/19 20:37,01/Mar/15 16:48,3.x,,,,3.4,,lang.math.*,,,0,,,,,,,,"{{NumberUtils.createNumber(""-0.0"")}} returns {{BigDecimal}} with 0 signum.
Caused by the implementation not checking for sign when extracting mantissa from the input string.

Expected is that negative {{Float}} is returned.",,,,,,,,,,,,,,,,,,,,,,,,,,28/Feb/15 20:00;renat;lang-1087-patch1.diff;https://issues.apache.org/jira/secure/attachment/12701623/lang-1087-patch1.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-03-01 16:48:54.475,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 01 16:48:54 UTC 2015,,,,,,0|i2677b:,9223372036854775807,,,,,,,,28/Feb/15 20:00;renat;Attaching (lang-1087-patch1.diff) a possible fix.,"01/Mar/15 16:48;britter;{code}
$ svn ci -m ""LANG-1087: NumberUtils#createNumber() returns positive BigDecimal when negative Float is expected. Thanks to Renat Zhilkibaev.""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/math/NumberUtils.java
Sending        src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
Transmitting file data ...
Committed revision 1663129.
{code}

Thank you!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add (T) casts to get unit tests to pass in old JDK,LANG-1083,12768670,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,britter,jbaker,jbaker,20/Jan/15 12:36,28/May/16 16:35,07/Apr/19 20:37,20/Jan/15 17:30,,,,,3.4,,,,,0,,,,,,,,"This is probably just a quirk of the old JDK that was used.
The casts are not necessary on other computers, but they don't seem to hurt either.  (Please verify that of course!)","Maven 3.2.5, Java 1.6.0_18, Fedora 11, AMD 64 (2.6.30.10-105.2.23.fc11.x86_64)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-20 17:30:45.862,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Jan 20 17:30:45 UTC 2015,,,,,,0|i24k7r:,9223372036854775807,,,,,,,,20/Jan/15 12:47;jbaker;Created PR https://github.com/apache/commons-lang/pull/42,"20/Jan/15 17:30;britter;{code}
$ svn ci -m ""LANG-1083: Add (T) casts to get unit tests to pass in old JDK. This fixes #42 from github. Thanks to Jonathan Baker.""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/SerializationUtils.java
Sending        src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java
Transmitting file data ...
Committed revision 1653307.
{code}

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"DiffBuilder.append(String, Object left, Object right) does not do a left.equals(right) check",LANG-1081,12767461,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,britter,jbaker,jbaker,14/Jan/15 16:11,06/Apr/15 17:28,07/Apr/19 20:37,23/Jan/15 08:28,3.3.2,,,,3.4,,lang.builder.*,,,1,github,,,,,,,"Only testing == without testing equals() seems wrong.
Should an equals() test be added after determining that the parameters are not arrays?
",,,60,60,,0%,60,60,,,,,,,,,,,,,,,,,,14/Jan/15 16:17;jbaker;DiffBuilder-equals_test_in_append_Objects.patch;https://issues.apache.org/jira/secure/attachment/12692248/DiffBuilder-equals_test_in_append_Objects.patch,14/Jan/15 16:17;jbaker;DiffBuilderAppendsNonEqualObjects.java;https://issues.apache.org/jira/secure/attachment/12692246/DiffBuilderAppendsNonEqualObjects.java,14/Jan/15 16:17;jbaker;DiffBuilderAppendsNonEqualObjectsFixed.java;https://issues.apache.org/jira/secure/attachment/12692247/DiffBuilderAppendsNonEqualObjectsFixed.java,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2015-01-16 05:43:44.092,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 23 12:11:27 UTC 2015,,,,,,0|i24d5r:,9223372036854775807,,,,,,,,14/Jan/15 16:17;jbaker;Attached are examples of how to detect and correct the issue.,"16/Jan/15 05:43;mwikberg;I was wondering why two identical strings (not being the same object though, as they were database lookup results) were considered different. I think equals() definitely needs to be checked also.","18/Jan/15 15:59;jbaker;Submitted a pull request on GitHub.com.
I hope this is the correct procedure.  Please advise.",19/Jan/15 11:34;britter;Setting this to review patch. I'll try to have a look tonight.,23/Jan/15 08:28;britter;Fixed in http://svn.apache.org/r1654137.,"23/Jan/15 12:11;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/41
",,,,,,,,,,,,,,,,,,,,,,,,,
BUG -Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')  ClassUtils,LANG-1079,12763850,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Invalid,,david.espitia,david.espitia,26/Dec/14 20:45,19/Oct/16 15:24,07/Apr/19 20:37,29/Dec/14 11:45,3.x,,,,,,lang.*,,,0,,,,,,,,"we are currently using ""commons-lang3-3.0"" and in the analysis of veracode found this bug in ""ClassUtils line 792"":

Description:

A call uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may
create unexpected control flow paths through the application. Depending on how reflection is being used, the attack
vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected
manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the
constructor of the user-supplied class name will have already executed.

Recommendations:

Validate the class name against a combination of white and black lists to ensure that only expected behavior is
produced.

",,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-27 00:15:18.889,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 29 11:45:50 UTC 2014,,,,,,0|i23sh3:,9223372036854775807,,,,,,,,27/Dec/14 00:15;joehni;ClassUtils is a general purpose tools. It is *your* job to ensure that your code is calling the methods only with validated class names.,27/Dec/14 16:34;britter;I'm tempted to close this as invalid.,"28/Dec/14 03:38;sebb@apache.org;The report appears to be complaining about the method
{{Class<?> org.apache.commons.lang3.ClassUtils.getClass(ClassLoader classLoader, String className, boolean initialize)}}
which calls {{Class.forName}}.

I agree that it is the caller's job to ensure that the appropriate class name is used -- just as it is when calling {{Class.forName}} directly.

I agree - close as invalid.
",29/Dec/14 11:45;britter;Closing this as invalid.,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[PATCH] StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) should return 2",LANG-1077,12761125,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,lihy70,lihy70,11/Dec/14 18:23,29/May/16 15:35,07/Apr/19 20:37,11/Dec/15 13:48,3.3.2,,,,,,lang.*,,,0,patch,,,,,,,"{code:title= org.apache.commons.lang3.StringUtils.java|borderStyle=solid}
        int found = 0;
        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;
        do {
            if (lastIndex) {
                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);
            } else {
                index = CharSequenceUtils.indexOf(str, searchStr, index + 1);
            }
            if (index < 0) {
                return index;
            }
            found++;
        } while (found < ordinal);
{code}

Should it be:

{code:title= org.apache.commons.lang3.StringUtils.java|borderStyle=solid}
        private static int ordinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal, final boolean lastIndex) {
        //        if (str == null || searchStr == null || ordinal <= 0) {
        //            return INDEX_NOT_FOUND;
        //        }
        //        if (searchStr.length() == 0) {
        //            return lastIndex ? str.length() : 0;
        //        }
        //        int found = 0;
        //        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;
        //        do {
        //            if (lastIndex) {
        //                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);
        //            } else {
        //                index = CharSequenceUtils.indexOf(str, searchStr, index + 1);
        //            }
        //            if (index < 0) {
        //                return index;
        //            }
        //            found++;
        //        } while (found < ordinal);
        //        return index;

        if (str == null || searchStr == null || ordinal <= 0) {
            return INDEX_NOT_FOUND;
        }

        if (searchStr.length() == 0) {
            return lastIndex ? str.length() : 0;
        }

        final int searchStrLen = searchStr.length();
        int index = lastIndex ? str.length() : 0;

        for (int found = 0; index >= 0;) {
            if (lastIndex) {
                index = CharSequenceUtils.lastIndexOf(str, searchStr, index);
            } else {
                index = CharSequenceUtils.indexOf(str, searchStr, index);
            }

            if (index < 0) {
                return INDEX_NOT_FOUND;
            }

            if (++found >= ordinal) {
                break;
            }

            index = lastIndex ? index - searchStrLen : index + searchStrLen;
        }

        return index;
    }
{code}
",,,,,,,,,,,,,,,,,,,,LANG-1241,,,,,,12/Dec/14 12:50;kinow;LANG-1077.patch;https://issues.apache.org/jira/secure/attachment/12686843/LANG-1077.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-12 12:49:46.505,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Dec 11 20:33:17 UTC 2015,,,,,,0|i23btr:,9223372036854775807,,,,,,,,"12/Dec/14 12:49;kinow;Hi Haiyang!

Your code does make sense, and I've made a patch with it (hope you don't mind) for others to take a look and experiment with it. 

I thought about committing it to the trunk, but I got confused with the title of the issue.

Running the code as is in the trunk, {{StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2)}} returns *1*. After applying the patch with your code, {{StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2)}} returns *3*... so it is still != 2, and I think that's the expected behavior.

Do you reckon that the expected result should be indeed *3*? 

Thanks!
Bruno",12/Dec/14 12:50;kinow;Patch with Haiyang Li code and a unit test.,"12/Dec/14 18:15;lihy70;HI, Bruno
The code i pasted is incorrect. I changed it now. please have a look. 
Previously I just read the code but didn't test it with the modification.

thank you for testing it out!","12/Dec/14 18:57;kinow;Hello Haiyang!

No, I thank you for filing the issue and taking your time to provide some code. I never used the orginalIndexOf, so I thought it was a good chance to learn it too :-)

I *think* your previous code was right. Looking at the current implementation, it sems to always return the first occurrence of the needle (searchStr), *after* the given offset (ordinal) in the haystack (str).

I updated my local copy with your updated code, and it broke existing tests. 

What do you think?","12/Dec/14 19:39;lihy70;en... It's my bad. updated it again. I downloaded the source code and made the change and tested it this time.
(BTW, I a newcomer and we have a project which uses Commons Lang a lot. that's why i'm looking into code. Commons Lang provides a lot of useful APIs and help me a lot. appreciate the work you guys have done. Good job!)","12/Dec/14 19:55;kinow;So are you +1 for we applying the existing patch, with your original code? If so I will commit the patch to the trunk tonight.

Also, if you agree, I would like to update the title from ""StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) != 2 in StringUtils"" to ""StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) != *3* in StringUtils"" just to avoid any confusion in the future.

> (BTW, I a newcomer and we have a project which uses Commons Lang a lot. that's why i'm looking into code. Commons Lang provides a lot of useful APIs and help me a lot. appreciate the work you guys have done. Good job!)

That's a great initiative Haiyang. We are a group of volunteers, and the feedback and contributions like yours are very important. Feel free to report other issues. If you feel like, you can also write patches (tests are always welcome :-D ), this way your code can get merged and released to all users (how cool is that?).

All the best,
Bruno","12/Dec/14 20:04;lihy70;yes. i will be glad to see the code is to be merged into trunk.

And I will continue to review the code in my spare time and report any issues I find.","13/Dec/14 02:01;kinow;Committed in revision r1645101.

Thank you very much for your contribution Haiyang. 

Bruno",14/Dec/14 15:39;kinow;Patch with user contribution applied to trunk.,"11/Dec/15 12:49;sebb@apache.org;The patch that was applied was wrong.
The problem is that one cannot subtract the search length each time, unless one allows for this in the initial index. 

This is why the initial index is set to str.len (i.e. max index +1) or -1 (min index -1); then the first time through the loop, the original code starts at the end or start respectively.

The patched code now fails to start searching at the beginning when the search string len > 1, see LANG-1193","11/Dec/15 13:21;sebb@apache.org;On further reflection, I think the original bug report was wrong, and the original code is correct.

The original code steps through the search target one char at a time, so I think the behaviour should be:

StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 1) => 0 // matches ""aa""
StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) => 1 // matches "".aa""

However if overlapping matches are not allowed, I would expect:

StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) => 2 // matches ""..aa""

I have no idea why it was ever expected that the result should be ""3"", unless it was thought that the index started at 1.

Perhaps the OP expected overlapping matches to be disallowed.
However there is  no indication that this was ever intended.

The fix needs to be reverted, and the Javadoc updated to make it clear that overlapping matches are allowed.","11/Dec/15 13:48;sebb@apache.org;Revert LANG-1077

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/d75fe46b
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/d75fe46b
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/d75fe46b

Branch: refs/heads/master
Commit: d75fe46b8f1b0d5c27887052ee4714d6a9c7ea4b
Parents: 15e1ea2
Author: Sebb <sebb@apache.org>
Authored: Fri Dec 11 13:41:22 2015 +0000
Committer: Sebb <sebb@apache.org>
Committed: Fri Dec 11 13:41:22 2015 +0000

----------------------------------------------------------------------
 src/changes/changes.xml                            |  2 +-
 .../java/org/apache/commons/lang3/StringUtils.java | 15 ++++++++++++---
 .../lang3/StringUtilsEqualsIndexOfTest.java        | 17 +++++++++++++++--
 3 files changed, 28 insertions(+), 6 deletions(-)
----------------------------------------------------------------------

","11/Dec/15 16:58;lihy70;Sebb, 
The original bug is: StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) should return 2. somehow title was changed:  
""StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) != 2 in StringUtils"" to ""StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) != 3
And wrong patch was merged into trunk.
The right code should be:
--------------------------------------------------------------------------------------------------------------
    private static int ordinalIndexOf(final CharSequence str, final CharSequence searchStr, final int ordinal, final boolean lastIndex) {
        if (str == null || searchStr == null || ordinal <= 0) {
            return INDEX_NOT_FOUND;
        }

        if (searchStr.length() == 0) {
            return lastIndex ? str.length() : 0;
        }

        final int searchStrLen = searchStr.length();
        int index = lastIndex ? str.length() : 0;

        for (int found = 0; index >= 0;) {
            if (lastIndex) {
                index = CharSequenceUtils.lastIndexOf(str, searchStr, index);
            } else {
                index = CharSequenceUtils.indexOf(str, searchStr, index);
            }

            if (index < 0) {
                return INDEX_NOT_FOUND;
            }

            if (++found >= ordinal) {
                break;
            }

            index = lastIndex ? index - searchStrLen : index + searchStrLen;
        }

        return index;
    }
--------------------------------------------------------------------------------------------------------------

please look into the original code.
This is a valid bug. It's can't be correct by just updating java doc. because it may confuse people.

BTW, the bug was reported on 12/11/2014,  today is 12/11/15","11/Dec/15 17:50;sebb@apache.org;bq. The original bug is: StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) should return 2.

Sorry, but that is wrong.

The code returns *all* matches, so the first match is ""aa...."", i.e. index 0.
The second match is "".aa..."", i.e. index 1.
Third match would be ""..aa.."", i.e. index 2.
etc.","11/Dec/15 18:07;lihy70;Sebb, 
It doesn't make sense. take a few minutes to think about the definition/contract of ""indexOf"", and consider ""searchStr"" as whole object, no matter it's ""aa"", or ""ab"".

Or, try to think about the question:
There is one string A: ""aaaaaa"", string B: ""aa"", how many B in A and return the index of each?
","11/Dec/15 18:31;sebb@apache.org;bq. There is one string A: ""aaaaaa"", string B: ""aa"", how many B in A and return the index of each?

There are 5 B in A, indexes 0,1,2,3,4

Remember that overlapping matches are allowed, and indexes start at 0.","11/Dec/15 18:44;lihy70;There are ONLY 3 B in A. 
Consider the case: A: ""ababab"", B: ""ab"", or A:""aaaaaa"", B: ""aa"". in different scenarios, the expected result should be same, not matter what in A and B. 
You are assuming the programmers always know what in B or have to check what in B, and remember what they should NOT when call this method.","11/Dec/15 19:15;sebb@apache.org;The difference with ""ab"" is that it cannot ever match overlapping sections of the string.

However consider A: ""ababab"" B: ""aba"". B matches at index 0, it also matches at index 2.
Similarly for B: ""abab""

As I already wrote, the method allows overlapping matches.
It did so until version 3.4 when the code was changed, breaking it in the process (e.g. JIRA-1193)

I agree that the Javadoc was not precise, as it did not specify whether or not overlapping matches should be allowed.
The Javadoc has now been clarified to agree with the original behaviour.

It would of course be possible to have a different strategy whereby overlapping matches were not allowed, but that would be a change from the original behaviour, so would need a new method in order to avoid breaking the code for users that rely on the original behaviour.","11/Dec/15 19:27;lihy70;It's 19:18 at London?  how are you doing today? It's Friday. Here is 11:18 at CA.

JIRA-1193 is broken by wrong patch. the right code will work fine and fix JIRA-1193.
You're keeping talking ""overlapping matches"". This is a general XXXIndexOf(...), not a match method...
The doc looks good to me. what wrong is the behavior/code in the method. Even the java doc is updated with ""overlapping matches  is allowed"". People may NOT notice it, or remember it, or even don't read the doc. It could bring bugs by unexpected result even doc is updated.
","11/Dec/15 19:45;tn;This code exists since a long time and looking at the implementation it is clear what it does and what its intention is: repeatedly execute indexOf with a start index of +1 compared to the last match. There are even suggestions on stackoverflow to use this method for exactly that use-case.

What you are facing is a corner-case that was not described in the javadoc and thus it might create confusion for a user. So the right thing to do is what sebb did: revert the fix to the previous, working version and update the javadoc to document the corner case. Contrary to your opinion that this might introduce bugs, it is quite the opposite, your fix will introduce bugs as people relied on the previous version for a long time already.

If there is a need for a method that does not handle overlaps, then this should be a new feature request. The method could have an additional flag to indicate how it handles overlaps.","11/Dec/15 19:57;sebb@apache.org;I agree that had the patch been 'better' it would not have caused JIRA-1193 to be raised. In fact I was originally going to try to fix it accordingly.

However, I looked further into it, and noticed that fixing the behaviour according to your original issue was not a good idea, as it would have changed the existing behaviour.
The code was added to LANG in version 2.1 about 12 years ago, and the behaviour did not change until 3.4 which broke it.

Although the behaviour is not what you expect, it is consistent with the original Javadoc.
Furthermore the behaviour has been the same for multiple releases, so changing the behaviour now would potentially break existing applications.","11/Dec/15 20:03;lihy70;If as you said: ""There are even suggestions on stackoverflow to use this method for exactly that use-case"", (I think that use-case you referred is: StringUtils.ordinalIndexOf(""aaaaaa"", ""aa"", 2) should return 1), I agree to roll back the change to previous version.

On the other side: ""This code exists since a long time and looking at the implementation it is clear what it does and what its intention is: ...""
How long it exists doesn't mean how right it is. Definitely it does incorrectly what it's supposed to do, from my aspect.

By the way, again, JIRA-1193 in 3.4 was broken by the wrong patch/code, not by this ticket","11/Dec/15 20:11;lihy70;OK, basically, I think all of us agree: ""Furthermore the behaviour has been the same for multiple releases, so changing the behaviour now would potentially break existing applications."".
The discussion can be moved to how to improve this method.","11/Dec/15 20:33;lihy70;After think it about couple of minutes, I have another question: What're the general policies to fix bug/improve the code if it is not reported as bug in previous versions?

Again, I can understand and agree to roll back the changes to previous version for this case since it has been there for a long time.",,,,,,,
Read wrong component type of array in add in ArrayUtils,LANG-1073,12759020,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,kinow,lihy70,lihy70,03/Dec/14 00:01,06/Apr/15 17:28,07/Apr/19 20:37,14/Dec/14 18:27,3.3.2,,,,3.4,,lang.*,,,0,,,,,,,,"{code:title=org.apache.commons.lang3.ArrayUtils.java|borderStyle=solid}
    public static <T> T[] add(final T[] array, final T element) {
        Class<?> type;
        if (array != null){
            type = array.getClass();
        } else if (element != null) {
            type = element.getClass();
        } else {
            throw new IllegalArgumentException(""Arguments cannot both be null"");
        }
        .......
    }
{code}

I think it should be:

{code:title=org.apache.commons.lang3.ArrayUtils.java|borderStyle=solid}
    public static <T> T[] add(final T[] array, final T element) {
        Class<?> type;
        if (array != null){
            type = array.getClass().getComponentType();
        } else if (element != null) {
            type = element.getClass();
        } else {
            throw new IllegalArgumentException(""Arguments cannot both be null"");
        }
        .......
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-14 18:27:06.98,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Dec 14 18:27:28 UTC 2014,,,,,,0|i22zhb:,9223372036854775807,,,,,,,,"14/Dec/14 18:27;kinow;Hello again Haiyang! Nice catch. It was working as expecting due to {{Array.newInstance}} taking care of creating new arrays with the correct type. Furthermore, the {{public static <T> T[] add(final T[] array, final int index, final T element)}} method uses {{.getComponentType()}} as you suggested too.

Tested locally and all tests passed. 

Thank you!
Bruno",14/Dec/14 18:27;kinow;Fixed in r1645483.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Duplicated ""0x"" check in createBigInteger in NumberUtils",LANG-1072,12759014,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,lihy70,lihy70,02/Dec/14 23:46,06/Apr/15 17:28,07/Apr/19 20:37,03/Dec/14 01:40,3.3.2,,,,3.4,,lang.math.*,,,0,,,,,,,,"I think there is typo in below line:

{code:title= org.apache.commons.lang3.math.NumberUtils.java|borderStyle=solid}
 if (str.startsWith(""0x"", pos) || str.startsWith(""0x"", pos)) { // hex
            radix = 16;
            pos += 2;
}
{code}

The second ""0x"" should be ""0X""

{code:title= org.apache.commons.lang3.math.NumberUtils.java|borderStyle=solid}
 if (str.startsWith(""0x"", pos) || str.startsWith(""0X"", pos)) { // hex
            radix = 16;
            pos += 2;
}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-03 01:40:18.076,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 15 17:45:34 UTC 2014,,,,,,0|i22zg7:,9223372036854775807,,,,,,,,"03/Dec/14 01:40;sebb@apache.org;Thanks!

Fixed in r1643038

http://svn.apache.org/viewvc?view=revision&revision=r1643038","15/Dec/14 17:45;sebb@apache.org;URL: http://svn.apache.org/r1643038
Log:
LANG-1072 Duplicated ""0x"" check in createBigInteger in NumberUtils

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Fix wrong examples in JavaDoc of StringUtils.replaceEachRepeatedly(...), StringUtils.replaceEach(...)",LANG-1071,12758949,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,britter,julianladisch,julianladisch,02/Dec/14 17:53,06/Apr/15 17:28,07/Apr/19 20:37,27/Dec/14 16:48,3.3.2,,,,3.4,,lang.*,,,0,,,,,,,,"StringUtils.replaceEachRepeatedly(*, *, *) has javadoc with examples of invokation of StringUtils.replaceEach(*, *, *):
https://svn.apache.org/viewvc/commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java?revision=1639624&view=markup#l4588

StringUtils.replaceEach(*, *, *, *, *) has javadoc with examples of invokation of StringUtils.StringUtils.replaceEach(*, *, *, *). Note different number of arguments.
https://svn.apache.org/viewvc/commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java?revision=1639624&view=markup#l4639

Please fix javadoc.",,,,,,,,,,,,,,,,,,,,,,,,,,23/Dec/14 20:42;anoordover;javadoc.patch;https://issues.apache.org/jira/secure/attachment/12688915/javadoc.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-02 18:49:16.212,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Dec 27 16:48:49 UTC 2014,,,,,,0|i22z2f:,9223372036854775807,,,,,,,,02/Dec/14 18:49;dmjones500;Patches welcome :-),23/Dec/14 20:42;anoordover;Something like this?,"27/Dec/14 16:48;britter;{code}
$ svn ci -m ""LANG-1071: Fix wrong examples in JavaDoc of StringUtils.replaceEachRepeatedly(...), StringUtils.replaceEach(...). Thanks to Arno Noordover.""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/StringUtils.java
Transmitting file data ..
Committed revision 1648067.
{code}

Thanks for contributing!",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CharSet.getInstance documentation does not clearly explain how to include negation character in set,LANG-1069,12757680,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,dmjones500,dmjones500,dmjones500,25/Nov/14 12:36,19/Oct/16 07:01,07/Apr/19 20:37,11/Apr/15 06:09,3.3.2,,,,3.5,,lang.*,,,0,,,,,,,,"As discussed in [this Stack Overflow question|http://stackoverflow.com/questions/27070515/how-can-i-include-the-caret-character-in-an-apache-commons-charset], the documentation for {{CharSet.getInstance()}} don't explain clearly how to include the negation character ({{^}}) as a literal character.

The two solutions suggested in the SO question are:

{code:java}
// Add the '^' on its own
CharSet.getInstance(""^"", ""otherlettershere"");

// Add the '^' as the last character
CharSet.getInstance(""otherlettershere^"")
{code}

If those are the best options, we should add a line to the Javadoc to indicate this. If there is a better way, clearly that should be documented instead.",,,,,,,,,,,,,,,,,,,,,,,,,,30/Dec/14 19:27;anoordover;CharSet-1069.patch;https://issues.apache.org/jira/secure/attachment/12689548/CharSet-1069.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-12-30 19:27:13.715,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 11 06:09:55 UTC 2015,,,,,,0|i22rf3:,9223372036854775807,,,,,,,,"30/Dec/14 19:27;anoordover;Tried to explain corner-case usage of negating character and added unittest.
* CharSet.getInstance(""^^a-d"")
* CharSet.getInstance(""a-d^"")","20/Feb/15 12:50;dmjones500;Can you explain why you think {{CharSet.getInstance(""^^a-d"")}} is a corner case? You've explicitly listed it in the documentation as an example, but I don't understand why it requires special attention.",20/Feb/15 16:31;anoordover;I tried to show with this example that parsing is executed from left to right. So the set containing a ^ is negated. The second ^ could also negate the set containing a-d and then interpreting the first ^ in some undefined way.,"11/Apr/15 06:09;dmjones500;Thanks for the patch. I edited it a little and have now committed it:

Author: djones
Date: Sat Apr 11 06:02:34 2015
New Revision: 1672833

URL: http://svn.apache.org/r1672833
Log:
Update for LANG-1069: CharSet.getInstance documentation does not clearly explain how to include negation character in set. Javadoc expanded and unit tests added to match examples. Based on patch by Arno Noordover.

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/CharSet.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/CharSetTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,
SystemUtils.isJavaVersionAtLeast throws NPE under Java 9 EA,LANG-1068,12756530,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,pmouawad,pmouawad,19/Nov/14 20:39,30/Nov/14 18:40,07/Apr/19 20:37,30/Nov/14 18:40,3.3.2,,,,,,lang.*,,,0,,,,,,,,"Hello,
Testing JMeter under Java 9 EA, it fails with NPE in SystemUtils.isJavaVersionAtLeast  due to handling of Java 9 not yet being supported.

Thanks",,,,,,,,,,,,,,LANG-1027,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-30 18:40:20.322,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Nov 30 18:40:20 UTC 2014,,,,,,0|i22ku7:,9223372036854775807,,,,,,,,"19/Nov/14 20:46;pmouawad;Looking into trunk code, it seems issue is fixed.
So it is a duplicate of some bug.",30/Nov/14 18:40;britter;The issue is LANG-1027,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.abbreviate description doesn't agree with the examples,LANG-1064,12755348,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,dmjones500,bjherbison,bjherbison,14/Nov/14 12:06,06/Apr/15 17:28,07/Apr/19 20:37,14/Nov/14 12:51,,,,,3.4,,,,,0,,,,,,,,"https://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/StringUtils.html#abbreviate%28java.lang.String,%20int%29
{quote}
If str is less than maxWidth characters long, return it.
Else abbreviate it to (substring(str, 0, max-3) + ""..."").
{quote}
{quote}
StringUtils.abbreviate(""abcdefg"", 7) = ""abcdefg""
{quote}
The first element of the description probably means ""less than or equal to""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-11-14 12:51:50.096,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Nov 14 12:51:50 UTC 2014,,,,,,0|i22dof:,9223372036854775807,,,,,,,,"14/Nov/14 12:51;dmjones500;I've updated the Javadoc to read

bq. If the number of characters in {{str}} is less than or equal to {{maxWidth}}, return {{str}}. 

Thanks for spotting this. 

{noformat}
Author: djones
Date: Fri Nov 14 12:49:15 2014
New Revision: 1639624

URL: http://svn.apache.org/r1639624
Log:
Javadoc fix for LANG-1064.

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser error - timezones not handled correctly,LANG-1061,12753092,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,dmeneses,dmeneses,05/Nov/14 16:59,06/Apr/15 17:28,07/Apr/19 20:37,01/Mar/15 18:03,3.3.2,,,,3.4,,lang.time.*,,,0,,,,,,,,"The following code throws an exception:
DateParser dp = FastDateFormat.getInstance(""z yyyy"", Locale.US);
dp.parse(""GMT+00:00 2010"");


The format works correctly with SimpleDateFormat.



Stack:
java.text.ParseException: Unparseable date: ""GMT+00:00 2010"" does not match (GMT[+\-]\d{0,1}\d{2}|[+\-]\d{2}:?\d{2}|\QAcre Time\E|\QACT\E|\QADT\E|\QAfghanistan Time\E|\QAFT\E|\QAKDT\E|\QAKST\E|\QAlaska Daylight Time\E|\QAlaska Standard Time\E|\QAlma-Ata Time\E|\QALMT\E|\QAmazon Summer Time\E|\QAmazon Time\E|\QAMST\E|\QAMT\E|\QAnadyr Time\E|\QANAT\E|\QAqtau Time\E|\QAqtobe Time\E|\QAQTT\E|\QArabia Standard Time\E|\QArgentine Time\E|\QArmenia Time\E|\QART\E|\QAST\E|\QAtlantic Daylight Time\E|\QAtlantic Standard Time\E|\QAzerbaijan Summer Time\E|\QAzerbaijan Time\E|\QAzores Summer Time\E|\QAzores Time\E|\QAZOST\E|\QAZOT\E|\QAZST\E|\QAZT\E|\QBangladesh Time\E|\QBDT\E|\QBhutan Time\E|\QBNT\E|\QBolivia Time\E|\QBOT\E|\QBrasilia Summer Time\E|\QBrasilia Time\E|\QBritish Summer Time\E|\QBRST\E|\QBRT\E|\QBrunei Time\E|\QBST\E|\QBTT\E|\QCape Verde Time\E|\QCAT\E|\QCCT\E|\QCDT\E|\QCentral African Time\E|\QCentral Daylight Time\E|\QCentral European Summer Time\E|\QCentral European Time\E|\QCentral Indonesia Time\E|\QCentral Standard Time\E|\QCentral Standard Time (Northern Territory)\E|\QCentral Standard Time (South Australia)\E|\QCentral Standard Time (South Australia/New South Wales)\E|\QCentral Summer Time (South Australia)\E|\QCentral Summer Time (South Australia/New South Wales)\E|\QCentral Western Standard Time (Australia)\E|\QCEST\E|\QCET\E|\QCHADT\E|\QChamorro Standard Time\E|\QCHAST\E|\QChatham Daylight Time\E|\QChatham Standard Time\E|\QChile Summer Time\E|\QChile Time\E|\QChina Standard Time\E|\QChoibalsan Time\E|\QCHOT\E|\QChristmas Island Time\E|\QChST\E|\QCHUT\E|\QChuuk Time\E|\QCKT\E|\QCLST\E|\QCLT\E|\QCocos Islands Time\E|\QColombia Time\E|\QCook Is. Time\E|\QCoordinated Universal Time\E|\QCOT\E|\QCST\E|\QCuba Daylight Time\E|\QCuba Standard Time\E|\QCVT\E|\QCWST\E|\QCXT\E|\QDavis Time\E|\QDAVT\E|\QDDUT\E|\QDumont-d'Urville Time\E|\QEASST\E|\QEAST\E|\QEast Indonesia Time\E|\QEaster Is. Summer Time\E|\QEaster Is. Time\E|\QEastern African Time\E|\QEastern Daylight Time\E|\QEastern European Summer Time\E|\QEastern European Time\E|\QEastern Greenland Summer Time\E|\QEastern Greenland Time\E|\QEastern Standard Time\E|\QEastern Standard Time (New South Wales)\E|\QEastern Standard Time (Queensland)\E|\QEastern Standard Time (Tasmania)\E|\QEastern Standard Time (Victoria)\E|\QEastern Summer Time (New South Wales)\E|\QEastern Summer Time (Tasmania)\E|\QEastern Summer Time (Victoria)\E|\QEAT\E|\QECT\E|\QEcuador Time\E|\QEDT\E|\QEEST\E|\QEET\E|\QEGST\E|\QEGT\E|\QEST\E|\QFalkland Is. Time\E|\QFernando de Noronha Time\E|\QFET\E|\QFiji Summer Time\E|\QFiji Time\E|\QFJST\E|\QFJT\E|\QFKT\E|\QFNT\E|\QFrench Guiana Time\E|\QFrench Southern & Antarctic Lands Time\E|\QFurther-eastern European Time\E|\QGalapagos Time\E|\QGALT\E|\QGambier Time\E|\QGAMT\E|\QGeorgia Time\E|\QGET\E|\QGFT\E|\QGhana Mean Time\E|\QGilbert Is. Time\E|\QGILT\E|\QGMT\E|\QGreenwich Mean Time\E|\QGST\E|\QGulf Standard Time\E|\QGuyana Time\E|\QGYT\E|\QHADT\E|\QHAST\E|\QHawaii Standard Time\E|\QHawaii-Aleutian Daylight Time\E|\QHawaii-Aleutian Standard Time\E|\QHKT\E|\QHong Kong Time\E|\QHovd Time\E|\QHOVT\E|\QHST\E|\QICT\E|\QIDT\E|\QIndia Standard Time\E|\QIndian Ocean Territory Time\E|\QIndochina Time\E|\QIOT\E|\QIran Daylight Time\E|\QIran Standard Time\E|\QIRDT\E|\QIrish Summer Time\E|\QIRKT\E|\QIrkutsk Time\E|\QIRST\E|\QIsrael Daylight Time\E|\QIsrael Standard Time\E|\QIST\E|\QJapan Standard Time\E|\QJST\E|\QKGT\E|\QKhandyga Time\E|\QKirgizstan Time\E|\QKorea Standard Time\E|\QKosrae Time\E|\QKOST\E|\QKrasnoyarsk Time\E|\QKRAT\E|\QKST\E|\QLHST\E|\QLine Is. Time\E|\QLINT\E|\QLord Howe Standard Time\E|\QLord Howe Summer Time\E|\QMacquarie Island Time\E|\QMagadan Time\E|\QMAGT\E|\QMalaysia Time\E|\QMaldives Time\E|\QMarquesas Time\E|\QMarshall Islands Time\E|\QMART\E|\QMauritius Time\E|\QMawson Time\E|\QMAWT\E|\QMDT\E|\QMeST\E|\QMET\E|\QMetlakatla Standard Time\E|\QMHT\E|\QMiddle Europe Summer Time\E|\QMiddle Europe Time\E|\QMIST\E|\QMMT\E|\QMoscow Standard Time\E|\QMountain Daylight Time\E|\QMountain Standard Time\E|\QMSK\E|\QMST\E|\QMUT\E|\QMVT\E|\QMyanmar Time\E|\QMYT\E|\QNauru Time\E|\QNCT\E|\QNDT\E|\QNepal Time\E|\QNew Caledonia Time\E|\QNew Zealand Daylight Time\E|\QNew Zealand Standard Time\E|\QNewfoundland Daylight Time\E|\QNewfoundland Standard Time\E|\QNFT\E|\QNiue Time\E|\QNorfolk Time\E|\QNovosibirsk Time\E|\QNOVT\E|\QNPT\E|\QNRT\E|\QNST\E|\QNUT\E|\QNZDT\E|\QNZST\E|\QOmsk Time\E|\QOMST\E|\QOral Time\E|\QORAT\E|\QPacific Daylight Time\E|\QPacific Standard Time\E|\QPakistan Time\E|\QPalau Time\E|\QPapua New Guinea Time\E|\QParaguay Summer Time\E|\QParaguay Time\E|\QPDT\E|\QPeru Time\E|\QPET\E|\QPetropavlovsk-Kamchatski Time\E|\QPETT\E|\QPGT\E|\QPhilippines Time\E|\QPhoenix Is. Time\E|\QPHOT\E|\QPHT\E|\QPierre & Miquelon Daylight Time\E|\QPierre & Miquelon Standard Time\E|\QPitcairn Standard Time\E|\QPKT\E|\QPMDT\E|\QPMST\E|\QPohnpei Time\E|\QPONT\E|\QPST\E|\QPWT\E|\QPYST\E|\QPYT\E|\QQYZT\E|\QQyzylorda Time\E|\QRET\E|\QReunion Time\E|\QRothera Time\E|\QROTT\E|\QSakhalin Time\E|\QSAKT\E|\QSamara Time\E|\QSamoa Standard Time\E|\QSAMT\E|\QSAST\E|\QSBT\E|\QSCT\E|\QSeychelles Time\E|\QSGT\E|\QSingapore Time\E|\QSolomon Is. Time\E|\QSouth Africa Standard Time\E|\QSouth Georgia Standard Time\E|\QSRT\E|\QSST\E|\QSuriname Time\E|\QSYOT\E|\QSyowa Time\E|\QTahiti Time\E|\QTAHT\E|\QTajikistan Time\E|\QTFT\E|\QTimor-Leste Time\E|\QTJT\E|\QTKT\E|\QTLT\E|\QTMT\E|\QTokelau Time\E|\QTonga Time\E|\QTOT\E|\QTurkmenistan Time\E|\QTuvalu Time\E|\QTVT\E|\QUlaanbaatar Time\E|\QULAT\E|\QUruguay Summer Time\E|\QUruguay Time\E|\QUst-Nera Time\E|\QUTC\E|\QUYST\E|\QUYT\E|\QUzbekistan Time\E|\QUZT\E|\QVanuatu Time\E|\QVenezuela Time\E|\QVET\E|\QVladivostok Time\E|\QVLAT\E|\QVolgograd Time\E|\QVOLT\E|\QVOST\E|\QVostok Time\E|\QVUT\E|\QWake Time\E|\QWAKT\E|\QWallis & Futuna Time\E|\QWAST\E|\QWAT\E|\QWEST\E|\QWest Indonesia Time\E|\QWest Samoa Daylight Time\E|\QWest Samoa Time\E|\QWestern African Summer Time\E|\QWestern African Time\E|\QWestern European Summer Time\E|\QWestern European Time\E|\QWestern Greenland Summer Time\E|\QWestern Greenland Time\E|\QWestern Standard Time (Australia)\E|\QWET\E|\QWFT\E|\QWGST\E|\QWGT\E|\QWIB\E|\QWIT\E|\QWITA\E|\QWSDT\E|\QWST\E|\QYAKT\E|\QYakutsk Time\E|\QYekaterinburg Time\E|\QYEKT\E)\Q \E(\p{Nd}++)
	at org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:289)
	at org.apache.commons.lang3.time.FastDateFormat.parse(FastDateFormat.java:487)

",,,,,,,,,,,,,,,,,,,,,,,,,,28/Feb/15 01:41;sturakhia;0001-https-issues.apache.org-jira-browse-LANG-1061-FastDa.patch;https://issues.apache.org/jira/secure/attachment/12701517/0001-https-issues.apache.org-jira-browse-LANG-1061-FastDa.patch,19/Dec/14 00:12;sturakhia;0001-https-issues.apache.org-jira-browse-LANG-1061-FastDa.patch;https://issues.apache.org/jira/secure/attachment/12688188/0001-https-issues.apache.org-jira-browse-LANG-1061-FastDa.patch,02/Jan/15 07:45;sturakhia;0002-https-issues.apache.org-jira-browse-LANG-1061-FastDa.patch;https://issues.apache.org/jira/secure/attachment/12689774/0002-https-issues.apache.org-jira-browse-LANG-1061-FastDa.patch,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2014-12-17 20:04:48.945,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Mar 01 18:03:14 UTC 2015,,,,,,0|i2208v:,9223372036854775807,,,,,,,,17/Dec/14 20:04;sturakhia;I would like to work on this issue. I was able to reproduce this issue on my machine. I am unable to assign it to myself though. ,19/Dec/14 00:12;sturakhia;I followed the instructions on this wiki  http://www.apache.org/dev/git.html and uploaded the patch. Please let me know if there is anything else I need to do. I added the relevant test cases for the fix.,"19/Dec/14 01:08;sebb@apache.org;Thanks for the patch.
However, part of the patch looks wrong:

{code}
-            sb.append(""(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|"");
+            sb.append(""(GMT[+\\-]\\d{0,1}\\d{2}:?\\d{2}|[+\\-]\\d{2}?\\d{2}|"");
{code}

The second part of the match, i.e.

{code}
[+\\-]\\d{2}:?\\d{2}
{code}

has been changed to

{code}
[+\\-]\\d{2}?\\d{2}
{code}

This does not make sense to me - why was the colon dropped?","19/Dec/14 01:28;sturakhia;Thanks Sebb. The reason I remove it was to match the SimpleDateFormat where it supports ""+0000 2010"" for ""z yyyy""
and not support ""+00:00 2010"" for ""z yyyy"" (Simple date format throws an exception for this)

Do we want to support both the formats ?
","19/Dec/14 01:57;sebb@apache.org;Need to look at that further, but the RE still does not make sense.
If support for the colon is to be dropped, then the ? needs to be removed as well, and it would become:

{code}
[+\\-]\\d{4}
{code}

There's some other strangeness, but that was already present.

The RE

{code}
\\d{0,1}\\d{2}
{code}

could be simplified to

{code}
\\d{2,3}
{code}

but does it make sense to have 3 digits there?

And does it make sense to have 3 digits followed by optional colon then another two digits? i.e. a maximum of 5 digits?

","02/Jan/15 07:16;sturakhia;Thanks Sebb. 

Regarding the first comment, I will change it to 
{code} [+\\-]\\d{4} {code}

But instead of
{code}
 \\d{0,1}\\d{2}:?\\d{2} => \\d{2,3}:?\\d{2}
{code}

I think the change should be 

{code} \\d{0,1}\\d{2}:?\\d{2} => \\d{1,2}:?\\d{2} {code} 

As SimpleDateFormat also does not support the 3 digits before the colon.Please let me know what you think


","10/Jan/15 01:15;sturakhia;Hi [~sebb@apache.org],
       I uploaded the new patch as discussed. Please let me know what you think.

Thanks,
Shweta","26/Feb/15 21:34;sebb@apache.org;I don't understand the patches. The latest patch (0002) does not apply properly. The original patch has some spurious changes in it.

Is there a single patch which shows the proposed changes as they are now?",28/Feb/15 00:20;sturakhia;Let me  sync the repo and reapply my changes. I will send out another patch by EOD,"28/Feb/15 01:41;sturakhia;Hi [~sebb@apache.org],
        I synced my forked repository and created the patch again. Please let me know if this patch makes sense now. Else please let me know if I am doing it wrong.

Thanks,
Shweta","28/Feb/15 14:13;sebb@apache.org;The patch is a clearer now. Still has some spurious white space changes, but can ignore those.

It will take a bit of time to review this, but it's looking good so far.","01/Mar/15 16:34;sebb@apache.org;It looks like the TimeZone parsing has always been wrong for both General time zone zones and RFC 822 time zones.

The current code accepts ""-12:34"" and ""GMT-123"" (which are not accepted by SDF) and does not accept ""GMT-12:34"" or ""GMT-1:23"" which are both accepted by SDF.

I agree that the colon is not allowed in the RFC 822 time zone format, and is required in the General time zone format.","01/Mar/15 16:41;sebb@apache.org;The latest patch uses the following RE

{noformat}
sb.append(""(GMT[+\\-]\\d{0,1}\\d{2}:?\\d{2}|[+\\-]\\d{2}?\\d{2}|"");
{noformat}

This is wrong; it should be

{noformat}
sb.append(""(GMT[+\\-]\\d{1,2}:?\\d{2}|[+\\-]\\d{4}|"");
{noformat}

This was discussed previously, and is included in the 0002-patch dated 02/Jan/15.
It looks like the 0001-patch dated 28/Feb is not complete; it seems 0002 is needed as well.

However rather than go through the process yet again, I will make changes based on the previous discussion and the Javadoc for SimpleDateFormat.","01/Mar/15 18:03;sebb@apache.org;URL: http://svn.apache.org/r1663140
Log:
LANG-1061 FastDateParser error - timezones not handled correctly

Added:
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java
Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
",,,,,,,,,,,,,,,,,
NumberUtils.isNumber assumes number starting with Zero is octal,LANG-1060,12753064,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,haugenjames,haugenjames,05/Nov/14 15:22,21/Aug/18 13:08,07/Apr/19 20:37,11/Feb/18 11:10,3.3.2,,,,3.8,,lang.math.*,,,1,,,,,,,,"The isNumber method assumes, that if the String being passed in doesn't have an 'X' at the second char it is an octal number.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2016-09-11 20:46:36.667,,,false,,,,,,,,,,,,,,9223372036854775807,,,Tue Aug 21 13:08:54 UTC 2018,,,,,,0|i2202v:,9223372036854775807,,,,,,,,"05/Nov/14 15:24;haugenjames;In the financial industry, there are many instances of numbers that have multiple leading zeros, i.e. account ids and ssns","11/Sep/16 20:46;chtompki;Currently
{code}
NumberUtils.isCreatable(""002.345"");
{code}
Returns {{false}}. I'm not entirely certain how we want to fix this. I've been working in this area, so I'll bring it up on the dev mailing list to see what people think.","10/Feb/18 14:21;githubbot;GitHub user piotrkosyoo opened a pull request:

    https://github.com/apache/commons-lang/pull/313

    LANG-1060: NumberUtils.isNumber assumes number starting with Zero

    NumberUtils.isCreatable(""002.345""); return false


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/piotrkosOpen/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/313.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #313
    
----
commit 6001ce20ac49522cfd6f066b8a8bd29aab74abfb
Author: Piotr Kosmala <piotr.kosmala@...>
Date:   2018-02-10T14:19:36Z

    LANG-1060: NumberUtils.isNumber assumes number starting with Zero is
    octal

----
","11/Feb/18 11:09;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/313
","11/Feb/18 11:09;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/313
  
    Thanks! 👍 
","11/Feb/18 11:22;githubbot;Github user piotrkosyoo commented on the issue:

    https://github.com/apache/commons-lang/pull/313
  
    No problem Sir,
    Calling Number.to Float also works correctly, and I skip this point.  but maybe
     better is add the tests for this case?
","11/Feb/18 11:25;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/313
  
    A pull request with tests for the `float` case would be welcome. 
","11/Feb/18 12:00;githubbot;Github user piotrkosyoo commented on the issue:

    https://github.com/apache/commons-lang/pull/313
  
    ok in this same issue number ?
","11/Feb/18 12:33;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/313
  
    Sure, that is fine!
","11/Feb/18 13:40;githubbot;GitHub user piotrkosyoo opened a pull request:

    https://github.com/apache/commons-lang/pull/314

    LANG-1060 NumberUtils.isNumber assumes number starting with Zero is octal

    Add test case

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/piotrkosOpen/commons-lang master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/314.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #314
    
----
commit 6001ce20ac49522cfd6f066b8a8bd29aab74abfb
Author: Piotr Kosmala <piotr.kosmala@...>
Date:   2018-02-10T14:19:36Z

    LANG-1060: NumberUtils.isNumber assumes number starting with Zero is
    octal

commit 2626c00e8be29343324c755b0c4a8a56cb7dc71d
Author: Piotr Kosmala <piotr.kosmala@...>
Date:   2018-02-11T13:32:13Z

    LANG-1060: NumberUtils.isNumber assumes number starting with Zero is
    octal
    Update tests

----
","11/Feb/18 13:58;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/314
","11/Feb/18 13:59;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/314
  
    Thanks! 👍 
",21/Aug/18 13:08;chtompki;3.8 Released.,,,,,,,,,,,,,,,,,,
StringEscapeUtils.unescapeHtml4 java.lang.IllegalArgumentException,LANG-1056,12750359,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,dmjones500,Vaxx,Vaxx,24/Oct/14 14:26,12/Dec/16 15:01,07/Apr/19 20:37,12/Dec/16 15:01,3.3.2,,,,,,lang.*,,,0,,,,,,,,"When I try to unescape 

{code:java}
String test = ""test &#39511154;"";
StringEscapeUtils.unescapeHtml4(test);
{code}

I got :

{noformat}
java.lang.IllegalArgumentException
	at java.lang.Character.toChars(Character.java:4982)
	at org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(NumericEntityUnescaper.java:128)
	at org.apache.commons.lang3.text.translate.AggregateTranslator.translate(AggregateTranslator.java:52)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:85)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:59)
	at org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4(StringEscapeUtils.java:627)
	at unescapeHtml4Test.Main.main(Main.java:10)
{noformat}

It is a bug or not? Method should return ""test &#39511154"" without exception or not?.",Ubuntu 64,,,,,,,,,,,,,TEXT-44,,LANG-1042,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-24 14:54:23.836,,,false,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 12 15:01:42 UTC 2016,,,,,,0|i21jnz:,9223372036854775807,,,,,,,,"24/Oct/14 14:54;dmjones500;The Javadocs are not overly clear on this subject:

bq. If an entity is unrecognized, it is left alone, and inserted verbatim into the result string. e.g. ""&amp;gt;&amp;zzzz;x"" will become "">&amp;zzzz;x"".

The tricky word here is ""unrecognized"". I think {{&#39511154;}} is recognised as an escaped Unicode character, but it fails during conversion. That's probably a different scenario to not _recognising_ an invalid entity like {{&zzz;}}.

I would suggest the docs are vague enough to support action in either direction. We either declare this is a bug and fix it or we decide it's good behaviour, but update the Javadocs to make it clearer this will happen.

I welcome comments from others. I think the original intention here was for no exceptions to be thrown, so I'd be in favour of calling this a bug.",10/Nov/16 22:09;dominik.stadler@gmx.at;This issue is actually very similar to LANG-1022...,"12/Dec/16 15:01;dmjones500;I agree, seems an exact duplicate. I'm closing it as such.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrSubstitutor.replaceSystemProperties does not work consistently,LANG-1055,12749765,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,philci52,philci52,22/Oct/14 12:59,06/Apr/15 17:28,07/Apr/19 20:37,23/Jan/15 08:11,3.3.2,,,,3.4,,lang.text.*,,,0,,,,,,,,"StrSubsitutor caches a references to SystemProperties statically on first class references.  This does not work properly with System.setProperties().  For example the following code:
{code}
package test.utilities;

import java.util.Properties;

import org.apache.commons.lang.text.StrSubstitutor;

public class TestStrSubstitutor {

    public static void main(String[] args) {
        System.out.println(StrSubstitutor.replaceSystemProperties(""os.name=${os.name}""));
        Properties testProps = new Properties();
        testProps.put(""test_key"",  ""test_value"");
        testProps.putAll(System.getProperties());
        System.setProperties(testProps);
        System.out.println(StrSubstitutor.replace(""test_key=${test_key}"", System.getProperties()));
        System.out.println(StrSubstitutor.replaceSystemProperties(""test_key=${test_key}""));
    }

}
{code}
produces the following output:
{code}
os.name=Windows 7
test_key=test_value
test_key=${test_key}
{code}

The code linked here shows the static caching of the System Properties reference: http://commons.apache.org/proper/commons-lang/apidocs/src-html/org/apache/commons/lang3/text/StrLookup.html
","Windows 7, Java 7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2015-01-21 18:55:06.431,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 23 08:11:43 UTC 2015,,,,,,0|i21g2n:,9223372036854775807,,,,,,,,"21/Jan/15 18:55;githubbot;GitHub user j--baker opened a pull request:

    https://github.com/apache/commons-lang/pull/43

    LANG-1055: StrLookup.systemPropertiesLookup() not singleton.

    - Assuming StrLookup.systemPropertiesLookup() should not be a singleton.
    - Assuming each lookup should have its own snap-shot of the system properties.
    
    Please review the proposed changes.
    Thank you!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/j--baker/commons-lang LANG-1055

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/43.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #43
    
----
commit f4d574872bdd488032b296faece7921737518c3a
Author: j--baker <j--baker@users.noreply.github.com>
Date:   2015-01-21T18:45:11Z

    LANG-1055: Change StrLookup.systemPropertiesLookup() to return a new instance with its own copy of the current system properties.

----
","21/Jan/15 18:56;jbaker;Not sure if this is correct, or if it addresses Phil's concerns, but the following is an implementation that 1) does not use a singleton, and 2) allows each instance to have their own snap-shop of the system properties:

https://github.com/apache/commons-lang/pull/43

Thanks in advance for your time.",22/Jan/15 07:42;britter;Setting this to review patch. I'll try to have a look soon.,"23/Jan/15 08:11;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/43
","23/Jan/15 08:11;britter;{code}
$ svn ci -m ""LANG-1055: StrSubstitutor.replaceSystemProperties does not work consistently. This fixes #43 from github. Thanks to Jonathan Baker."" src/main/java/org/apache/commons/lang3/text/StrLookup.java src/test/java/org/apache/commons/lang3/text/StrLookupTest.java
Sending        src/main/java/org/apache/commons/lang3/text/StrLookup.java
Sending        src/test/java/org/apache/commons/lang3/text/StrLookupTest.java
Transmitting file data ..
Committed revision 1654134.
{code}

Thanks!",,,,,,,,,,,,,,,,,,,,,,,,,,
SerializationUtils.deserialize() can not be used within OSGi,LANG-1049,12748032,Bug,Reopened,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,marcus.klein,marcus.klein,14/Oct/14 13:32,22/Oct/16 13:51,07/Apr/19 20:37,,2.6,,,,,,lang.*,,,1,,,,,,,,"SerializationUtils.deserialize() throws a SerializationException if objects should be deserialized that can not be resolved by OSGi classloader of org.apache.commons.lang bundle.

To solve this problem I suggest to allow buddy classloading within commons.lang to allow other bundles to register their class loaders.

Please add
Eclipse-BuddyPolicy: registered
to the MANIFEST.MF of commons.lang to solve this problem.",Equinox,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-14 23:34:26.552,,,false,,,,,,,,,,,,,,9223372036854775807,,,Fri Oct 30 08:21:49 UTC 2015,,,,,,0|i215kf:,9223372036854775807,,,,,,,,"14/Oct/14 23:34;joehni;It does not make sense to add Eclipse-specific entries to the manifest, sorry.

However, we actually should provide a deserialize method that take an additional ClassLoader argument which is used in a custom ObjectInputStream that overwrites resolveClass:
[http://docs.oracle.com/javase/7/docs/api/java/io/ObjectInputStream.html#resolveClass(java.io.ObjectStreamClass)]",15/Oct/14 07:43;marcus.klein;I was not aware of these new methods for object deserialization. But I agree to use these methods instead of Eclipse-specific extensions.,"20/Feb/15 13:03;dmjones500;[~marcus.klein]: do you think this issue should become a feature request, asking for what Joerg describes? Or are you happy that we close this, because you have found an alternative option?","20/Feb/15 13:41;marcus.klein;My alternative option is currently NOT to use SerializationUtils.deserialize(). In my eyes this is not an alternative option.

Please add as feature request, what Joerg describes. But I personally don't see this as a feature request. The purpose of org.apache.commons.lang is to provide utilities for easier Java coding. Furthermore org.apache.commons.lang is exposed as being compatible with OSGi. But as described here, the utility is not usable in OSGi because of framework/classloader restrictions. If org.apache.commons.lang would not be exposed as OSGi compatible, this would be a feature request, of course. In this case it is a bug.","20/Feb/15 13:52;dmjones500;Understood. I propose we leave this as it is then, since the comment thread explains the direction we wish to go.

Patches welcome for {{SerializationUtils.deserialize()}}.",29/Oct/15 22:48;chris@die-schneider.net;I found the class org.apache.commons.io.input.ClassLoaderObjectInputStream in commons-io. Using this class it should be easy to implement this. To not create a new dependency we could copy the code over? WDYT?,30/Oct/15 07:47;marcus.klein;I don't remember where we needed this. Closing for now.,30/Oct/15 07:51;chris@die-schneider.net;Strange timing to close the issue as soon as I propose a fix. Should I open a new issue?,"30/Oct/15 08:11;marcus.klein;First you told me, that you don't want to implement this. Then you ignored this issue for a whole year. Are you sure, that somebody can wait in this agile world to get something solved for a whole year?

We solved the problem in October 2014 by using plain Java:

byte[] bytes = reader.readByteArray();
bais = new ByteArrayInputStream(bytes);
ois = new ObjectInputStream(bais);
Object object = ois.readObject();

This even works in OSGi, because the ClassLoader of the ObjectInputStream is aware of the classes to deserialize because we use for that bundle buddy class loading. Replacing this four lines with SerializationUtils.deserialize() is no convenience any more when class loading kludge is needed. Sorry.",30/Oct/15 08:17;chris@die-schneider.net;I can imagine your frustration. I am no committer on commons-lang though. I will open a new issue and see if it gets some attention.,30/Oct/15 08:20;joehni;Just because you found an Eclipse-specific solution does not mean that the issue is solved.,30/Oct/15 08:21;joehni;Don't. This is the correct issue.,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeHtml() does not escape single quote,LANG-1042,12746574,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Duplicate,,rsussland,rsussland,08/Oct/14 01:00,01/Mar/17 14:48,07/Apr/19 20:37,06/Nov/16 15:48,,,,,,,lang.*,,,0,,,,,,,,"The String Escape Utils should ensure that encoded data cannot escape from a string. However in HTML (starting with 1.0 and until the present), attribute values may be denoted by either single or double quotes. Therefore single quotes need to be escaped just as much as double quotes. 

From the standard: http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.2.2

{quote}
By default, SGML requires that all attribute values be delimited using either double quotation marks (ASCII decimal 34) or single quotation marks (ASCII decimal 39). Single quote marks can be included within the attribute value when the value is delimited by double quote marks, and vice versa. Authors may also use numeric character references to represent double quotes (&amp;#34\;) and single quotes (&amp;#39\;). For double quotes authors can also use the character entity reference &amp;quot;.
{quote}

Note that there have been several bugs in the wild in which string encoders use this library under the hood, and as a result fail to properly escape html attributes in which user input is stored:

<div title='<%=user_data%>'>Howdy</div>
if user_data = ' onclick='payload' ' 

then an attacker can inject their code into the page even if the developer is using the string escape utils to escape the user string.",,,,,,,,,,,,,,TEXT-43,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-10-08 02:25:37.236,,,false,,,,,,,,,,,,,,9223372036854775807,,,Wed Mar 01 14:48:06 UTC 2017,,,,,,0|i20wtj:,9223372036854775807,,,,,,,,"08/Oct/14 02:25;kinow;Hello Robert, 

I tried the following code

{code:title=Sample.java|borderStyle=solid}
public class Sample {

	public static void main(String[] args) {
		String s = StringEscapeUtils.escapeHtml3(""<div title='<%=user_data%>'>Howdy</div>"");
		System.out.println(s);
	}
	
}
{code}

And it resulted in:

{code}&lt;div title='&lt;%=user_data%&gt;'&gt;Howdy&lt;/div&gt;{code}

Using the escapeHtml4 method code gives similar output 

{code}&lt;div title='&lt;%=user_data%&gt;'&gt;Howdy&lt;/div&gt;{code}

I didn't understand how to reproduce the issue, could you elaborate more or provide a test case? ","08/Oct/14 02:33;rsussland;Sorry for not being clear. Generally the escaping is done on user data that is quoted in the template -- you wouldn't escape the entire template. A simple example, without a template, would be

{code:title=Bar.java|borderStyle=solid}
public class Sample {

  public static void main(String[] args) {
   
    String taint = ""\' onclick=\'payload\' "";

    //now we should be able to safely assign to an html attribute
    String escaped = StringEscapeUtils.escapeHtml3(taint);

    String generatedHtml = ""<div title=\' "" + escaped + ""\'>Howdy</div>"";
    System.out.println(generatedHtml); //'<div title=' ' onclick='alert(1)' ''>Howdy</div> is unsafe for html rendering
  }
}
{code}
","08/Oct/14 12:34;dmjones500;It's not really clear from the Javadocs what these methods are supposed to achieve. Clearly you were expecting the methods to render safe any user input that might be directly injected into other pieces of HTML. Looking at the code, it seems they only replace named entities (for XML this includes escaping {{'}} to {{&amp;apos;}}). At the very least, we should improve the Javadocs to make it clearer what is being escaped. 

If our goal is to sanitise user input, then we should consider whether escaping single quotes is the only change to make. Any such change would break compatibility with earlier versions, so I'm not sure we could address this before 4.0 (unless we are convinced it's a bug, which is hard to prove since the docs are so vague).

","08/Oct/14 20:19;rsussland;I was not expecting this data to be safe for arbitrary injection into html. String escaping has a well-defined meaning -- the output of this function should not be able break out of a string data context, because all characters that could be interpreted by the html parser as closing out the string data context are escaped.

This is exactly the string escaping behavior of other methods in this package, and what is commonly known as string escaping. 

c.f. https://tomcat.apache.org/taglibs/standard/apidocs/org/apache/taglibs/standard/util/EscapeXML.html

In terms of which characters need to be escaped, HTML as well as XML only allow string data in two places: attribute values and text nodes. Control characters that denote start/end of attribute values and text nodes are well-defined and finite: single/double quote for attribute values and brackets <, >.  This assumes that the template as a whole is valid html. 

Additionally, the escaping symbol should also be escaped so that the method is a bijection and an unescaping method is possible. 

Finally, there is little value to a method that performs only html entity encoding -- unless you are building an html entity encoding demonstration method. The list of html entities was selected as a convenience so that html developers would not need to memorize ascii/unicode values for commonly used symbols such as e-accent, the less than sign, or the euro sign. The list of html entities is not the list of html control characters and is not relevant for an html string escaping method.","09/Oct/14 12:07;dmjones500;bq. String escaping has a well-defined meaning – the output of this function should not be able break out of a string data context, because all characters that could be interpreted by the html parser as closing out the string data context are escaped.

I don't think there's anything in the documentation that suggests the escaped data will be safe in a string data context. In fact, not describing the context is one of the many flaws in the current docs.

Because the current documentation is so woefully inadequate, I don't think we can't change any behaviour here under the rationale of ""it's a bug"". Therefore, I see we have two things to do:

 - Have a good think about the current functionality, then document it better so that people truly understand what it does and in which contexts it is useful (if any).

 - Decide if we should offer other escape methods that work in a wider range of contexts (including attribute values). If our goal with these methods is to prevent XSS attacks (amongst other things), then this should be stated clearly in any resulting method documentation.

I don't entirely understand why these escaping methods are in Lang anyway, so I'm not in favour of extending them further. But that's just my 2c. I'm certainly in favour of extending the current Javadoc to ensure future users don't mistake what these methods are doing.","09/Oct/14 12:28;sebb@apache.org;Note that the escaping that needs to be done depends on the context of the string, i.e. where it is going to be used.
Also if a string is already partially escaped, it's very difficult to avoid accidentally escaping parts again.
","14/Oct/14 16:59;rsussland;Is there any chance we could deprecate this method? Regardless of what the original author was intending, they have now permeated the open source eco-system:

a github search shows 25K hits for StringEscapeUtils.escapeHtml. Looking at the results, users are expecting html string escaping in both attribute values and html nodes, with over 14K hits in JSPs where they are manually using this function to perform security encoding.

https://github.com/search?utf8=%E2%9C%93&q=StringEscapeUtils.escapeHtml&type=Code&ref=searchresults

What is saving the majority of these users is the (Java) convention that html attributes be double rather than single quoted. However, in Rails, attributes are single quoted by convention, and in JS-land you see a mix. I.e. we cannot rely on users being accidentally safe when using this function.

This function is also used to encode attribute values in Apache Struts. Spring MVC is not importing the package but effectively copied the code in HtmlUtils.java. 

Then Grails copied Spring's encoder (c.f. package org.grails.encoder.impl) which was also picked up by Wicket (wicket-util/src/main/java/org/apache/wicket/util/string/Entities.java). 

Point being, you have the vast majority of Java MVC frameworks now improperly escaping html attributes and crucially relying on their double quote conventions for security. This is a concern when they take these same libraries re-use them.

Here is the Play project, which for the most part uses the StringEscapeUtils methods, except for HTML encoding.

{code}
/api/src/main/scala/play/twirl/api/Formats.scala

  def escape(text: String): Html = {
    // Using our own algorithm here because commons lang escaping wasn't designed for protecting against XSS, and there
    // don't seem to be any other good generic escaping tools out there.
    val sb = new StringBuilder(text.length)
    text.foreach {
      case '<' => sb.append(""&lt;"")
      case '>' => sb.append(""&gt;"")
      case '""' => sb.append(""&quot;"")
      case '\'' => sb.append(""&#x27;"")
      case '&' => sb.append(""&amp;"")
      case c => sb += c
    }
    new Html(sb.toString)
  }
{code}

It would be nice if, instead of each developer needing to roll their own escaping library, they could rely on a common string escaping library. The StringEscapeUtils does this except for the html method -- what about deprecating this method and introducing a new one -- secureHtmlEscape --  that escapes <, >, ', "", and &?

I understand that encoding is context sensitive. Generally you need to perform a sequence of encodings to match the sequence of browser parsings, but the sequence is built from HTML, JS, CSS, and URI encoding operations, so there is a need for a common definition of these. Then frameworks and toolkits can perform the proper contextual encoding using these functions.
","25/Oct/14 02:49;kinow;> Duncan: Have a good think about the current functionality, then document it better so that people truly understand what it does and in which contexts it is useful (if any).

+1 

> Robert: what about deprecating this method and introducing a new one – secureHtmlEscape – that escapes <, >, ', "", and &?

+0

I think adding a secureHtmlEscape method could fix this issue, but I'm not sure if that wouldn't mean that we could have further variations or methods for XML, HTML or other formats.",25/Oct/14 02:58;kinow;LANG-1056 is related here to the vagueness of the Javadocs in the HTML escape methods.,01/Mar/17 14:48;garethdanielsmith;Note that Spring's HtmlUtils no longer seems to have this problem.,,,,,,,,,,,,,,,,,,,,,
Fix MethodUtilsTest so it does not depend on JDK method ordering,LANG-1041,12745237,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,dmjones500,dmjones500,01/Oct/14 12:20,28/May/16 16:41,07/Apr/19 20:37,02/Oct/14 10:13,3.3.2,,,,3.4,,lang.reflect.*,,,0,,,,,,,,Placeholder for https://github.com/apache/commons-lang/pull/30.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,9223372036854775807,,,2014-10-01 12:20:24.0,,,,,,0|i20olj:,9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc for NumberUtils.isNumber() are not clear enough,LANG-1040,12743786,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chtompki,dmjones500,dmjones500,24/Sep/14 14:01,19/Oct/16 07:00,07/Apr/19 20:37,11/Sep/16 20:38,3.3.2,,,,3.5,,lang.math.*,,,0,,,,,,,,"The Javadocs for {{NumberUtils.isNumber()}} do not clearly define what a valid number is. The current trunk documentation states:

{quote}Checks whether the String a valid Java number.

Valid numbers include hexadecimal marked with the 0x or 0X qualifier, octal numbers, scientific notation and numbers marked with a type qualifier (e.g. 123L).

Non-hexadecimal strings beginning with a leading zero are treated as octal values. Thus the string 09 will return false, since 9 is not a valid octal value. However, numbers beginning with 0. are treated as decimal.

Null and empty String will return false.{quote}

In other Jira issues, I've seen people suggest that a number if valid if it can be used when assigning to a suitable Java type. E.g. {{""FOO""}} is a valid number if {{long x = FOO}} is valid (where {{long}} might be another numeric type). If this is the case, we should state it.

Alternatively, the definition could be in terms of what is accepted by {{createNumber()}}.

Or we define exactly what we accept by specifying a grammar in the Javadocs.

",,,,,,,,,,,LANG-1038,,,,,LANG-1252,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-12 23:48:06.84,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 11 20:38:14 UTC 2016,,,,,,0|i20ft3:,9223372036854775807,,,,,,,,"12/Dec/14 23:48;sebb@apache.org;I think ""Java number"" probably means a number that is valid as a Java numeric literal.

If this is the case, then it is trivial to determine whether a particular sequence of characters should pass the isNumber() test.
i.e. see if the Java compiler accepts it as a long/double/etc. initialiser.","17/Dec/14 07:54;dmjones500;If that's the expected behaviour, can you suggest a use for the method?

","01/May/15 09:39;kinow;> Or we define exactly what we accept by specifying a grammar in the Javadocs.

I think that's probably the best scenario for users.

I tried using the following code found in [this StackOverflow answer|http://stackoverflow.com/questions/1102891/how-to-check-if-a-string-is-a-numeric-type-in-java] to replace isNumber, and then executed the NumberUtilsTest#testIsNumber test method:

{noformat}
        try {
            Double.parseDouble(str);
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
{noformat}

And the test failed with:

{noformat}
java.lang.AssertionError: Expecting true for isNumber/createNumber using ""-0xABC123"" but got false and true
{noformat}

Using the Regex version:

{noformat}
        return str.matches(""-?\\d+(\\.\\d+)?"");
{noformat}

Results in:

{noformat}
java.lang.AssertionError: Expecting true for isNumber/createNumber using "".12345"" but got false and true
{noformat}

And the final example:

{noformat}
        NumberFormat formatter = NumberFormat.getInstance();
        ParsePosition pos = new ParsePosition(0);
        formatter.parse(str, pos);
        return str.length() == pos.getIndex();
{noformat}

Gives:

{noformat}
java.lang.AssertionError: Expecting true for isNumber/createNumber using ""1234E+5"" but got false and true
{noformat}

Maybe we can fix this issue by enhancing the docs with a grammar and some examples of what the method can and cannot handle?","28/Jul/16 11:05;chtompki;There seems to be clear inconsistency between {{NumberUtils.createNumber(final String val)}} and {{NumberUtils.isNumber(final String str)}}. I agree here that the javadoc should be clarified as to what {{isNumber}} should return, but either way it feels like there should be consistency.  Sebb, do you have any thoughts here? 

Specifically I was looking at LANG-1038 which seems to point out such inconsistencies, specifically if you add

{code:java}
compareIsNumberWithCreateNumber(""+2"",false);
{code}

in {{NumberUtilsTest.testIsNumber()}}.

Regardless, I would like to try to fix this up, so I'll try to clarify while adhering as closely as possible to the java standards here.","28/Jul/16 11:20;chtompki;Knowing that there are inconsistencies between {{isNumber}} and {{createNumber}}, in which direction should we remediate those inconsistencies: making {{createNumber}} more restrictive as to be inline with java standards or making {{isNumber}} less restrictive?",11/Sep/16 20:38;chtompki;https://github.com/apache/commons-lang/pull/186 fixes this.,,,,,,,,,,,,,,,,,,,,,,,,,
HashCodeBuilder.reflectionHashCode(Object object) returns always the same result for any array,LANG-1039,12743223,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,bpaszkow,bpaszkow,22/Sep/14 15:59,19/Oct/16 15:24,07/Apr/19 20:37,28/Sep/14 06:03,3.3.2,,,,,,lang.builder.*,,,0,,,,,,,,"HashCodeBuilder.reflectionHashCode(Object object) returns always the same result for any array. The result is 17.

There is no information in javadoc, that this method works in that way.
The same situation in previous versions.

*Example:*

{code}
public class HashCodeBuilderTest {
    
    public static void main(String[] args) {
        
        System.out.println(HashCodeBuilder.reflectionHashCode(new double[] {1, 1}));
        System.out.println(HashCodeBuilder.reflectionHashCode(new double[] {2, 2}));
        System.out.println(HashCodeBuilder.reflectionHashCode(new int[] {3, 3}));
        System.out.println(HashCodeBuilder.reflectionHashCode(new int[] {4, 4}));
        System.out.println(HashCodeBuilder.reflectionHashCode(new Long[] {5L, 5L}));
        System.out.println(HashCodeBuilder.reflectionHashCode(new Double[] {null, null}));
        System.out.println(HashCodeBuilder.reflectionHashCode(new Object[] {Boolean.FALSE, 1L, null}));
        
    }
}
{code}

*Output:*
{code}
17
17
17
17
17
17
17
{code}

*Fix example 1*

First check if argument obj in HashCodeBuilder.reflectionHashCode(Object obj) is an array and than use java.util.Arrays.hashCode(Object[] array)
","Windows 7, Java 6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-24 13:18:30.835,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sat Sep 27 18:56:18 UTC 2014,,,,,,0|i20cav:,9223372036854775807,,,,,,,,"24/Sep/14 13:18;dmjones500;This method works by examining the fields of an object and creating a cumulative hashcode based upon them. Given that an array has no fields, this behaviour seems correct to me (albeit a little counter-intuitive).

If those arrays had been contained within an object (the normal use case), your results would not be observed. Your results are identical to what you'd see if you simply called {{HashCodeBuilder.reflectionHashCode(new Object())}}.","25/Sep/14 09:14;halfdan;The Javadoc for method HashCodeBuilder.reflectionHashCode states:
{quote}""This method uses reflection to build a valid hash code.""{quote}
And a valid hashCode implementation indeed doesn't have to produce distinct values for different instances:
{quote}
As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language.)
{quote}

However in this particular implementation we can apply ""the principle of least astonishment"":
{quote}
If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature.
{quote}

One can be astonished seeing how this method returns the same value (namely 17) for every array, no matter how big or of what type.","25/Sep/14 10:22;dmjones500;The first line in the Javadoc for the {{HashCodeBuilder}} is:

bq. Assists in implementing {{Object.hashCode()}} methods.

In other words. the supported use case is generating a hash code for your own custom class. You either do this manually by appending fields to the hash code builder, or you use the reflective builder:

{code:java}
public int hashCode() {
  return HashCodeBuilder.reflectionHashCode(this);
}
{code}

There is no expectation that {{reflectionHashCode()}} will be passed a primitive array object. I see no reason to change this behaviour, given the documented intention of the class.","25/Sep/14 17:07;halfdan;{quote}
The first line in the Javadoc for the HashCodeBuilder is:
bq. Assists in implementing Object.hashCode() methods.
{quote}

and the second line in the Javadoc is:
bq. This class enables a good hashCode method to be built for any class.

This is the interface:
reflectionHashCode(Object object, String... excludeFields)
It promises, that it will work for any given Object.
It doesnt say, that it isn't for arrays.
Neither does Javadoc.

So I see two options:
1. To add statement like: ""Warning: This method provides constant result of 17 for any array.""
2. To refactor this method for consistency.

Living it the way it is is simply irresponsible.

","26/Sep/14 11:30;dmjones500;Could you describe your use case in more detail? As I've explained, our expectation is for this method to be used to help you override {{Object.hashCode()}} when creating your own class. Consequently, we were not expecting to be passed an array as an argument.

It would be helpful to understand how you are trying to use it, so we can better decide if this is a use case we want to support. If it is, we can look at altering the class behaviour. If it's not, then we can look to improve the Javadocs to avoid similar confusion in the future.","26/Sep/14 15:21;halfdan;There is no such use case. 
We've only found a bug in this method, that is all.
So we are telling you about it to be helpful and to improve your library.
If you say:
{quote}
Consequently, we were not expecting to be passed an array as an argument.
{quote}
than you must allways remember, that your code should be idiot-proof.
You cannot simply expect, that your code will be used according to your guides - you have to enforce this.

I'm sure you will come up with some good solution.
Good luck.","26/Sep/14 15:39;kgorecki;Then for consistency let's make all these methods: {code}HashCodeBuilder.append(boolean[])
HashCodeBuilder.append(char[])
HashCodeBuilder.append(byte[])
HashCodeBuilder.append(double[])
HashCodeBuilder.append(int[])
HashCodeBuilder.append(Object[])
HashCodeBuilder.append(long[])
HashCodeBuilder.append(short[])
HashCodeBuilder.append(float[]){code}
return 17 ;)","26/Sep/14 21:24;dmjones500;Since there isn't a new use case being discussed, I'm content that the class can remain as it is (functionally). To avoid any future confusion about how the method works, I've made some adjustments to the Javadoc to make it clear that a constant result is return if the supplied object has no fields to include in the hash code.

---

Author: djones
Date: Fri Sep 26 21:19:12 2014
New Revision: 1627889

URL: http://svn.apache.org/r1627889
Log:
Made it clear that the fields of the object form the hash code (LANG-1039).
Pulled magic values into constants.

Modified:
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
",27/Sep/14 18:51;bpaszkow;Thank you.,27/Sep/14 18:56;kgorecki;Thank you!,,,,,,,,,,,,,,,,,,,,,
"NumberUtils#isNumber() returns false for ""+2"" and true for ""-2""",LANG-1038,12742030,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chtompki,aplatypus,aplatypus,17/Sep/14 02:56,19/Oct/16 07:00,07/Apr/19 20:37,11/Sep/16 20:37,3.1,3.3.2,,,3.5,,lang.math.*,,,1,,,,,,,,"The strings {{""\+2""}} and {{""\+  2""}} give a ""False"" result when tested by {{isNumber()}}.

Case one, {{""\+2""}} is legal with {{Integer.parseInt()}}.  Case two: {{""\+  2""}} gives an exception with {{Integer.parseInt()}}.

I believe the function should match legitimate inputs for the respective parser function depending on the number type.

Workaround: Use something like:
{code:java}
NumberUtils.isNumber( wrkStr.replaceFirst( ""\\+"", """") )
{code}",,,,,,,,,,,,,,,,LANG-1252,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-24 13:54:35.021,,,false,,,,,,,,,,,,,,9223372036854775807,,,Sun Sep 11 20:37:29 UTC 2016,,,,,,0|i2050v:,9223372036854775807,,,,,,,,"24/Sep/14 13:54;dmjones500;The Javadocs for {{isNumber()}} state (from trunk):

bq. Valid numbers include hexadecimal marked with the {{0x}} or {{0X}} qualifier, octal numbers, scientific notation and numbers marked with a type qualifier (e.g. 123L).

There is nothing there that suggests a relationship to the equivalent parse function from {{Integer}} or any other class. Nor is there anything that suggests a leading {{+}} sign is supported.

Consequently, I'd suggest this is an Improvement, not a Bug. We should discuss whether a change in behaviour is welcome.","24/Sep/14 23:08;aplatypus;Documentation notwithstanding, there are two cogent pro points to keep in mind:

 1. In Java: int i = Integer.parseInt(""+2""), produces: int = 2
 2. In mathematics: +2 is a number.

Also, for consistency, if isNumber(""-1"") is true, a leading plus sign will be expected to be valid by end-users (not programmers).  A typical use case for isNumber() is to verify input from a device, file or user input -- I submit that isNumber ought support syntax recognised by parser functions such as, Integer.parseInt().

The point of discussion should be about user accessibility, serviceability & maintainability of client code and accepted arithmetic notation. ","25/Sep/14 14:43;juliusdavies;
I think the first line of the Javadoc makes the case that this is a bug:

""Checks whether the String a valid Java number.""","25/Sep/14 17:18;dmjones500;To me, that sentence doesn't mean anything. Hence raising LANG-1040. I think we need to resolve that issue before we can conclude if this is a bug or not. ","12/Dec/14 20:25;lihy70;I agree with what Duncan Jones said in LANG-1040.  whether it's a improvement or bug doesn't matter. The more important thing is to ""Always try to keep consistent"". it will make the APIs easily to understand/use. and make the future design decision not so difficult to make.

personally, i prefer to replace code with:
{code}
  try {
            return createNumber(str) !- null;
        } catch (NumberFormatException e) {
            return false;
        }
{code}
","12/Dec/14 22:15;b.eckenfels;If you ask me this method is broken beond repair. It was never clearly defined what is a number and therefore we have conflicting ideas. We seen that in the past with ranges, digits, signs, octal/hex prefix and so on.","28/Jul/16 11:00;chtompki;There seems to be clear inconsistency between {{NumberUtils.createNumber(final String val)}} and {{NumberUtils.isNumber(final String str)}}. I agree here that the javadoc should be clarified as to what {{isNumber}} should return, but either way there should be consistency.",11/Sep/16 20:37;chtompki;https://github.com/apache/commons-lang/pull/186 fixes this.,,,,,,,,,,,,,,,,,,,,,,,
Javadoc for EqualsBuilder.reflectionEquals() is unclear,LANG-1035,12732493,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,dmjones500,dmjones500,dmjones500,07/Aug/14 07:59,06/Apr/15 17:28,07/Apr/19 20:37,10/Sep/14 11:35,3.3.2,,,,3.4,,lang.builder.*,,,1,,,,,,,,"The Javadoc for {{EqualsBuilder.reflectionEquals()}} doesn't explain that {{.equals()}} is used to compare non-primitive fields in the class.

Consequently, readers may assume the method recursively builds {{.equals()}} for all fields. We should clarify this.

Related: LANG-1034",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,410521,,,Wed Sep 10 11:35:45 UTC 2014,,,,,,0|i1ymo7:,410515,,,,,,,,"10/Sep/14 11:35;dmjones500;Author: djones
Date: Wed Sep 10 11:32:53 2014
New Revision: 1623970

URL: http://svn.apache.org/r1623970
Log:
Fix for LANG-1035: Javadoc for EqualsBuilder.reflectionEquals() is unclear

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat static instance format differently compared to new instance when changing timezone,LANG-1029,12727344,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,chonton,sdiedrichsen,sdiedrichsen,15/Jul/14 14:21,19/Oct/16 15:24,07/Apr/19 20:37,22/Jul/14 16:38,3.3.2,,,,,,lang.time.*,,,0,,,,,,,,"Static FastDateFormat instances don't recognize default TimeZone changes and thus don't behave equal to newly created instances of FastDateFormat or SimpleDateFormat.

I can imagine people using FastDateFormat like this for performance optimization reasons.

{code:title=Test for difference}
    private static final String DATE_TIME_PATTERN = ""dd.MM.yyyy HH:mm:ss"";
    private static final FastDateFormat FDF = FastDateFormat.getInstance(DATE_TIME_PATTERN);

    public static void main(String[] args) {

        TimeZone gmtTimeZone = TimeZone.getTimeZone(""GMT"");

        Calendar date = Calendar.getInstance();
        date.setTimeZone(gmtTimeZone);
        date.set(2014, Calendar.JANUARY, 1, 0, 0 ,0);

        TimeZone backupTimeZone = TimeZone.getDefault();
        TimeZone.setDefault(gmtTimeZone);

        System.out.println(""FastDateFormat static:\t\t""+ FDF.format(date.getTime()));
        System.out.println(""FastDateFormat instance:\t"" + FastDateFormat.getInstance(DATE_TIME_PATTERN).format(date.getTime()));
        System.out.println(""SimpleDateFormat instance:\t"" + new SimpleDateFormat(DATE_TIME_PATTERN).format(date.getTime()));

        TimeZone.setDefault(backupTimeZone);

    }
{code}
{panel:title=Output}
FastDateFormat static:		01.01.2014 01:00:00
FastDateFormat instance:	01.01.2014 00:00:00
SimpleDateFormat instance:	01.01.2014 00:00:00
{panel}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-07-20 10:45:13.972,,,false,,,,,,,,,,,,,,405450,,,Tue Jul 22 16:38:07 UTC 2014,,,,,,0|i1xrvr:,405475,,,,,,,,20/Jul/14 10:45;britter;Why don't you provide your test as a junit test? ;-),"22/Jul/14 16:38;chonton;The timezone is an invariant of a FastDateFormat.  If changing the global timezone affected the behavior of an instance, the instance would have concurrency concerns.

If you want the current global timezone to be used on each invocation, use one of the FastDateFormat.getTimeInstance() factory methods which does not take a timezone parameter.  If the timezone has not been changed, you'll get a cached FastDateFormat instance; If the timezone has been changed, you'll get a new FastDateFormat that reflects the current global timezone. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLONE - StringUtils.countMatches loops forever if substring empty,LANG-1028,12727298,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,stagiaire,stagiaire,15/Jul/14 09:33,20/Jul/14 10:43,07/Apr/19 20:37,15/Jul/14 11:17,,,,,,,lang.*,,,0,,,,,,,,"If you do say StringUtils.countMatches(""x"", """"), then it goes into an infinite loop.

Also sub isn't checked for null if str is null also. For instance
StringUtils.countMatches(null, null) should throw an NPE instead of 0.

To fix both problems put the following code at the start of the method:

{code:java}
        if (sub.equals("""")) {
            return 0;
        }
{code}","Operating System: Linux
Platform: PC",,,,,,,,,,,LANG-56,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14883.0,,,,,,false,,,,,,,,,,,,,,405404,,,2014-07-15 09:33:33.0,,,,,,0|i1xrlr:,405429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils.createNumber(final String str)  Precision will be lost,LANG-1018,12716767,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,pascalschumacher,sydng,sydng,27/May/14 10:24,19/Oct/16 07:01,07/Apr/19 20:37,12/Jun/16 11:29,3.3.2,,,,3.5,,lang.math.*,,,0,,,,,,,,"With commons-lang 3.2.2:
NumberUtils.createNumber(""-160952.54"");
The result is ""-160952.55"".

Should not be based on the length of the decimal point number to judge whether the floating point number.
Using the method (createFloat(str)) of dealing with the valid number greater than seven Numbers will cause accuracy loss.
The source code is as follows:

{code:java}
try {
            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float
                final Float f = createFloat(str);
                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                    return f;
                }
            }
        } catch (final NumberFormatException nfe) { // NOPMD
            // ignore the bad number
        }
        try {
            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double
                final Double d = createDouble(str);
                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                    return d;
                }
            }
        } catch (final NumberFormatException nfe) { // NOPMD
            // ignore the bad number
        }

        return createBigDecimal(str);
    }
{code}",windows 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-12 12:07:01.662,,,false,,,,,,,,,,,,,,394975,,,Sun Jun 12 11:29:48 UTC 2016,,,,,,0|i1w073:,395110,,,,,,,,"12/Sep/14 12:07;dmjones500;Sorry, ignore the previous comments (now deleted). I misinterpreted your issue entirely.

I see your point now - if {{createDouble(str)}} had been used on your example string, the results would be more accurate. Clearly our logic for determining when to use the different data types may need improving.

If you have suggestions for a patch, please post one. Otherwise I'll do some research to see if things can be improved.

I've changed to ""Patch Needed"" since there is no patch here to review.","12/Sep/14 12:24;dmjones500;Closely related discussion found at LANG-693.

The problem is that [Java allocates 23-bits|http://stackoverflow.com/a/13543600/474189] for the [significand|http://en.wikipedia.org/wiki/Significand] in a float. This guarantees *6* decimal figures in the significand, not 7. The fix for LANG-693 checks for the wrong values.

I need to do some more investigation, but I see two solutions:

# Leave the simple test in place, but change to {{< 7}} and {{< 16}} for floats and doubles respectively. And change it to count the size of the significand, not just the decimal places.
# Change the approach and calculate the bit-length of the significand and switch types based on that. 

","15/Sep/14 07:56;dmjones500;After further research (and a [Stack Overflow question on the subject|http://stackoverflow.com/q/25831817/474189]), I've concluded that making decisions based on significand length is nigh-on impossible, not least because the significand length must be calculated when in binary form (not decimal).

The correct approach depends upon what we intend to achieve with this method. The Javadocs are not specific on this topic, but I presume we want to guarantee (where possible) the following test result:

{code:java}
assertEquals(inputString, NumberUtils.createNumber(inputString).toString());
{code}

If so, a simple approach is to convert to {{float}} and test the {{toString()}} representation. If this doesn't match, use {{double}}. Finally we use {{BigDecimal}} if neither matches. Does anyone have any thoughts on that approach?","15/Dec/14 00:13;lihy70;Personally, I prefer to use double for decimals by default, instead of float.","24/May/16 09:29;githubbot;GitHub user NickManley opened a pull request:

    https://github.com/apache/commons-lang/pull/156

    LANG-1018: Fix precision loss on NumberUtils.createNumber(String)

    **Warning: This patch will break backwards compatibility.**
    
    This patch is designed to fix the loss of precision when using NumberUtils.createNumber(String). However, the fix is not 100% backwards compatible with the currently released commons-lang 3.4. To fix the loss of precision, values that were previously returning Floats are now returning Doubles. Some explicit casts may break as a result.
    
    ```java
    // Works in 3.4, but causes ClassCastException in patch.
    Float f = (Float) NumberUtils.createNumber(""-160952.54"");
    System.out.println(f); // prints ""-160952.55""
    
    // Works with patch.
    Double d = (Double) NumberUtils.createNumber(""-160952.54"");
    System.out.println(d); // prints ""-160952.54""
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/NickManley/commons-lang LANG-1018

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/156.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #156
    
----
commit b77db22614da6f0c674b57cd0086048b58b30135
Author: Nick Manley <nickmanley89@outlook.com>
Date:   2016-05-24T09:10:29Z

    LANG-1018: Fix precision loss on NumberUtils.createNumber(String)

----
",06/Jun/16 16:25;pascalschumacher;@everybody: Any opinions on the pull request?,"06/Jun/16 16:54;sebb@apache.org;The calls to createDouble and createBigDecimal could be pushed down into the conditionals so they are only done if necessary.
Otherwise looks OK.

Also, I wonder about the allZeros checks - could the condition allZeros == true be dealt with earlier?
(not directly related to the patch)","06/Jun/16 17:32;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/156
  
    @NickManley Not sure if you checking jira, so I thought I let you know there is some feedback on your pull request there: https://issues.apache.org/jira/browse/LANG-1018?focusedCommentId=15316755&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15316755

",10/Jun/16 04:10;nmanley;[~sebb@apache.org] - I updated the commit. I was not able to move the call to createDouble into the conditional because it is used in both conditional checks. I was however able to move the createBigDecimal call down.,"10/Jun/16 04:18;githubbot;Github user coveralls commented on the issue:

    https://github.com/apache/commons-lang/pull/156
  
    
    [![Coverage Status](https://coveralls.io/builds/6540761/badge)](https://coveralls.io/builds/6540761)
    
    Coverage increased (+0.02%) to 93.466% when pulling **07354e2df2189ba5a99a17c0a1583fd96723f685 on NickManley:LANG-1018** into **f08c4f6ae9f8190bcaf0a8bbb82530233bf51bf9 on apache:master**.

","12/Jun/16 11:27;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/156
","12/Jun/16 11:28;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/156
  
    Thanks! :+1: 
","12/Jun/16 11:29;pascalschumacher;[~nmanley] Thanks for the pull request!

[~sebb@apache.org] Thanks for the review!",,,,,,,,,,,,,,,,,,
DurationFormatUtils#formatDurationHMS implementation does not correspond to Javadoc and vice versa,LANG-1004,12711585,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,michael-o,michael-o,30/Apr/14 21:11,06/Apr/15 17:28,07/Apr/19 20:37,04/Aug/14 12:24,3.3.2,,,,3.4,,lang.text.*,,,0,,,,,,,,"This method has several flaws:

1. Javadoc says: ""The format used is ISO8601-like: H:m:s.S."" but the method call supplies ""H:mm:ss.SSS""
2. ISO time never omits leading zeros, so the proper pattern must be ""HH:mm:ss.SSS""
3. The method name says: ""HMS"" but includes the second fraction.

Since the use of fractions is optional, the method should use ""HH:mm:ss"" and update the Javadoc as well.",,,,,,,,,,,,,,,,,,,,,,,,,,04/May/14 10:56;michael-o;LANG-1004.patch;https://issues.apache.org/jira/secure/attachment/12643261/LANG-1004.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-05-02 17:07:25.652,,,false,,,,,,,,,,,,,,389906,,,Mon Aug 04 12:24:59 UTC 2014,,,,,,0|i1v5sn:,390147,,,,,,,,02/May/14 13:12;michael-o;Benedikt. have a look at the patch.,"02/May/14 17:07;britter;Hi Michael,

nice patch! However I'm a bit afraid this change will break clients that are using the method as it is now. What do you think? The main use case is probably formatting for displaying a value (in the GUI or in some kind of log file). So it may not be a problem?

Benedikt

EDIT: how about providing a new method called {{formatDurationISOHMS}} which formats the way you propose?","02/May/14 22:21;michael-o;I guess you are right about the usecase but we *cannot* do assumptions about the client. So the impact should be minimal. In this case, we should stick to {{HH:mm:ss.SSS}} and improve the docs. However, we could spawn another ticket for Lang 4 to split method into two methods, one for {{HH:mm:ss}} and one {{formatDurationHMSwithFrac}} or something like this (maybe a boolean flag) which will use {{HH:mm:ss.SSS}}. Same applies for the ISO duration of course.

I wouldn't bloat the API with another method but I would rather add something like I did for [MNG-5176|https://jira.codehaus.org/browse/MNG-5176?focusedCommentId=340413&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-340413].",02/May/14 22:25;michael-o;Have a look at the new patch.,"04/May/14 09:29;britter;Hello Michael, 

After applying your patch I get two test failures:

{code}
Failed tests: 
  StopWatchTest.testStopWatchSimpleGet:55 expected:<0[]:00:00.000> but was:<0[0]:00:00.000>
  StopWatchTest.testStopWatchSplit:76 Formatted split string not the correct length expected:<12> but was:<11>
{code}

Those two test cases fail because StopWatch uses DurationFormatUtils internally. You will have to update the tests as well ;)

TIA!
Benedikt","04/May/14 10:56;michael-o;True, here is an all new patch.","04/May/14 15:41;britter;{code}
bene@localhost:~/workspace/apache/commons/lang$ svn ci -m ""LANG-1004: DurationFormatUtils#formatDurationHMS implementation does not correspond to Javadoc and vice versa. Thanks to Michael Osipov""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java
Sending        src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
Sending        src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
Transmitting file data ....
Committed revision 1592360.
{code}

Thanks for contributing!","04/May/14 18:27;michael-o;With pleasure, being a Commons Lang user for several years and an Apache Maven committer, that's the least I can do.","04/Aug/14 12:24;dmjones500;Benedikt has committed the patch, thus resolving the issue.",,,,,,,,,,,,,,,,,,,,,,
DurationFormatUtils are not able to handle negative durations/periods,LANG-1003,12711581,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,britter,michael-o,michael-o,30/Apr/14 21:02,06/Apr/15 17:28,07/Apr/19 20:37,04/May/14 08:49,3.3.2,,,,3.4,,lang.text.*,,,0,,,,,,,,"It spits out complete garbage.

{code}
System.out.println(DurationFormatUtils.formatDurationHMS(-3454));
System.out.println(DurationFormatUtils.formatPeriodISO(4000, 3000));
{code}

{noformat}
0:00:-3.-454
P-1Y11M30DT23H59M59.000S
{noformat}

It should throw an {{IllegalArgumentException}} if duration is < 0 or period diff is < 0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-02 08:17:06.964,,,false,,,,,,,,,,,,,,389902,,,Sun May 04 08:49:42 UTC 2014,,,,,,0|i1v5rr:,390143,,,,,,,,02/May/14 08:17;britter;Makes sense to me.,"02/May/14 09:21;britter;Thanks for the report!

{code}
bene@localhost:~/workspace/apache/commons/lang$ svn ci -m ""LANG-1003: DurationFormatUtils are not able to handle negative durations/periods. Reported by Michael Osipov.""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java
Sending        src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
Transmitting file data ...
Committed revision 1591840.
{code}",02/May/14 22:15;michael-o;Reopening because you forgot to document those runtime exception with {{@throws}}.,04/May/14 08:49;britter;Nice catch. Fixed in revision 1592324.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Several predefined ISO FastDateFormats in DateFormatUtils are incorrect,LANG-1002,12711574,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,michael-o,michael-o,30/Apr/14 20:45,19/Oct/16 07:00,07/Apr/19 20:37,08/Jul/15 05:51,3.3.2,,,,3.5,,lang.time.*,,,0,,,,,,,,"Formats {{ISO_TIME_FORMAT}}, {{ISO_TIME_TIME_ZONE_FORMAT}} prepend a {{T}} but this is not correct. Sole time is never prepended by defintion. {{T}} is used only when date *and* time are given.

The Javadocs of {{ISO_TIME_NO_T_FORMAT}}, {{ISO_TIME_NO_T_FORMAT}} are in correct too because they say: ""This pattern does not comply with the formal ISO8601 specification as the standard requires the 'T' prefix for times.""

You might want to read [Markus Kuhn's reference|https://www.cl.cam.ac.uk/~mgk25/iso-time.html#time] on that.

A solution would be remove the first two and rename the second two by dropping the {{NO_T}} in the name.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-30 21:58:24.228,,,false,,,,,,,,,,,,,,389895,,,Wed Oct 14 10:50:49 UTC 2015,,,,,,0|i1v5q7:,390136,,,,,,,,30/Apr/14 21:58;garydgregory;Very odd indeed. The intent is clearly documented in the unit test. So this is just completely wrong. Changing it would break runtime compatibility but what else to do? Create new contants with no T's calls ISO8601_.... instead of ISO...?,"01/May/14 08:44;michael-o;Gary, I fail to find the intent here: http://commons.apache.org/proper/commons-lang/xref-test/org/apache/commons/lang3/time/DateFormatUtilsTest.html#L154. To which intent are you referring?","01/May/14 11:21;michael-o;Gary, I think we can do the following here to minimize impact.

1. Create a new ticket which will address the entire problem in Commons Lang 4 cleanly, i.e., remove {{NO_T}} formats and make the other formats correct.
2. Lang 3 has to remain as-is -- unfortunately, but we deprecate can {{NO_T}} formats and change the Javadocs of the others saying that the format will change in 4.0.

Introducing new constants like {{ISO_8601_...}} would require do add them for all formats to have a uniform use. I think this is overhead.

What do you think?","18/Jun/15 20:42;michael-o;[~garydgregory], it has been already more than a year. I'd like to finalize this issue now. Please read my previous comment.
I'd like to remove all invalid static patterns in 4.0 and deprecate them in 3.x.","22/Jun/15 18:35;britter;Hi,

without getting into the details here, I think we should:
* provide constants with the correct values
* provide additional constants the differ from the standards constants if they are useful.

Deprecating incorrect constants to remove them later on is okay to me. Changes the value of incorrect constants and document this in the RELEASE-NOTES is also okay to me.","08/Jul/15 08:52;michael-o;Charles, you might want to set the fix version. The change looks fine.","19/Sep/15 17:46;michael-o;Recently looked at the commit and some note about it. The naming {{ISO8601_...}} isn't quite good because it is ISO 8601 and *not* ISO8601. Thus, it should be {{ISO_8601_...}}. If no one really opposes, I would add a subsequent commit which fixes that.","23/Sep/15 23:09;sebb@apache.org;Are these new constants?
If so, fine by me to rename them - they are easier to read, and underscores are available quite cheaply these days...","24/Sep/15 09:55;michael-o;Yes, they are.",14/Oct/15 10:50;michael-o;Changes pushed to [6d3796e64bdd5f3f4857bfca6982e6ecf98a2b33|https://git-wip-us.apache.org/repos/asf?p=commons-lang.git;a=commit;h=6d3796e64bdd5f3f4857bfca6982e6ecf98a2b33].,,,,,,,,,,,,,,,,,,,,,
ISO 8601 misspelled throughout the Javadocs,LANG-1001,12711567,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,michael-o,michael-o,30/Apr/14 20:15,06/Apr/15 17:28,07/Apr/19 20:37,30/Apr/14 21:50,3.3.2,,,,3.4,,lang.time.*,,,0,,,,,,,,"The Javadocs say: {{ISO8601}} but the correct format is {{ISO 8601}}. Note the space.

A patch can be provided.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-30 21:50:38.773,,,false,,,,,,,,,,,,,,389888,,,Wed Apr 30 21:51:05 UTC 2014,,,,,,0|i1v5on:,390129,,,,,,,,"30/Apr/14 21:50;garydgregory;{noformat}
commit -m ""<action issue=""LANG-1001"" type=""fix"" dev=""ggregory"" due-to=""Michael Osipov"">ISO 8601 misspelled throughout the Javadocs</action>"" (7 paths specified)
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/StopWatch.java
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
    Transmitting file data ...
    Committed revision 1591488.
{noformat}",30/Apr/14 21:51;garydgregory;Thank you for the report Michael.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ParseException when trying to parse UTC dates with Z as zone designator using DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT,LANG-1000,12711456,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,dmjones500,host,host,30/Apr/14 12:55,06/Apr/15 17:28,07/Apr/19 20:37,28/Sep/14 10:12,3.3.2,,,,3.4,,,,,0,,,,,,,,"I have the {{String}} {{2013-11-18T12:48:05Z}} which I want to parse into a {{Date}} using {{DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT}}. 

According to [http://en.wikipedia.org/wiki/ISO_8601#UTC] the {{Z}} at the end should be a valid abbreviation for {{UTC+00:00}} (or {{UTC}}) and so all should be fine.

But when I am trying to do so I get the following exception:
{code}
java.text.ParseException: Unparseable date: ""2013-11-18T12:48:05Z"" does not match
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-09-28 06:30:44.535,,,false,,,,,,,,,,,,,,389777,,,Sun Sep 28 10:12:41 UTC 2014,,,,,,0|i1v50f:,390019,,,,,,,,"28/Sep/14 06:30;dmjones500;I'm able to reproduce this too. It seems that ""ZZ"" has no special meaning within the parser classes, despite the Javadoc promising the contrary. In {{FastDateParser.getStrategy()}}, only the first 'z' is noticed and a general timezone strategy is returned.

As a side note, as and when we move to Java 7 as the minimum supported API, we can use the new ""X"" pattern letter, which is designed for ISO 8601 time zones.

In the meantime, I'll see what can be done in the current API. A work-around for now is to substitute ""+00:00"" for ""Z"" in the input date, prior to parsing.","28/Sep/14 10:12;dmjones500;Author: djones
Date: Sun Sep 28 10:11:17 2014
New Revision: 1628061

URL: http://svn.apache.org/r1628061
Log:
Added missing support for ISO 8601 parsing and printing using ""ZZ"" pattern (code now matches Javadoc). Addresses LANG-1000.

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NumberUtil#isNumber() returns false for ""012345678"" but not for ""12345678""",LANG-997,12709554,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,juanpablo,juanpablo,21/Apr/14 14:27,28/May/16 16:22,07/Apr/19 20:37,02/Jun/14 19:08,3.3.2,,,,,,lang.math.*,,,0,,,,,,,,"With commons-lang 3.2.1:
{code}
boolean ret = NumberUtils.isNumber( ""012345678901234567"" );
{code} 

returns {{true}}, but for 3.3.2, returns {{false}}.

The change seems to be introduced in LANG-972 / LANG-992, as it seems to consider now that, if the parameter string has a leading 0, and it's not hex, then it must be forcibly octal.

As previous 3.x versions accept 0ddd as valid decimal numbers, the suggested change on NumberUtils#isNumber, is to replace lines [1367-1376|http://commons.apache.org/proper/commons-lang/xref/org/apache/commons/lang3/math/NumberUtils.html#L1367] with:
{code}
           } else if (Character.isDigit(chars[start + 1])) {
               // leading 0, but not hex, must be octal or decimal
               int i = start + 1;
               for (; i < chars.length; i++) {
                   if (chars[i] < '0' || chars[i] > '9') { // was: if (chars[i] < '0' || chars[i] > '7') {
                       return false;
                   }
               }
               return true; 
           }
{code}",Java 6,,,,,,,,,,,,,,,LANG-972,LANG-992,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-25 13:22:14.543,,,false,,,,,,,,,,,,,,387876,,,Mon Jun 02 19:08:58 UTC 2014,,,,,,0|i1utfz:,388137,,,,,,,,25/Apr/14 13:22;britter;Should be in the next release. Setting to 3.4.,"25/Apr/14 22:38;sebb@apache.org;I'm not sure we want to implement this.

At present, isNumber() agrees with Java constant syntax and the createNumber() method in treating a leading 0 as meaning octal.

If leading zero is ignored, then isNumber() won't agree with createNumber() or Java.

I think the current behaviour should be kept (and documented more thoroughly if need be).

If there is a need to allow leading zeros, this could perhaps be done with a new method - or by adding a second boolean parameter to select the new behaviour.","26/Apr/14 04:02;bayard;Summarizing - the issue isn't that 0123 is bad, but that 012345678901234567 is too big for Java.

In the same way, 0xfffffffffffffffffffffffffffffffffff should return false. It currently returns true.
Also 9e99999999999999999999 is too large, but returns true currently.

I'm +1 to considering this a regression and accepting an isNumber that can handle numbers larger than Java is prepared to handle. ie) Fixing this bug.","26/Apr/14 09:00;britter;isNumber returns a boolean, but it looks like we want to give more than two answers:
* the given input is *not* a number
* the given input is a valid number in java
* the given input is a number, but it is to big for Java to handle it

The question is: what would you do with the last information? The is no way to process the string literal passed into the method, because you simply cannot convert it to a number in Java. 

How about introducing a second method {{isJavaNumber}} or something like that?","26/Apr/14 09:19;juanpablo;Hi, 

the issue isn't only with ""too big"" numbers, f.ex., ""01258"" also returns false. Consider this code:

{code}
@Test
public void isNumber() {
        Number n = new Integer( ""01258"" ); //  notice we're using a String, as NumberUtil.isNumber does, trying to use 01258 without quotes results in a compilation error
        Assert.assertTrue( n.intValue() == 1258 );
        n = new Integer( ""Unicorn"" ) // -> NFException, expect NumberUtils.isNumber to return false here, as it does
}
{code}

I expect isNumber to return true; Furthermore, it was returning true before 3.3.x.. Agree with the isJavaNumber method need instead of changing behaviour.","26/Apr/14 18:21;b.eckenfels;Juan, the problem is that ""0"" prefix is detected as an octal number. In that case it only allows digits from 0-7, so 077 is ok but 088 is not.

I think this method is not really useful as it does not define what numbers it will accept. It should differentiate between integers and floats and between encoded and consitent (decimal) encoding. And for the encoded form, it needs to spell out the syntax supported. For example ""0"" and ""0x"" and ""#"" for Integer.decode(). Integer.parseInt(""012"") -> 12. Integer. Integer.decode(""012"") -> 10. It also needs to support different value ranges. I think the most common usage of this is to guard any of the parse/decode methods, so there should be a 1:1 acceptor.","28/Apr/14 23:10;juanpablo;Hi Bernd,

saw the octal issue, but my concern was that NumberUtils on 3.2.1 was returning true for, i.e., ""018"" and now is returning false, considering that ""018"" is a valid number. I expected for this method the same behaviour you described at [LANG-992|https://issues.apache.org/jira/browse/LANG-992?focusedCommentId=13949713&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13949713]:

{quote}
Actually my expectation for using that method would be that ""isNumber returns true if I can use it without a NumberFormatException with Integer.parseInt(String) or Double.parseDouble(String)""
{quote}

I expected that ""018"" was recognized as a valid number, because as it can be used as new Integer( ""018"" ), without any NFExceptions, it made sense to me that it was recognized as a valid Java number, hence isNumber( ""018"" ) should return true. Then went into LANG-971 issue link and and saw that this is not the method intention. I found it a bit surprising.

We've been using this method to check if some fixed-width values were ""numbers"" or not (as in behaviour described on the quote above), and when upgrading suddenly a lot of tests began to fail because of this change. Seems we'll have to seek for a workaround if we want to upgrade this library. It'd be fine for me if at least the javadocs would give a more precise description regarding the scope of the method or, maybe some examples of the method outcomes on the method's javadoc (as it's done on StringUtils, f.ex).
","06/May/14 21:17;dmjones500;[~juanpablo]: have you considered {{isDigits()}}?

I've also updated the Javadoc to better describe octal handling:

bq. Non-hexadecimal strings beginning with a leading zero are treated as octal values. Thus the string 09 will return false, since 9 is not a valid octal value.","06/May/14 21:52;juanpablo;Hi Duncan,

{{isDigits()}} returns false for ""3.4"", while the old {{isNumber}} is returning true.

I was looking for something along the lines {{toDouble(String)}} / {{toLong(String)}} etc., but returning {{true}} / {{false}} while avoiding at the same time the {{try/catch(NumberFormatException)}} of those methods. Seeing that 09 is meant to be false for {{isNumber}}, is there any chance to add a new method with that functionality?

thx + br","07/May/14 12:26;dmjones500;[~juanpablo]: Feel free to raise a new issue that describes your desired functionality.

Can we now considered this issue closed, on the basis that {{isNumber}} considers {{""012345678901234567""}} an octal number and that v3.2.1 was broken?","19/May/14 20:23;juanpablo;Hi Duncan,

apologies on getting to his late, apparently I didn't received the mail associated to your last comment. Please feel free to close the issue, as it seems clear that the intention of {{isNumber}} is to consider 018 as not a number. Will open a new issue to ask for the desired functionality.

thanks,",02/Jun/14 19:08;britter;Closing as not a problem.,,,,,,,,,,,,,,,,,,,
FastDateFormat is case sensitive,LANG-996,12707939,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,drees,drees,11/Apr/14 13:45,06/Apr/15 17:28,07/Apr/19 20:37,23/Apr/14 16:05,3.3.2,,,,3.4,,lang.time.*,,,0,,,,,,,,"It seems that {{FastDateFormat}} is case sensitive. But it claims to be mostly compatible with {{SimpleDateFormat}} which is not.

For example, this throws a {{ParseException}}:

{code:java}
FastDateFormat.getInstance(""dd-MMM-yyyy"").parse(""01-jan-2000"");
{code}

But these do not:

{code:java}
SimpleDateFormat sdf = new SimpleDateFormat(""dd-MMM-yyyy"");
sdf.parse(""01-jan-2000"");
DateUtils.parse(""01-jan-2000"", ""dd-MMM-yyyy"");
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-04-11 14:17:43.658,,,false,,,,,,,,,,,,,,386262,,,Wed Nov 26 19:38:12 UTC 2014,,,,,,0|i1ujhz:,386527,,,,,,,,11/Apr/14 14:17;britter;I'd like to have this fixed in 3.4,"21/Apr/14 20:43;sebb@apache.org;Looks like this will need a new version of the TextStrategy that supports case-blind matching.
This could perhaps be done by converting the month strings to lower case in the map; then converting the input value to lowercase before looking up the map.
The Locale is known when creating a Strategy, however it is not provided when parsing using the setCalendar method.
The Strategy interface is private, so it would be possible to change the setCalendar method to pass in the Locale.",21/Apr/14 21:09;sebb@apache.org;That's not sufficient - the generated regex also needs to be case-blind,23/Apr/14 16:05;chonton;commit 1589446,"23/Apr/14 16:12;drees;Thanks for the quick work guys, looking forward to using this in the next release. :-)","26/Nov/14 13:04;pishty;hello guys, is there a snapshot jar where i can get this fix from, i have looked for it but couldnt find it.","26/Nov/14 19:38;sebb@apache.org;Snapshots are published to the ASF SNAPSHOT repository.

The URL is in the Apache Parent POM; just make sure you enable use of the repo ""apache.snapshots.https""

Note that SNAPSHOTS are automated builds, and have not been reviewed by Commons developers.
Use at your own risk.",,,,,,,,,,,,,,,,,,,,,,,,
Fix bug with stripping spaces on last line in WordUtils.wrap() ,LANG-995,12707935,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,britter,britter,11/Apr/14 13:12,06/Apr/15 17:28,07/Apr/19 20:37,11/Apr/14 13:28,3.3.2,,,,3.4,,lang.text.*,,,0,github,,,,,,,Via github: https://github.com/apache/commons-lang/pull/18,,,,,,,,,,,,,,LANG-957,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,386258,,,Fri Apr 11 13:28:59 UTC 2014,,,,,,0|i1ujh3:,386523,,,,,,,,11/Apr/14 13:28;britter;Fixed in revision 1586649.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NumberUtils#isNumber() returns false for ""0.0"", ""0.4790"", et al",LANG-992,12703833,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Cannot Reproduce,chtompki,adam@labkey.com,adam@labkey.com,26/Mar/14 21:26,19/Oct/16 15:24,07/Apr/19 20:37,11/Sep/16 20:41,3.3.1,,,,,,lang.math.*,,,2,,,,,,,,"After upgrading from 3.1 to 3.3.1, it seems that {{isNumber(String str)}} returns false for decimal numbers with leading zeros. In other words:

{code:java}
boolean ret = NumberUtils.isNumber(""0.4790"");
{code}

On 3.1, {{ret}} was true. In 3.3.1, {{ret}} is false.

Guessing that LANG-972 is related... comment in the code states:

{code:java}
// leading 0, but not hex, must be octal
{code}

This is clearly a case where leading 0 means neither hex nor octal.
","Java 8, Windows 7",,,,,,,,,,,,,,,LANG-1252,LANG-1040,,,,,,,,,11/Oct/14 01:08;jamessawle;LANG-992 Refactor.patch;https://issues.apache.org/jira/secure/attachment/12674318/LANG-992+Refactor.patch,27/Mar/14 02:04;niallp;LANG-992-v2.patch;https://issues.apache.org/jira/secure/attachment/12637074/LANG-992-v2.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-03-27 01:49:49.492,,,false,,,,,,,,,,,,,,382167,,,Sun Sep 11 20:41:39 UTC 2016,,,,,,0|i1tubj:,382439,,,,,,,,"27/Mar/14 01:49;niallp;Yes, this was caused by the second commit for LANG-972  in revision 1566967 when the change for Octal numbers was made. I have a patch that resolves this specific issue, but perhaps the Octal change should be reverted.",27/Mar/14 02:04;niallp;Attaching second version of patch,"27/Mar/14 06:55;dmjones500;[~niallp]: your patch looks good. I see no reason to revert the octal change, just a shame we hadn't already captured this case in a unit test. Do you intend to commit your patch?","27/Mar/14 12:27;sebb@apache.org;Should octal numbers be validated or not?
Clearly a number such as 0xdefgh is invalid, because the 0x prefix unambiguosly identifies a hex number.
However 0123 is potentially equally valid as an octal and a decimal number. 
Which is correct depends on the context.

Now the Javadoc for isNumber says ""Checks whether the String a valid Java number.""
If we take that to mean that the digit string must be valid as a numeric Java literal, then clearly the leading 0 means octal.
However, numeric literals are not Strings.
JVM methods such as Integer.decode(String) that treat a leading 0 as meaning octal will reject a parameter that contains non-octal digits - so again that suggests octal should be validated.

As far as I know, there are no standard Java methods that accept number type suffixes in Strings.
I think these are only accepted in numeric literals.

The fact that isNumber() accepts all these formats leads me to the conclusion that the intention was probably to support the same syntax as Java literals, and so the code should validate octal numbers accordingly.","27/Mar/14 18:00;b.eckenfels;Actually my expectation for using that method would be that ""isNumber returns true if I can use it without a NumberFormatException with Integer.parseInt(String) or Double.parseDouble(String)"". Because the Java syntax and literal format is not really something which you use anywhere outside the compiler/source tools.

However, I would be fine with both definitions, as long as they are added to the javadoc comment.

BTW1: I have some applications where the NFE is a major slow down as I use the parse function to validate. So I do see a big reason for having a boolean validate function.

BTW2: I think hex/ocatal prefixes and decimal digits are never seen in the same function, so I think having a ""isInteger()"" which knows about octal/hex and having a isNumber() which fails on hex and ignores trailing 0 would be a more logical thing.
","27/Mar/14 18:49;rahook;This is a show-stopper for us - I can revert to 3.1 for the project that is affected, however need to retain 3.3.1 for other projects.","27/Mar/14 19:37;sebb@apache.org;@Bernd

The isNumber() method currently also allows ""0xABCD"" and ""27L"" which are not allowed by the parseTTT() methods - it is not just the octal validation that would cause problems.

I think one would need several new methods to validate strings intended for parse functions.
In your case I would have thought a Regular Expression matcher would be suitable.
I suggest you create a JIRA enhancement request with details of your use-cases.
Note that Commons Validator provides lots of Numeric validation routines already - that may be a better solution.",28/Mar/14 03:11;niallp;I have checked in the change in revision 1582585,"07/May/14 01:25;sebb@apache.org;What about 01.23 etc?
This will be allowed by createNumber().
Maybe the check for ""."" should scan the entire string.","11/Oct/14 01:08;jamessawle;This is a possible large refactor of the isNumber functionality extracting each of the different datatypes into their own methods. Whilst this will not be as efficient as the original method, it is more maintainable and would allow for the possibility of making each of them public separately.

I understand that this may be a step to far, but would be interested in hearing people's views. This does not however, cover Sebb's point about 01.23 as I do not believe that createNumber should be allowing it.

If this is liked, javadoc and separate testing of each function can be added (make the method package private).","24/Aug/16 11:10;mj.mahmoudi@yahoo.com;I'm starter for contribute this project and not good familiar with flow of issues. 
I see this issue resolved in version 3.4, I say correct?","30/Aug/16 19:57;pascalschumacher;It was marked as fixed in 3.3.2, but then reopened and not closed again. So the issue remains unresolved.",31/Aug/16 06:41;mj.mahmoudi@yahoo.com;Thanks for your reply but When do this issue close?,31/Aug/16 19:20;pascalschumacher;Commons is completely volunteer based. Issues are closed when somebody contributes a fix. ,11/Sep/16 20:41;chtompki;I could not reproduce this issue in the release candidate for 3.5 with java 1.6 or java 1.7.,,,,,,,,,,,,,,,,
Release notes cannot display special characters,LANG-991,12703682,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,dmjones500,dmjones500,26/Mar/14 09:51,22/Oct/16 13:24,07/Apr/19 20:37,22/Oct/16 13:24,3.3.1,,,,3.5,,Website,,,0,,,,,,,,"When viewing [the release notes|http://commons.apache.org/proper/commons-lang/release-notes/RELEASE-NOTES-3.3.1.txt] online, special characters in some contributors names are not showing correctly.

E.g. search for:

{noformat}
o LANG-951:  Fragments are wrong by 1 day when using fragment YEAR or MONTH.
             Thanks to Sebastian G�tz.
{noformat}

I'd guess we need to change the Maven resource encoding for this file, although I've not yet had time to poke at the problem in any great detail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-26 13:12:58.538,,,false,,,,,,,,,,,,,,382016,,,Sat Oct 22 13:24:50 UTC 2016,,,,,,0|i1tten:,382291,,,,,,,,"26/Mar/14 13:12;sebb@apache.org;FIxed by converting the production version of RELEASE-NOTES-3.3.1.txt to UTF-8.

However additional work needs to be done to fix this for future releases
",22/Oct/16 13:24;pascalschumacher;should be fixed by https://github.com/apache/commons-lang/commit/86a59601b570585dcb7a1ce3d1ccc8e16008f53a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Where's the user guide?,LANG-988,12701229,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Not A Problem,,oneiros,oneiros,13/Mar/14 12:42,19/Oct/16 15:24,07/Apr/19 20:37,21/Apr/14 20:52,3.3,,,,,,Website,,,0,,,,,,,,"The homepage claims ""A getting started user guide is available together with various project reports."" The link for the user guide (https://commons.apache.org/proper/commons-lang/userguide.html) then says ""Looking for the User Guide? It has been moved to the package JavaDoc"" - and the JavaDoc link points to the javadoc, where I can't find a user guide (do you mean the package summary of lang3 (https://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/package-summary.html#package_description)?

Oh, and IMHO the website should be a component in jira.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-14 13:39:09.548,,,false,,,,,,,,,,,,,,379575,,,Fri Apr 25 13:20:39 UTC 2014,,,,,,0|i1tehr:,379861,,,,,,,,"14/Mar/14 13:39;dmjones500;Yes, the user guide is now contained within the Javadoc summary of the {{org.apache.commons.lang3}} package. This change was made during January of this year (see LANG-939). The contents are identical to what was originally found on the website.

As an alternative to raising an issue for such a question, you are also welcome to contact the [mailing lists|https://commons.apache.org/proper/commons-lang/mail-lists.html].

bq. Oh, and IMHO the website should be a component in jira.

That's probably a good idea.","15/Mar/14 10:20;britter;Hello Martin,

what kind of information are you looking for? The user guide just contained descriptions of the classes we have in commons. This seemed like a natural fit for the package descriptions of the individual packages. I'm open for improvement of the website documentation, but I'm currently not sure how that could look like.

bq. Oh, and IMHO the website should be a component in jura.

I've created a new component in jira and added this ticket to it.","21/Apr/14 20:52;dmjones500;I think this issue can be closed - the original question is answered. If changes are desired for the user guide, they can be described in a new improvement issue.","25/Apr/14 13:20;britter;Maybe we should remove the ""User Guide"" page on the website or put some useful content there... I've though about something that gives you a better overview over the functionality provided in [LANG] alongside some code examples.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"DateUtils.getFragmentInDays(Date, Calendar.MONTH) returns wrong days",LANG-987,12701157,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Blocker,Fixed,dmjones500,mustangxu@gmail.com,mustangxu@gmail.com,13/Mar/14 04:53,19/Mar/14 12:24,07/Apr/19 20:37,13/Mar/14 21:52,3.3,,,,3.3.1,,lang.time.*,,,0,,,,,,,,"Commons lang3 screwed up my system after upgraded to 3.3 last night!

We use DateUtils.getFragmentInDays(Date, Calendar.MONTH) to extract days for later use. Basically (in 3.2), 'today' (Mar. 13) returns 13, but, it returns 12 in 3.3!

I compared the underlying method org.apache.commons.lang3.time.DateUtils.getFragment(Calendar, int, int) between 3.2 and 3.3:

3.2
{code:java}
        // Fragments bigger than a day require a breakdown to days
        switch (fragment) {
            case Calendar.YEAR:
                result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;
                break;
            case Calendar.MONTH:
                result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;
                break;
        }
{code}

3.3
{code:java}
        // Fragments bigger than a day require a breakdown to days
        switch (fragment) {
            case Calendar.YEAR:
                result += ((calendar.get(Calendar.DAY_OF_YEAR) -1) * MILLIS_PER_DAY) / millisPerUnit;
                break;
            case Calendar.MONTH:
                result += ((calendar.get(Calendar.DAY_OF_MONTH) -1) * MILLIS_PER_DAY) / millisPerUnit;
                break;
            default:
                break;
        }
{code}

Is there ANY ANY reason for adding '-1' in 3.3?! Plus, do you have any unit test for this method?",,,,,,,,,,,,,,,,LANG-951,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-03-13 08:06:25.352,,,false,,,,,,,,,,,,,,379503,,,Fri Mar 14 05:07:15 UTC 2014,,,,,,0|i1te2v:,379794,,,,,,,,"13/Mar/14 08:06;dmjones500;This is definitely a bug and it was introduced during the fix for LANG-951. There are many unit tests covering the method, but for some reason none that use {{DateUtils.getFragmentInDays(<foo>, Calendar.MONTH)}}.

","13/Mar/14 17:32;mustangxu@gmail.com;Sorry for my tough tone, but this did impact a lot on my system, pls fix this ASAP, thx~",13/Mar/14 17:43;dmjones500;Patches are always welcome :-),"13/Mar/14 21:52;dmjones500;Found time to take a look at this. Added missing unit tests, so we shouldn't lose this functionality again.

URL: http://svn.apache.org/r1577332
Log:
LANG-987: DateUtils.getFragmentInDays(Date, Calendar.MONTH) returns wrong days, reported by Jay Xu.

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/DateUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java",14/Mar/14 05:07;mustangxu@gmail.com;Thx for your effort and the great help~,,,,,,,,,,,,,,,,,,,,,,,,,,
DurationFormatUtils does not handle large durations correctly,LANG-984,12698351,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,03/Mar/14 03:15,18/Mar/14 18:18,07/Apr/19 20:37,03/Mar/14 21:11,,,,,3.3.1,,lang.time.*,,,0,,,,,,,,"DurationFormatUtils assumes that the the number of days, hours, minutes, seconds and milliseconds can be expressed as an int when converted from a long duration in milliseconds.

However even the number of days can exceed an int if the duration is large enough.

It's unlikely that such large durations will often be used, but this restriction is not documented. It should be easy enough to use long fields instead of int.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,376709,,,Mon Mar 03 21:11:48 UTC 2014,,,,,,0|i1swwn:,377004,,,,,,,,"03/Mar/14 21:11;sebb@apache.org;URL: http://svn.apache.org/r1573749
Log:
LANG-984 DurationFormatUtils does not handle large durations correctly

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DurationFormatUtils does not describe format string fully,LANG-983,12698349,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,03/Mar/14 02:51,18/Mar/14 18:18,07/Apr/19 20:37,03/Mar/14 22:42,,,,,3.3.1,,lang.time.*,,,0,,,,,,,,"DurationFormatUtils does not document the format string fully.

It currently only mentions the individual formatting characters.
It does not mention how repeated characters are handled, nor does it mention quoting.

It does not state whether characters that are not (currently) format 
characters need to be quoted (at present these are assumed to be text).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,376707,,,Mon Mar 03 22:42:15 UTC 2014,,,,,,0|i1sww7:,377002,,,,,,,,"03/Mar/14 22:42;sebb@apache.org;URL: http://svn.apache.org/r1573786
Log:
LANG-983 DurationFormatUtils does not describe format string fully

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"DurationFormatUtils.formatDuration(61999, ""s.SSSS"") - ms field size should be 4 digits",LANG-982,12698347,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,03/Mar/14 02:45,18/Mar/14 18:18,07/Apr/19 20:37,03/Mar/14 21:32,,,,,3.3.1,,lang.time.*,,,0,,,,,,,,"DurationFormatUtils.formatDuration(61999, ""s.SSSS"")  generates the wrong number of places for the millisecond field. It should produce 61.0999 but it generates 61.999.

This is an unlikely format, but there is no indication that the millisecond field is a maximum of 3 digits when it happens to follow a seconds field.

This issue occurs because of the way the code attempts to ensure that 3 places are shown in a format if milliseconds follows seconds.
The code currently adds 1000 and then drops the first digit.
The simplest way to allow an arbitrary number of digits is to use at least 3 for the count field.
Alternatively, if exactly 3 digits are required it would be simpler to just use a count of 3.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,376705,,,Mon Mar 03 21:32:49 UTC 2014,,,,,,0|i1swvr:,377000,,,,,,,,"03/Mar/14 21:32;sebb@apache.org;URL: http://svn.apache.org/r1573754
Log:
LANG-982 DurationFormatUtils.formatDuration(61999, ""s.SSSS"") - ms field size should be 4 digits

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DurationFormatUtils#lexx does not detect unmatched quote char,LANG-981,12698245,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,02/Mar/14 19:59,18/Mar/14 18:18,07/Apr/19 20:37,03/Mar/14 21:44,,,,,3.3.1,,lang.time.*,,,0,,,,,,,,"The method DurationFormatUtils#lexx does not detect if the format string contains an unmatched single-quote character.

For example ""yMd'test"" should really be rejected, as the literal string ""test"" is not properly terminated.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,376674,,,Mon Mar 03 21:44:56 UTC 2014,,,,,,0|i1swov:,376969,,,,,,,,"03/Mar/14 21:44;sebb@apache.org;URL: http://svn.apache.org/r1573770
Log:
LANG-981 DurationFormatUtils#lexx does not detect unmatched quote char

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DurationFormatUtils uses == for comparing objects,LANG-980,12698179,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,sebb@apache.org,sebb@apache.org,02/Mar/14 12:20,03/Mar/14 08:00,07/Apr/19 20:37,,,,,,Patch Needed,,lang.time.*,,,0,,,,,,,,"As reported on the ML, Findbugs complains that == is being used to compare objects in the class DurationFormatUtils.

These objects are the strings which define the various durations: ""y"", ""M"", ""d"" etc.  These are final static objects (singletons) so the use of == should be OK but it is not good practice.

One way to avoid the warnings would be to use an Enum for the singleton objects. For example:

{code}
enum Duration { YEAR, MONTH, ... }
    static final ParseObject y = ParseObject.YEAR;
    static final ParseObject M = ParseObject.MONTH;
...
{code}

Note: the package protected fields y, M etc are currently needed for the unit tests.

The above change would then allow the format() method to use a switch statement which would likely be faster than the if chain it has to use now.

Eliminating the warnings for == which are currently safe would make it obvious if == was used elsewhere in an unsafe way.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,376648,,,Mon Mar 03 01:53:30 UTC 2014,,,,,,0|i1swj3:,376943,,,,,,,,"02/Mar/14 18:52;sebb@apache.org;It looks like the only object types ever added as Token values are the 1-char Strings for the duration ids and StringBuilder objects. The Unit test code adds a Number, but the code does not use this feature. Now the StringBuilder objects are only ever used after conversion to a String, so it seems odd to store the StringBuilder rather than the string. I suspect this may be because a 1-char String could be confused with one of the duration ids if it ever got interned.

To avoid repeated use of StringBuffer#toString() whilst still ensuring that duration ids are unique, the Token class could be modified slightly.
The Object value could be replaced with 2 fields: the type (Duration enum) and a string (if relevant). The Duration enum would need to be extended to include STRING - and renamed as it is no longer just a duration.

This would allow further simplification of the code, e.g. in the equals method. The Token constructors could be adjusted to accept onlly String or enum.","03/Mar/14 01:53;sebb@apache.org;The StringBuilder objects are in fact used by the lexx method to collect the text characters, but that could be done before creating the Token object with the string contents.

There's another possible simplification - the Tokens are created as a list and then converted to an array - however the code could just use the original list. 

Also the list of Tokens needs to be searched to determine if it does (or does not) contain various of the duration specifiers.
The lexx method could build a Set of contained types to avoid scanning the Token list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"TypeUtils.parameterizeWithOwner - wrong format descriptor for ""invalid number of type parameters""",LANG-979,12698123,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,britter,sebb@apache.org,sebb@apache.org,01/Mar/14 16:08,19/Oct/16 07:00,07/Apr/19 20:37,27/Apr/15 19:39,,,,,3.5,,lang.reflect.*,,,1,,,,,,,,"The TypeUtils.parameterizeWithOwner method uses the following format string:

""invalid number of type parameters specified: expected %s, got %s""

with parameters that are actually ints.

This means that the parameters are boxed into Integers and then converted to Strings by the formatter.

Seems to me it would make more sense to either create the Strings directly from the ints, or box the ints and use ""%d"" for the place holders.",,,,,,,,,,,,,,,,,,,,,,,,,,18/Apr/15 23:19;kinow;LANG-979.patch;https://issues.apache.org/jira/secure/attachment/12726403/LANG-979.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2015-04-18 23:19:10.165,,,false,,,,,,,,,,,,,,376592,,,Mon Apr 27 19:39:36 UTC 2015,,,,,,0|i1sw6n:,376887,,,,,,,,18/Apr/15 23:19;kinow;Patch for LANG-979. No tests added as this fixes an exception handling message.,"27/Apr/15 19:39;britter;{code}
$ git merge --no-ff LANG-979
Merge made by the 'recursive' strategy.
 src/changes/changes.xml                                       | 1 +
 src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java | 2 +-
 2 files changed, 2 insertions(+), 1 deletion(-)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Failing tests with Java 8 b128,LANG-978,12698102,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,britter,britter,01/Mar/14 09:23,18/Mar/14 18:18,07/Apr/19 20:37,03/Mar/14 21:33,3.3,,,,3.3.1,,,,,0,,,,,,,,"Gary Gregory has reported failing tests during the vote for Lang 3.3 RC1, when building with:

{code}
java version ""1.8.0""
Java(TM) SE Runtime Environment (build 1.8.0-b128)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b69, mixed mode)

Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9;
2014-02-14T12:37:52-05:00)
Maven home: C:\Java\apache-maven-3.2.1\bin\..
Java version: 1.8.0, vendor: Oracle Corporation
Java home: C:\Program Files\Java\jdk1.8.0\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""dos""
{code}

{code}
FastDateFormat_ParserTest>FastDateParserTest.testParses:242->FastDateParserTest.validateSdfFormatFdpParseEquality:219 » Parse FastDateParserTest.testParses:242->validateSdfFormatFdpParseEquality:219 » Parse

Running org.apache.commons.lang3.time.FastDateFormat_ParserTest /1/2/10/5/??/0/0/?/+0000 ja_JP_JP_#u-ca-japanese 1867 G/y/M/d/h/a/m/s/E/Z America/New_York Tests run: 29, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.491 sec <<< FAILURE! - in org.apache.commons.lang3.time.FastDateFormat_ParserTest testParses(org.apache.commons.lang3.time.FastDateFormat_ParserTest) Time elapsed: 1.492 sec <<< ERROR! java.text.ParseException: (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
{code}

See: http://markmail.org/message/suvorq3xrqmimnui",,,,,,,,,,,,,,,,,,,,,,,,,,01/Mar/14 12:40;sebb@apache.org;LANG-978.patch;https://issues.apache.org/jira/secure/attachment/12631946/LANG-978.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-03-01 12:40:25.982,,,false,,,,,,,,,,,,,,376571,,,Mon Mar 03 21:33:14 UTC 2014,,,,,,0|i1sw1z:,376866,,,,,,,,"01/Mar/14 12:40;sebb@apache.org;Suggested patch to skip ParseError for early Japanese dates

I think this is better than skipping the test entirely, as it works OK at present on earlier versions of Java.","03/Mar/14 21:33;sebb@apache.org;URL: http://svn.apache.org/r1573756
Log:
LANG-978 Failing tests with Java 8 b128

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumericEntityEscaper incorrectly encodes supplementary characters,LANG-977,12695277,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,ckarcher,ckarcher,14/Feb/14 19:57,04/Mar/14 17:19,07/Apr/19 20:37,15/Feb/14 10:36,3.2.1,,,,3.3,,lang.text.translate.*,,,0,,,,,,,,"NumericEntityEscaper will incorrectly encode supplementary unicode characters depending on the char length of the first code point in the string.

To reproduce, run:
{code}
String escaped = NumericEntityEscaper.between(0x7f, Integer.MAX_VALUE).translate(""a \uD83D\uDC14 \uD83D\uDCA9"");
{code}

Expected:
{code}
escaped == ""a &#128020; &#128169;""
{code}

Actual:
{code}
escaped == ""a &#128020;&#56340; &#128169;&#56489;""
{code}

The issue lies in CharSequenceTranslator.translate() and the way it checks code points to figure out how many characters it needs to consume.  Specifically, the issue is on [line 95|https://github.com/apache/commons-lang/blob/trunk/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java#L95]:

{code}
// contract with translators is that they have to understand codepoints 
// and they just took care of a surrogate pair
for (int pt = 0; pt < consumed; pt++) {
    pos += Character.charCount(Character.codePointAt(input, pt));
}
{code}

The point of this code is to check the charCount of the character that was just translated and move ahead by that many characters in the input string.  The bug is that it's indexing into the string using 'pt', which is _always_ 0 at the beginning of the loop.  It's effetively checking the charCount of first character in the string every time.

A patch is attached that fixes the issue and includes supporting unit tests.  Fixing this issue in CharSequenceTranslator uncovered an issue in CsvEscaper/CsvUnescaper caused by the fact that it wasn't respecting the ""code point contract"" described in CharSequenceTranslator.translate.  The fix there was to have the translate methods return the string's code point count rather than character count.",,,,,,,,,,,,,,,,,,,,,,,,,,14/Feb/14 19:58;ckarcher;NumericEntityEscaper.patch;https://issues.apache.org/jira/secure/attachment/12629103/NumericEntityEscaper.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-02-15 09:35:51.912,,,false,,,,,,,,,,,,,,373785,,,Sat Feb 15 15:44:06 UTC 2014,,,,,,0|i1sex3:,374085,,,,,,,,15/Feb/14 09:35;britter;Thanks! Setting this to Review Patch,"15/Feb/14 10:36;britter;Nice one, thanks!

{code}
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/StringEscapeUtils.java
Sending        src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
Sending        src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java
Transmitting file data ....
Committed revision 1568612.
{code}",15/Feb/14 14:56;ckarcher;Thanks for the quick merge!  Do you know when the 3.3 release will be cut?,"15/Feb/14 15:44;britter;Hello Chris,

We don't maintain a fixed release schedule or something like that. I planned to roll out 3.3 in early February. Currently I don't really have the time, but I'm still planning to release 3.3 in February.

Benedikt ",,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils#isNumber does not allow for hex 0XABCD,LANG-972,12694412,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,11/Feb/14 02:31,21/Apr/14 14:28,07/Apr/19 20:37,11/Feb/14 02:39,3.2.1,,,,3.3,,lang.math.*,,,0,,,,,,,,isNumber() does not allow for 0XABCD whereas createNumber() allows for both 0xABCD and 0XABCD,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,372920,,,Tue Feb 11 02:39:41 UTC 2014,,,,,,0|i1s9lz:,373222,,,,,,,,"11/Feb/14 02:39;sebb@apache.org;URL: http://svn.apache.org/r1566963
Log:
LANG-972 NumberUtils#isNumber does not allow for hex 0XABCD

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils#isNumber(String) fails to reject invalid Octal numbers,LANG-971,12694218,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sknitelius,sknitelius,10/Feb/14 08:17,28/Apr/14 01:40,07/Apr/19 20:37,11/Feb/14 02:54,3.2.1,,,,3.3,,lang.math.*,,,0,,,,,,,,"When trying to convert ""0085"" with NumberUtils.createInteger(String) an NumberFormatException is thrown. 

This is because the leading 0 causes the String to be evaluated as an Octal, 8 is not a valid octal.

However NumberUtils#isNumber(String) evaluates to true, even so it cannot be converted.  

",,,,,,,,,,,,,,,,,,,,LANG-997,LANG-992,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-10 19:33:04.114,,,false,,,,,,,,,,,,,,372727,,,Tue Feb 11 02:54:03 UTC 2014,,,,,,0|i1s8fj:,373031,,,,,,,,"10/Feb/14 19:33;sebb@apache.org;Agreed, it's not consistent with the create*() methods.

Assuming that a ""valid Java number"" is a sequence of digits that is valid as a constant initialiser, then ""0085"" should be rejected, as it is not valid to write:

{code}
int value = 0085; // compiler error
int pat = Integer.decode(""0085""); // NumberFormatException
{code}

However, ""0085"" is valid in other contexts, for example Integer.parseInt(""0085"");

Having said that, the unit tests suggest that isNumber() and createNumber() should be consistent.","11/Feb/14 02:54;sebb@apache.org;URL: http://svn.apache.org/r1566967
Log:
LANG-971 NumberUtils#isNumber(String) fails to reject invalid Octal numbers

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils.toEncodedString(byte[], Charset) needlessly throws UnsupportedEncodingException",LANG-969,12694012,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,garydgregory,mattbishop,mattbishop,07/Feb/14 22:02,04/Mar/14 17:19,07/Apr/19 20:37,10/Feb/14 02:06,3.2.1,,,,3.3,,lang.*,,,0,,,,,,,,"This new method throws UnsupportedEncodingException when passed in a Charset object. Why?

new String(byte[], Charset) does not throw this exception.",Any,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-02-07 22:18:25.022,,,false,,,,,,,,,,,,,,372521,,,Tue Feb 11 16:45:06 UTC 2014,,,,,,0|i1s76f:,372825,,,,,,,,"07/Feb/14 22:18;garydgregory;Looks like a bug, probably a cut and paste error. This should be fixed in 4.0 since we cannot break binary compatibility.","09/Feb/14 04:25;sebb@apache.org;I don't think Exceptions are part of the method signature.

AFAIK, this would only break source compatibility","09/Feb/14 19:00;garydgregory;Clirr does not complain, so it is OK to break source compatibility for 3.3?","10/Feb/14 00:25;sebb@apache.org;I would say breaking source compatibility is OK, provided that this is clearly documented in the release notes.

It's not a big deal to fix the source.","10/Feb/14 02:06;garydgregory;Thank you for the report Matt, good catch!

{noformat}
commit -m ""<action issue=""LANG-969"" type=""fix"" dev=""ggregory"" due-to=""Matt Bishop"">StringUtils.toEncodedString(byte[], Charset) needlessly throws UnsupportedEncodingException</action>"" C:/vcs/svn/apache/commons/trunks-proper/lang/src/changes/changes.xml C:/vcs/svn/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/StringUtils.java
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/vcs/svn/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/StringUtils.java
    Transmitting file data ...
    Committed revision 1566489.
{noformat}
","11/Feb/14 16:05;britter;bq. I would say breaking source compatibility is OK, provided that this is clearly documented in the release notes.

Do you have an idea where we can put a reminder to add this to the release notes? I'm afraid that we forget this when we roll out the release.",11/Feb/14 16:24;sebb@apache.org;The changes.xml doc has a description section.,"11/Feb/14 16:45;britter;Okay, so we don't need additional prose like we had for for 3.2.",,,,,,,,,,,,,,,,,,,,,,,
FieldUtils methods leak accessible flags,LANG-965,12692726,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,garydgregory,garydgregory,02/Feb/14 17:48,23/Oct/16 16:11,07/Apr/19 20:37,23/Oct/16 16:11,3.1,3.2.1,,,,,lang.reflect.*,,,0,,,,,,,,"When various FieldUtils methods are called the accessible is set to true but never reset to false. This is side-effect should be cleaned up.

This makes a mess of the object model which represents the class meta data.","Apache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 11:22:22-0400)
Maven home: C:\Java\apache-maven-3.1.1\bin\..
Java version: 1.7.0_51, vendor: Oracle Corporation
Java home: C:\Program Files\Java\jdk1.7.0_51\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,LANG-959,,,,,,,,,,06/Sep/14 09:19;andd;commons-lang-965.patch;https://issues.apache.org/jira/secure/attachment/12666995/commons-lang-965.patch,19/Aug/14 17:45;andd;commons-lang-965.patch;https://issues.apache.org/jira/secure/attachment/12662792/commons-lang-965.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-08-19 17:45:49.48,,,false,,,,,,,,,,,,,,371321,,,Sun Oct 23 16:11:45 UTC 2016,,,,,,0|i1rztj:,371624,,,,,,,,19/Aug/14 17:45;andd;The attached patch tries so solve the mentioned accessibility leak by restoring the original accessibility of a particular field in case it has been modified by readField/writeField.,22/Aug/14 05:54;britter;I'll have a look at the patch this weekend.,"23/Aug/14 09:26;britter;Hello [~andd],

your patch looks promising. However there are some things I don't understand :)

* Restoring accessibility in {{readField(Object, String, boolean)}} and {{writeField(Object, String, Object, boolean)}} looks redundant to me, since those methods delegate to the other read/writeField methods, which already handle the accessibility.
* I don't understand the changes in the tests you made. The tests should be changed to verify that the accessibility of a field been read or written is the same as before, but instead you call {{setAccessible(true)}} serveral times. Can you elaborate why?

TIA!
Benedikt","23/Aug/14 13:27;andd;Hello Benedikt,

sorry for inconvenience. Let me clarify:

- Restoring accessibility in {{readField(Object, String, boolean)}} and {{writeField(Object, String, Object, boolean)}} is necessary, because getField() gets called in these two methods. getField() may change the accessibility of the field. Since getField() guarantees, according to its javadoc, to return ""an accessible {@link Field} by name"" it was not an option to restore the accessibility within this method. Therefore it needs to be restored in the above mentioned read/write methods separately.

- The original tests failed after the ""accessibility leak"" has been fixed. In the corresponding assert statement the field was filled with an expected value for assertion although it might not be accessible. Before, they only succeeded because of the leak. You can reproduce this by applying the patch for the FieldUtil class and use the original tests. So the changes to the tests do not test the restoring of the accessibility, they just guarantee, that the tests work like before.

Let me know, if any uncertainty remains.

BR
André","26/Aug/14 12:32;britter;Hello André,

bq. Therefore it needs to be restored in the above mentioned read/write methods separately.

Okay, makes sense. Maybe we should add a comment in JavaDoc, that users have to take care of restoring accessibility when using {{getField()}}...

bq. The original tests failed after the ""accessibility leak"" has been fixed. 

Nice :-) However I think it would be better to use {{FieldUtils.readField()}} to check if the field has been set correctly and to assert that the field is not accessible after the call to {{writeField()}}. WDYT?

Another thing that caught my eye:

{code:java}
            // restore accessibility if previously changed
            if (forceAccess && !Modifier.isPublic(field.getModifiers()))
                field.setAccessible(false);
{code}

1. missing curly brackets ;-) We use curly brackets even for one line blocks.
2. I'm not sure whether {{!Modifier.isPublic(field.getModifiers()))}} really is the same as {{Field.isAccessible() == false}}. Reading through the JavaDoc of {{Field.setAccessible(boolean)}} sounds like it is a difference. But I don't know. It think it would be better to get the field via {{getField(cls, fieldName, false)}}, store the accessibility, do all neccessary operations and then restore the original state. This way you only need to restore the accessibility once.","26/Aug/14 21:03;andd;Hi Benedikt,

bq. Maybe we should add a comment in JavaDoc, that users have to take care of restoring accessibility when using getField()...

Yes, adding a comment in the corresponding JavaDoc is a good idea and will raise the attention for a potential ""accessibility leak"" a bit more. Should I change the JavaDoc accordingly as part of this issue or should this be a dedicated issue and patch?

bq. However I think it would be better to use FieldUtils.readField() to check if the field has been set correctly and to assert that the field is not accessible after the call to writeField(). WDYT?

I think the author of the original test code wanted to use ""pure"" Java for the assertion. The correct behavior of {{Field.get()}} is guaranteed by the JDK while {{FieldUtils.readField()}} is not (since this method is tested in the same test class and execution order of jUnit tests might be random). So from my understanding the avoidance of a method of the class under test to test another method within the class under test is on purpose. So my intention here was really to use the minimum amount of changes to the original code to keep the tests green and this one-liner was the shortest solution.

Maybe this is a smell that tests for the correct restoring of the accessibility is missing? O:) I will add further tests to assert that accessibility is restored correctly. This should not be tested implicitly within the {{testWrite…()}}. Ok?

bq. 1. missing curly brackets ;-) We use curly brackets even for one line blocks.

Sorry, you are write. I will change this.

bq. 2. I'm not sure whether {{!Modifier.isPublic(field.getModifiers()))}} really is the same as {{Field.isAccessible() == false}}. Reading through the JavaDoc of {{Field.setAccessible(boolean)}} sounds like it is a difference. But I don't know. It think it would be better to get the field via {{getField(cls, fieldName, false)}}, store the accessibility, do all neccessary operations and then restore the original state. This way you only need to restore the accessibility once.

The reason for the usage of {{Modifier.isPublic()}} is the used workaround for JDK 1.3 in {{getField()}} (see line 107). The accessibility of the field is only set to true, when forceAccess is true and the modifier is public. That’s why I need to check both before evantually restoring accessibility to false. But I totally agree with you, that it looks confusing. I don’t know if we can solve this without jeopardizing the workaround.

Sorry if the patch is that confusing, but I really spent a lot of time to understand the original code and then tried to use a minimum amount of changes to fix issue #965. Thus, I am afraid some of your remarks address the original code as well. :-/

See you,
André","27/Aug/14 09:18;britter;Hello André,

bq. Should I change the JavaDoc accordingly as part of this issue or should this be a dedicated issue and patch?

a new issue for this small change is a bit overkill. Just add it to your patch.

bq. I think the author of the original test code wanted to use ""pure"" Java for the assertion. The correct behavior of Field.get() is guaranteed by the JDK while FieldUtils.readField() is not [...]

yes, but correctness of {{readField()}} is asserted by individual unit tests for that method, so I think it's okay to use it in the test for {{writeField()}} if this makes the test code easier to understand.

bq. I will add further tests to assert that accessibility is restored correctly. This should not be tested implicitly within the testWrite…(). Ok?

I'm fine with what ever apporach you take ({{Field.get() or readField()}}, as long as we have have test code that really asserts that the accessibility is restored.

bq. The reason for the usage of Modifier.isPublic() is the used workaround for JDK 1.3 in getField() (see line 107).

I'm not sure I've mae myself clear enough. I'll try to explain better :-) My critique is, that the code for restoring accessibility is duplicated, although the one {{writeField()}} calls the other. So the idea is use {{getField}} with forceAccess = false to retrieve the field. This will return the field, even if it is not accessible. After that you can simply call the other {{writeField()}} and pass the forceAccess parameter into it. That method in turn will handle restoring of the accessibility flag for you.

bq. Sorry if the patch is that confusing, but I really spent a lot of time to understand the original code and then tried to use a minimum amount of changes to fix issue #965. Thus, I am afraid some of your remarks address the original code as well. :-/

no problem :) this code base has a long history and parts of it are confusing. We're currently building up a shared understanding of the code in question and you're doing a good job here.","27/Aug/14 18:06;andd;Hello Benedikt,

many thanks for your remarks.

bq. a new issue for this small change is a bit overkill. Just add it to your patch.

Done.

bq. yes, but correctness of readField() is asserted by individual unit tests for that method, so I think it's okay to use it in the test for writeField() if this makes the test code easier to understand.

Done. It's really more readable like this.

bq. So the idea is use getField with forceAccess = false to retrieve the field. This will return the field, even if it is not accessible. After that you can simply call the other writeField() and pass the forceAccess parameter into it. That method in turn will handle restoring of the accessibility flag for you.

I changed this as well and the code looked really nice ;-) ... but unfortunately it broke the tests, because this changed the required behavior of the method :-(

""forceAccess"" is a little bit misleading here, because it does not mean ""always assure setAccessible(true)"" is called, it rather means ""break the scope"" or more precisely ""also search superclasses for this field"". So when trying to read or write a field with the proposed implementation, the field could not be found anymore if it is specified in a superclass.

After that I investigated the code of {{FieldUtils}} more and discovered that my patch does not cover all accessibility changes :-( It seems the accessibility is changed literally everywhere ;-) I followed a lot of paths and finally came to the conclusion that my original approach of ""use the minimum amount of code changes"" is not sufficient to cope with this problem.

So I will work on a more elaborated patch. Just want to inform you that this might take a while, because the underlying issue is more complex than I initially expected O:-)  

Best regards,
André","28/Aug/14 06:18;britter;Hello André,

yes I see, it's the continue statement in line 112 that breaks stuff. Making this dependend upon forceAccess doesn't make sense to me. Feel free to refactor this, but keep in mind: Method signatures must not be changed to preserve backwards compatibility. Instead we have to deprecate methods if we can't fix them internally and then provide an alternative implementation (with a different signature).

Benedikt","06/Sep/14 09:19;andd;Ok, after some further analysis my understanding is as follows:

o accessibility is changed explicitly in
   - {{readField(final Field field, final Object target, final boolean forceAccess)}} and
   - {{writeField(final Field field, final Object target, final Object value, final boolean forceAccess)}}

o furthermore, accessibility may be changed implicitly in every read/write method which needs to resolve a field by name first, when calling
   - {{getField(final Class<?> cls, final String fieldName, final boolean forceAccess)}} or
   - {{getDeclaredField(final Class<?> cls, final String fieldName, final boolean forceAccess)}}

So my proposal is to have only one place where accessibility is changed, which will simplify restoring of accessibility a lot. Therefore I added two methods for the internal resolution of fields, which do not modify accessibility. I made those two methods private, so public API is not changed.
","06/Sep/14 12:11;sebb@apache.org;Possible simplification:

{code}
+        final boolean originalAccessibility = field.isAccessible();
         if (forceAccess && !field.isAccessible()) {
{code}

could be written as

{code}
+        final boolean originalAccessibility = field.isAccessible();
         if (forceAccess && !originalAccessibility) {
{code}

Alternatively, just set a flag when accessibility is forced:

{code}
boolean wasInaccessible = false;
if (forceAccess && !field.isAccessible()) {
    wasInaccessible = true;
   ...
}

...
     finally {
         if (wasInaccessible) {
            field.setAccessible(false);
        }
     }
{code}

This avoids a redundant setAccessible() call where the accessibility was not changed
","16/Oct/14 06:25;britter;This needs more thought. There is a fundamental problem with getField, since neither the user nor we can tell if the accessibility has been changed after we have handed the field out of the API. My opinion is, to get this right we will have to implement something like:

{code:java}
FieldUtils.doWithField(""fieldName"", true, new FieldAccessCallback(Field theField) {
   // user can do something with the field here
});
{code}

In doWithField we can restore the accessibility after we have called the callback.","16/Oct/14 11:58;sebb@apache.org;I don't understand. 

Surely the issue here is methods that need to temporarily change the accessible flag in order to work ought to restore the original accessibility status?

If the user subsequently changes the status, so what?

I don't follow how fixing the original issue can affect users.","20/Oct/14 09:22;britter;The problem is with the getField method, which is used by read/writeField methods. When calling getField with forceAccess = true, the user of the method does not know whether accessibility of the Field has been changed. Simply calling setAccessible(false) doesn't work because the field may have been accessible before. So the user cannot restore the accessibility to it's initial state. That is why I was think of some kind of callback, so that FieldUtils can restore accessibility after handing the field to the user.","21/Oct/14 19:19;sebb@apache.org;I see.
An alternative would be for the getField Method to return both the Field and whether the accessibility had to be changed.

e.g. the method could accept a MutableBoolean parameter. Or it could return a (Field, boolean) class.

Obviously this is an API change so could only be used from the wrapper classes, but it could be re-used from the existing getField method(s).","22/Oct/14 08:08;joehni;Why do we care so much about the original state? The critical point is setting the accessible, because of a SecurityManager. Therefore it should only be called if necessary. However, since the JDK methods return always a new instance of Field (or Method or Constructor), the state is modified for this particular instance only.","03/Jun/16 14:57;githubbot;Github user PascalSchumacher commented on a diff in the pull request:

    https://github.com/apache/commons-lang/pull/141#discussion_r65721245
  
    --- Diff: src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java ---
    @@ -142,21 +193,57 @@ public static Object invokeMethod(final Object object, final String methodName,
          * @throws InvocationTargetException wraps an exception thrown by the method invoked
          * @throws IllegalAccessException if the requested method is not accessible via reflection
          */
    -    public static Object invokeMethod(final Object object, final String methodName,
    +    public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName,
                 Object[] args, Class<?>[] parameterTypes)
                 throws NoSuchMethodException, IllegalAccessException,
                 InvocationTargetException {
             parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);
             args = ArrayUtils.nullToEmpty(args);
    -        final Method method = getMatchingAccessibleMethod(object.getClass(),
    -                methodName, parameterTypes);
    +        
    +        final String messagePrefix;
    +        final Method method;
    +        if (forceAccess) {
    +            messagePrefix = ""No such method: "";
    +            method = getMatchingMethod(object.getClass(), methodName, parameterTypes);
    +            if (method != null) {
    +                method.setAccessible(true);
    --- End diff --
    
    For `FieldUtils` there is this jira issue: https://issues.apache.org/jira/browse/LANG-965?jql=project%20%3D%20LANG%20AND%20status%20%3D%20Open%20ORDER%20BY%20priority%20DESC ""FieldUtils methods leak accessible flags"" with requests that the visibility of a field should be restored after the field is written. Maybe the visibility of the method should also be restored after it is invoked? What do think? 
","23/Oct/16 16:11;pascalschumacher;I'm closing this as ""Won't Fix"" because (as Joerg said) setAccessible only modifies the behavior of the Field object not of the actual underlying field of the object. ",,,,,,,,,,,,,
org.apache.commons.lang3.reflect.FieldUtils.removeFinalModifier(Field) does not clean up after itself,LANG-961,12692384,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,garydgregory,garydgregory,30/Jan/14 21:43,04/Mar/14 17:19,07/Apr/19 20:37,30/Jan/14 22:08,3.2,3.2.1,,,3.3,,lang.reflect.*,,,0,,,,,,,,"FieldUtils.removeFinalModifier(Field) calls setAccessible(true) on the Field it is working on but does not reset it to false when done, after the final modifier has been removed. Also the method does not need to call setAccessible(true) if the field is already accessible.

- Only call setAccessible when needed
- Refactor and add a new method removeFinalModifier(Field field, boolean forceAccess)
","Apache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 11:22:22-0400)
Maven home: C:\Java\apache-maven-3.1.1\bin\..
Java version: 1.7.0_51, vendor: Oracle Corporation
Java home: C:\Program Files\Java\jdk1.7.0_51\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,370979,,,Thu Jan 30 22:08:45 UTC 2014,,,,,,0|i1rxqf:,371284,,,,,,,,30/Jan/14 22:08;garydgregory;Committed revision 1562994.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser javadoc incorrectly states that SimpleDateFormat is used internally,LANG-958,12691152,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Done,chonton,chonton,chonton,24/Jan/14 23:19,28/May/16 16:36,07/Apr/19 20:37,24/Jan/14 23:30,3.2,3.2.1,,,3.3,,lang.time.*,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,369895,,,Fri Jan 24 23:30:48 UTC 2014,,,,,,0|i1rr3z:,370197,,,,,,,,24/Jan/14 23:30;chonton;changelist 1561228,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"WordUtils.wrap(String, int) doesn't behave according to JavaDoc",LANG-957,12691052,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,britter,britter,24/Jan/14 15:14,03/May/14 19:27,07/Apr/19 20:37,03/May/14 19:27,3.2.1,,,,,,lang.text.*,,,0,,,,,,,,"The JavaDoc of {{WordUtils.wrap(String, int)}} says that leading white spaces on new lines are stripped from the result. However the following test will fail, since the leading spaces of the second line are not stripped from the resultL

{code:java}
@Test
public void testWordUtils_StringInt_LeadingWhitespaces {
        input = ""spaces                               spaces"";
        expected = ""spaces              "" + systemNewLine + ""spaces"";
        assertEquals(expected, WordUtils.wrap(input, 20));
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-05-03 19:27:35.607,,,false,,,,,,,,,,,,,,369795,,,Sat May 03 19:27:35 UTC 2014,,,,,,0|i1rqhr:,370097,,,,,,,,03/May/14 19:27;dmjones500;A later bug was opened for this issue and resolved with a patch supplied from GitHub.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
uncaught PatternSyntaxException in FastDateFormat on Android,LANG-954,12689696,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bananeweizen,bananeweizen,19/Jan/14 10:21,04/Mar/14 17:19,07/Apr/19 20:37,24/Jan/14 17:14,3.2.1,,,,3.3,,lang.time.*,,,1,datetime,,,,,,,"When updating from lang 3.1.0 to 3.2.1 FastDateFormat stopped working on an Android project of mine, throwing uncaught regular expression exceptions for simple formats like ""yyyy-MM-dd'T'"".

{code}
Caused by: java.util.regex.PatternSyntaxException: U_ILLEGAL_ARGUMENT_ERROR
(\p{IsNd}++)\Q-\E(\p{IsNd}++)\Q-\E(\p{IsNd}++)\QT\E
at java.util.regex.Pattern.compileImpl(Native Method)
at java.util.regex.Pattern.compile(Pattern.java:400)
at java.util.regex.Pattern.<init>(Pattern.java:383)
at java.util.regex.Pattern.compile(Pattern.java:374)
at org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:148)
at org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:104)
at org.apache.commons.lang3.time.FastDateFormat.<init>(FastDateFormat.java:370)
at org.apache.commons.lang3.time.FastDateFormat$1.createInstance(FastDateFormat.java:91)
at org.apache.commons.lang3.time.FastDateFormat$1.createInstance(FastDateFormat.java:88)
at org.apache.commons.lang3.time.FormatCache.getInstance(FormatCache.java:82)
at org.apache.commons.lang3.time.FastDateFormat.getInstance(FastDateFormat.java:148)
{code}

more stack traces in this Jenkins output: http://ci.cgeo.org/job/c-geo/1686/console",Android 2.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-19 13:29:13.337,,,false,,,,,,,,,,,,,,368663,,,Fri Jan 24 17:13:34 UTC 2014,,,,,,0|i1rjjr:,368967,,,,,,,,19/Jan/14 13:29;britter;We should fix this for 3.3,"20/Jan/14 18:20;britter;I can confirm, that the following worked with 3.1 but not with current trunk:

{code:java}
    public void testName() throws Exception {
        String pattern = ""yyyy-MM-dd'T"";
        final FastDateFormat formatter = FastDateFormat.getInstance(pattern);
    }
{code}

We most certainly introduced this with LANG-462. Gotta dig deeper.","20/Jan/14 20:44;britter;Now it starts to get complicated, because the following also fails:

{code:java}
    @Test
    public void testSimpleDateFormat() throws Exception {
        String pattern = ""yyyy-MM-dd'T"";
        Date result = SimpleDateFormat.getInstance().parse(pattern);
    }
{code}

No I'm really wondering why this worked with 3.1, since this does not seem to be a valid date format...","20/Jan/14 20:54;sebb@apache.org;Should there be a closing single-quote, i.e. as below:?

{code}
String pattern = ""yyyy-MM-dd'T'"";
{code}","21/Jan/14 18:46;britter;Good catch. Seems that I've messed that up while copy pasting. I've committed a test with the pattern in question. It works in my environment. My guess it, that is may have something to do with Android?","21/Jan/14 18:56;sam@rfc1149.net;It might be. I tried the very same library as the failing one (directly from the cgeo project) with a Scala REPL on x86_64 and it seems to work fine indeed:

{code}
cgeo/main/libs% scala -cp :commons-lang3-3.2.1.jar
Welcome to Scala version 2.10.3 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_51).
Type in expressions to have them evaluated.
Type :help for more information.

scala> org.apache.commons.lang3.time.FastDateFormat.getInstance(""yyyy-MM-dd'T'"").parse(""2014-01-21T"")
res0: java.util.Date = Tue Jan 21 00:00:00 CET 2014
{code}",24/Jan/14 13:42;britter;A co-worker tested this for me with the latest Android versions. It seems that this is broken there as well. So it doesn't only affect Android 2.1.,"24/Jan/14 14:28;sebb@apache.org;I suspect the problem is that Android does not support \p{IsNd} which is the Unicode block for Number, Decimal digit.
If so, that would seem to be a bug in Android.

The IsNd block includes characters such as Arabic numerals which may perhaps appear in dates to be parsed.",24/Jan/14 15:11;sebb@apache.org;Just noticed that the change from \d to \p{IsNd} was done as part of LANG-826 - support for Locales that don't use ASCII digits,"24/Jan/14 15:53;sebb@apache.org;Some experimentation on my phone shows that Android does not like {code}\p{IsNd}{code}
However, it does seem to be OK with {code}\p{Nd}{code}
Android does not seem to like the ""Is"" optional prefix (nor does it like ""is"")","24/Jan/14 16:02;sebb@apache.org;URL: http://svn.apache.org/r1561045
Log:
LANG-954 uncaught PatternSyntaxException in FastDateFormat on Android

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java","24/Jan/14 17:13;sebb@apache.org;URL: http://svn.apache.org/r1561071
Log:
Oops - wrong section

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml",,,,,,,,,,,,,,,,,,,
Inconsistent handling of empty string,LANG-952,12689050,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,britter,britter,britter,15/Jan/14 17:43,01/Jan/15 18:23,07/Apr/19 20:37,,3.2.1,,,,3.x,,lang.*,,,2,,,,,,,,"As discussed on the ML (http://markmail.org/message/sfpmt4mv54om4cyf) and in LANG-823 some methods handle the empty string inconsistently. For example:

{code:java}
StringUtils.containsNone("""", *) = StringUtils.containsOnly("""", *) = true
{code}

In this example it makes no sense, that the empty string at the same time contains no character and contains any character. There is no reason to treat the empty string specially. It should be handled like an arbitrary string. It needs to be checked if there are more examples for inconsistent empty string handling.",,,,,,,,,,,,,LANG-823,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-12-30 19:43:42.211,,,false,,,,,,,,,,,,,,368017,,,Thu Jan 01 18:23:51 UTC 2015,,,,,,0|i1rflz:,368324,,,,,,,,"24/Jan/14 13:45;britter;Another example is 
{code:java}
StringUtils.isAlphaSpace(CharSequence)
{code}

which returns true for the empty String. Clearly the empty string is neither an alpha numeric character nor a whitespace, so this should return false.","22/Feb/14 11:25;britter;This needs more time to identify all places where we have to change empty string handling, so I'm moving this to 3.x","30/Dec/14 19:43;anoordover;Doesn't seem very easy to implement a consistent logic.
e.g. isAlphaSpace should return isAlpha || isWhitespace. isWhitespace returns true for an empty string so isAlphaSpace should return true as well.
And to be honest others might have another opinion about this.",01/Jan/15 18:23;britter;Yes you're right. The important thing is to make a choice and implement that behavior consistently though out the library.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fragments are wrong by 1 day when using fragment YEAR or MONTH,LANG-951,12688713,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,s.goetz,s.goetz,14/Jan/14 10:06,19/Mar/14 12:24,07/Apr/19 20:37,20/Jan/14 17:24,3.1,,,,3.3,,lang.time.*,,,0,,,,,,,,"When one trys to get the fragments of a calendar object and uses the fragment YEAR or MONTH, the returned value is wrong by 1 day in the targeted timeunit. The bug resides in the class *DateUtils* in function 
{code}
private static long getFragment(Calendar calendar, int fragment, int unit)
{code}

There is an initial recalculation if the fragment is YEAR or MONTH. So if one would like to have the minutes for the fragment YEAR for the date 2000-01-01 00:00:00 this would return 1440 which is actually wrong. The error can be found on lines 1635 - 1643.

Suggested fix:
{code}
// Fragments bigger than a day require a breakdown to days
        switch (fragment) {
            case Calendar.YEAR:
                result += ((calendar.get(Calendar.DAY_OF_YEAR)-1) * MILLIS_PER_DAY) / millisPerUnit;
                break;
            case Calendar.MONTH:
                result += ((calendar.get(Calendar.DAY_OF_MONTH)-1) * MILLIS_PER_DAY) / millisPerUnit;
                break;
        }
{code}",,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,20/Jan/14 08:40;s.goetz;LANG-951.patch;https://issues.apache.org/jira/secure/attachment/12623921/LANG-951.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2014-01-17 12:26:10.578,,,false,,,,,,,,,,,,,,367732,,,Mon Jan 20 17:23:49 UTC 2014,,,,,,0|i1rdvj:,368039,,,,,,,,"17/Jan/14 12:26;britter;Hello Sebastian,

would it be possible that you create a patch file that contains a junit test that fails without the proposed fix and is successful after including it?

Also, if you plan to contribute on a regular basis (which I would appreciate ;-) ) you should file an [Individual Contributor Licence Agreement|http://www.apache.org/licenses/].

Thanks!
Benedikt","20/Jan/14 08:40;s.goetz;Dear Beneditk,

I have attached a path file containing the JUnit testcase and the suggested fix. Since this is the first time I ever provided a patch to an open source project I hope I made it the way you are used to have it.

After applying my fix my own testcase runs without error but actually breaks 16 others. After reviewing what is tested there they seem to be broken rightly. I haven't done anything to prevent them from breaking. Actually the testcases are wrong.

In the DateUtilsTest.java the date tested against is August 23rd, 19:53:47.991. So for example to calculate the passed hours of the month (which is what the testcase 'testHoursOfMonthWithDate' does) one would have to do the following math 22 days * 24 hours + 19 hours = 547. The testcase assumes that the correct value is 571 which resolves to 23 days * 24 hours + 19 hours which is actually wrong from my point of view.","20/Jan/14 17:23;britter;Hello Sebastian,

you're right. There was a bug hiding that even found his way into the test case :) Thanks for spotting this. If committed your test in [rev. 1559780|http://svn.apache.org/r1559780], please review. If you intend to contribute more often in the future (which I would appreciate ;-) ) please be sure to only use spaces to indent your code, since displaying of the tab character depends on the editor you use (I've corrected that in your patch). Also, please file an [ICLA|http://www.apache.org/licenses], it makes things easier for us.

Thanks!
Benedikt",,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser does not handle two digit year parsing like SimpleDateFormat,LANG-950,12688629,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,chonton,chonton,chonton,13/Jan/14 22:53,28/May/16 16:32,07/Apr/19 20:37,13/Jan/14 23:01,,,,,3.3,,,,,0,,,,,,,,"SimpleDateFormat has a set2DigitYearStart(Date startDate)  method to determine the start of the default century.  FastDateParser uses a static 80 years in the past as the default century start.

The application should be able to set the default century as part of the constructor.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,367648,,,Mon Jan 13 23:01:56 UTC 2014,,,,,,0|i1rdcv:,367955,,,,,,,,13/Jan/14 23:01;chonton;revision 1557882,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception while using ExtendedMessageFormat and escaping braces,LANG-948,12688219,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,n.chieffo@tecla.it,n.chieffo@tecla.it,10/Jan/14 11:07,06/Apr/15 17:28,07/Apr/19 20:37,14/Mar/15 12:48,3.2,3.2.1,,,3.4,,lang.text.*,,,0,,,,,,,,"Exception while trying to format a string containing escaped braces

{code}
Exception in thread ""main"" java.lang.IllegalArgumentException: Invalid format argument index at position 7: }
	at org.apache.commons.lang3.text.ExtendedMessageFormat.readArgumentIndex(ExtendedMessageFormat.java:357)
	at org.apache.commons.lang3.text.ExtendedMessageFormat.applyPattern(ExtendedMessageFormat.java:167)
	at org.apache.commons.lang3.text.ExtendedMessageFormat.<init>(ExtendedMessageFormat.java:128)
	at org.apache.commons.lang3.text.ExtendedMessageFormat.<init>(ExtendedMessageFormat.java:113)
	at test.TestExtendedMessageFormat.main(TestExtendedMessageFormat.java:16)
{code}

I will attach a source",,,,,,,,,,,,,,,,,,,,,,,,,,10/Jan/14 11:08;n.chieffo@tecla.it;TestExtendedMessageFormat.java;https://issues.apache.org/jira/secure/attachment/12622378/TestExtendedMessageFormat.java,10/Jan/14 11:11;n.chieffo@tecla.it;TestExtendedMessageFormat2.java;https://issues.apache.org/jira/secure/attachment/12622379/TestExtendedMessageFormat2.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2014-01-29 19:11:47.379,,,false,,,,,,,,,,,,,,367238,,,Sat Mar 14 13:11:27 UTC 2015,,,,,,0|i1raun:,367547,,,,,,,,10/Jan/14 11:11;n.chieffo@tecla.it;another similar test case with the same exception,"29/Jan/14 19:11;dmjones500;I think the problem lies with the {{appendQuotedString}} method, however I'm struggling to fix it because I'm not 100% sure what that method should be doing.

I propose that we make that method static and package-private, so we can unit test it in isolation. (It probably should be static anyway, as it uses no instance fields). My confusion is about the desired effect of the {{escapingOn}} attribute. I'm assuming that when it's {{true}}, two single quotes next to each other are treated as an escaped single quote, and the resulting string pushed onto the buffer should have un-escaped quotes. Conversely, when it's {{false}}, two singles quotes are treated as a quoted string of zero length.

From these assumptions, I've created this little unit test:

{code:java}
@Test
public void testAppendQuotedString() throws Exception {
    assertEquals(""'test'"", readFirstQuotedString(""''test''123"", true));
    assertEquals(""'test'"", readFirstQuotedString(""'test'123"", true));
    assertEquals("""", readFirstQuotedString(""''test''123"", false));
}

private static String readFirstQuotedString(String input, boolean escapingOn) {
    StringBuilder builder = new StringBuilder();
    ExtendedMessageFormat.appendQuotedString(input, new ParsePosition(0), builder, escapingOn);
    return builder.toString();
}
{code}

Note: these tests currently fail.

If someone can confirm (or correct) my understanding, I can fix the method and hopefully this bug.","30/Jan/14 18:26;britter;If you have a fix that fixes the provided test cases and doesn't break any of the existing tests, I see no point not to apply it :) I'm okay with making methods static that do not access fields. Making methods package private for testability is also okay, if there is absolutely not other ways to test them (but in the end this often indicates a flawed design...)","13/Apr/14 14:07;githubbot;GitHub user Andrey-Khobnya opened a pull request:

    https://github.com/apache/commons-lang/pull/19

    Fix LANG-948

    Hi all!
    This is fix for bug LANG-948.
    
    Changes with explanations:
    1) Method ```ExtendedMessageFormat.appendQuotedString()``` returned when finds first quote character. This is obviously wrong because quoted string start with quote character and method must consume whole quoted string. I added handling of first quote character at the beginning of method. Also, it doesn't make sense to handle escaped quotes because ```super.applyPattern(stripCustom.toString())``` will called below in ```applyPattern()```. Thus, last argument should be ```false``` when calling ```appendQuotedString()```.
    
    2) Quoted string must start with quote character in ```appendQuotedString()```. And at this moment method is used this way. I added assertion to check and document this.
    
    3) Thus, method ```appendQuotedString()``` is called with last argument always ```false```. It doesn't make sense to handle escaped quotes in ```appendQuotedString()``` because they will be handled in ```super.applyPattern()```. Thus, I deleted this parameter and code for handling escaped quotes.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Andrey-Khobnya/commons-lang fix-948

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/19.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #19
    
----
commit 86e64df6ce7e879c5f608aa7276c251377574f56
Author: Andrey Khobnya <andrey@khobnya.me>
Date:   2014-04-13T12:36:07Z

    Fix LANG-948

commit 0f9222d5cccbe27fbda5ab9b97b231162e4b089b
Author: Andrey Khobnya <andrey@khobnya.me>
Date:   2014-04-13T12:42:02Z

    Add assertion in ExtendedMessageFormat.appendQuotedString() to check and
    document proper usage

commit 4d372f3ce65087c8863332c74c2563a165d7aa12
Author: Andrey Khobnya <andrey@khobnya.me>
Date:   2014-04-13T12:49:28Z

    It doesn't make sense to handle escaped quotes in
    ExtendedMessageFormat.appendQuotedString() because they will be handled
    in super.applyPattern()

----
","14/Mar/15 12:48;britter;{code}
$ svn ci -m ""LANG-948: Exception while using ExtendedMessageFormat and escaping braces. This fixes #19 from github. Thanks to Andrey Khobnya.""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java
Sending        src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java
Transmitting file data ...
Committed revision 1666679.
{code}

Thank you!","14/Mar/15 13:11;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/19
",,,,,,,,,,,,,,,,,,,,,,,,,
ConstantInitializerTest fails when building with IBM JDK 7,LANG-946,12687912,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,britter,britter,08/Jan/14 18:45,04/Mar/14 17:19,07/Apr/19 20:37,01/Feb/14 10:47,3.2.1,,,,3.3,,lang.concurrent.*,,,0,,,,,,,,"Found by Jörg Schaible during the vote for 3.2.1 RC1 [1]:

{code}
========================== %< ====================
Failed tests:
  ConstantInitializerTest.testToString:122 Wrong string:
ConstantInitializer@-669671219 [ object = 42 ]
========================== %< ====================
{code}

[1] http://markmail.org/message/7exdutk2cktec2yy",IBM JDK 7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,366919,,,Sat Feb 01 10:47:00 UTC 2014,,,,,,0|i1r8w7:,367230,,,,,,,,24/Jan/14 14:54;britter;We should try to fix this for 3.3,31/Jan/14 10:24;britter;I'm currently setting up an ubuntu  VM to investigate this.,"31/Jan/14 13:41;britter;The problem seems to be, that the IBM JDK returns a negative number as result of the {{Integer.toHexString(hashCode())}} of the default toString implementation. Changing the pattern used in the test case to allow an optional dash should fix this.",01/Feb/14 10:47;britter;Fixed in revision 1563388.,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Test DurationFormatUtilsTest.testEdgeDuration fails in JDK 1.6, 1.7 and 1.8, BRST time zone",LANG-943,12687374,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,kinow,kinow,kinow,05/Jan/14 23:24,04/Mar/14 17:19,07/Apr/19 20:37,20/Jan/14 18:45,3.1,3.2,3.2.1,,3.3,,,,,0,test-fail,timezone,,,,,,"While helping testing LANG-942 with JDK1.8 I always got three tests failing, while others had 2. After @britter fixed the issues related to JDK1.8, I continue getting errors with JDK1.8.

I decided to vote for [lang] 3.2.1 and test the tag with JDK 1.8 and a few others. However, I'm getting errors with any JDK, 1.6, 1.7 and 1.8 (build 121). Always the same error:

Failed tests: 
  DurationFormatUtilsTest.testEdgeDurations:467->assertEqualDuration:562->assertEqualDuration:575 expected:<7[7]> but was:<7[6]>

I get the same error with JDK 1.6 and the tag 3.1

Since the test is somewhat related to Time Zones (there are some Calendar's, TimeZone.getDefault(), etc), here's my locale and time zone:

kinow@chuva:~/java/apache/commons-lang-31$ locale
LANG=en_US.UTF-8
LANGUAGE=en_US
LC_CTYPE=""en_US.UTF-8""
LC_NUMERIC=""en_US.UTF-8""
LC_TIME=""en_US.UTF-8""
LC_COLLATE=""en_US.UTF-8""
LC_MONETARY=""en_US.UTF-8""
LC_MESSAGES=""en_US.UTF-8""
LC_PAPER=""en_US.UTF-8""
LC_NAME=""en_US.UTF-8""
LC_ADDRESS=""en_US.UTF-8""
LC_TELEPHONE=""en_US.UTF-8""
LC_MEASUREMENT=""en_US.UTF-8""
LC_IDENTIFICATION=""en_US.UTF-8""
LC_ALL=

kinow@chuva:~/java/apache/commons-lang-31$ date
Sun Jan  5 21:23:05 BRST 2014
","Apache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 12:22:22-0300)
Maven home: /opt/java/apache-maven-3.1.1
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.11.0-14-generic"", arch: ""amd64"", family: ""unix""

JDK 1.6.0_27, JDK 1.7.0_25, JDK 1.7.0_25",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-12 12:45:02.616,,,false,,,,,,,,,,,,,,366373,,,Mon Jan 20 18:45:56 UTC 2014,,,,,,0|i1r5in:,366684,,,,,,,,"05/Jan/14 23:26;kinow;Build (mvn clean test -e -X) fails for me in Ubuntu Linux 3.11.0-14-generic x86_64, Apache Maven 3.1.1 for:

########################
#     JDK 1.6.0_27     #
########################

Apache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 12:22:22-0300)
Maven home: /opt/java/apache-maven-3.1.1
Java version: 1.6.0_27, vendor: Sun Microsystems Inc.
Java home: /usr/lib/jvm/java-6-openjdk-amd64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.11.0-14-generic"", arch: ""amd64"", family: ""unix""
[...]
[...]
[...]
[...]
Results :

Failed tests: 
  DurationFormatUtilsTest.testEdgeDurations:467->assertEqualDuration:562->assertEqualDuration:575 expected:<7[7]> but was:<7[6]>

Tests run: 2392, Failures: 1, Errors: 0, Skipped: 4

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 52.186s
[INFO] Finished at: Sun Jan 05 21:05:29 BRST 2014
[INFO] Final Memory: 23M/262M
[INFO] ------------------------------------------------------------------------

########################
#     JDK 1.7.0_25     #
########################

Apache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 12:22:22-0300)
Maven home: /opt/java/apache-maven-3.1.1
Java version: 1.7.0_25, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-openjdk-amd64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.11.0-14-generic"", arch: ""amd64"", family: ""unix""
[...]
[...]
[...]
[...]
Results :

Failed tests: 
  DurationFormatUtilsTest.testEdgeDurations:467->assertEqualDuration:562->assertEqualDuration:575 expected:<7[7]> but was:<7[6]>

Tests run: 2392, Failures: 1, Errors: 0, Skipped: 5

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 44.062s
[INFO] Finished at: Sun Jan 05 21:10:30 BRST 2014
[INFO] Final Memory: 24M/337M
[INFO] -----------------------------------------------------------------------

########################
#     JDK 1.8.0b121     #
########################

Apache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a; 2013-09-17 12:22:22-0300)
Maven home: /opt/java/apache-maven-3.1.1
Java version: 1.8.0-ea, vendor: Oracle Corporation
Java home: /opt/java/jdk1.8.0/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""linux"", version: ""3.11.0-14-generic"", arch: ""amd64"", family: ""unix""
[...]
[...]
[...]
[...]
Results :

Failed tests: 
  DurationFormatUtilsTest.testEdgeDurations:467->assertEqualDuration:562->assertEqualDuration:575 expected:<7[7]> but was:<7[6]>

Tests run: 2392, Failures: 1, Errors: 0, Skipped: 5

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 57.890s
[INFO] Finished at: Sun Jan 05 21:12:57 BRST 2014
[INFO] Final Memory: 24M/168M
[INFO] ----------------------------------------------------------------------
","07/Jan/14 13:29;kinow;Not sure if it was intentional, but the test is using the first day of daylight saving time in Brazil in 2005 [1].

When I run the code below, I get 1, instead of 0.

{code}
Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""America/Sao_Paulo""));
cal.set(2005, 9, 16, 0, 0, 0);
System.out.println(cal.get(Calendar.HOUR_OF_DAY));
{code}

So in the testEdgeDurations test, with the America/Sao_Paulo time zone, it is comparing the difference in days between 16/10/2005 01:00:00 and 01/01/2006 00:00:00. While the expected result is 77, because of this 01 hour added, the result is 76 (you can try that in [2]).

I fixed the issue locally, by adding the following line right after the testEdgeDurations method declaration:

{code}
// Since the test seems to expect the result to be timezone-agnostic
TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));
{code}

Does this seem like a valid fix for this issue? Without this, DateFormatUtils gets America/Sao_Paulo from TimeZone.getDefault(), what causes the test to fail.

Cheers

[1] http://pt.wikipedia.org/wiki/Anexo:Lista_de_per%C3%ADodos_em_que_vigorou_o_hor%C3%A1rio_de_ver%C3%A3o_no_Brasil
[2] http://www.onlineconversion.com/days_between_advanced.htm",12/Jan/14 12:45;britter;Setting this to 3.3,"17/Jan/14 12:30;britter;[~kinow] where do you set the TimeZone? In setUp()? Feel free to resolve this issue in trunk. I will make sure the fix doesn't break anything in my TimeZone and hopefully the others will check some additional time zones, when I roll out 3.3",20/Jan/14 18:45;kinow;Fixed in r1559802,,,,,,,,,,,,,,,,,,,,,,,,,,
Build fails with test failures when building with JDK 8,LANG-938,12686790,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,britter,britter,30/Dec/13 19:35,08/Jan/14 21:40,07/Apr/19 20:37,05/Jan/14 13:26,3.2,,,,3.2.1,,,,,0,,,,,,,,"During the vote on Lang 3.2 RC 2, Jörg Schaible pointed out, that the build fails when using JDK 8 [1]:

{code}
========================= %< ======================
Failed tests:
  FastDateParserTest.testParseZone:119 expected:<Thu Jul 10 22:33:20 CEST
2003> but was:<Thu Jul 10 23:33:20 CEST 2003>
  FastDateFormat_ParserTest>FastDateParserTest.testParseZone:119
expected:<Thu Jul 10 22:33:20 CEST 2003> but was:<Thu Jul 10 23:33:20 CEST
2003>

Tests in error:
  LocaleUtilsTest.testParseAllLocales:570 » IllegalArgument Invalid locale
forma...
========================= %< ======================
{code}

[1] http://markmail.org/message/5mrq4bcnhyfvlvwx",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,365783,,,Sun Jan 05 13:26:05 UTC 2014,,,,,,0|i1r1vb:,366090,,,,,,,,05/Jan/14 13:26;britter;Subtasks have been resolved. Issue marked as resolved.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.getLevenshteinDistance with too big of a threshold returns wrong result,LANG-936,12684815,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,kunda,kunda,15/Dec/13 15:18,22/Jan/14 08:20,07/Apr/19 20:37,22/Jan/14 08:19,3.1,,,,3.3,,lang.*,,,0,,,,,,,,"StringUtils.getLevenshteinDistance(CharSequence s, CharSequence t, int threshold) specifies:
{quote}
{{Find the Levenshtein distance between two Strings if it's _+*less than or equal to*+_ a given threshold.}}
{quote}

When passing a threshold > *Integer.MAX_VALUE - max(s.length(), t.length())* the method always returns -1.
The simplest use case is passing *Integer.MAX_VALUE* (a common practice if one would want to find the min/max LD of a string to several other strings in an iterative fashion.

The code should be fixed to consider the threshold in relation to the source/target lengths, or alternatively the javadoc should be fixed to pronounce the current limit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2014-01-20 18:53:19.345,,,false,,,,,,,,,,,,,,363887,,,Wed Jan 22 08:19:55 UTC 2014,,,,,,0|i1qq27:,364193,,,,,,,,20/Jan/14 18:53;elindsey;Submitted a patch via github PR to handle this case - https://github.com/apache/commons-lang/pull/14,20/Jan/14 20:31;britter;Setting this to review patch.,"22/Jan/14 08:19;bayard;Thanks Yaniv + Eli :)

svn ci -m ""Applying Eli Lindsey's patch to Yaniv Kunda's report in LANG-936 that StringUtils.getLevensteinDistance(String, String, int) gave the wrong answer when the int threshold is near Integer.MAX_VALUE"" .
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/StringUtils.java
Sending        src/test/java/org/apache/commons/lang3/StringUtilsTest.java
Transmitting file data ...
Committed revision 1560275.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add removeFinalModifier to FieldUtils,LANG-934,12681990,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,maurizio.cucchiara,maurizio.cucchiara,maurizio.cucchiara,01/Dec/13 10:20,02/Jan/14 16:19,07/Apr/19 20:37,01/Dec/13 10:37,,,,,3.2,,lang.reflect.*,,,0,,,,,,,,"Add a method which allows to remove the final modifier from a field
See http://goo.gl/jO1vJh for further details.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,361249,,,Sun Dec 01 10:37:48 UTC 2013,,,,,,0|i1q9tr:,361548,,,,,,,,01/Dec/13 10:37;maurizio.cucchiara;Fixed on trunk http://svn.apache.org/r1546799 ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue with OctalUnescaper,LANG-928,12675921,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,26/Oct/13 02:01,26/Oct/13 02:14,07/Apr/19 20:37,26/Oct/13 02:14,,,,,3.2,,lang.text.translate.*,,,0,,,,,,,,"See this GitHub pull request:

https://github.com/apache/commons-lang/pull/5",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,355418,,,Sat Oct 26 02:14:56 UTC 2013,,,,,,0|i1p9uf:,355706,,,,,,,,"26/Oct/13 02:14;bayard;svn ci -m ""Applying github pull request https://github.com/apache/commons-lang/pull/5, linked as LANG-928, fixing a bug in OctalEscaper trying to parse octal numbers longer than 3 digits"" .
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java
Sending        src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java
Transmitting file data ...
Committed revision 1535911.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
In FieldUtils replace Validate.isTrue(object != null) with Validate.notNull(object),LANG-924,12674494,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,britter,britter,18/Oct/13 12:11,19/Oct/13 23:16,07/Apr/19 20:37,18/Oct/13 12:18,3.1,,,,,,lang.reflect.*,,,0,,,,,,,,"Methods in FieldUtils validate input using code like:

{code}
Validate.isTrue(cls != null, ""The class must not be null"")
{code}

This could be changed to:

{code}
Validate.notNull(cls, ""The class must not be null"")
{code}

However this could affect client code, since isTrue(boolean) throws IllegalArgumentException and notNull throws NullPointerException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-18 16:42:29.62,,,false,,,,,,,,,,,,,,354116,,,Fri Oct 18 16:42:29 UTC 2013,,,,,,0|i1p1v3:,354408,,,,,,,,"18/Oct/13 12:18;britter;Changing this in not a good idea on second thought because it will produce stack traces like:

{code}
java.lang.NullPointerException: Cannot locate declared field class org.apache.commons.lang3.reflect.testbed.PublicChild.s
	at org.apache.commons.lang3.Validate.notNull(Validate.java:222)
	at org.apache.commons.lang3.reflect.FieldUtils.readDeclaredField(FieldUtils.java:475)
	at org.apache.commons.lang3.reflect.FieldUtils.readDeclaredField(FieldUtils.java:450)
	at org.apache.commons.lang3.reflect.FieldUtilsTest.testReadDeclaredNamedField(FieldUtilsTest.java:653)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:77)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
{code}","18/Oct/13 16:42;mbenson;Yes, I made the changes locally before deciding that changing from NPE to IllegalArgumentException was an unacceptable violation of BC.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BooleanUtils.xor(boolean...) produces wrong results,LANG-921,12673940,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,britter,britter,15/Oct/13 17:46,02/Jan/14 16:19,07/Apr/19 20:37,15/Oct/13 18:32,3.1,,,,3.2,,lang.*,,,0,,,,,,,,"BooleanUtils.xor(true, true, false, true) returns false, although 
true ^ true ^ false ^ true is true. This is because the implementation only checks the count of true in the provided array.",,,,,,,,,,,,,,,,LANG-922,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,353563,,,Tue Oct 15 18:32:26 UTC 2013,,,,,,0|i1oyhb:,353855,,,,,,,,"15/Oct/13 18:32;britter;{code}
localhost:lang bene$ svn ci -m ""LANG-921 - BooleanUtils.xor(boolean...) produces wrong results""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/BooleanUtils.java
Sending        src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java
Transmitting file data ...
Committed revision 1532476.
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add ArrayUtils#nullToEmpty(Class<?>[]),LANG-920,12673485,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,mbenson,mbenson,mbenson,11/Oct/13 19:35,15/Oct/13 02:32,07/Apr/19 20:37,11/Oct/13 19:39,3.1,,,,3.2,,lang.*,,,0,,,,,,,,{{Class}} is a ubiquitous array component type. This method can be immediately consumed by [lang]'s own reflection code.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,353108,,,Fri Oct 11 19:39:23 UTC 2013,,,,,,0|i1ovn3:,353395,,,,,,,,11/Oct/13 19:39;mbenson;Committed revision 1531399.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Exception when combining custom and choice format in ExtendedMessageFormat,LANG-917,12668956,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,aburmeis,aburmeis,17/Sep/13 07:32,24/Oct/13 20:54,07/Apr/19 20:37,24/Oct/13 20:54,2.5,2.6,,,3.2,,lang.text.*,,,0,patch,,,,,,,"When using a custom format registered and a choice format with an inner format is used in the same message format, an IndexOutOfBoundsException occurs in the custructor of ExtendedMessageFormat:

{code:java}new ExtendedMessageFormat(""Hi {0,test,any}, got {1,choice,0#none|1#one|1<{1,number}}"", Collections.singletonMap(""test"", new TestFormatFactory()));{code}

{noformat}
java.lang.IndexOutOfBoundsException: Index: 2, Size: 2
	at java.util.ArrayList.rangeCheck(ArrayList.java:604)
	at java.util.ArrayList.get(ArrayList.java:382)
	at org.apache.commons.lang.text.ExtendedMessageFormat.insertFormats(ExtendedMessageFormat.java:364)
	at org.apache.commons.lang.text.ExtendedMessageFormat.applyPattern(ExtendedMessageFormat.java:192)
	at org.apache.commons.lang.text.ExtendedMessageFormat.<init>(ExtendedMessageFormat.java:127)
{noformat}

The problem occurs at the start of {{\{1,number\}}}.

As a workaround i registered the {{TestFormatFactory}} also for ""choice"" and then returning {{new ChoiceFormat(arguments)}}, but that is not the idea.

I also checked the change logs, but there seems no change on this problem. I have not tester, but I think the bug still is present in the current release.
",,,,,,,,,,,,,,,,,,,,,,,,,,17/Sep/13 08:06;aburmeis;ExtendedMessageFormatTest.java;https://issues.apache.org/jira/secure/attachment/12603566/ExtendedMessageFormatTest.java,19/Oct/13 21:34;tn;LANG-917.patch;https://issues.apache.org/jira/secure/attachment/12609279/LANG-917.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-10-19 21:34:38.213,,,false,,,,,,,,,,,,,,348888,,,Thu Oct 24 20:54:48 UTC 2013,,,,,,0|i1o5q7:,349186,,,,,,,,19/Oct/13 21:34;tn;The attached patch fixes the problem (+ unit test) for 3.2.,"24/Oct/13 20:54;bayard;svn ci -m ""Applying Thomas' patch from LANG-917 - fixing Arne Burmeister's reported exception when combining custom and choice formats""
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java
Sending        src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java
Transmitting file data ...
Committed revision 1535547.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLONE - DateFormatUtils.format does not correctly change Calendar TimeZone in certain situations,LANG-916,12668399,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,chonton,cpm,cpm,13/Sep/13 01:19,19/Oct/16 07:00,07/Apr/19 20:37,01/May/15 02:29,3.1,,,,3.5,,lang.time.*,,,0,patch,time,,,,,,"In LANG-538 issue, there is an unit test:

{noformat}
  public void testFormat_CalendarIsoMsZulu() {
    final String dateTime = ""2009-10-16T16:42:16.000Z"";
    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(""GMT-8""));
    cal.clear();
    cal.set(2009, 9, 16, 8, 42, 16);
    cal.getTime();

    FastDateFormat format = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""GMT""));
    assertEquals(""dateTime"", dateTime, format.format(cal));
  }
{noformat}

This test passes successfully in lang-2.6 but failed in lang3-3.1:

{noformat}
org.junit.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>
{noformat}

Reproduced whit Sun Java version: 1.6.0_45 and 1.7.0_21 on Fedora 17 (Linux 3.9.10-100.fc17.i686.PAE).

Moreover, I wrote another unit test showing that the timeZone parameter seems to be ignored :
{noformat}
public void test() {
	Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));
	cal.set(2009, 9, 16, 8, 42, 16);

	// System.out.println(DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal));

	System.out.println(""long"");
	System.out.println(DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getDefault()));
	System.out.println(DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(),
			TimeZone.getTimeZone(""Asia/Kolkata"")));
	System.out.println(DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(),
			TimeZone.getTimeZone(""Europe/London"")));

	System.out.println(""calendar"");
	System.out.println(DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getDefault()));
	System.out.println(DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata"")));
	System.out.println(DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London"")));

	System.out.println(""calendar fast"");
	System.out.println(FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""Europe/Paris"")).format(cal));
	System.out.println(FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""Asia/Kolkata"")).format(cal));
	System.out.println(FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""Europe/London"")).format(cal));
}
{noformat}

Gives the following console logs:
{noformat}
long
2009-10-16T08:42:16+02:00
2009-10-16T12:12:16+05:30
2009-10-16T07:42:16+01:00
calendar
2009-10-16T08:42:16+02:00
2009-10-16T08:42:16+02:00
2009-10-16T08:42:16+02:00
calendar fast
2009-10-16T08:42:16.975Z
2009-10-16T08:42:16.975Z
2009-10-16T08:42:16.975Z
{noformat}

When DateFormatUtils.format takes a long parameter, the time string is good.
When DateFormatUtils.format takes a Calendar parameter, the time string is wrong, the timezone parameter is IGNORED.
","Sun JDK 1.6.0_45 and 1.7.0_21 on Fedora 17 (Linux 3.9.10-100.fc17.i686.PAE).
",,,,,,,,,,,LANG-538,,,,LANG-1092,,,,,,LANG-1123,,,,08/Apr/15 18:16;cpm;LANG-916-B.patch;https://issues.apache.org/jira/secure/attachment/12723977/LANG-916-B.patch,09/Apr/15 00:19;cpm;LANG-916-C.patch;https://issues.apache.org/jira/secure/attachment/12724073/LANG-916-C.patch,30/Apr/15 01:40;cpm;LANG-916-final-git.patch;https://issues.apache.org/jira/secure/attachment/12729372/LANG-916-final-git.patch,19/Oct/13 17:48;tn;LANG-916.patch;https://issues.apache.org/jira/secure/attachment/12609274/LANG-916.patch,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2013-10-19 17:48:32.723,,,false,,,,,,,,,,,,,,348333,,,Fri May 01 02:29:01 UTC 2015,,,,,,0|i1o2an:,348629,,,,,,,,19/Oct/13 17:48;tn;The attached patch solves the problem by creating a calendar with the correct timezone from the formatter before actually formatting the object.,20/Oct/13 14:08;britter;Setting this to Review Patch. ,21/Oct/13 05:17;bayard;Is the fix version here 2.7 or 3.2? Sounds like it's an issue in 3.1 rather than 2.6.,"21/Oct/13 05:40;tn;The patch was created against trunk, so is for 3.2",25/Oct/13 07:52;bayard;Christian - are you able to test out Thomas' patch? I'm wary to rely on successful builds on my side as they would have passed for 3.1 when that was released.,25/Oct/13 08:23;tn;Ah I forgot to add a unit test ...,"25/Oct/13 13:40;cpm;Move my System.out.println test in a @Test.

{noformat}
	@Test
	public void test23c2bis() throws Exception {

		System.out.println(""java_version: "" + SystemUtils.JAVA_VERSION);

		System.out.println(TimeZone.getDefault().getID());
		Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""));
		cal.set(2009, 9, 16, 8, 42, 16);

		// Long.
		{
			String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getDefault());
			Assert.assertEquals(""long"", ""2009-10-16T08:42:16+02:00"", value);
		}
		{
			String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(),
					TimeZone.getTimeZone(""Asia/Kolkata""));
			Assert.assertEquals(""long"", ""2009-10-16T12:12:16+05:30"", value);
		}
		{
			String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(),
					TimeZone.getTimeZone(""Europe/London""));
			Assert.assertEquals(""long"", ""2009-10-16T07:42:16+01:00"", value);
		}

		// Calendar.
		{
			String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getDefault());
			Assert.assertEquals(""calendar"", ""2009-10-16T08:42:16+02:00"", value);
		}
		{
			String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Asia/Kolkata""));
			Assert.assertEquals(""calendar"", ""2009-10-16T12:12:16+05:30"", value);
		}
		{
			String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone(""Europe/London""));
			Assert.assertEquals(""calendar"", ""2009-10-16T07:42:16+01:00"", value);
		}

		// calendar fast.
		{
			String value = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/Paris"")).format(cal);
			Assert.assertEquals(""calendar"", ""2009-10-16T08:42:16 +0200"", value);
		}
		{
			String value = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss Z"", TimeZone.getTimeZone(""Asia/Kolkata"")).format(cal);
			Assert.assertEquals(""calendar"", ""2009-10-16T12:12:16 +0530"", value);
		}
		{
			String value = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss Z"", TimeZone.getTimeZone(""Europe/London"")).format(cal);
			Assert.assertEquals(""calendar"", ""2009-10-16T07:42:16 +0100"", value);
		}
	}
{noformat}","25/Oct/13 13:42;cpm;I done the following actions:
- svn checkout https://svn.apache.org/repos/asf/commons/proper/lang/trunk commons-lang3 (last commit was r1535653 | bayard | 2013-10-25 10:19:29 +0200)
- mvn install => failed because tests failing, then I removed all tests
- mvn install, copy the generated jar in my local test project => testFormat_CalendarIsoMsZulu() and test23c2bis()  FAILED
- I put the patch, mvn install, copy the jar in my local test project => testFormat_CalendarIsoMsZulu() and test23c2bis() finished SUCCESSFULLY

I conclude that the patch is good. But I am disappointed that:
- before patch, some mvn tests not passed
- after patch, some of the passing FastDatePrinter mvn tests do not passed any longer.

Suggestions:
- add testFormat_CalendarIsoMsZulu()
- add test23c2bis() 
- check other tests in FastDatePrinter
- check other tests","25/Oct/13 19:01;bayard;Could you list the tests that fail when you build/test straight out of svn? I assume, from the committers involved, that we have people testing successfully in US/Pacific, US/Eastern and CET timezones, ","26/Oct/13 13:52;cpm;No more failed with fresh svn checkout (r1535916 | bayard | 2013-10-26 04:50:25 +0200). The magic of continuous integration? :-)

After patch:
{noformat}
Failed tests: 
  DateFormatUtilsTest.testTimeISO:165 expected:<T1[0]:11:12> but was:<T1[4]:11:12>
  DateFormatUtilsTest.testSMTP:215 expected:<Sun, 08 Jun 2003 1[0:11:12 -03]00> but was:<Sun, 08 Jun 2003 1[5:11:12 +02]00>
  DateFormatUtilsTest.testDateTimeISO:117 expected:<2002-02-23T[09]:11:12> but was:<2002-02-23T[13]:11:12>
  DateFormatUtilsTest.testTimeNoTISO:189 expected:<1[0]:11:12> but was:<1[4]:11:12>
  DateFormatUtilsTest.testDateISO:150 expected:<2002-02-23[-03]:00> but was:<2002-02-23[+01]:00>
  FastDatePrinterTest.testCalendarTimezoneRespected:286 expected:<3:51[AM LIN]T> but was:<3:51[PM CES]T>
  FastDatePrinterTest.testLang538:214 dateTime expected:<2009-10-16T[08]:42:16.000Z> but was:<2009-10-16T[16]:42:16.000Z>
  DurationFormatUtilsTest.testFormatPeriodISO:266 expected:<2002-02-23T[09:11:12-03]:00> but was:<2002-02-23T[13:11:12+01]:00>
  FastDateFormat_PrinterTest>FastDatePrinterTest.testCalendarTimezoneRespected:286 expected:<3:51[AM LIN]T> but was:<3:51[PM CES]T>
  FastDateFormat_PrinterTest>FastDatePrinterTest.testLang538:214 dateTime expected:<2009-10-16T[08]:42:16.000Z> but was:<2009-10-16T[16]:42:16.000Z>

Tests run: 2382, Failures: 10, Errors: 0, Skipped: 5
{noformat}","26/Oct/13 17:17;bayard;I just checked out the old r1535653 revision and it installs fine. If the failing tests were time.* related, I strongly suspect it was related to the system date/time of your machine. 

The 2.x vs 3.x difference is weird; looking at it, I'm guessing that LANG-462 reintroduced the issue though I've not dug into the changelogs yet. It's a little concerning that the LANG-538 and this fix aren't the same. ",12/Jan/14 11:32;britter;[~bayard] where are we standing with this? I'd like to fix all open bugs that are in 'Review Patch' state in the january release (a.k.a. 3.3),22/Mar/15 09:09;britter;Applying the patch blows up a whole lot of tests. [~cpm] can you have a look please?,"08/Apr/15 05:47;cpm;Here are the results of my investigations.

A) Thomas Neidhart patch is really good.
I confirm that the patch from Thomas Neidhart is the good way. 
It is easy to verify:

FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""Asia/Kolkata"")).format(cal)

1-> FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""Asia/Kolkata""))
2--> .format(cal) 
3---> return  printer.format(calendar)
4----> return format(calendar, new StringBuffer(this.mMaxLengthEstimate)).toString()
5-----> return applyRules(calendar, buf);

Step 1: store the TimeZone parameter in a FastDateFormat instance and build rules from the pattern to display.
Step 5: apply previously build rules to the parameter 'calendar'. So, there is no use of the TimeZone parameter stored in step 1 => **BUG**

In his patch, Thomas Neidhart calls the newCalendar(); method which build a new calendar using the TimeZone parameter stored in step 1. Then, this new calendar is used to apply rules.

It is exactly what it is done in other methods called ""format"" too but with a different parameter type (Date, long...). For each, there is a comment ""// hard code GregorianCalendar"".

The method ""format"" must build a hard code GregorianCalendar.


B) Test errors come from bad test.
Almost all test errors come from a flawed test. In FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected, we can see:

final String actualValue = FastDateFormat.getInstance(PATTERN).format(cal);

As the TimeZone is not setted, then the TimeZone.getDefault() is set and so it is different than the original timezone. So the displayed result is not the same.

Fix: final String actualValue = FastDateFormat.getInstance(PATTERN, this.timeZone).format(cal);

It must also be true of other tests.


So, definitively, the patch from Thomas Neidhart is the good way.

I will try to provide patches for tests.",08/Apr/15 18:16;cpm;Fix missing timezone set in one test which flooding errors after applying the LANG-916.patch file.,"08/Apr/15 18:40;cpm;This is a test error review after applying the patch LANG-916.patch file.

About the revison I am using:
{noformat}
cpm > svn  log -l 1
------------------------------------------------------------------------
r1672030 | djones | 2015-04-08 10:38:02 +0200 (mer. 08 avril 2015) | 1 ligne

cpm > svn info
URL: https://svn.apache.org/repos/asf/commons/proper/lang/trunk
Repository Root: https://svn.apache.org/repos/asf
Repository UUID: 13f79535-47bb-0310-9956-ffa450edef68
Revision: 1672106
Node Kind: directory
Schedule: normal
Last Changed Author: djones
Last Changed Rev: 1672030
Last Changed Date: 2015-04-08 10:38:02 +0200 (Wed, 08 Apr 2015)
{noformat}


List test errors existing in trunk before any change:
{noformat}
cpm > mvn test
[...]
Failed tests:
  FastDateFormat_ParserTest>FastDateParserTest.testTimeZoneStrategyPattern:654 français (Belgique):Heure d'Europe de l'Est UTC+3
  FastDateParserTest.testTimeZoneStrategyPattern:654 français (Belgique):Heure d'Europe de l'Est UTC+3
[...]
Tests run: 3544, Failures: 2, Errors: 0, Skipped: 5
{noformat}


Apply the Thomas Neidhart patch:
{noformat}
cpm > svn patch ../LANG-916/LANG-916.patch
U         src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
>     application bloc @@ -458,7 +458,9 @@ décallage 19
{noformat}

List test errors after applying the patch LANG-916.patch file:
{noformat}
cpm > mvn test
Failed tests:
[...]
  FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected:61 expected:<[2:19PM EDT]> but was:<[6:19PM UTC]>
  FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected:61 expected:<[2:19PM AST]> but was:<[6:19PM UTC]>
  FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected:61 expected:<[12:19PM MDT]> but was:<[6:19PM UTC]>
  FastDatePrinterTimeZonesTest.testCalendarTimezoneRespected:61 expected:<[1:19PM ACT]> but was:<[6:19PM UTC]>
[...]
Tests run: 3544, Failures: 617, Errors: 0, Skipped: 5
{noformat}

Failure count is huge but almost 600 failures come from a single test.
Apply the LANG-916-B.patch file to fix a missing timezone set wich make one test flooding errors:
{noformat}
cpm > svn patch ../LANG-916/LANG-916-B.patch
U         src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java
{noformat}

List test errors remaining after applying the patch LANG-916-B.patch file:
{noformat}
cpm > mvn test
Failed tests:
Results :

Failed tests:
  DateFormatUtilsTest.testDateISO:161 expected:<2002-02-23[-03]:00> but was:<2002-02-23[+01]:00>
  DateFormatUtilsTest.testDateTimeISO:120 expected:<2002-02-23T[09]:11:12> but was:<2002-02-23T[13]:11:12>
  DateFormatUtilsTest.testSMTP:226 expected:<Sun, 08 Jun 2003 1[0:11:12 -03]00> but was:<Sun, 08 Jun 2003 1[5:11:12 +02]00>
  DateFormatUtilsTest.testTimeISO:176 expected:<T1[0]:11:12> but was:<T1[4]:11:12>
  DateFormatUtilsTest.testTimeNoTISO:200 expected:<1[0]:11:12> but was:<1[4]:11:12>
  DurationFormatUtilsTest.testFormatPeriodISO:270 expected:<2002-02-23T[09:11:12-03]:00> but was:<2002-02-23T[13:11:12+01]:00>
  FastDateFormat_ParserTest>FastDateParserTest.testTimeZoneStrategyPattern:654 français (Belgique):Heure d'Europe de l'Est UTC+3
  FastDateFormat_PrinterTest>FastDatePrinterTest.testLang538:215 dateTime expected:<2009-10-16T[08]:42:16.000Z> but was:<2009-10-16T[16]:42:16.000Z>
  FastDateParserTest.testTimeZoneStrategyPattern:654 français (Belgique):Heure d'Europe de l'Est UTC+3
  FastDatePrinterTest.testLang538:215 dateTime expected:<2009-10-16T[08]:42:16.000Z> but was:<2009-10-16T[16]:42:16.000Z>
  FastDatePrinterTest.testTimeZoneAsZ:270 expected:<+0[0]00> but was:<+0[2]00>

Tests run: 3544, Failures: 11, Errors: 0, Skipped: 5
{noformat}

So, only 11 failures are remaining. These test errors can be sort like this:

a) Tests depending of the host geographic location
{noformat}
  DateFormatUtilsTest.testDateISO:161 expected:<2002-02-23[-03]:00> but was:<2002-02-23[+01]:00>
  DateFormatUtilsTest.testDateTimeISO:120 expected:<2002-02-23T[09]:11:12> but was:<2002-02-23T[13]:11:12>
  DateFormatUtilsTest.testSMTP:226 expected:<Sun, 08 Jun 2003 1[0:11:12 -03]00> but was:<Sun, 08 Jun 2003 1[5:11:12 +02]00>
  DateFormatUtilsTest.testTimeISO:176 expected:<T1[0]:11:12> but was:<T1[4]:11:12>
  DateFormatUtilsTest.testTimeNoTISO:200 expected:<1[0]:11:12> but was:<1[4]:11:12>
  DurationFormatUtilsTest.testFormatPeriodISO:270 expected:<2002-02-23T[09:11:12-03]:00> but was:<2002-02-23T[13:11:12+01]:00>
{noformat}

 These tests are using some DateFormatUtils static constants which are defined with the default TimeZone depending of the host and his geographical location. In the assert, the changing result is compare with a manual constant string value. So, the test failed if the tester is not in the same time zone than the test writer.

 The worst part is that you can not change the TimeZone associated to these DateFormatUtils constants. As static attribute, they are initialized on the first JVM call of the class. So, we would have to set the default TimeZone before every tests. But who would want that?


Example:

{noformat}
public void testDateISO(){
[...]
text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);
        assertEquals(""2002-02-23-03:00"", text);
{noformat}

b) Tests depending of the host geographic location (another way)
{noformat}
  FastDatePrinterTest.testLang538:215 dateTime expected:<2009-10-16T[08]:42:16.000Z> but was:<2009-10-16T[16]:42:16.000Z>
  FastDateFormat_PrinterTest>FastDatePrinterTest.testLang538:215 dateTime expected:<2009-10-16T[08]:42:16.000Z> but was:<2009-10-16T[16]:42:16.000Z>
  FastDatePrinterTest.testTimeZoneAsZ:270 expected:<+0[0]00> but was:<+0[2]00>
{noformat}

 These tests are using explicit default timezone from host and make compare with manual static string. So, the test failed if the tester is not in the same time zone than the test writer.


c) Test errors already there in r1672030
{noformat}
  FastDateFormat_ParserTest>FastDateParserTest.testTimeZoneStrategyPattern:654 français (Belgique):Heure d'Europe de l'Est UTC+3
  FastDateParserTest.testTimeZoneStrategyPattern:654 français (Belgique):Heure d'Europe de l'Est UTC+3
{noformat}

End of this test error review. Hope this will help.",08/Apr/15 19:28;britter;[~cpm] thank you for the thorough analysis. What time zone are you in? We should be able to reproduce this by setting the default time zone on our machines to your time zone.,"08/Apr/15 22:57;cpm;I am living in Paris (France, Europe) so my timezone is ""Europe/Paris"" (GMT/UTC +01:00).

In Java:
{noformat}
TimeZone.setDefault(TimeZone.getTimeZone(""Europe/Paris""));
{noformat}

With Unix system command:
{noformat}
cpm > date
jeu. avril  9 00:54:33 CEST 2015
cpm > export TZ=""Asia/Kolkata""
cpm > date
jeu. avril  9 04:24:46 IST 2015
cpm > mvn test
[...]
{noformat}

Regards.","09/Apr/15 00:19;cpm;In order to follow the bug fix LANG-916, I propose an additional test with the LANG-916-C.patch file.
","18/Apr/15 18:05;britter;[~cpm]: very nice, I can confirm that LANG-916-C.patch reproduces the bug. Do you have a fix for this?","19/Apr/15 03:26;cpm;Thomas Neidhart has provided the fix LANG-916.patch. I confirm that this is a good fix.

I explain why in the following comment: https://issues.apache.org/jira/browse/LANG-916?focusedCommentId=14484761&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14484761
","19/Apr/15 03:42;cpm;After applying the patch from Thomas Neidhart, there is a single test which flood ~600 failures. To fix this test, I had provided the fix LANG-916-B.patch

So the final patch for LANG-916 could be the concatenate of LANG-916.patch, LANG-916-B.patch and LANG-916-C.patch","19/Apr/15 04:01;cpm;After applying the LANG-916.patch and the LANG-916-B.patch, 9 test failures are remaining (see my review above). These tests are bugged because they are depending of the host geographic location. 

Do these errors require a new issue/ticket? Or should they be fixed in this one?","27/Apr/15 20:03;britter;[~cpm] thank you for the effort you're putting into fixing this. Really appreciated! The best would be if we had one single patch file, that contains all we need to fix this and the test reproducing the problem. Can you put that together? Note that we have migrated commons lang to git (see http://commons.apache.org/proper/commons-lang/source-repository.html for the new repository location). If you like, you can also use GitHub for contributing. Just open a PR against github.com/apache/commons-lang.

Thank you!",30/Apr/15 01:40;cpm;Final patch containing fix and unit test reproducing the problem.,"30/Apr/15 01:56;cpm;Git is welcome. :-) GitHub is not a free software so I do not use it. 

On this JIRA, I uploaded an attachment patch file in git format: LANG-916-final-git.patch
It contains fix and unit test reproducing the problem.

FYI, my ICLA is sent.
Let me know if all is good. :-)

","30/Apr/15 02:58;cpm;After applying the patch, there is a single unit test which flood ~600 failures. To fix this unit test, I created the LANG-1123 issue and uploaded a patch file.","30/Apr/15 21:28;chonton;There is a basic problem in the DateFormatUtils.format(Calendar, String pattern, TimeZone, Locale) api.  (And furthermore, the FastDateFormat/FastDatePrinter.format(Calendar) apis.)  Should the implementation pay attention to the TimeZone set on the Calendar or the TimeZone that is passed in the constructor?   I recommend deprecating this method with an explanation what it currently does and what the desired practice should be.
","30/Apr/15 22:48;cpm;I am not agree with you <3 A Calendar parameter is containing an absolute date time information. If I put a calendar parameter and a timezone parameter, it is because I want use this absolute date time with another timezone. The new timezone has priority. This is a common need. So the method is relevant and unambiguous.

Is there any error in my reasoning? :D

I see that the null timezone case is not described in method comment. If timezone parameter is null then the default timezone is used. Perhaps it would be good to add a comment about it. (on)

Because this subject is very different than the LANG-916 subject, can I suggest to create a dedicated issue for it?

Regards. :-)",30/Apr/15 23:37;chonton;I agree with your reasoning.  I'll update the javadoc to make that clear.,"01/May/15 02:29;chonton;commit 775203dd2cfce017910d04c58a0b1b4e0a64923c

These changes have subtle implications.  The TimeZone of the Calendar being formatted will no longer be used as the TImeZone of the formatted output.  The TimeZone specified during construction of the Formatter/Printer will be used as the formatted TimeZone, (if no TimeZone is specified during construction, the system default TimeZone will be used.)"
Wrong locale handling in LocaleUtils.toLocale(),LANG-915,12667797,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,britter,wikier,wikier,10/Sep/13 12:47,22/Aug/16 18:28,07/Apr/19 20:37,11/Jan/14 13:08,3.1,,,,3.3,,,,,0,,,,,,,,"The static method LocaleUtils.toLocale() fails, at least, to parse 3-char locale strings, which are completelly valid BCP47 locales.",,,,,,,,,,,,,,,,,,,,LANG-1172,LANG-1260,,,,,16/Oct/13 14:31;wikier;LANG-915-test.patch;https://issues.apache.org/jira/secure/attachment/12608714/LANG-915-test.patch,16/Oct/13 15:35;wikier;LANG-915.patch;https://issues.apache.org/jira/secure/attachment/12608723/LANG-915.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-09-10 12:54:31.036,,,false,,,,,,,,,,,,,,347733,,,Fri Oct 02 16:22:16 UTC 2015,,,,,,0|i1nymf:,348032,,,,,,,,"10/Sep/13 12:54;garydgregory;Could you please provide a unit test patch that demonstrates the problem?

A patch to fix would be welcome as well! :)

Gary","16/Oct/13 14:31;wikier;Sure. Please, find attached a patch for the test suite that arises the issue.

Later I'd try to provide a patch for the issue itself, since a quick look is not enough because the current code implements a very cryptic algorithm with too many magic numbers in it","16/Oct/13 15:35;wikier;Please, find attached a patch for solving the issue with the method LocaleUtils.toLocale() and ISO 639-3 codes, including:

* Completely re-implementation of the locale parsing, due the complexity for adapt the new feature in the current code.

* Implementation compliant with the current tests at LocaleUtilsTest. An invalid assert has been removed.

* Added new test for testing 3-chars locale

* Added a new methof StringUtils.occurrences() which I commonly need, and I needed for this path, although at the end I needed the splited array, so not used in the submitted version. So it could be removed if you don't find it relevant.","11/Jan/14 13:07;britter;Hello Sergio,

I've reviewed your patch. You're using tabs to intend your code. At commons we uses spaces instead, since the representation of the tab character varies between different editors. I've corrected this.

The new method {{StringUtils.occurences(String, String)}} seems to duplicate {{StringUtils.countMatches(CharSequence, CharSequence)}}. I've removed it. Your new method caused {{StringUtilsTest.testStringUtilsCharSequenceContract()}} to fail. It's always good to run {{mvn clean test}} before creating a patch, to be sure everything still works.

All tests pass now. I've committed your patch in rev. 1557378.

Thanks for contributing!","02/Oct/15 16:22;djbuhler;I believe this ticket should be reconsidered for reopening. The current implementation that was introduced here does not support language code sub tags, instead only allowing three parameters.

You can see the specification for sub tags [here|https://tools.ietf.org/html/bcp47#section-4]. Oracle documentation for sub tag extensions can be found [here|https://docs.oracle.com/javase/tutorial/i18n/locale/extensions.html].",,,,,,,,,,,,,,,,,,,,,,,,,,
Adding .gitignore to commons-lang,LANG-913,12666499,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,britter,britter,britter,01/Sep/13 16:54,15/Oct/13 02:33,07/Apr/19 20:37,01/Sep/13 17:02,,,,,3.2,,General,,,0,,,,,,,,Add .gitignore file as proposed by Allon Mureinik via github: https://github.com/apache/commons-lang/pull/8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,346438,,,Sun Sep 01 17:02:35 UTC 2013,,,,,,0|i1nqnj:,346739,,,,,,,,"01/Sep/13 17:02;britter;Patch applied, thanks for contributing!

{code}
localhost:lang bene$ svn ci -m ""LANG-913: Adding .gitignore to commons-lang. Patch provided by Allon Mureinik via github""
Adding         .gitignore
Sending        pom.xml
Sending        src/changes/changes.xml
Transmitting file data ...
Committed revision 1519292.
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
UTF8 4byte (un)escapeJava not work correctly,LANG-911,12665868,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,pevo,pevo,28/Aug/13 08:27,15/Oct/13 02:33,07/Apr/19 20:37,28/Aug/13 09:20,3.1,,,,3.1,,,,,0,,,,,,,,"String bellsTest = ""\ud83d\udc80\ud83d\udd14"";
	
String value = StringEscapeUtils.escapeJava(bellsTest);
String valueTest = StringEscapeUtils.unescapeJava(value);

System.out.println(bellsTest);
System.out.println(value);
System.out.println(valueTest);

Error:
!!!  bellsTest (befor) != valueTest (after escapeJava&unescapeJava)
",Java 1.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-08-28 09:20:14.706,,,false,,,,,,,,,,,,,,345807,,,Wed Aug 28 09:20:14 UTC 2013,,,,,,0|i1nmrz:,346108,,,,,,,,"28/Aug/13 09:20;sebb@apache.org;URL: http://svn.apache.org/r1518116
Log:
LANG-911 UTF8 4byte (un)escapeJava not work correctly

The following test passes:

{code}
public void testLang911() {
    String bellsTest = ""\ud83d\udc80\ud83d\udd14"";
    String value = StringEscapeUtils.escapeJava(bellsTest);
    String valueTest = StringEscapeUtils.unescapeJava(value);
    assertEquals(bellsTest, valueTest);
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compare between arrays,LANG-905,12661208,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,lophophora,lophophora,01/Aug/13 19:35,25/Oct/13 08:19,07/Apr/19 20:37,25/Oct/13 08:19,,,,,3.2,,,,,0,patch,,,,,,,"when comparing 2 arrays, EqualsBuilder returns true even if they contain different elements.

example:
	        Object[] o1 = new Object[1];
		o1[0]=""Hello"";
		
		Object[] o2 = new Object[1];
		o2[0]=""Bye"";
		
		System.out.println(EqualsBuilder.reflectionEquals(o1, o2, true));

",,,,,,,,,,,,,,,,,,,,,,,,,,19/Oct/13 18:32;tn;LANG-905.patch;https://issues.apache.org/jira/secure/attachment/12609277/LANG-905.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-10-19 18:32:10.631,,,false,,,,,,,,,,,,,,341397,,,Fri Oct 25 08:19:39 UTC 2013,,,,,,0|i1mvpj:,341715,,,,,,,,19/Oct/13 18:32;tn;Attached a patch + unit test to fix the problem for 3.2.,"25/Oct/13 08:19;bayard;svn ci -m ""Applying Thomas Neidhart's patch for LANG-905; fixing a bug in which EqualsBuilder considers two arrays of the same type to be equal, without considering the contents"" src
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
Sending        src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java
Transmitting file data ...
Committed revision 1535653.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"RandomStringUtils.random (count, letters=true, number=true) may not use numerics",LANG-902,12654132,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,andrzej.winnicki,andrzej.winnicki,21/Jun/13 12:24,16/Oct/13 08:31,07/Apr/19 20:37,16/Oct/13 08:31,3.1,,,,3.2,,lang.*,,,0,random,,,,,,,"Either there is a bug in an implementation or misunderstanding in docs.

RandomStringUtils.random (count, letters, numbers) is documented so that:

letters  if true, generated string *will* include alphabetic characters
numbers  if true, generated string *will* include numeric characters

But apparently the current implementation supports only that generated string *may* include either only letters, only numbers or both.

This is current implementation:

 if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers)

So there may be situation when generated string is not containing numbers at all which is in contrary with what the docs say. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-16 08:31:09.449,,,false,,,,,,,,,,,,,,334409,,,Wed Oct 16 08:31:09 UTC 2013,,,,,,0|i1lopz:,334735,,,,,,,,16/Oct/13 08:31;bayard;Clarified in the documentation (changed to 'may'). Thanks for pointing that out.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
endsWithAny is case sensitive - documented as case insensitive,LANG-901,12653724,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,pascalschumacher,mbartenschlag,mbartenschlag,19/Jun/13 14:53,19/Oct/16 07:01,07/Apr/19 20:37,28/May/16 10:50,3.1,,,,3.5,,General,,,0,,,,,,,,"endsWithAny was added in response to this task: LANG-614

Documentation says that the method returns ""true if the CharSequence starts with any of the the prefixes, case insensitive, or both null"" 

StringUtils.endsWithAny(""MIME/TYPE"", ""TYPE"") true
StringUtils.endsWithAny(""MIME/TYPE"", ""type"") false",,,,,,,,,,,,,,,,,,,,,,,,,,03/Nov/15 02:07;mbartenschlag;LANG-901.patch;https://issues.apache.org/jira/secure/attachment/12770234/LANG-901.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-06-19 15:08:09.582,,,false,,,,,,,,,,,,,,334001,,,Fri May 27 15:54:06 UTC 2016,,,,,,0|i1lm7b:,334327,,,,,,,,19/Jun/13 15:08;britter;I'll have a look this week. {{endsWithAny()}} should behave the same way as {{startsWithAny()}}.,"20/Jun/13 13:09;mbartenschlag;It appears that the implementation of {{startsWithAny}} is also case sensitive, though it is documented as case insensitive. The underlying comparison is {{StringUtils.startsWith}} which is case-sensitive.

A possible solution may be to (1) ""correct"" the documentation for {{startsWithAny}} and {{endsWithAny}} to clarify that they are case-sensitive comparisons, and (2) introduce two new methods {{startsWithAnyIgnoreCase}} and {{endsWithAnyIgnoreCase}}.","21/Jun/13 07:00;britter;Makes sense to me. Do you want to contribute a patch for this?

TIA!","21/Jun/13 19:26;mbartenschlag;Patch, including unit tests, which appears to correct the bug. Please review.","21/Jun/13 19:45;sebb@apache.org;Not sure why two valid lower-case tests were dropped from the startsWithAny Javadoc; I think they should be kept.

Also the Javadoc @return statements don't make sense (this is an old issue, but pasted into the new methods):

{code}
* @return {@code true} if the CharSequence starts with any of the the prefixes, case insensitive, or
*  both {@code null}
{code}

No idea what that means. ""both"" is normally used to refer to two items, but there may be more (or fewer).
Do the routines never return ""false"" ? Given that they are ""boolean"", they cannot return ""null"".","25/Oct/13 12:25;britter;I've reviewed the patch. I agree with sebb, the doc can be tweaked, but that's no problem. What need's to be discussed is the behavior for null inputs:

{code}
StringUtils.startsWith(null, null) = true
StringUtils.startsWithAny(null, null) = false
{code}

(this also applies for the other methods). I think they should behave the same for null inputs. The question how the following should behave:

{code}
StringUtils.startsWithAny(null, new String[]{ null })
{code}","25/Oct/13 14:01;sebb@apache.org;Would it not be simpler to always return false if the first parameter is null?

I'm not sure it makes sense to try and allow null to match anything at all.",25/Oct/13 14:39;britter;Sure we could do that. But then again the methods which take only one prefix/suffix would behave differently. I don't know if it is a good idea to mix this up. Or are you proposing to change startWith and endWith as well?,"25/Oct/13 15:25;sebb@apache.org;I meant that all methods should treat null as not starting or ending with anything.

Or throw IAE, which might make more sense.",18/Feb/14 20:32;dmjones500;I would be in favour of an IAE as [~sebb@apache.org] suggests. One cannot reason sensibly about {{null}} values as though they are strings. Returning {{true}} or {{false}} would be arbitrary.,"03/Nov/15 01:59;mbartenschlag;Team, sorry to resurrect this ticket, but I think it's worth revisiting since the documentation is still not in sync with the code. Specifically, there are a few inconsistencies in the documentation that I feel are worthy of being corrected independent of the null-handling behaviors.

Specifically, there's any example in startsWithAny that is incorrect, and in both startsWithAny and endsWithAny the documentation still indicates the comparisons are case insensitive.

{code:title=StringUtils.java|borderStyle=solid}
StringUtils.startsWithAny(""abcxyz"", new String[] {""""}) = false
{code}

I'm creating and attaching for your review another patch which hopefully improves the documentation and introduces more test cases that verify the documented behaviors.",03/Nov/15 02:07;mbartenschlag;Updated patch.,"27/May/16 15:53;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/149
","27/May/16 15:54;pascalschumacher;Patch applied. Thanks!

It would be nice if somebody could resolve this issue. Thanks!",,,,,,,,,,,,,,,,,
"StringUtils lastIndexOf(String str, char searchChar, int startPos) not working",LANG-899,12652847,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,adrien be,adrien be,14/Jun/13 09:56,15/Oct/13 02:32,07/Apr/19 20:37,14/Jun/13 15:30,2.4,,,,,,lang.*,,,0,,,,,,,,"returns -1 when I call this method on a Sting with a char present after the startPos indicated

not sure if it's been fixed in more recent version of the library. I have not seen any JIRA ticket regarding this issue though",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-06-14 12:47:50.431,,,false,,,,,,,,,,,,,,333170,,,Fri Jun 14 14:40:44 UTC 2013,,,,,,0|i1lh33:,333498,,,,,,,,"14/Jun/13 12:47;garydgregory;Please see if your use case is covered in trunk in the method org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt()

If not, and the trunk code fails for you, please provide your use case, preferably as a patch.","14/Jun/13 14:40;sebb@apache.org;Looks to me that this is the intended behaviour.

The startPos is perhaps misnamed; the search works backwards from the index.

So it should not find a match for characters after the startPos.

It will only search the whole string if you provide a startIndex >= to the max index in the string, i.e. length -1.

The documentation (and examples) could be improved.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils un/escapexml inconsistant with escaped whitespace,LANG-898,12651749,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Not A Problem,,martinb,martinb,07/Jun/13 17:55,19/Oct/16 15:24,07/Apr/19 20:37,24/Jan/14 14:38,3.1,,,,,,lang.*,,,0,,,,,,,,"{noformat} 
In an escaped XML string with escaped whitespace, in this case linefeed ( &#10; ), escapexml and unescapexml treat the linefeed inconsistently. 

unescape converts &#10; to a linefeed, yet escapexml does not convert linefeed back to &#10;


Here's code and output...


public static void main(String[] args) {
        String escaped =
                ""&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;"";

        System.out.println(escaped);
        System.out.println();
        System.out.println(StringEscapeUtils.unescapeXml(escaped));
        System.out.println();
        System.out.println(StringEscapeUtils.escapeXml(StringEscapeUtils
                .unescapeXml(escaped)));

    }
    

Output:

&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;

<?xml version=""1.0"" encoding=""iso-8859-1""?>
<?xml version=""1.0"" encoding=""iso-8859-1""?>

&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;
{noformat} ","Windows 7, Java 7",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-19 18:46:27.653,,,false,,,,,,,,,,,,,,332074,,,Mon Oct 21 02:00:23 UTC 2013,,,,,,0|i1lac7:,332403,,,,,,,,"19/Oct/13 18:46;tn;Afaik, it is not mandatory to escape CR & LF in xml documents, thus it is also not done by default when calling StringEscapeUtils.escapeXml.

You can create your own translater that will also escape LF like this:

{noformat}
StringEscapeUtils.ESCAPE_XML.with(NumericEntityEscaper.between(0x09, 0x0B)).translate(...);
{noformat}",20/Oct/13 14:14;britter;Resolve as not a problem?,21/Oct/13 02:00;sebb@apache.org;Agreed; not a problem. There's an easy work-round.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
BooleanUtils.toBoolean(String str) javadoc is not updated.,LANG-896,12650026,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,vafada,vafada,29/May/13 21:40,15/Oct/13 02:33,07/Apr/19 20:37,30/May/13 22:46,,,,,3.2,,,,,0,,,,,,,,"the commit in LANG-633 broke how BooleanUtils.toBoolean(String str) works.

apache 2.5 and below BooleanUtils.toBoolean(""Y"") = false

apache 2.6 and above BooleanUtils.toBoolean(""Y"") = true 

the javadocs needs to be updated on how parsing a string works.

github pull request:

https://github.com/apache/commons-lang/pull/6",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-30 22:46:22.294,,,false,,,,,,,,,,,,,,330353,,,Thu May 30 22:46:22 UTC 2013,,,,,,0|i1kzrz:,330687,,,,,,,,"30/May/13 22:46;sebb@apache.org;URL: http://svn.apache.org/r1488041
Log:
LANG-896 BooleanUtils.toBoolean(String str) javadoc is not updated

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/BooleanUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"The ""contributing patches"" link on the website is broken",LANG-894,12648276,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,eakerma,eakerma,18/May/13 00:46,13/Oct/13 08:33,07/Apr/19 20:37,13/Oct/13 08:33,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-18 08:42:17.394,,,false,,,,,,,,,,,,,,328632,,,Sun Oct 13 08:33:53 UTC 2013,,,,,,0|i1kp87:,328975,,,,,,,,"18/May/13 08:42;sebb@apache.org;In fact all the local links under Commons and General Information are broken.

That's probably because the Lang URL was incorrect when the site was generated.
The URL has since been corrected, but the site has not been re-released.","19/May/13 10:20;open4d;I have noticed that page http://projects.apache.org/projects/commons_lang.html says ""Releases can be downloaded from http://commons.apache.org/downloads/download_lang.cgi"".  But that URL gives a 403 Forbidden error.
The correct URL seems to be http://commons.apache.org/proper/commons-lang/download_lang.cgi","19/May/13 10:55;sebb@apache.org;Thanks for the report.
Several other DOAPS used the wrong URL, fixed in SVN (will be picked up in a few hours when projects is rebuilt):

URL: http://svn.apache.org/r1484266
Log:
LANG-894 some doap files have incorrect download page

Modified:
    commons/proper/betwixt/trunk/doap_betwixt.rdf
    commons/proper/cli/trunk/doap_cli.rdf
    commons/proper/compress/trunk/doap_compress.rdf
    commons/proper/daemon/trunk/doap_daemon.rdf
    commons/proper/dbcp/trunk/doap_dbcp.rdf
    commons/proper/email/trunk/doap_email.rdf
    commons/proper/exec/trunk/doap_exec.rdf
    commons/proper/fileupload/trunk/doap_fileupload.rdf
    commons/proper/jci/trunk/doap_jci.rdf
    commons/proper/lang/trunk/doap_lang.rdf
    commons/proper/math/trunk/doap_math.rdf
    commons/proper/scxml/trunk/doap_scxml.rdf",29/May/13 06:30;bayard;Looks good now.,"29/May/13 16:12;eakerma;The links under ""General Information"" still appear broken.
I've cleared browser cache.  This appears to have not been fully resolved.",29/May/13 16:25;sebb@apache.org;Agreed; I only fixed the DOAP problem reported by Peter Ford.,13/Oct/13 08:33;bayard;Fixed. Apologies for the slowness :(,,,,,,,,,,,,,,,,,,,,,,,,
working with multiple date Formats return a wrong date for dd/mm/yy,LANG-891,12645222,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Cannot Reproduce,chonton,amit04jain,amit04jain,29/Apr/13 12:37,15/Oct/13 02:33,07/Apr/19 20:37,17/May/13 17:04,3.2,,,,,,lang.time.*,,,0,date,dateutil,dd/mm/yy,,,,,"hi,
while working with multiple date format, when i have date in format 25/11/09 i.e in dd/MM/yy it return me a wrong result.

Previous Date: 01/11/09, Returned Date: 2009-01-11
Previous Date: 25/11/09, Returned Date: 2011-01-11

i was expecting my return date should be in yyyy-MM-dd format

Other Formar Result:
Previous Date: 25.11.2009, Returned Date: 2009-11-25
Previous Date: 25.Nov.2009, Returned Date: 2009-11-25
Previous Date: Nov.09, Returned Date: 2009-11-01
Previous Date: Nov.2009, Returned Date: 2009-11-01
Previous Date: 09.Nov, Returned Date: 2009-11-01
Previous Date: Nov2509, Returned Date: 2009-11-25
Previous Date: 2009-11-25, Returned Date: 2009-11-25



",Windows,,345600,345600,,0%,345600,345600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-29 16:50:42.078,,,false,,,,,,,,,,,,,,325584,,,Fri May 17 17:03:14 UTC 2013,,,,,,0|i1k65r:,325929,,,,,,,,"29/Apr/13 16:50;chonton;The following test passes:

{code}
    @Test
    public void testLang891() {
      final String pattern = ""dd/MM/yyyy"";
      final FastDateFormat formatter= FastDateFormat.getInstance(pattern, NEW_YORK, Locale.US);
      final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);

      cal.clear();
      cal.set(2009, 10, 1);
      assertEquals(""01/11/2009"", formatter.format(cal.getTime()));

      cal.clear();
      cal.set(2009, 10, 25);
      assertEquals(""25/11/2009"", formatter.format(cal));
    }
{code}

Is this issue a parsing or formatting failure?  Please attach a unit test which demonstrates the failure.","17/May/13 17:03;chonton;The following unit test demonstrates that parsing is working.
{code}

    @Test
    public void testLang891() throws ParseException {
    	for(Locale locale : Locale.getAvailableLocales()) {
    		for(String tzId : TimeZone.getAvailableIDs()) {
    			TimeZone timezone = TimeZone.getTimeZone(tzId);
    			testLang891(locale, timezone);
    		}
    	}
    }

    public void testLang891(Locale locale, TimeZone timezone) throws ParseException {
      final String pattern = ""dd/MM/yy"";
      final FastDateFormat parser= FastDateFormat.getInstance(pattern, timezone, locale);
      final Calendar cal= Calendar.getInstance(timezone, locale);
      int definingYear = cal.get(Calendar.YEAR);

      Date date= parser.parse(""01/11/09"");
      cal.setTime(date);
      cal.setTimeZone(timezone);

      assertEquals(locale.getDisplayLanguage()+"" ""+timezone.getDisplayName(), expandYear(definingYear, 9), cal.get(Calendar.YEAR));
      assertEquals(locale.getDisplayLanguage()+"" ""+timezone.getDisplayName(), 10, cal.get(Calendar.MONTH));
      assertEquals(locale.getDisplayLanguage()+"" ""+timezone.getDisplayName(), 01, cal.get(Calendar.DAY_OF_MONTH));

      date= parser.parse(""25/11/09"");
      cal.setTime(date);
      cal.setTimeZone(timezone);

      assertEquals(locale.getDisplayLanguage()+"" ""+timezone.getDisplayName(), expandYear(definingYear, 9), cal.get(Calendar.YEAR));
      assertEquals(locale.getDisplayLanguage()+"" ""+timezone.getDisplayName(), 10, cal.get(Calendar.MONTH));
      assertEquals(locale.getDisplayLanguage()+"" ""+timezone.getDisplayName(), 25, cal.get(Calendar.DAY_OF_MONTH));
    }

    private int expandYear(int definingYear, int stubYear) {
    	if(stubYear>100) {
    		return stubYear;
    	}
	    // add century to year - choose the century that starts at most 80 years earlier or 20 years later
    	int thisCentury= stubYear + definingYear - definingYear%100;
        if(thisCentury < definingYear+20) {
            return thisCentury;
        }
        return thisCentury-100;
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"If locale is ""pt_pt"", it's not a variant",LANG-889,12643869,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,haiwei,haiwei,22/Apr/13 04:23,28/Apr/13 18:58,07/Apr/19 20:37,22/Apr/13 09:47,3.0,,,,,,lang.*,,,0,,,,,,,,"You hava a spring MVC site, it's support multiple languages.
<bean id=""localeChangeInterceptor"" class=""org.springframework.web.servlet.i18n.LocaleChangeInterceptor"">
  <property name=""paramName"" value=""locale"" />
</bean>
 
You can try url is http://xxx.com/controll/action?locale=pt_pt, it's think so ""There is definitely a variant, and it is everything after the country""

form code:
org.springframework.util.StringUtils.parseLocaleString[659]

if (parts.length >= 2) {
			// There is definitely a variant, and it is everything after the country
			// code sans the separator between the country code and the variant.
			int endIndexOfCountryCode = localeString.indexOf(country) + country.length();
			// Strip off any leading '_' and whitespace, what's left is the variant.
			variant = trimLeadingWhitespace(localeString.substring(endIndexOfCountryCode));
			if (variant.startsWith(""_"")) {
				variant = trimLeadingCharacter(variant, '_');
			}
		}
		return (language.length() > 0 ? new Locale(language, country, variant) : null);

When locale is ""pt_pt"", it's result ""pt_PT_pt"", I think so it's not a variant.

<a href=""http://jakarta.apache.org/commons/lang/"">Jakarta's Commons Lang</a>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-22 09:47:22.608,,,false,,,,,,,,,,,,,,324236,,,Sun Apr 28 17:14:13 UTC 2013,,,,,,0|i1jxuv:,324581,,,,,,,,"22/Apr/13 09:47;sebb@apache.org;Does not appear to be related to Apache Commons Lang
Try asking on the Spring user list","28/Apr/13 17:14;haiwei;Thanks, I have find this bug from spring Jura.

发自我的 iPhone

在 2013-4-22，17:49，""Sebb (JIRA)"" <jira@apache.org> 写道：

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"If locale is ""pt_pt"", it's not a variant",LANG-888,12643868,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Duplicate,,haiwei,haiwei,22/Apr/13 04:22,15/Oct/13 02:32,07/Apr/19 20:37,22/Apr/13 09:44,3.0,,,,,,lang.*,,,0,,,,,,,,"You hava a spring MVC site, it's support multiple languages. 
You can try url is http://xxx.com/controll/action?locale=pt_pt, it's think so ""There is definitely a variant, and it is everything after the country""

form code:
org.springframework.util.StringUtils.parseLocaleString[659]

if (parts.length >= 2) {
			// There is definitely a variant, and it is everything after the country
			// code sans the separator between the country code and the variant.
			int endIndexOfCountryCode = localeString.indexOf(country) + country.length();
			// Strip off any leading '_' and whitespace, what's left is the variant.
			variant = trimLeadingWhitespace(localeString.substring(endIndexOfCountryCode));
			if (variant.startsWith(""_"")) {
				variant = trimLeadingCharacter(variant, '_');
			}
		}
		return (language.length() > 0 ? new Locale(language, country, variant) : null);

When locale is ""pt_pt"", it's result ""pt_PT_pt"", I think so it's not a variant.
",,,,,,,,,,,,,,LANG-889,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,324235,,,2013-04-22 04:22:42.0,,,,,,0|i1jxun:,324580,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Code in FastDateParser broken,LANG-887,12643807,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,21/Apr/13 03:40,15/Oct/13 02:33,07/Apr/19 20:37,16/May/13 21:09,,,,,3.2,,,,,0,,,,,,,,"Findbugs noticed that:

  ""Integer is incompatible with expected argument type java.util.Locale in org.apache.commons.lang3.time.FastDateParser.getLocaleSpecificStrategy(int, Calendar)""

Line 500:

  500         Strategy strategy= cache.get(Integer.valueOf(field));

The type of the map is <Locale,Strategy>, Integer makes no sense.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-16 21:09:22.077,,,false,,,,,,,,,,,,,,324174,,,Thu May 16 21:09:22 UTC 2013,,,,,,0|i1jxh3:,324519,,,,,,,,21/Apr/13 04:54;bayard;Not a blocker for 3.2 though as I think this has been in the code a long time and is only leading to an inefficiency (cache never used).,16/May/13 21:09;tn;fixed in r1483568.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Apache commons StringEscapeUtils.unescapeJava(“\\”) returns “”,LANG-885,12642561,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Not A Problem,,mperdikeas,mperdikeas,15/Apr/13 16:34,30/Apr/13 07:00,07/Apr/19 20:37,16/Apr/13 11:03,3.1,,,,,,,,,0,,,,,,,,"The following code:
{code:title=foo.java|borderStyle=solid}
final String INVALID_ESCAPE=""\\"";
System.out.println(String.format(""'%s' -> '%s'"", INVALID_ESCAPE, 
    StringEscapeUtils.unescapeJava(INVALID_ESCAPE)));
{code}
... produces:

'\' -> ''

on the console. Since '\' is not a valid escape I would expect an Exception at runtime. Am I missing anything?
",Linux 3.2.0-40-generic-pae #64-Ubuntu SMP i686 athlon i386 GNU/Linux,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-16 11:03:23.61,,,false,,,,,,,,,,,,,,322975,,,Tue Apr 30 07:00:21 UTC 2013,,,,,,0|i1jq2n:,323320,,,,,,,,"16/Apr/13 11:03;sebb@apache.org;This is really a question for the user list; JIRA is not a user forum.

None of the unescape methods are documented to throw Exceptions for invalid escape sequences.","30/Apr/13 07:00;bayard;Note that we do have a TODO statement:

// TODO: throw ""illegal character: \92"" as an Exception if a \ on the end of the Java (as per the compiler)?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"LookupTranslator accepts CharSequence as input, but fails to work with implementations other than String",LANG-882,12639615,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,ziesemer,ziesemer,28/Mar/13 16:25,23/Apr/13 06:03,07/Apr/19 20:37,23/Apr/13 06:03,3.1,,,,3.2,,lang.text.translate.*,,,0,,,,,,,,"The core of {{org.apache.commons.lang3.text.translate}} is a {{HashMap<CharSequence, CharSequence> lookupMap}}.

From the Javadoc of {{CharSequence}} (emphasis mine):
{quote}
This interface does not refine the general contracts of the equals and hashCode methods. The result of comparing two objects that implement CharSequence is therefore, in general, undefined. Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other. *It is therefore inappropriate to use arbitrary CharSequence instances as elements in a set or as keys in a map.*
{quote}

The current implementation causes code such as the following to not work as expected:

{code}
CharSequence cs1 = ""1 < 2"";
CharSequence cs2 = CharBuffer.wrap(""1 < 2"".toCharArray());

System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs1));
System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs2));
{code}

... which gives the following results (but should be identical):
{noformat}
1 &lt; 2
1 < 2
{noformat}

The problem, at a minimum, is that {{CharBuffer.equals}} is even documented in the Javadoc that:
{quote}
A char buffer is not equal to any other type of object.
{quote}

... so a lookup on a CharBuffer in the Map will always fail when compared against the String implementations that it contains.

An obvious work-around is to instead use something along the lines of either of the following:
{code}
System.out.println(StringEscapeUtils.ESCAPE_HTML4.translate(cs2.toString()));
System.out.println(StringEscapeUtils.escapeHtml4(cs2.toString()));
{code}

... which forces everything back to a {{String}}.  However, this is not practical when working with large sets of data, which would require significant heap allocations and garbage collection concerns.  (As such, I was actually trying to use the {{translate}} method that outputs to a {{Writer}} - but simplified the above examples to omit this.)

Another option that I'm considering is to use a custom {{CharSequence}} wrapper around a {{char[]}} that implements {{hashCode()}} and {{equals()}} to work with those implemented on {{String}}.  (However, this will be interesting due to the symmetric assumption - which is further interesting that {{String.equals}} is currently implemented using {{instanceof}} - even though {{String}} is {{final}}...)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-04-12 08:51:16.525,,,false,,,,,,,,,,,,,,320084,,,Tue Apr 23 06:03:28 UTC 2013,,,,,,0|i1j87z:,320425,,,,,,,,"12/Apr/13 08:51;bayard;Thanks Mark. At the very least we should note this in the javadoc for 3.2, assuming a fix isn't readily available.

How did the work around go?","22/Apr/13 04:26;bayard;I've added a note to this in the Javadoc for the moment.

Options that jump out to me are to go with calling .toString() on the key and taking any performance hits, or perhaps using TreeMap with a custom CharSequenceComparator if CharSequences are passed in that don't have refined equals(Object)/hashCode() methods and taking a lookup time performance hit. ",22/Apr/13 04:26;bayard;Next step is to write a unit test showing the problem so there's something to fix. Might release 3.2 without this. ,"23/Apr/13 06:00;bayard;Test is easy - take the current LookupTranslator test and make a StringBuffer version. 

Solutions; naively throwing in a TreeMap doesn't work. A ClassCast occurs between StringBuffer and String. This is because calling subSequence on StringBuffer returns a String (boo!), and for some reason the call to compareTo in getEntry of TreeMap doesn't like the different types. Presumably this could be solved with a custom comparator.

Changing the key of the HashMap to be a String resolves the issue. It feels weird for the key to be typed; ie) if it was StringBuffer(""foo""), I'd expect it to match the String ""foo"" as well. Only matching the type of the input seems odd. I can see value in keeping the translate-to part of the system as CharSequence; you could have large items of text that won't be read until such a time as they need to be obtained.

","23/Apr/13 06:03;bayard;I've gone ahead with the simple solution of using String as the key. It's not ideal, but I think it's an improvement over the current code.

svn ci -m ""Allow LookupTranslator to support CharSequence properly; previously it was working only for CharSequence's that implemented hashCode and equals(Object). LANG-882"" src/
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
Sending        src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java
Transmitting file data ...
Committed revision 1470822.
",,,,,,,,,,,,,,,,,,,,,,,,,,
 NumberUtils.createNumber() Javadoc says it does not work for octal numbers,LANG-881,12639270,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,michielgk,michielgk,27/Mar/13 08:43,15/Oct/13 02:33,07/Apr/19 20:37,27/Mar/13 16:31,3.1,,,,3.2,,lang.math.*,,,0,,,,,,,,"The javadoc for NumberUtils.createNumber() states:

""Values with leading 0's will not be interpreted as octal.""

However,

assertEquals(25, NumberUtils.createNumber(""0025""));

fails, because NumberUtils.createNumber(""0025"") returns 21.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-03-27 15:00:01.499,,,false,,,,,,,,,,,,,,319740,,,Wed Mar 27 16:31:31 UTC 2013,,,,,,0|i1j63j:,320081,,,,,,,,"27/Mar/13 15:00;sebb@apache.org;I suspect that is because it uses createLong() and createBigInteger() which used not to handle octal prefixes.
This was fixed in 3.1 and 3.2 (not yet released) respectively.

So createNumber() should now handle octal numbers for all integral sizes, i.e. I think the Javadoc is wrong.
There are already tests which show the behaviour implicitly, for example:
{code}
assertEquals(Integer.class, NumberUtils.createNumber(""017777777777"").getClass()); // 31 bits
assertEquals(Long.class,    NumberUtils.createNumber(""037777777777"").getClass()); // 32 bits
{code}

These should be extended/amended to check the value as well.","27/Mar/13 16:31;sebb@apache.org;Applied fixes:

URL: http://svn.apache.org/r1461671
Log:
LANG-881 NumberUtils.createNumber() Javadoc says it does not work for octal numbers

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java


URL: http://svn.apache.org/r1461654
Log:
LANG-881 Enhance test so it also checks the exact values

Modified:
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"LocaleUtils test fails with new Locale ""ja_JP_JP_#u-ca-japanese"" of JDK7",LANG-879,12637653,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,matthewadams,matthewadams,18/Mar/13 21:46,31/Oct/14 10:07,07/Apr/19 20:37,30/May/13 22:13,3.1,,,,3.2,,lang.*,,,0,JDK1.7,Locale,LocaleUtils,,,,,"The Test below fails with the following error on JDK7, but succeeds on JDK6:

testAllLocales
""java.lang.AssertionError: 
Expected: <ja_JP_JP_#u-ca-japanese>
     but: was <ja_JP_JP_#u-ca-japanese>
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
	at com.scispike.foundation.test.unit.i18n.LocaleStringConverterTest.testStringToLocale(LocaleStringConverterTest.java:20)
	at com.scispike.foundation.test.unit.i18n.LocaleStringConverterTest.testAllLocales(LocaleStringConverterTest.java:28)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:76)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:161)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:101)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:115)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:103)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:74)
... Removed 25 stack frames
 java.lang.AssertionError: 
Expected: <ja_JP_JP_#u-ca-japanese>
     but: was <ja_JP_JP_#u-ca-japanese>
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
	at com.scispike.foundation.test.unit.i18n.LocaleStringConverterTest.testStringToLocale(LocaleStringConverterTest.java:20)
	at com.scispike.foundation.test.unit.i18n.LocaleStringConverterTest.testAllLocales(LocaleStringConverterTest.java:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:715)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:907)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1237)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:51)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:85)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1197)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1122)
	at org.testng.TestNG.run(TestNG.java:1030)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:76)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:161)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:101)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:115)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:103)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:74)
""
org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
com.scispike.foundation.test.unit.i18n.LocaleStringConverterTest.testStringToLocale(LocaleStringConverterTest.java:20)
com.scispike.foundation.test.unit.i18n.LocaleStringConverterTest.testAllLocales(LocaleStringConverterTest.java:28)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:601)
org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
org.testng.internal.Invoker.invokeMethod(Invoker.java:715)
org.testng.internal.Invoker.invokeTestMethod(Invoker.java:907)
org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1237)
org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
org.testng.TestRunner.privateRun(TestRunner.java:767)
org.testng.TestRunner.run(TestRunner.java:617)
org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
org.testng.SuiteRunner.run(SuiteRunner.java:240)
org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:51)
org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:85)
org.testng.TestNG.runSuitesSequentially(TestNG.java:1197)
org.testng.TestNG.runSuitesLocally(TestNG.java:1122)
org.testng.TestNG.run(TestNG.java:1030)
org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:76)
org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:161)
org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:101)
org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:115)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:601)
org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:103)
org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:74)


========== Test
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

import java.util.Locale;

import org.testng.annotations.Test;

import com.scispike.foundation.i18n.StringToLocaleConverter;

public class LocaleStringConverterTest {

	StringToLocaleConverter converter = new StringToLocaleConverter();

	public void testStringToLocale(Locale l) {
		String s = l.toString();

		assertThat(converter.convert(s), equalTo(l));
	}

	@Test
	public void testAllLocales() {

		Locale[] locales = Locale.getAvailableLocales();
		for (Locale l : locales) {
			testStringToLocale(l);
		}
	}
}


========== StringToLocaleConverter

import java.util.Locale;

import org.apache.commons.lang3.LocaleUtils;
import org.springframework.core.convert.converter.Converter;

public class StringToLocaleConverter implements Converter<String, Locale> {

	@Override
	public Locale convert(String source) {
		if (source == null) {
			return LocaleToStringConverter.DEFAULT;
		}
		return LocaleUtils.toLocale(source);
	}
}
","Mac OS X 10.8.3

$ javac -version
javac 1.7.0_17

$ java -version
java version ""1.7.0_17""
Java(TM) SE Runtime Environment (build 1.7.0_17-b02)
Java HotSpot(TM) 64-Bit Server VM (build 23.7-b01, mixed mode)
",,,,,,,,,,,,,,,,,,,MARMOTTA-559,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-05-30 19:41:47.612,,,false,,,,,,,,,,,,,,318133,,,Thu May 30 22:13:22 UTC 2013,,,,,,0|i1iw6f:,318474,,,,,,,,"30/May/13 19:41;sebb@apache.org;Can confirm that there is a problem; this is caused by a change to the Locale class in 1.7 which now includes both script and extensions; these are now shown in the toString() output.

The current Javadoc says that it validates language and country, but does not mention variant validation. 
However it does say: ""This method validates the input strictly"" which suggests that it should.
It would be easy enough to reject all strings that contain ""#""; this would avoid the problem entirely.

Given that some of the Java 7 Locales can only be created using Locale.forLanguageTag or Locale.Builder, there seems little point in trying to handle the additional script/extension fields which happen to be in the toString() output.","30/May/13 22:13;sebb@apache.org;URL: http://svn.apache.org/r1488038
Log:
LANG-879 LocaleUtils test fails with new Locale ""ja_JP_JP_#u-ca-japanese"" of JDK7

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/LocaleUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadocs are 404,LANG-876,12634717,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,olamy,robertmarkbram,robertmarkbram,28/Feb/13 23:34,01/Mar/13 17:25,07/Apr/19 20:37,01/Mar/13 17:25,,,,,,,,,,0,,,,,,,,http://commons.apache.org/proper/commons-lang/api-release/index.html is a 404.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-02-28 23:37:14.124,,,false,,,,,,,,,,,,,,315210,,,Fri Mar 01 11:59:18 UTC 2013,,,,,,0|i1ie5z:,315554,,,,,,,,"28/Feb/13 23:37;olamy;this one is for me :-)
I will fix that ",01/Mar/13 09:02;olamy;fixed.,01/Mar/13 09:06;robertmarkbram;Thanks Oliver - will this populate nightly? (I ask because I am still getting 404 on http://commons.apache.org/proper/commons-lang/api-release/index.html.),"01/Mar/13 09:23;britter;Hallo Robert,

the link from the website has changed. You can browse the JavaDoc via http://commons.apache.org/lang/api-release/index.html (which is now linked to the website).

Regards,
Benedikt","01/Mar/13 09:24;olamy;http://commons.apache.org/proper/commons-lang/
The link Javadoc (Latest release) is now working.","01/Mar/13 09:29;olamy;maybe I can add a redirect  http://commons.apache.org/lang/api-release/to http://commons.apache.org/proper/commons-lang/javadocs/api-release 
WDYT ?",01/Mar/13 09:34;britter;I don't think that is necessary. The link from the website works.,"01/Mar/13 09:35;robertmarkbram;Thanks for the fix. A redirect is definitely a good idea, because right now googling ""commons Lang javadocs"" results are 404s.",01/Mar/13 11:59;robertmarkbram;Not sure if you are waiting on me to resolve the issue or is there a process you follow... :),,,,,,,,,,,,,,,,,,,,,,
"EqualsBuilder methods append(Object[],Object[]) and append(Object,Object) treats array class dirrerently",LANG-872,12633614,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Not A Problem,dmjones500,algirdas,algirdas,22/Feb/13 13:43,12/Dec/16 15:28,07/Apr/19 20:37,12/Dec/16 15:28,2.6,3.1,,,,,lang.builder.*,,,0,,,,,,,,"Method {{EqualsBuilder.append(Object[],Object[])}} ignores classes of passed arrays and returns true if contents of both arrays are equal.
Method {{EqualsBuilder.append(Object,Object)}} returns false immediately if types of passed array arguments are different.

For example:
{code}
    public void testEqualsArrays() {
        Object[] aArray = new Object[] {""Value""};
        Object[] bArray = new String[] {""Value""};

        boolean compareAsArrays = new EqualsBuilder().append(aArray, bArray).isEquals();
        // compareAsArrays is true

        Object aObj  = aArray;
        Object bObj  = bArray;
        boolean compareAsObjects = new EqualsBuilder().append(aObj, bObj).isEquals();
        // compareAsObjects is false

        assertTrue(compareAsArrays == compareAsObjects); //Fails
    }
{code}

Results of both methods should be consistent.
",,,,,,,,,,,,,,,,,,,,,,,,,,22/Feb/13 20:58;dmjones500;commons-lang3-LANG-872.patch;https://issues.apache.org/jira/secure/attachment/12570533/commons-lang3-LANG-872.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-02-22 20:58:46.182,,,false,,,,,,,,,,,,,,314109,,,Mon Dec 12 15:28:03 UTC 2016,,,,,,0|i1i7dj:,314454,,,,,,,,22/Feb/13 20:58;dmjones500;Looks like a bug to me. Attached is a patch that incorporates your test (just changed the {{assertTrue}} to {{assertEquals}}) and a fix to {{EqualsBuilder}}.,"22/Feb/13 21:02;dmjones500;Having said that... {{java.util.Arrays.deepEquals()}} and {{java.util.Arrays.equals()}} would also state that the arrays are equal. Not what I would expect, but that would suggest the commons-lang implementation is not unusual.","22/Feb/13 22:26;algirdas;I suggest that for compatibility with {{java.util.Arrays.deepEquals()}} and {{java.util.Arrays.equals()}} class {{EqualsBuilder}} should also compare only array contents but not class of array itself. So {{append(Object, Object)}} should be fixed and not {{append(Object[], Object[])}}.","23/Feb/13 08:02;dmjones500;{quote}
So {{append(Object, Object)}} should be fixed and not {{append(Object[], Object[])}}.
{quote}

I don't think {{append(Object, Object)}} should be returning true for a {{String[]}} and a {{Object[]}}, because {{aArray.equals(bArray)}} is {{false}}.

Perhaps the Javadocs should change to make it clear the array comparison is contents-based only?","12/Dec/16 15:28;dmjones500;I've added an explanation to the Javadoc to explain how {{append(Object[],Object[])}} works. I think that's sufficient to resolve this issue.

Please re-open and comment if you disagree!.

{quote}
Repository: commons-lang
Updated Branches:
 refs/heads/master 31fcd3bd8 -> f13d18cff


Javadoc change to address LANG-872. 

Javadocs for append(Object[],Object[]) updated to indicate it only
compares the contents of the arrays, not the type of the arrays.

Project: http://git-wip-us.apache.org/repos/asf/commons-lang/repo
Commit: http://git-wip-us.apache.org/repos/asf/commons-lang/commit/f13d18cf
Tree: http://git-wip-us.apache.org/repos/asf/commons-lang/tree/f13d18cf
Diff: http://git-wip-us.apache.org/repos/asf/commons-lang/diff/f13d18cf
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,
"Javadoc examples for StringUtils#repeat(char,int) have arguments in in reverse order",LANG-868,12630605,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,jwadamson,jwadamson,04/Feb/13 02:15,04/Feb/13 02:17,07/Apr/19 20:37,04/Feb/13 02:17,,,,,,,lang.*,,,0,,,,,,,,"In StringUtils#repeat(char,int) the javadoc examples have the arguments specified as int,char which is backwards.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,311101,,,Mon Feb 04 02:17:32 UTC 2013,,,,,,0|i1hotr:,311449,,,,,,,,04/Feb/13 02:15;jwadamson;I created a pull request on github apache / commons-lang,04/Feb/13 02:17;jwadamson;forgot to recheck in source beofre submitting in independent issue,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringEscapeUtils.escapeHTML() does not escape ~ ` @ # $ % ^ & * ( ) _ - + = |  ; : . , ? } { ] [ ",LANG-866,12626567,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,cvrjava@gmail.com,cvrjava@gmail.com,08/Jan/13 15:50,06/Mar/13 03:28,07/Apr/19 20:37,06/Mar/13 03:28,2.4,,,,,,lang.*,,,0,,,,,,,,"i am trying to encoding the charecter's (~ ` @ # $ % ^ & * ( ) _ - + = |  ; : . , ? } { ] [ ) but when i execute the below its giving the same out put rather ascii values.

String str = ""~ ` @ # $ % ^ & * ( ) _ - + = |  ; : . , ? } { ] [ "";
str = StringEscapeUtils.escapeJava(str);

Expected output: should encode the charecters to ascii values.  ",java,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-01-08 19:49:46.817,,,false,,,,,,,,,,,,,,303174,,,Wed Mar 06 03:28:15 UTC 2013,,,,,,0|i178g7:,250337,,,,,,,,"08/Jan/13 19:49;sebb@apache.org;The title refers to escapeHTML(), but the description is for escapeJava() - which is it?","06/Mar/13 03:28;bayard;Assuming escapeHTML, those characters are not defined as character references in the HTML 4.0 specification:

http://www.w3.org/TR/REC-html40/sgml/entities.html

Resolving. Please reopen if you know of a reason why they would need escaping.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LocaleUtils.toLocale does not parse strings starting with an underscore,LANG-865,12625801,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,endre.jeges,endre.jeges,03/Jan/13 01:38,15/Oct/13 02:33,07/Apr/19 20:37,03/Jan/13 06:20,3.1,,,,3.2,,lang.*,,,0,patch,,,,,,,"Hi,

Javadocs of Locale.toString() states that ""If the language is missing, the string will begin with an underbar."". This is not handled in the LocaleUtils.toLocale method if it is meant to be the inversion method of Locale.toString().

The fix for the ticket 328 does not handle well the case ""fr__P"", which I found out during fixing the first bug.

I am attaching the patch for both problems.",,,10800,10800,,0%,10800,10800,,,,,,,,,,,,,,,,,,03/Jan/13 02:13;endre.jeges;LANG-865.patch;https://issues.apache.org/jira/secure/attachment/12563017/LANG-865.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2013-01-03 06:20:30.925,,,false,,,,,,,,,,,,,,302347,,,Thu Jan 03 06:20:30 UTC 2013,,,,,,0|i170af:,249014,,,,,,,,03/Jan/13 01:41;endre.jeges;patch for LANG-865,03/Jan/13 02:13;endre.jeges;patch for LANG-865,"03/Jan/13 06:20;garydgregory;Thank you for the patch! 

Gary

commit -m ""[LANG-865] LocaleUtils.toLocale does not parse strings starting with an underscore."" C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/LocaleUtils.java C:/svn/org/apache/commons/trunks-proper/lang/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/LocaleUtils.java
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java
    Transmitting file data ...
    Committed revision 1428174.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
CharSequenceTranslator causes StringIndexOutOfBoundsException during translation of unicode codepoints with length > 1 character,LANG-862,12623131,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,kothar,kothar,10/Dec/12 12:04,15/Oct/13 02:33,07/Apr/19 20:37,16/May/13 21:35,3.1,,,,3.2,,lang.text.translate.*,,,0,bug,text,unicode,,,,,"When translating a string with unicode characters in, I've encountered an index exception:

{code}
	java.lang.StringIndexOutOfBoundsException: String index out of range: 50
	at java.lang.String.charAt(String.java:686)
	at java.lang.Character.codePointAt(Character.java:2335)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:95)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:59)
	at org.apache.commons.lang3.StringEscapeUtils.escapeCsv(StringEscapeUtils.java:556)
	...
{code}

The input string was from a twitter status:
org.apache.commons.lang3.StringEscapeUtils.escapeCsv(""pink & black adidas suit for this rainy weather \ud83d\udc4d"");

Both those characters are 'Invalid' unicode characters, so presumably there is a conversion error somewhere. However, this shouldn't cause the translator to crash.


At line 94, the loop which generates the exception increments the position by the size of the codepoint, which seems to grow faster than the number of characters. I don't really know how codepoints work, but it looks to me like there are two indexes which are treated as if they are the same one by this loop:

 * pt is incrementing by one character each iteration
 * pos is incrementing by one or more characters each iteration
 * pos is being used to index into the character array
 * pt is the value actually being tested in the loop test, so pos can be bigger than pt, causing an index problem at the end of the array


My guess would be that the loop should read something like:

{code}
            for (int pt = 0; pt < consumed;) {
                int count = Character.charCount(Character.codePointAt(input, pos));
                pt += count;
                pos += count;
            }
{code}

I'm not sure if that was the intention, hope it makes some sense!

Stepping through that code with the input string "" \ud83d\udc4d"":
* the input string becomes "" \ud83d\udc4d\u008d"" (appended 'Reverse Line Feed' - no idea why)
* consumed == 4
* Iterating the loop gives pt=0, pos=0 -> pt=1, pos=1 -> pt=2, pos=3 -> pt-3, pos=4 (Index exception)

So \ud83d\udc4d seems to be a codepoint with a width of 2, which puts the index off by one after that.

Anyway, hope that helps,

Regards,
Mike.","OS X, Java 1.6",,,,,,,,,,,,,LANG-857,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,296726,,,Mon Dec 10 12:11:43 UTC 2012,,,,,,0|i14gx3:,234204,,,,,,,,"10/Dec/12 12:11;kothar;Apologies, I see this is fixed in the latests SVN - should have browsed the source code first! Although, the pos is still going to be bigger than the length of the input string, which seems odd to me, since it's just using pt to index into the string.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RBD (ceph) setup,LANG-861,12618433,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,1tc,1tc,01/Dec/12 15:15,02/Dec/12 15:08,07/Apr/19 20:37,02/Dec/12 14:06,4.0,,,,,,General,,,0,newbie,,,,,,,"help setting up RBD, I have a running Ceph Cluster. but cannot add rbd, i thing libvirt version is wrong (current 0.9.8) ",Ubuntu 12.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-12-01 21:43:21.736,,,false,,,,,,,,,,,,,,293229,,,Sun Dec 02 15:08:09 UTC 2012,,,,,,0|i0svbr:,166552,,,,,,,,01/Dec/12 21:43;sebb@apache.org;Does not appear to be related to Commons LANG or even Commons,01/Dec/12 22:11;1tc;you have lost me now !!!!!!!!!,"01/Dec/12 23:43;dennisl@apache.org;Jason,

We do not understand your request. This is the JIRA instance for the Apache Software Foundation. Which piece of Apache software is it you are reporting a bug in?","02/Dec/12 11:49;1tc;Cloudstack 4.0 said it supports RBD (ceph Storage). I have a running cloudstack 4.0 but i cannot add RBD storage. On google this i found the RBD needs libvirt 0.10.0 with RBD enabled, cloudstack 4.0 is currently running libvirt 0.9.8. I have have tied many ways to install libvirt 0.10.0 and 1.0.0 but this stops cloud-agent from running. If cloudstack supports RBD why doesnt it install the correct libvirt version when install the cloud-agent. ","02/Dec/12 14:06;joehni;Sorry, but nothing you mentioned is related to anything in the projects of Apache Commons (http://commons.apache.org). And please also note, that JIRA is an issue tracker, but not a support forum. If you are looking for help, you will have to use the appropriate mailing list of that project (seems to be http://incubator.apache.org/cloudstack/, found by Google).

Apache houses more than 100 top level projects. What you do here is like penetrating the customer support of Sony Music because your Sony TV does not displays DVDs from your player.",02/Dec/12 15:08;1tc;.,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeXml doesn't escape chars which are considered invalid according to W3C specification,LANG-859,12617127,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,tazija,tazija,21/Nov/12 16:20,26/Dec/16 16:40,07/Apr/19 20:37,26/Dec/16 16:40,2.6,,,,,,lang.*,,,0,,,,,,,,"According to specification of XML version 1.0 there are Unicode characters that are not allowed in the content of the XML document http://www.w3.org/TR/xml/#charsets
StringEscapeUtils.escapeXml(value) should escape such characters as &#x<hex-code>; or &#<dec-code>;

{code}
public static void main(String[] args) throws Exception {
    String xmlValidText = ""good"";
    // Passes assertion
    assertEquals(StringEscapeUtils.escapeXml(""good""), ""good"");
    
    char xmlInvalidChar = (char) 0x2;
    String xmlInvalidText = String.valueOf(xmlInvalidChar);
    // Fails assertion
    assertEquals(StringEscapeUtils.escapeXml(xmlInvalidText), ""&#x2;"");
    
    System.out.println(""Is valid: "" + org.apache.xerces.util.XMLChar.isInvalid(xmlInvalidChar));
    String xml =
            ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"" +
            ""<chars>"" +
            ""<valid>"" + StringEscapeUtils.escapeXml(xmlValidText) + ""</valid>"" +
            ""<invalid>"" + StringEscapeUtils.escapeXml(xmlInvalidText) + ""</invalid>"" +
            ""</chars>"";
    // An invalid XML character (Unicode: 0x2) was found in the element content of the document
    Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(xml.getBytes(""UTF-8"")));
    System.out.println(document);
}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-21 19:48:07.374,,,false,,,,,,,,,,,,,,259327,,,Mon Dec 26 16:40:18 UTC 2016,,,,,,0|i0lodr:,124600,,,,,,,,"21/Nov/12 16:31;tazija;Fixed org.apache.commons.lang.Escape.escape() method for XML    

{code}
    protected void escape(Writer writer, String text) throws IOException {
        int len = text.length();
        for (int i = 0; i < len; i++) {
            char c = text.charAt(i);
            String entity = entityName(c);
            if (entity == null) {
                // TODO: notice escaping for invalid characters added
                if (c > 0x7F || XMLChar.isInvalid(c)) {
                    writer.write(""&#"");
                    writer.write(Integer.toString(c, 10));
                    writer.write(';');
                } else {
                    writer.write(c);
                }
            } else {
                writer.write('&');
                writer.write(entity);
                writer.write(';');
            }
        }
    }
{code}","21/Nov/12 19:48;garydgregory;In version 3.x, you can do:

{code:java}
    @Test
    public void testEscapeXmlAllCharacters() {
        // http://www.w3.org/TR/xml/#charsets says:
        // Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character,
        // excluding the surrogate blocks, FFFE, and FFFF. */
        CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML
                .with(NumericEntityEscaper.below(9), NumericEntityEscaper.between(0xB, 0xC), NumericEntityEscaper.between(0xE, 0x19),
                        NumericEntityEscaper.between(0xD800, 0xDFFF), NumericEntityEscaper.between(0xFFFE, 0xFFFF), NumericEntityEscaper.above(0x110000));

        assertEquals(""&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;"", escapeXml.translate(""\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008""));
        assertEquals(""\t"", escapeXml.translate(""\t"")); // 0x9
        assertEquals(""\n"", escapeXml.translate(""\n"")); // 0xA
        assertEquals(""&#11;&#12;"", escapeXml.translate(""\u000B\u000C""));
        assertEquals(""\r"", escapeXml.translate(""\r"")); // 0xD
        assertEquals(""Hello World!"", escapeXml.translate(""Hello World!""));
    }
{code}

See testEscapeXmlAllCharacters in https://svn.apache.org/repos/asf/commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java","06/Mar/13 03:43;bayard;Despite that, should the ESCAPE_XML change to cover these?","06/Mar/13 07:35;joehni;Or introduce ESCAPE_XML_1_0 and ESCAPE_XML_1_1, since the valid charstet is different between the two specs.","26/Dec/16 16:40;pascalschumacher;I'm closing this issue as ""Won't Fix"", because StringEscapeUtils#escapeXml was deprecated almost three years ago and replaced by escapeXml10 and escapeXml11.",,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeJava() and escapeEcmaScript() do not output the escaped surrogate pairs that are Java parsable,LANG-858,12617112,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,ashphy,ashphy,21/Nov/12 14:40,21/Oct/13 05:46,07/Apr/19 20:37,24/Nov/12 01:57,,,,,3.2,,lang.*,lang.text.translate.*,,0,escaping,,,,,,,"In case of Java and ECMA Script, the style of unicode escape {{'\uxxxxxx'}} cannot be accepted. We need to separate it into high-surrogate and low-surrogate.

For example, you put the surrogate pair
{code:java}
'\uDBFF\uDFFD'
{code}
output must be
{code:java}
""\\uDBFF\\uDFFD""
{code}
However you get
{code:java}
""\\u10FFFD""
{code}

Test case here:
{code:java}
@Test
public void testEscapeSurrogatePairs() throws Exception {
    assertEquals(""\\uDBFF\\uDFFD"", StringEscapeUtils.escapeJava(""\uDBFF\uDFFD""));
    assertEquals(""\\uDBFF\\uDFFD"", StringEscapeUtils.escapeEcmaScript(""\uDBFF\uDFFD""));
}
{code}

I attached the patch which implements simple solution.
But UnicodeEscaper.java should not be specified for Java, I think. We need to discuss about it.

This issue does not be appeared in unescape method.",,,,,,,,,,,,,,,,,,,,,,,,,,21/Nov/12 14:41;ashphy;JavaUnicodeEscape.patch;https://issues.apache.org/jira/secure/attachment/12554500/JavaUnicodeEscape.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-21 18:52:03.697,,,false,,,,,,,,,,,,,,259312,,,Sat Nov 24 01:57:07 UTC 2012,,,,,,0|i0loaf:,124585,,,,,,,,"21/Nov/12 18:52;garydgregory;""But UnicodeEscaper.java should not be specified for Java, I think. We need to discuss about it.""

Can you elaborate please?

Thank you,
Gary","21/Nov/12 20:41;garydgregory;Ah, I see, you mean UnicodeEscaper should not be _specific_ or _tied_ to Java because Java requires a surrogate pair and not just one value.","21/Nov/12 23:05;ashphy;For instance, Python supports {{\Uxxxxxxxx}}, and Perl supports {{\u\{xxxxxxxx\}}} styles to express the character outside of BMP.
It's preferable to support the several type of unicode literal.","22/Nov/12 02:24;garydgregory;I've added some more tests and @Ignore'd the failing ones. 

escapeJava() should behave correctly, we need to see how to make that work under the hood without loosing our current flexibility and making the whole escaping process Java-specific.","24/Nov/12 01:57;garydgregory;{noformat}
commit -m ""<action issue=""LANG-858"" type=""fix"">StringEscapeUtils.escapeJava() and escapeEcmaScript() do not output the escaped surrogate pairs that are Java parsable</action>"" C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml C:/svn/org/apache/commons/trunks-proper/lang/src/test/java/org/apache/commons/lang3/StringUtilsTest.java C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/text/translate/JavaUnicodeEscaper.java C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java
    Adding         C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/text/translate/JavaUnicodeEscaper.java
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
    Transmitting file data ...
    Committed revision 1413114.
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,
StringIndexOutOfBoundsException in CharSequenceTranslator,LANG-857,12616923,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,ashphy,ashphy,20/Nov/12 12:36,21/Oct/13 05:46,07/Apr/19 20:37,20/Nov/12 20:47,,,,,3.2,,lang.text.translate.*,,,0,patch,,,,,,,"I found that there is bad surrogate pair handling in the CharSequenceTranslator

This is a simple test case for this problem.
\uD83D\uDE30 is a surrogate pair.

{code:java}
@Test
public void testEscapeSurrogatePairs() throws Exception {
    assertEquals(""\uD83D\uDE30"", StringEscapeUtils.escapeCsv(""\uD83D\uDE30""));
}
{code}

You'll get the exception as shown below.

{code}
java.lang.StringIndexOutOfBoundsException: String index out of range: 2
	at java.lang.String.charAt(String.java:658)
	at java.lang.Character.codePointAt(Character.java:4668)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:95)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:59)
	at org.apache.commons.lang3.StringEscapeUtils.escapeCsv(StringEscapeUtils.java:556)
{code}

Patch attached, the method affected:
# public final void translate(CharSequence input, Writer out) throws IOException",,,,,,,,,,,,,,,,,,,,,,,,,,20/Nov/12 12:36;ashphy;CharSequenceTranslator_translate.patch;https://issues.apache.org/jira/secure/attachment/12554335/CharSequenceTranslator_translate.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-20 20:47:52.666,,,false,,,,,,,,,,,,,,258812,,,Wed Nov 21 14:50:15 UTC 2012,,,,,,0|i0l4hj:,121377,,,,,,,,"20/Nov/12 20:47;garydgregory;Thank you for the patch. I added a couple more tests. We could use more.

Do you see any issues in other areas?

{noformat}
commit -m ""[LANG-857] StringIndexOutOfBoundsException in CharSequenceTranslator."" C:/svn/org/apache/commons/trunks-proper/lang/src/test/java/org/apache/commons/lang3/StringUtilsTest.java C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
    Transmitting file data ...
    Committed revision 1411850.
{noformat}","21/Nov/12 01:55;ashphy;Currently same issues appear in StringEscapeUtils.escapeCsv and StringEscapeUtils.unescapeCsv only, because the other escape methods use LookupTranslator which never reach the buggy code.
However, I think we should add a couple of tests for other (un)escape methods.","21/Nov/12 03:21;garydgregory;Ok, would you be willing to submit a patch for additional test coverage?

Thank you,
Gary","21/Nov/12 14:50;ashphy;I created additional test cases.
But tests for {{escapeJava}} and {{escapeEcmaScript}} fail at this time, due to [LANG-858]

{code:java}
    @Test
public void testEscapeSurrogatePairs() throws Exception {
    assertEquals(""\uD83D\uDE30"", StringEscapeUtils.escapeCsv(""\uD83D\uDE30""));
    // Examples from https://en.wikipedia.org/wiki/UTF-16
    assertEquals(""\uD800\uDC00"", StringEscapeUtils.escapeCsv(""\uD800\uDC00""));
    assertEquals(""\uD834\uDD1E"", StringEscapeUtils.escapeCsv(""\uD834\uDD1E""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeCsv(""\uDBFF\uDFFD""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeHtml3(""\uDBFF\uDFFD""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeHtml4(""\uDBFF\uDFFD""));
    assertEquals(""\\uDBFF\\uDFFD"", StringEscapeUtils.escapeJava(""\uDBFF\uDFFD""));       //fail
    assertEquals(""\\uDBFF\\uDFFD"", StringEscapeUtils.escapeEcmaScript(""\uDBFF\uDFFD"")); //fail
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeXml(""\uDBFF\uDFFD""));
}

@Test
public void testUnEscapeSurrogatePairs() throws Exception {
    assertEquals(""\uD83D\uDE30"", StringEscapeUtils.unescapeCsv(""\uD83D\uDE30""));
    // Examples from https://en.wikipedia.org/wiki/UTF-16
    assertEquals(""\uD800\uDC00"", StringEscapeUtils.unescapeCsv(""\uD800\uDC00""));
    assertEquals(""\uD834\uDD1E"", StringEscapeUtils.unescapeCsv(""\uD834\uDD1E""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.unescapeCsv(""\uDBFF\uDFFD""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.unescapeHtml3(""\uDBFF\uDFFD""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.unescapeHtml4(""\uDBFF\uDFFD""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.unescapeJava(""\\uDBFF\\uDFFD""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.unescapeEcmaScript(""\\uDBFF\\uDFFD""));
    assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeXml(""\uDBFF\uDFFD""));
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils.stripEnd(""commons-digester.jar"", "".jar"") returns ""commons-digeste"" instead of ""commons-digester""",LANG-851,12615205,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,brentworden,street_user,street_user,07/Nov/12 18:12,09/Nov/12 17:22,07/Apr/19 20:37,07/Nov/12 20:26,3.1,,,,3.1,,lang.*,,,0,,,,,,,,"StringUtils.stripEnd(""commons-digester.jar"", "".jar"") returns ""commons-digeste"" instead of ""commons-digester"". I tried with all the commons lang versions from 2.1 - 3.1","Windows 7, jdk 1.5_0_22, jdk 1.6.0_32",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-07 20:26:41.747,,,false,,,,,,,,,,,,,,255804,,,Fri Nov 09 17:22:03 UTC 2012,,,,,,0|i0fv0v:,90624,,,,,,,,"07/Nov/12 20:26;brentworden;This is the documented behavior of the method.  The original reporter wants to use the [StringUtils.removeEnd|http://commons.apache.org/lang/api-release/org/apache/commons/lang3/StringUtils.html#removeEnd(java.lang.String, java.lang.String)] method instead.","09/Nov/12 17:22;street_user;Thanks for the response. 

I will Use StringUtils.removeEnd() instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtils.truncatedCompareTo not working properly with DST timezones,LANG-850,12615001,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Not A Problem,,rsisto,rsisto,06/Nov/12 18:39,16/Oct/13 08:50,07/Apr/19 20:37,16/Oct/13 08:50,3.1,,,,,,lang.time.*,,,0,patch,,,,,,,"The method truncatedCompareTo doesn't work properly when comparing 2 calendars in a different timezone (when one of them is ""America/Montevideo"", the same as the machine running the test).
Here is the sample code to reproduce.
The Timezone of the computer has to be set to UTC-3 Montevideo, with DST.
{quote}
GregorianCalendar c1 = new GregorianCalendar(2012,10,6);
System.out.println(""The time: "" + c1.getTime());

c1.setTimeZone(TimeZone.getTimeZone(""America/Montevideo""));
Calendar truncate1 =  DateUtils.truncate(c1, Calendar.MONTH);
System.out.println(""America/Montevideo then truncated: "" + truncate1.getTime());

GregorianCalendar c2 = new GregorianCalendar(2012,10,6);
c2.setTimeZone(TimeZone.getTimeZone(""GMT""));
Calendar truncate2 = DateUtils.truncate(c2, Calendar.MONTH);
System.out.println(""GMT then truncated: "" + truncate2.getTime());
		
System.out.println(""Truncated compare: "" + DateUtils.truncatedCompareTo(c1, c2, Calendar.MONTH));
{quote}
The output:
{quote}
The time: Tue Nov 06 00:00:00 UYST 2012
America/Montevideo then truncated: Thu Nov 01 00:00:00 UYST 2012
GMT then truncated: Wed Oct 31 22:00:00 UYST 2012
Truncated compare: 1
{quote}

A suggestion is to change the TimeZone of both calendars before truncating. For example, setting both to TimeZone.getDefault().
","java version ""1.6.0_32""
Windows 7
Timezone: America/Montevideo",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-11-06 22:22:22.968,,,false,,,,,,,,,,,,,,255523,,,Wed Oct 16 08:50:07 UTC 2013,,,,,,0|i0esj3:,84387,,,,,,,,"06/Nov/12 22:22;sebb@apache.org;I'm not sure what the issue is here: the two calendars objects are not the same, because they have different TimeZones.

This seems to be more about how calendar objects behave when their timezone is changed.","07/Nov/12 01:23;rsisto;I agree with that (the objects aren't the same), but shouldn't the months of both calendars match? Which is the same as saying that the last line should return 0, right?

As a clear example, the month of 11-6-2012 (GMT-3) is the same as the month of 11-20-2012 (GMT-7), right? 
What am I thinking wrong here?","07/Nov/12 02:17;sebb@apache.org;AFAICT, the problem arises in your test because the calendar objects are created with the default timezone and the timezone is then changed.

If you change the default timezone before creating the calendar objects, then they truncate as expected.
However they still won't be equal because of the time zone difference.

I'm also not clear what the use case is here.","07/Nov/12 03:16;rsisto;Thanks for clearing that, so the method truncates taking account of the current timezone of the calendar.

I was having problems when comparing:
1-an XMLGregorianCalendar converted to Calendar (XMLGregorianCalendar doesn't have the concept of DST, so the timezone is converted to GMT-2 in this timezone) with
2-a GregorianCalendar created with ""new GregorianCalendar()"" which has a timezone of ""America/Montevideo"".

According to the comments, my code should set the timezone of the converted XMLGregorianCalendar to America/Montevideo before using the truncate method.

Thanks again, I had thought that the truncatedCompareTo should compare dates managing the timezone before comparing.",16/Oct/13 08:50;bayard;Looks like this conversation was resolved :),,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat and FastDatePrinter generates Date objects wastefully,LANG-849,12614887,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,garydgregory,garydgregory,06/Nov/12 01:49,15/Oct/13 02:32,07/Apr/19 20:37,06/Nov/12 02:00,3.1,,,,3.2,,lang.time.*,,,0,,,,,,,,"The code:

    @Override
    public String format(long millis) {
        return format(new Date(millis));
    }

should be:

    @Override
    public String format(long millis) {
        return printer.format(millis);
    }

There is no need to create the extra Date object.","Apache Maven 3.0.4 (r1232337; 2012-01-17 03:44:56-0500)
Maven home: C:\Java\apache-maven-3.0.4\bin\..
Java version: 1.6.0_35, vendor: Sun Microsystems Inc.
Java home: C:\Program Files\Java\jdk1.6.0_35\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,255386,,,Tue Nov 06 02:00:18 UTC 2012,,,,,,0|i0ergn:,84211,,,,,,,,"06/Nov/12 02:00;garydgregory;commit -m ""[LANG-849] FastDateFormat generates Date objects wastefully."" C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
    Transmitting file data ...
    Committed revision 1406026.
commit -m ""[LANG-849] FastDateFormat and FastDatePrinter generates Date objects wastefully."" C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Sending        C:/svn/org/apache/commons/trunks-proper/lang/src/changes/changes.xml
    Transmitting file data ...
    Committed revision 1406027.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.center() methods have inaccurate examples in javadocs,LANG-844,12610885,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,jlindwall,jlindwall,08/Oct/12 21:42,21/Oct/13 05:46,07/Apr/19 20:37,09/Oct/12 20:59,,,,,3.2,,lang.*,,,1,,,,,,,,"The javadoc comments for two of the center() methods in StringUtils.java have incorrect examples of the method's behavior.

In both instances the method is shown to behave thusly:

StringUtils.center(""ab"", 4, ' ')   = "" ab""

when in fact it produces the result "" ab "" (note the extra space at the end).

The methods affected:

1. public static String center(String str, int size, char padChar)
2. public static String center(String str, int size, String padStr)",,,,,,,,,,,,,,,,,,,,,,,,,,08/Oct/12 21:45;jlindwall;StringUtils_Javadoc_Errors_In_Center.patch;https://issues.apache.org/jira/secure/attachment/12548306/StringUtils_Javadoc_Errors_In_Center.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-10-09 20:59:39.466,,,false,,,,,,,,,,,,,,245677,,,Tue Oct 09 20:59:39 UTC 2012,,,,,,0|i06cmf:,34979,,,,,,,,"08/Oct/12 21:45;jlindwall;A patch for the bug.  Fixes the javadoc comments in StringUtil so that the examples provided are correct.

No new unit test added, since the examples are already present in the existing unit test.
","09/Oct/12 20:59;tn;Patch applied in r1396313.

Thanks for the report and patch!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayUtils removeElements methods clone temporary index arrays unnecessarily,LANG-838,12609609,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,sebb@apache.org,sebb@apache.org,sebb@apache.org,28/Sep/12 22:38,15/Oct/13 02:32,07/Apr/19 20:37,28/Sep/12 23:33,3.1,,,,3.2,,lang.*,,,0,,,,,,,,"The private method removeAll(Object array, int... indices) sorts the indices array, so arrays passed in by application code need to be cloned first.

However, where the index array is generated locally, that is unnecessary.

The removeElements() methods currently call the public removeAll(<type>[] array, int... indices) methods, which clone the indices before calling the private removeAll() method.

The removeElements() methods should call the private method directly, avoiding the unnecessary clone call.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252736,,,Fri Sep 28 23:33:21 UTC 2012,,,,,,0|i0d57r:,74621,,,,,,,,"28/Sep/12 23:33;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1391695&view=rev
Log:
LANG-838 ArrayUtils removeElements methods clone temporary index arrays unnecessarily

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/ArrayUtils.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrSubstitutor does not support StringBuilder or CharSequence,LANG-836,12609425,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,27/Sep/12 17:57,15/Oct/13 02:33,07/Apr/19 20:37,30/May/13 16:36,,,,,3.2,,lang.text.*,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26/Oct/12 09:42;gronono;LANG-836-v2.patch;https://issues.apache.org/jira/secure/attachment/12550942/LANG-836-v2.patch,23/Oct/12 09:33;gronono;LANG-836.patch;https://issues.apache.org/jira/secure/attachment/12550432/LANG-836.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-10-23 09:33:54.363,,,false,,,,,,,,,,,,,,250524,,,Thu May 30 16:36:50 UTC 2013,,,,,,0|i0az3j:,61959,,,,,,,,"23/Oct/12 09:33;gronono;Added an implementation : 
- StrBuilder(String) -> StrBuilder(CharSequence)
- replace() methods use CharSequence
- added replaceIn(StringBuilder) methods","23/Oct/12 09:40;sebb@apache.org;Thanks, unfortunately the patch breaks binary compatibility.",26/Oct/12 09:42;gronono;Attached a new patch that doesn't break binary comptability (i hope).,"30/May/13 16:36;sebb@apache.org;Thanks for the revised patch; sorry it took so long to apply.

URL: http://svn.apache.org/r1487918
Log:
LANG-836 StrSubstitutor does not support StringBuilder or CharSequence

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java

URL: http://svn.apache.org/r1487921
Log:
LANG-836 StrSubstitutor does not support StringBuilder or CharSequence
Forgot to correct @since tags

Modified:
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser does not handle unterminated quotes correctly,LANG-832,12609326,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,27/Sep/12 00:27,15/Oct/13 02:32,07/Apr/19 20:37,27/Sep/12 00:56,,,,,3.2,,,,,0,,,,,,,,"FDP does not handled unterminated quotes the same way as SimpleDateFormat

For example:

Format: 'd'd'
Date: d3

This should fail to parse the format and date but it actually works.
The format is parsed as:

Pattern: d(\p{IsNd}++)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252737,,,Thu Sep 27 00:56:48 UTC 2012,,,,,,0|i0d57z:,74622,,,,,,,,"27/Sep/12 00:56;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1390795&view=rev
Log:
LANG-832 FastDateParser does not handle unterminated quotes correctly

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser does not handle white-space properly,LANG-831,12609323,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,26/Sep/12 23:55,15/Oct/13 02:33,07/Apr/19 20:37,27/Sep/12 00:10,,,,,3.2,,,,,0,,,,,,,,"The SimpleDateFormat Javadoc does not treat white-space specially, however FastDateParser treats a single white-space as being any number of white-space characters.

This means that FDP will parse dates that fail when parsed by SDP.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252738,,,Thu Sep 27 00:10:31 UTC 2012,,,,,,0|i0d587:,74623,,,,,,,,"27/Sep/12 00:10;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1390779&view=rev
Log:
LANG-831 FastDateParser does not handle white-space properly

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser does not handle non-Gregorian calendars properly,LANG-828,12609079,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,25/Sep/12 16:24,15/Oct/13 02:32,07/Apr/19 20:37,26/Sep/12 18:04,3.1,,,,3.2,,lang.time.*,,,0,,,,,,,,"The following calendars are non-Gregorian [1]:

ja_JP_JP - Japanese Imperial)
th_TH (with any variant) - Thai Buddhist

This causes errors when testing round-trip conversions.

The simplest solution is to fall back to SimpleDateFormat for these calendars.

[1] http://docs.oracle.com/javase/6/docs/technotes/guides/intl/calendar.doc.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252739,,,Wed Sep 26 18:04:51 UTC 2012,,,,,,0|i0d58f:,74624,,,,,,,,"25/Sep/12 16:33;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1389976&view=rev
Log:
LANG-828 FastDateParser does not handle non-Gregorian calendars properly

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
","26/Sep/12 18:02;sebb@apache.org;Much searching and experimentation reveals that the reason for the problems is as mentioned here: [1]

i.e. DateFormatSymbols#getEras() returns a pair of strings for Gregorian calendar AD and BC; the method does not return the correct eras for th_TH or ja_JP_JP locales.

Also, these locales have long and short versions.

The solution is as mentioned in [1], i.e. use

Calendar.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale);

for all locales.

[1] https://issues.apache.org/jira/browse/TRINIDAD-2126","26/Sep/12 18:04;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1390626&view=rev
Log:
LANG-828 FastDateParser does not handle non-Gregorian calendars properly
Use Calendar#getDisplayNames() instead of DateFormatSymbols#getEras()

Modified:
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateParser does not handle non-ASCII digits correctly,LANG-826,12608954,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,25/Sep/12 01:03,15/Oct/13 02:33,07/Apr/19 20:37,25/Sep/12 01:08,3.1,,,,3.2,,lang.time.*,,,0,,,,,,,,"The FastDateParser class assumes that all numbers are ascii digits.

However, that is not the case for some locales such as
ja_JP_JP, hi_IN, th_TH, and th_TH_TH

Rather than using ""\d"", the code needs to match using ""\p{IsNd}"" which is the Unicode class for numeric digits.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252740,,,Tue Sep 25 01:08:06 UTC 2012,,,,,,0|i0d58n:,74625,,,,,,,,"25/Sep/12 01:08;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1389673&view=rev
Log:
LANG-826 FastDateParser does not handle non-ASCII digits correctly

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDateParser.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NumberUtils#createNumber - bad behaviour for leading ""--""",LANG-822,12607341,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,12/Sep/12 21:22,15/Oct/13 02:33,07/Apr/19 20:37,11/Nov/12 13:18,3.1,,,,3.2,,lang.math.*,,,0,,,,,,,,"NumberUtils#createNumber checks for a leading ""--"" in the string, and returns null if found. This is documented as a work round for a bug in BigDecimal.

Returning nulll is contrary to the Javadoc and the behaviour for other methods which would throw NumberFormatException.

It's not clear whether the BigDecimal problem still exists with recent versions of Java. However, if it does exist, then the check needs to be done for all invocations of BigDecimal, i.e. needs to be moved to createBigDecimal.",,,,,,,,,,,,,,,,,,,,,,,,,,11/Nov/12 12:07;tn;LANG-822.patch;https://issues.apache.org/jira/secure/attachment/12553019/LANG-822.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-11-11 12:07:52.537,,,false,,,,,,,,,,,,,,251204,,,Sun Nov 11 13:18:35 UTC 2012,,,,,,0|i0b5gn:,62997,,,,,,,,"11/Nov/12 12:07;tn;Attached patch moves the check for ""--"" to the corresponding createBigDecimal method and throws an appropriate exception instead.","11/Nov/12 13:18;sebb@apache.org;Thanks for the patch; applied with minor changes to strengthen test case.

URL: http://svn.apache.org/viewvc?rev=1407973&view=rev
Log:
LANG-822: NumberUtils#createNumber - bad behaviour for leading ""--""

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java


It's still possible that the check for ""--"" is redundant, but at least now the code is consistent in applying the check and reporting the exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeUtils.normalizeUpperBounds broken?,LANG-820,12606787,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,arren,arren,09/Sep/12 18:41,15/Oct/13 02:33,07/Apr/19 20:37,27/Sep/12 13:03,3.0.1,,,,,,lang.reflect.*,,,0,,,,,,,,"I looked at TypeUtils.normalizeUpperBounds, and I think (from code review) that:

normalize(new Class[] { String.class, String.class }) == { String.class, String.class }

which is not normalized. Didn't prove it with junit.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-23 05:27:58.526,,,false,,,,,,,,,,,,,,252741,,,Thu Sep 27 13:03:12 UTC 2012,,,,,,0|i0d58v:,74626,,,,,,,,"23/Sep/12 05:27;dmjones500;I don't believe this is a bug. The following unit test passes:
\\
{code}
@Test
public void testLang820() throws Exception {
    Type[] typeArray = {String.class, String.class};
    Type[] expectedArray = {String.class};
    Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray));
}
{code}

","27/Sep/12 13:03;sebb@apache.org;Thanks for the test case, added:

URL: http://svn.apache.org/viewvc?rev=1390984&view=rev
Log:
LANG-820 TypeUtils.normalizeUpperBounds broken?
Added test to show it works OK

Modified:
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"EnumUtils.generateBitVector needs a ""? extends""",LANG-819,12606786,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,arren,arren,09/Sep/12 18:40,04/Mar/14 17:19,07/Apr/19 20:37,10/Jan/14 15:42,3.0.1,,,,3.3,,lang.*,,,0,,,,,,,,"    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, Iterable<E> values) {

Should be Iterable<? extends E>.

This is because although no subclasses of E can exist, the ""? extends"" is a common idiom for marking the collection as readonly, or not ""owned"" by the current object.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-10 16:46:49.042,,,false,,,,,,,,,,,,,,251206,,,Fri Jan 10 22:24:30 UTC 2014,,,,,,0|i0b5h3:,62999,,,,,,,,"10/Sep/12 16:46;mbenson;Do you have any kind of evidence to support your claim that this is a ""common idiom"" on the order of an unspoken rule?  Due to type erasure a change of this type _ought_ to be drop-in compatible, but we'd need to be sure.  That hurdle cleared, I have no problem with this.","11/Sep/12 02:31;arren;Officially:

http://docs.oracle.com/javase/tutorial/extra/generics/morefun.html etc etc etc

From Google:

http://stackoverflow.com/questions/1368166/what-is-a-difference-between-super-e-and-extends-e
http://www.javabeat.net/2008/09/using-super-in-generics-java-5-0/
http://www.coderanch.com/t/417919/java-programmer-SCJP/certification/Generic-declarations-super-Vs-extends
etc etc etc - the internet is filthy with this stuff.

See also the javadocs for guice, guava, and other competing libraries - they're maintained by a group of people who are highly formally trained and very aware of type semantics, and they tend to get this stuff very much correct.

Basically, people NEED to use ? extends and ? super wherever appropriate, especially in things like transformer and predicate libraries and implementations, otherwise the only way to usefully use polymorphism is to have hard casts, which defeats the entire purpose of using generics. Serializer libraries tend to be notoriously badly written, and defeat the purpose of their own attempted type safety.

Commons should be audited for this kind of thing overall.","11/Sep/12 02:32;arren;Note also that you can capture a ? token by creating a separate method

<T> void foo(A<T> a, B<T> b) { }

and call this with an A<?> and a B<?> (from different sources, e.g. a Map<Class<?>, A<?>> without a type warning - there's no way to parameterize that in Java, so one then can't call value.method(key) as the ?s won't match, even though everyone knows that ClassToInstanceMap, or Provider, or any other type-safe factory pattern causes it to be the case.","24/Oct/13 20:53;mbenson;None of these examples convince me (by way of disclosure, I fail to see how your previous comment relates to the discussion at all!).  If enums were extensible I could accept your argument.  If the parameter were {{Collection}} instead of {{Iterable}} I could accept your argument.  ""Just because a bunch of other superficially similar methods look this way"" does not seem, to me, to justify changing the method signature for no discernible benefit.  Feel free to reopen if you can provide a working example of (somewhat, at least) sensible code that would be possible with this change and is not possible without it.

Thanks,
Matt",25/Oct/13 07:55;britter;A good proof that this has to be changed would be a unit test that fails with the current method signature.,"25/Oct/13 11:56;mbenson;In this case I'm expecting that such a sample won't even compile properly,  but whichever.  ;-)","06/Jan/14 03:27;arren;You misunderstand type bounds. Anyway, here is an example.

{code}
public class EnumTest {
    enum Foo {
        A, B, C;
    }

    public static void main(String[] args) {
        Set<? extends Foo> set = EnumSet.allOf(Foo.class);
        // set.add(Foo.B);  // Fails to compile: Set is typed read-only. See references above.
        EnumUtils.generateBitVector(Foo.class, set);    // Also fails to compile, even though legitimate.
        generateBitVector(Foo.class, set); // Compiles fine, as method has correct type.
    }

    // Note method signature now has correct type for a method which only reads from the given set.
    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, Iterable<? extends E> values) {
        long total = 0;
        for (E constant : values)
            total |= 1 << constant.ordinal();
        return total;
    }
}
{code}
","06/Jan/14 05:24;mbenson;What have I said to lead you to conclude that I misunderstand type bounds?  It almost seems (and I hope I'm wrong) that I understand them in such a fundamental way that I cannot be easily talked into doing something that makes _perfect_ sense in the general case, but feels totally useless in this specific one.

Your example is all well and good _for non-{{final}} types_, but {{Set<? extends Foo>}} is IMHO a red herring.  {{EnumSet.allOf(Foo.class)}} returns {{EnumSet<Foo>}}, _not_ {{EnumSet<? extends Foo>}}; therefore the entire example is contrived.  If for some reason you were using a {{Set}} of whatever element type that you didn't already _know_ was {{enum}} you'd never _pass_ that {{Set}} to {{EnumUtils#generateBitVector()}} without first somehow checking that, at which point you'd have to cast the {{Set}} anyway to call the bit vector method.

I comprehend that you are saying the {{? extends E}} idiom makes the compiler disallow the modification of a {{Collection}} (an {{Iterable}} can't be modified without casting to {{Collection}} anyway) and I can make the logical leap that _because of this_ it may be a visual shorthand for ""read-only,"" yet I _still_ stubbornly refuse to be bullied by this fact when you have not:

* explained your (lacking clarification, striking me as rude and condescending) assertion that I ""misunderstand type bounds""
* provided a realistic example of code that suffers because of the current parameter specification
* explained how [this comment|https://issues.apache.org/jira/browse/LANG-819?focusedCommentId=13452659&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13452659] is germane to the discussion

Regards,
Matt","06/Jan/14 17:23;arren;Set<? extends Foo> isn't a visual shorthand. It's a concrete statement to the compiler. Your assertion on this point demonstrates that you misunderstand type bounds. All your comments about the possibility of extensibility of enums, Collection/Iterable are concerned with possible runtime behaviour, rather than the ability to prove code correct at compile time. My caller wants a static assertion that the (parent) routine will not modify the collection, and a prior Set<? extends E> can only generate an Iterable<? extends E> without an unchecked cast, which defeats the point.

Anyway, I was only trying to help within the bounds of my limited remaining patience for the ASF, so I admit to being rude.","06/Jan/14 17:34;mbenson;I am sorry to contribute to anyone's impatience with Apache; however, let's take this one step at a time.  You said:
{quote}
My caller wants a static assertion that the (parent) routine will not modify the collection
{quote}

I think by this you mean:

{quote}
My \[consuming code\] wants a \[compile-time\] assertion that the \[{{EnumUtils#generateBitVector()}}\] routine will not modify the collection
{quote}

How does declaring the parameter as {{Iterable}}, even if it were raw, not satisfy that requirement? (Once you cast to any other type, all bets are off anyway.)","10/Jan/14 09:20;arren;I didn't explain that last point very well due to lack of patience. Hopefully this will help, if you forgive the background:

There's an almost-requirement in C/C++ (auto_ptr aside) that a data structure have an ""owner"" and a number of referrents. The same happens in Java as good style, rather than requirement-to-avoid-leak. A complex class may own a Set<E>. The getter of this set may be typed Set<? extends E>. This tells any other person who takes that reference that they should not (and can not, due to compile failure) modify that set. On the other hand, if it's a factory method, the method may be typed Set<E>. This tells the person who takes the reference that they may (and can) modify that set, as they are now the primary (usually exclusive) owner of it. This Set<E> type generally comes with the assumption that unsynchronized mutation of the set is also permitted, modifying it will not break the encapsulation of the provider, and it isn't shared with any other threads. Yes, there are loopholes in this, but it's pretty good, vastly improves the ability of the compiler to show code correct, and reduces programmer mistakes (unnecessary copies, accidental modifications, etc).

It isn't really a surprise to anyone who has coded in Erlang or any monad-based language that it's actually relatively easy to write Java code where the majority of structures are never mutated after construction. Some languages have this as a restriction, but it turns out to be a fairly good idea even in Java: Most sensible ways to pass values between threads create a happen-before relationship in the JMM, and remembering that final variables have a happen-before relationship with the end of a constructor (something explicitly NOT true for nonfinal variables - not nearly enough people know this), this also makes it much easier to write highly threaded code correctly.  The vast majority of instance variables can be final, and modern IDEs tend to provide this as a default hint if they detect non-mutation, so this really is hitting mainstream. By this set of practices we get a applications where the majority of Collections are typed ? extends, the majority of variables are final, etc, etc.

Anyway, this is all a suite of techniques for creating compile-time checked, reliable, threaded, idiot-developer-safe Java code.

At this point, it isn't about whether EnumUtils will modify the set. I know it won't. It's the fact that the code that CALLED EnumUtils only ever had a Collection<? extends E> in the first place, because the _actual_ owner of the collection, several calls back, decided to export it only as readonly.

The Guava library (which I mostly use these days) is very well written with respect to all these techniques, and applies them universally. See http://docs.guava-libraries.googlecode.com/git/javadoc/index.html?com/google/common/collect/Iterables.html - which shows how Guava handles iterables. The type within the Iterable is irrelevant. The point is, the caller of Iterables (and even back several frames from there) only had a Set<? extends> or a Collection<? extends> and the CALLER would have to upcast it in order to call EnumUtils with the current prototype.

So, you see, it isn't about a tiny religious issue about whether I like the current prototype or not. It's that in any code written with these good coding practices, I CAN'T call EnumUtils without upcasting the Set<? extends E> to a Set<E> in the previous frame, and if I upcast, my code won't pass review. If I use a raw type, my code won't pass review. There is NO WAY in which I can call this function and get code past review. I CAN NOT USE MUCH OF COMMONS. Guava, on the other hand, uses ? extends in every case where it's legal to do so, and can always be called from well-written type-safe code, and has consequently become the go-to library of choice. (That's also why this ticket languished for a year: we also ported away from commons to guava. But I did come back to try to help.)

Bootnote on Guava: It's Google's policy not to include any routine for which it does not have an internal customer. Apache does not have the same policy. In a recent experience, I submitted correct code and patches to Apache, with test suites, only to have the Apache authors fix up the original broken code to (just) pass the cases in my test suites, but still contain bugs because they fundamentally aren't internal customers for it and don't use it in anger or in generality. So it remains broken in Apache. My last experience with that was type (reflection) manipulation routines - my job is writing compilers, so I'm very hot on them, and familiarity breeds ease of spotting bugs, especially in type systems. But I won't play whack-a-mole submitting test suites to ASF when I have working code anyway. I'll just use my code. So there's some additional background to my frustration with ASF maintainers. While Google publish smaller libraries, the quality is unquestionably much higher because of this policy of (colloquially) ""If we can't dogfood it, we won't even publish it."" They are also 100% familiar with the techniques I described in this comment, and reading any of their libraries in C++ or Java is an education in high-performance compile-time-checked coding. Of course what they don't do is put JSR305 annotations on their public APIs. I wish they did. I wish Apache would use JSR305, too.","10/Jan/14 13:37;tn;The idea of using <? extends X> collections to prevent modification by compile-time checks is new to me I have to admit. Although the add-type methods may not work, the resulting collections are still modifiable, e.g. calling clear() or remove() will still work, thus I am unsure if this is really sufficient and the right tool for this purpose. Afaik a better way is to pass unmodifiable collections in such cases.

Anyway, your rant is a bit unfair, as we normally also allow this idiom as input argument where possible, see for example the latest collections release.

btw. the guys at google do great stuff, so there surely must be a good reason why they do not use the idiom all the time:

http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/EnumMultiset.html#create%28java.lang.Iterable,%20java.lang.Class%29

Feel free to rant also on their mailinglist ...","10/Jan/14 15:35;mbenson;This has never been about the _correctness_ of {{? extends}} in this case, rather about the _necessity_.  A few days ago I was strongly tempted to just give in and do it just to put the discussion to bed.  I'm glad I did not, because then you, Shevek, wouldn't have written that nice bit of exposition.  At this point I feel willing to make this change based on the general notion that there may be some sensible call stack of general-purpose methods that results in a {{Set<? extends E>}} where {{E extends Enum<E>}} which could not otherwise be passed to the method in question.

It does seem Thomas's counter-example would result in the same problem.  Can you confirm you wouldn't be able to call that method and pass review either? Also: http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Iterables.html#transform(java.lang.Iterable, com.google.common.base.Function)

I don't know about your other recent experience, but I personally am very interested in Java reflection and type utilities.  If we're doing something wrong thereabouts I'd be glad to know about it.  Thanks for your patience.",10/Jan/14 15:42;mbenson;Committed revision 1557159.,"10/Jan/14 21:01;arren;Thank you very much for the responses.

C++ can do ""Foo const * const * const *"" which tells you whether it's the pointer or the target which is immutable. Java can basically only make the pointers immutable without a little help from this trick. Yes, you _can_ mutate the collection with Iterator.remove() or Collection.clear() but at least the programmer has already been forced to declare their knowledge that this is Naughty(tm). Also, clear() is presumably slower than the garbage collector if the object is still in eden space, so who does that anyway? Also, see all Google's typed-immutable collections, which, in return for being immutable, save memory and improve performance.

Yes, I think that last Google case from Thomas can't _quite_ be expressed in the Java type system - it's not actually quite complete and consistent. You get wrapped up in ""? super (? extends E)"" which isn't sufficiently well defined in the lattice. Some of us would love to reduce that to ""? super E"" which would suffice for practical purposes, but isn't mathematically correct. Don't take this comment as gospel - check yourself. I don't tend to use transform() or map-reduce structures as much as I used to because I tend to be working with very large implicit collections where C*'s OpenBitSet is more relevant than java.util.BitSet or generateBitVector().
","10/Jan/14 22:24;arren;Oh, to answer the last question, to use transform() without upcasting, I might have to wrap Iterable in Iterable. I don't know. One of the other tricks that works is defining a method whose only purpose is to do type capture. I don't really like that, but it's the only way Java lets you have a type (non-first-class) in lexical scope.",,,,,,,,,,,,,,,
"FastDateFormat's ""z"" pattern does not respect timezone of Calendar instances passed to format()",LANG-818,12606449,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,dcollens,dcollens,06/Sep/12 17:47,21/Oct/13 05:46,07/Apr/19 20:37,27/Sep/12 12:58,,,,,3.2,,lang.time.*,,,0,,,,,,,,"The work on LANG-462 has introduced a time zone formatting bug in FastDateFormat in commons-lang3.

The problem can be seen by this snippet:
{code}
// Always prints timezone name of machine's default timezone, ignoring TZ
// set on calendar, even though the printed time itself respects calendar's TZ.
Calendar myCal = Calendar.getInstance(TimeZone.getTimeZone(""US/Central""));
System.out.println(FastDateFormat.getInstance(""h:mma z"").format(myCal));
{code}

If you happen to be in US/Central, this will print the right thing, but just try it with US/Eastern, US/Pacific, etc.  It will print the time in the correct timezone, but the timezone name at the end (the ""z"" pattern) will always be the system default timezone.  This is a regression against commons-lang 2.x.

Basically, when the ""forced time zone"" code was removed, the TimeZoneNameRule class stopped respecting the Calendar instance's timezone, and instead now always uses the mTimeZone of the FastDateFormat instance itself (which is only supposed to be used when formatting timezone-less objects such as Date or long).

The removal of the forced time zone stuff is surely the right thing to do (it was a mess).  I think the fix is to change the TimeZoneNameRule inner class to not take a TimeZone instance, but rather to use the TimeZone on the Calendar instance passed into appendTo(), just like TimeZoneNumberRule does.  Presumably then for efficiency, one would use the getTimeZoneDisplay() package-static method to quickly retrieve the required timezone's display name.",,,,,,,,,,,,,,,,,,,,,,,,,,17/Sep/12 14:54;dmjones500;commons-lang3-LANG-818.patch;https://issues.apache.org/jira/secure/attachment/12545424/commons-lang3-LANG-818.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-09-17 13:04:25.88,,,false,,,,,,,,,,,,,,252742,,,Thu Sep 27 12:58:07 UTC 2012,,,,,,0|i0d593:,74627,,,,,,,,"17/Sep/12 13:04;dmjones500;I've attached a patch that I believe addresses this issue, plus a unit test to prove correctness.

The only minor issue is that the estimated length provided by TimeZoneNameRule.estimateLength() is now based on the wrong timezone. I can't see a way to avoid this.

Perhaps it would be better to artificially increase the returned estimated length value on the basis that over-provisioning a StringBuffer is better than under-provisioning?",17/Sep/12 14:41;dcollens;That patch looks good to me.,17/Sep/12 14:54;dmjones500;Slightly tweaked the patch - in the test case I had imported assertNotNull from a different package to the other static imports.,"27/Sep/12 12:58;sebb@apache.org;Thanks for the code patch and test case.
Test case fails before code patch is applied and succeeds afterwards (as it should!).
Applied:

URL: http://svn.apache.org/viewvc?rev=1390980&view=rev
Log:
LANG-818 FastDateFormat's ""z"" pattern does not respect timezone of Calendar instances passed to format()

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,
Add org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_8,LANG-817,12606093,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,garydgregory,04/Sep/12 15:09,15/Oct/13 02:33,07/Apr/19 20:37,04/Sep/12 15:11,3.1,,,,3.2,,lang.*,,,0,,,,,,,,"Add org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_8 to check for version ""6.2"".","Apache Maven 3.0.4 (r1232337; 2012-01-17 03:44:56-0500)
Maven home: C:\Java\apache-maven-3.0.4\bin\..
Java version: 1.6.0_31, vendor: Sun Microsystems Inc.
Java home: C:\Program Files\Java\jdk1.6.0_31\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252743,,,Tue Sep 04 15:11:38 UTC 2012,,,,,,0|i0d59b:,74628,,,,,,,,04/Sep/12 15:11;garydgregory;Committed revision 1380679.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DurationFormatUtils.formatPeriod() mis-calculation,LANG-815,12604134,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,naoya_sugioka,naoya_sugioka,20/Aug/12 22:04,15/Oct/13 02:33,07/Apr/19 20:37,27/Sep/12 12:47,3.1,,,,,,lang.time.*,,,0,,,,,,,,"Hello,

I just encountered an issue with DurationFormatUtils.formatPeriod()
and here I suggest the patch.

The problem is found when calcurating a duration between  June 30 to August 8.

Duration must be 1 month and 9 days  (June 30 + 1 month = July 30,
July 30 + 9 Days = August 8)
but current logic tells this duration is 1 month and 8 days.

then I found out the logic to adjust days value if it was negative by
initial estimate. it uses start date
(June in above case) but must use prev month of end date (July in
above case). then days value was
wrong since getActualMaximum() will return a wrong number.

thank you,
-Naoya
",JDK 1.7,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,20/Aug/12 22:04;naoya_sugioka;duration-format.diff;https://issues.apache.org/jira/secure/attachment/12541661/duration-format.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-08-28 21:09:48.038,,,false,,,,,,,,,,,,,,252744,,,Thu Sep 27 12:47:45 UTC 2012,,,,,,0|i0d59j:,74629,,,,,,,,20/Aug/12 22:04;naoya_sugioka;a suggested patch,"28/Aug/12 21:09;garydgregory;This patch breaks a unit test:

{noformat}
junit.framework.ComparisonFailure: expected:<01 2[6]> but was:<01 2[3]>
	at junit.framework.Assert.assertEquals(Assert.java:85)
	at junit.framework.Assert.assertEquals(Assert.java:91)
	at org.apache.commons.lang3.time.DurationFormatUtilsTest.assertEqualDuration(DurationFormatUtilsTest.java:553)
	at org.apache.commons.lang3.time.DurationFormatUtilsTest.assertEqualDuration(DurationFormatUtilsTest.java:540)
	at org.apache.commons.lang3.time.DurationFormatUtilsTest.testEdgeDurations(DurationFormatUtilsTest.java:421)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
{noformat}

- Base your patch on trunk
- Please provide a unit test to cover your specific case.
- Make sure existing tests break (unless there is a bug in the test itself.)

Thank you.

","22/Sep/12 10:04;dmjones500;I don't believe this is a bug. Below is a test case that should demonstrate the issue, but it passes just fine:

{code}
@Test
public void testLANG815() {
    Calendar calendar = Calendar.getInstance();
    calendar.set(2012, 6, 30, 0, 0, 0);
    long startMillis = calendar.getTimeInMillis();
    
    calendar.set(2012, 8, 8);
    long endMillis = calendar.getTimeInMillis();
    
    
    assertEquals(""1 9"", DurationFormatUtils
            .formatPeriod(startMillis, endMillis, ""M d""));
}
{code}","27/Sep/12 12:47;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1390971&view=rev
Log:
LANG-815 DurationFormatUtils.formatPeriod() mis-calculation
Add test case to show there is no issue

Modified:
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[Method|Constructor]Utils.invoke*(*, Object... args) variants cannot handle null values",LANG-814,12601395,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,mbenson,mbenson,mbenson,03/Aug/12 17:16,22/Aug/12 09:25,07/Apr/19 20:37,03/Aug/12 17:44,3.1,,,,3.2,,lang.reflect.*,,,0,,,,,,,,throws NPE,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252745,,,Fri Aug 03 17:44:39 UTC 2012,,,,,,0|i0d59r:,74630,,,,,,,,"03/Aug/12 17:44;mbenson;New Revision: 1369102
New Revision: 1369116",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.equalsIgnoreCase doesn't check string reference equality,LANG-813,12598781,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,pnepywoda,pnepywoda,14/Jul/12 00:15,22/Aug/12 09:25,07/Apr/19 20:37,14/Jul/12 00:54,3.1,,,,3.2,,lang.*,,,0,,,,,,,,This looks like a regression from .lang versions prior to 3. If the 2 given CharSequences are strings (and both not null) you should check reference equality before delegating to regionMatches(),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-14 00:50:04.675,,,false,,,,,,,,,,,,,,252746,,,Sat Jul 14 00:54:12 UTC 2012,,,,,,0|i0d59z:,74631,,,,,,,,"14/Jul/12 00:50;sebb@apache.org;Another optimisation would be to check that the lengths are the same.
The code already calculates both lengths, so this would not add any overhead and would be more efficient for sequences that differ only in length.","14/Jul/12 00:54;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1361462&view=rev
Log:
LANG-813 StringUtils.equalsIgnoreCase doesn't check string reference equality
Also check lengths.

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.stripStart strips out too many characters ,LANG-811,12598201,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,bigkahuna1uk,bigkahuna1uk,10/Jul/12 15:28,15/Oct/13 02:33,07/Apr/19 20:37,10/Jul/12 15:59,2.5,2.6,3.0,3.1,,,lang.*,,,0,api-change,,,,,,,"I have a String ""Tag-TransactionId"" for which I want to remove the leading ""Tag-"" leaving only ""TransactionId"". I thought I could use StringUtils.stripStart for this but when I do I get the string ""ransactionId"" instead. 

Below is a short method indicating the issue. 



 public static void main(String[] args) {
        
        String key = ""Tag-TransactionId"";

        String keyWithoutTag = StringUtils.stripStart(key, ""Tag-"");
        
        String expected = ""TransactionId"";

        System.out.println(""Expected: "" + expected + "" but got: "" + keyWithoutTag);
        
    }


I have tried repeating test on commons-lang from 2.5 upwards to the latest release all with the same behaviour. It looks like if the string to be removed has characters similar to the remaining string, the stripStart methods works incorrectly. It seems to be a case problem as well. If I use ""Tag-transactionId"" with stripStart it successfully returns ""transactionId""",N/A,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-07-10 15:59:51.096,,,false,,,,,,,,,,,,,,252747,,,Tue Jul 10 16:13:24 UTC 2012,,,,,,0|i0d5a7:,74632,,,,,,,,"10/Jul/12 15:59;sebb@apache.org;From the Javadoc for stripStart():

Strips any of a *set* of characters from the start of a String.

It treats the ""Tag-"" as the set of characters 'T' 'a' 'g' '-' and removes any it finds from the start of the the string. 'T' appears twice, so is removed both times.",10/Jul/12 16:13;mbenson;To be helpful:  I think the functionality you're looking for is expressed by {{StringUtils#removeStart()}} :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils.join() endIndex, bugged for loop",LANG-810,12597881,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,drag0nius,drag0nius,07/Jul/12 02:06,15/Oct/13 02:33,07/Apr/19 20:37,12/Sep/12 21:54,3.1,,,,3.2,,lang.*,,,1,,,,,,,,"endIndex is described as index, but for loop still checks it as ""array length"".
Basically missing equal sign

commons-lang3-3.1-sources.jar, StringUtils.java lines 3309, 3394:
        for (int i = startIndex; i < endIndex; i++) {
should be:
        for (int i = startIndex; i <= endIndex; i++) {

",,,60,60,,0%,60,60,,,,,,,,,,,,,,,,,,11/Jul/12 10:39;drag0nius;StringUtils.java;https://issues.apache.org/jira/secure/attachment/12536013/StringUtils.java,11/Jul/12 10:39;drag0nius;StringUtilsArraysJoinTest.java;https://issues.apache.org/jira/secure/attachment/12536014/StringUtilsArraysJoinTest.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-07-07 11:21:21.094,,,false,,,,,,,,,,,,,,252748,,,Wed Sep 12 22:24:52 UTC 2012,,,,,,0|i0d5af:,74633,,,,,,,,"07/Jul/12 11:21;sebb@apache.org;I think it's the Javadoc that is wrong, because the method is called internally e.g. here:

{code}
public static String join(Object[] array, char separator) {
     ...
     return join(array, separator, 0, array.length);
}
{code}

If the Javadoc is correct, then that method also needs to be fixed.","10/Jul/12 19:58;groovemeister;The parameter description for join(Object array, String sep, int begining inde, int end index) is wrong as it states that the last index is exclusive and must not go past the end of the array. So the description is wring or the implementation is wrong. The suggest fix fixes it and then the javadoc also needs changing.
","11/Jul/12 06:54;joehni;Sorry, but I cannot see what should be wrong here. Javadoc states that endIndex is exclusive and that's exactly what the method does and what is required in the implementation of Sebb's comment (the valid array index runs from 0 to array.length-1).","11/Jul/12 07:30;groovemeister;Joerg, Thanks for your quick response to this issue.

Re: (the valid array index runs from 0 to array.length-1)
Not the case. It accepts array.length as a valid endIndex.


According to the spec: 

     ""endIndex - the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array""

The last index is array.length-1. The method accepts array.length as the last index which is against the stipulation that ""it is an error to pass in an end index past the end of the array.""

It would be correct to say:

     ""endIndex - the index to stop joining from (exclusive). It is an error to pass in an end index GREATER THAN THE LENGTH OF THE ARRAY""


Also, it would be help to have an example with the others such as:

     StringUtils.join([""A"", ""B"", ""C""], "":"",1,3)   = ""B:C""
","11/Jul/12 08:41;drag0nius;Basically {{endIndex}} takes values from 1 to array.length instead of from 0 to {{(array.length - 1)}}
In current state {{endIndex}} is ""1-based index"", not ""0-based index"" while Java language uses 0-based indexes, also previous argument {{startIndex}} is 0-based.

If you put valid endIndex 0, the for loop won't run at all as it checks (i < endIndex) like it was array's length.

Let's say you have 1 element array to join (it does not make practical sense, bu should work), it has index 0 and does not have anything beyond 0 index. 
According to JavaDoc only possible combination of startIndex and endIndex would be (0,0).
{{StringUtils.java, line 3394: for (int i = startIndex; i < endIndex; i++) {}}
However for loop will not execute even single time because {{(i = startIndex = 0)}} is not lower than {{(endIndex = 0)}}, it is equal to endIndex and the result of joining single element array from it's only index 0 to index 0 will be empty string.

Therefore to join that one-element array you need to use combination {{(startIndex = 0, endIndex = 1)}}, where {{(endIndex == array.length)}} is error according to JavaDoc:
""endIndex - the index to stop joining from (exclusive). *It is an error to pass in an end index past the end of the array*""

Example code:
{code:title=""test.java""}
import org.apache.commons.lang3.StringUtils;

public class Test {
	public static void main(String[] args) {
		String[] array = new String[] { ""0"", ""1"", ""2"", ""3"" };

		printResult(array, 0, 0);
		printResult(array, 0, 1);
		printResult(array, 1, 1);
		printResult(array, 2, 3);
		printResult(array, 0, 3);
		printResult(array, 0, 4);
	}

	public static void printResult(String[] array, int startIndex, int endIndex) {
		System.out.println(""Running:\tStringUtils.join(array, \"" \"", "" + startIndex + "", "" + endIndex + "");"");
		System.out.println(""Result: \t"" + StringUtils.join(array, "" "", startIndex, endIndex));
		System.out.println(""array["" + startIndex + ""]:\t'"" + array[startIndex] + '\'');
		System.out.println(""array["" + endIndex + ""]:\t'"" + array[endIndex] + '\'');
		System.out.println();
	}
}
{code}

Now tell me what is wrong with the code, because result is:
{code}
Running:	StringUtils.join(array, "" "", 0, 0);
Result: 	
array[0]:	'0'
array[0]:	'0'

Running:	StringUtils.join(array, "" "", 0, 1);
Result: 	0
array[0]:	'0'
array[1]:	'1'

Running:	StringUtils.join(array, "" "", 1, 1);
Result: 	
array[1]:	'1'
array[1]:	'1'

Running:	StringUtils.join(array, "" "", 2, 3);
Result: 	2
array[2]:	'2'
array[3]:	'3'

Running:	StringUtils.join(array, "" "", 0, 3);
Result: 	0 1 2
array[0]:	'0'
array[3]:	'3'

Running:	StringUtils.join(array, "" "", 0, 4);
Result: 	0 1 2 3
array[0]:	'0'
Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 4
	at Test.printResult(Test.java:20)
	at Test.main(Test.java:12)
{code}

Oh so came up that after fixing that for loop, starting from line 3387 another bug emerges:
{code}

        int noOfItems = endIndex - startIndex;
        if (noOfItems <= 0) {
            return EMPTY;
        }
{code}
should be:
{code}

        int noOfItems = endIndex - startIndex + 1;
        if (noOfItems <= 0) {
            return EMPTY;
        }
{code}
because joining one element should return that one exact element, not an empty string.",11/Jul/12 10:39;drag0nius;added proposed fix,11/Jul/12 10:39;drag0nius;added proposed junit test with some debug printfing,"11/Jul/12 11:38;joehni;?? Sorry, but the result is exactly what is expected. There's no fix required. It's just Javadoc that has to be clarified. endIndex is exclusive.",12/Sep/12 06:01;bayard;So 3.2 - javadoc fix?,12/Sep/12 10:12;sebb@apache.org;OK with me to just fix Javadoc,"12/Sep/12 10:50;groovemeister;Anyone who know String.substring(start,end) would be familiar with how this works. However, the Javadoc is not quite as clear with this method.
Also, the  reference to end index in the startIndex parameter description should be removed in its entirety. My suggestion is:

== OLD ==

Parameters:
array - the array of values to join together, may be null
separator - the separator character to use, null treated as """"
startIndex - the first index to start joining from. It is an error to pass in an end index past the end of the array
endIndex - the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array

== NEW ==

Parameters:
array - the array of values to join together, may be null
separator - the separator character to use, null treated as """"
startIndex - the first index to start joining from
endIndex - the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array

The number of elements joined equals (endIndex - beginIndex). This will throw an exception if the endIndex is larger than the length of the array.


That clears it up for me because it clearly describes the condition that will fail and how to calculate the length as well. ","12/Sep/12 21:54;sebb@apache.org;Added clarifying Javadoc and examples:

URL: http://svn.apache.org/viewvc?rev=1384145&view=rev
Log:
LANG-810 StringUtils.join() endIndex, bugged for loop

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java
","12/Sep/12 22:10;groovemeister;The example in the svn JAVADOC is for the different method:

OLD

3169	     * <pre>
3170	     * StringUtils.join(null, *)               = null
3171	     * StringUtils.join([], *)                 = """"
3172	     * StringUtils.join([null], *)             = """"
3173	     * StringUtils.join([""a"", ""b"", ""c""], ';')  = ""a;b;c""
3174	     * StringUtils.join([""a"", ""b"", ""c""], null) = ""abc""
3175	     * StringUtils.join([null, """", ""a""], ';')  = "";;a""
3176	     * </pre>


SHOULD READ SOMETHING LIKE THIS

StringUtils.join(null,'a',0,0)                   = null
StringUtils.join(null,'a',999,999)               = null
StringUtils.join([],'a',0,0)                     = """"
StringUtils.join([],'a',0,1)                     = ERROR
StringUtils.join([""a"", ""b"", ""c""], ';',0,1)       = ""a""
StringUtils.join([""a"", ""b"", ""c""], ';',0,2)       = ""a;b""
StringUtils.join([""a"", ""b"", ""c""], ';',0,3)       = ""a;b;c""
StringUtils.join([null, null, ""a""], ';',0,2)     = "";;""
StringUtils.join([null, null, ""a""], ';',0,3)     = "";;a""
","12/Sep/12 22:24;groovemeister;my error. I looked at the wrong svn code!

It looks very good now with good examples and very easy to understand.
",12/Sep/12 22:24;sebb@apache.org;Check the recent commit which also updated the examples.,,,,,,,,,,,,,,,,
RandomStringUtils inefficient init of start and end for letters and numbers; misleading Javadoc,LANG-808,12560083,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,pascalschumacher,sebb@apache.org,sebb@apache.org,10/Jun/12 15:10,25/May/17 12:58,07/Apr/19 20:37,25/May/17 12:58,2.6,3.1,,,,,lang.*,,,0,,,,,,,,"If either letters or numbers is true, RandomStringUtils(count, 0, 0, letters, numbers, ...) sets the default start index to space, intending to support the set of printable characters (according to the Javadoc).

However, the code later uses Character.isLetter and Character.isDigit, which exclude space and some other printable characters.

There is currently no direct support for generating printable characters; this would probably require another flag.

The current Javadoc is misleading, and the current code is inefficient because some characters cannot currently be used.

The lowest char which is either digit or letter is '0' (zero).
The lowest char which is a letter is 'A' (upper case a).

The Javadoc for the randomNumeric(int) method says:

bq. Characters will be chosen from the set of numeric characters.

This does not make clear that the numerics are restricted to the ASCII set (because of the way start=end=0 is handled).

Similarly for randomAlphabetic and randomAlphanumeric.

Is it the intention that randomAlphabetic etc. be restricted to ASCII?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2013-10-17 07:16:19.037,,,false,,,,,,,,,,,,,,251208,,,Thu May 25 12:58:05 UTC 2017,,,,,,0|i0b5hj:,63001,,,,,,,,"17/Oct/13 07:16;bayard;Originally I'm sure I thought of it as a password generator, so ASCII was an assumption I wasn't noticing. 

We should note this in the javadoc, see if we can clean any of it up and consider if there's a possible refactoring of the API that would be more valuable.",25/May/17 12:58;pascalschumacher;RandomStringUtils will be deprecated in commons-lang 3.6 in favor of RandomStringGenerator from commons-text. Please use [RandomStringGenerator|https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/RandomStringGenerator.html] instead. Thanks!,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomStringUtils throws confusing IAE when end <= start,LANG-807,12560074,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,sebb@apache.org,sebb@apache.org,sebb@apache.org,10/Jun/12 12:11,22/Aug/12 09:25,07/Apr/19 20:37,10/Jun/12 12:41,2.6,3.1,,,2.7,3.2,,,,0,,,,,,,,"RandomUtils invokes Random#nextInt(n) where n = end - start.

If end <= start, then Random throws:

java.lang.IllegalArgumentException: n must be positive

This is confusing, and does not identify the source of the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252749,,,2012-06-10 12:11:51.0,,,,,,0|i0d5an:,74634,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomStringUtils can enter infinite loop if chosen char does not meet letter/digit requirements,LANG-806,12560054,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,pascalschumacher,sebb@apache.org,sebb@apache.org,09/Jun/12 17:08,25/May/17 12:59,07/Apr/19 20:37,25/May/17 12:59,2.6,3.1,,,,,lang.*,,,2,,,,,,,,"An infinite loop can result if the selection process never returns a char that passes the validation test.

This can occur if the subset specified by the start and end characters does not contain any valid characters.

For example:

{code:java}
RandomStringUtils.random(3, 5, 10, true, true); // 1

RandomStringUtils.random(3, 56192, 56319, false, false); // 2
{code}

There's also the case where only surrogates are allowed, but the buffer is not an even number of characters, for example:

{code:java}
RandomStringUtils.random(3, 56320, 57343, false, false); // 3
{code}

The second example is easy to detect, but in general it does not seem easy to determine in advance if the subset contains any valid characters - except by evaluating all the possible char values. This would be expensive if the subset range is large.

One possibility is to count the total number of loops (or retries), and throw an error if it exceeds a given value. Or count the number of consecutive retries.
In both cases the threshold value must be set high enough to allow for the cases where the allowable char range contains only a small proportion of valid characters. 

In the case of digits only, the default allowable range is currently set to digits + letters, so the proportion of valid chars is 10/90 i.e. approx 11%.

A minimum proportion of 1% or 0.1% would be necessary to reduce the number of false positives.",,,,,,,,,,,,,,,,LANG-1284,,,,,,,,,,20/May/13 23:42;calvine;LANG-806.patch;https://issues.apache.org/jira/secure/attachment/12583914/LANG-806.patch,20/May/13 23:42;calvine;RandomStringException.java;https://issues.apache.org/jira/secure/attachment/12583915/RandomStringException.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2012-08-06 07:40:14.987,,,false,,,,,,,,,,,,,,251209,,,Thu May 25 12:59:14 UTC 2017,,,,,,0|i0b5hr:,63002,,,,,,,,"06/Aug/12 07:40;darkrsw;Is this bug fixed already?
If not, I would like to look into it.",22/Aug/12 09:24;bayard;Please feel free to take a look :),"20/May/13 23:42;calvine;I have attached a fix to this error. My fix implements what was discussed in the description by tracking concurrent failures to find a valid character in the range, and throwing an exception if this occurs.

I would love any feedback!","24/Oct/13 20:12;bayard;I haven't thought on the solution yet, but on the Exception, I'm tempted by a more generic exception. TooManyTriesException(String, Throwable).  ","28/Mar/14 11:41;sebb@apache.org;If implemented, the variable names should be CONSECUTIVE rather than CONCURRENT!","16/Nov/16 20:31;githubbot;Github user PascalSchumacher commented on the issue:

    https://github.com/apache/commons-lang/pull/211
  
    related issue: https://issues.apache.org/jira/browse/LANG-806 
    
    I guess this pull request fixes the most important part of the issue.
",25/May/17 12:59;pascalschumacher;RandomStringUtils will be deprecated in commons-lang 3.6 in favor of RandomStringGenerator from commons-text. Please use [RandomStringGenerator|https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/RandomStringGenerator.html] instead.,,,,,,,,,,,,,,,,,,,,,,,,
"RandomStringUtils.random(count, 0, 0, false, false, universe, random) always throws java.lang.ArrayIndexOutOfBoundsException",LANG-805,12560044,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Blocker,Fixed,,thomas.belot,thomas.belot,09/Jun/12 13:46,22/Aug/12 09:25,07/Apr/19 20:37,09/Jun/12 15:06,2.5,2.6,3.1,,2.7,3.2,,,,0,patch,,,,,,,"In commons-lang 2.6 line 250 :
{code}ch = chars[random.nextInt(gap) + start];{code}
-This line of code takes a random int to fetch a char in the _chars_ array regardless of its size.-
-(Besides _start_ is useless here)-

-Fixed version would be :-
{code}//ch = chars[random.nextInt(gap)%chars.length];{code}

When user pass 0 as _end_ or when the array is not null but empty this line ends up with an exception",,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-06-09 14:31:18.594,,,false,,,,,,,,,,,,,,252750,,,Sat Jun 09 16:55:53 UTC 2012,,,,,,0|i0d5av:,74635,,,,,,,,"09/Jun/12 14:31;sebb@apache.org;Alternatively, choose end = chars.length.

In any case, the code needs to check for chars.length == 0 to avoid NPE in the modulus or IAE in random.nextInt(gap) as gap will be zero.","09/Jun/12 14:44;sebb@apache.org;bq. (Besides start is useless here)

I don't think start is useless; it should be possible to specify a subset of the char array.","09/Jun/12 15:22;thomas.belot;You're right in both comments and I was wrong in my analysis (thanks for pointing that out).
I've reworked a fix which adds IAE in error cases : 
{code}
		if (start < 0)
			throw new IllegalArgumentException(
					""Requested start parameter is negative"");
		if (end < 0)
			throw new IllegalArgumentException(
					""Requested end parameter is negative"");
		if ((start == 0) && (end == 0)) {
			if (chars != null) {
				throw new IllegalArgumentException(
						""Requested end parameter is 0 (should be positive)"");
			} else if (!letters && !numbers) {
				start = 0;
				end = Integer.MAX_VALUE;
			} else {
				end = 'z' + 1;
				start = ' ';
			}
		}
		if (chars != null && end > chars.length)
			throw new IllegalArgumentException(
					""Requested end parameter is greater than chars.length"");

		char[] buffer = new char[count];
		int gap = end - start;
		if (gap <= 0) {
			throw new IllegalArgumentException(
					""Requested gap (=end - start) is negative or zero"");
		}
{code}","09/Jun/12 16:14;sebb@apache.org;The code has already been fixed.
Note that start == 0 and end == 0 is specifically allowed as a special case.","09/Jun/12 16:31;thomas.belot;... crap

I'm a maven user and I'm relying on maven's version plugin to notify me of library updates.
The fact that you changed the artifact name for the new version of commons lang made me miss the new version ... At least this bug helped me correcting that.

Thanks Sebb","09/Jun/12 16:55;sebb@apache.org;Just to clarify: the code was only fixed today (in both lang 2.x and lang 3.x) thanks to your JIRA report.
However it was fixed (in SVN) just before your reworked fix was added.

The Maven artifact name change was necessary because lang3 is not fully binary compatible with lang2",,,,,,,,,,,,,,,,,,,,,,,,,
LocaleUtils - DCL idiom is not thread-safe,LANG-803,12558077,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,25/May/12 10:28,15/Oct/13 02:32,07/Apr/19 20:37,25/May/12 15:05,2.6,,,,2.7,,lang.*,,,0,,,,,,,,"See LANG-511 - the DCL idiom is not thread-safe, and should be replaced by IODH.",,,,,,,,,,,,,,,,LANG-511,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252751,,,2012-05-25 10:28:20.0,,,,,,0|i0d5b3:,74636,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LocaleUtils - unnecessary recursive call in SyncAvoid class,LANG-802,12558075,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,25/May/12 10:18,22/Aug/12 09:25,07/Apr/19 20:37,25/May/12 14:40,3.1,,,,3.2,,lang.*,,,0,,,,,,,,"The SyncAvoid class calls availableLocaleList() which is a method in the containing class that returns SyncAvoid.AVAILABLE_LOCALE_LIST.

This is unnecessarily complex. The code should use the local variable ""list"" instead.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,252752,,,2012-05-25 10:18:08.0,,,,,,0|i0d5bb:,74637,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc bug in DateUtils#ceiling for Calendar and Object versions.,LANG-800,12551352,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,lucianof,lucianof,18/Apr/12 05:10,22/Aug/12 09:25,07/Apr/19 20:37,24/Apr/12 12:56,3.1,,,,3.2,,,,,0,,,,,,,,"The documentation has only been corrected for the ceiling method that takes a Date, but not for those that take a Calendar or an Object, respectively.

{quote}{noformat}For example, if you had the datetime of 28 Mar 2002
     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
     * 2002 13:00:00.000.  If this was passed with MONTH, it would
     * return 1 Mar 2002 0:00:00.000. {noformat}{quote}

Looks like copy-paste from truncate. (the dates are incorrect)",,,600,600,,0%,600,600,,,,LANG-672,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-04-24 12:56:54.387,,,false,,,,,,,,,,,,,,236216,,,Tue Apr 24 12:56:54 UTC 2012,,,,,,0|i0d5bj:,74638,,,,,,,,24/Apr/12 12:56;garydgregory;In SVN.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtils#parseDate uses default locale; add Locale support,LANG-799,12550750,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,koppor,koppor,12/Apr/12 21:45,18/Jan/16 16:35,07/Apr/19 20:37,22/Sep/12 13:24,3.1,,,,3.2,,lang.time.*,,,1,features,,,,,,,"Similar issue as https://issues.apache.org/jira/browse/HTTPCLIENT-471

Following line throws an ParseException on a German system:
d = DateUtils.parseDate(""Wed, 09 Apr 2008 23:55:38 GMT"", new String[] {""EEE, dd MMM yyyy HH:mm:ss zzz""});

Reason: parseDate internally calls SimpleDateFormat without providing a locale. This causes ""MMM"" to be interpreted using the system locale. If the system is German, the date is trying to be interpreted as German date.

I see following solutions:
 A) Always instantiate SimpleDateFormat with Locale.ENGLISH
 B) Make two instances of SimpleDateFormat. One without providing a locale and one with Locale.ENGLISH. Try two parsings
 C) Make as many SimpleDateFormat instances as locales are availble iterate over all instances at the parsing attempts.
 D) provide an additional (optional) parameter to parseDate for providing a Locale

I would prefer B) as this seems the best trade-off between internationalization and local usage.

What do you think?",,,7200,7200,,0%,7200,7200,,,,,,,,LANG-1202,,,,,,,,,,19/Sep/12 19:44;dmjones500;commons-lang3-LANG-799.patch;https://issues.apache.org/jira/secure/attachment/12545781/commons-lang3-LANG-799.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-04-12 23:17:45.073,,,false,,,,,,,,,,,,,,235614,,,Mon Sep 24 00:12:28 UTC 2012,,,,,,0|i0a40f:,56923,,,,,,,,"12/Apr/12 23:17;sebb@apache.org;There seems no reason to treat Locale.ENGLISH specially here.

I think option D is the best.

i.e. leave the current behaviour as is (and make sure it's documented), but allow the Locale to be provided.","19/Sep/12 19:44;dmjones500;Attached is a patch that adds overloaded versions of parseDate and parseDateStrictly with a Locale parameter (option D), plus unit tests. 

If a locale is supplied, the patterns will be interpreted using the date format symbols for that locale.

The original issue would then be addressed by:

{code}
d = DateUtils.parseDate(""Wed, 09 Apr 2008 23:55:38 GMT"", Locale.ENGLISH, 
        new String[] {""EEE, dd MMM yyyy HH:mm:ss zzz""});
{code}","22/Sep/12 12:36;sebb@apache.org;Added tests to show current behaviour, i.e. ParseException occurs if default Locale does not match date:

URL: http://svn.apache.org/viewvc?rev=1388787&view=rev
Log:
LANG-799 Add tests to show ParseException when default Locale is wrong

Modified:
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java

Some of these would need to be changed if option D is not used.","22/Sep/12 12:52;sebb@apache.org;Not sure it's necessary for the code to check that the Locale is supported.
Seems to me such a check should be done by the caller if required.","22/Sep/12 13:09;sebb@apache.org;The patch breaks the tests I just added for UK and DE parsing.

This is because the patch now uses 
    parser.applyLocalizedPattern(pattern);
whereas previously it used
    parser.applyPattern(pattern);

I think it's wrong to assume that the patterns are localised; it will potentially break existing applications (just as it broke the tests I just added).","22/Sep/12 13:24;sebb@apache.org;Applied patch with minor tweaks:
- dropped check for valid Locale
- use applyPattern not applyLocalizedPattern

URL: http://svn.apache.org/viewvc?rev=1388806&view=rev
Log:
LANG-799 - DateUtils#parseDate uses default locale; add Locale support

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/DateUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java
","22/Sep/12 13:50;dmjones500;That last commit now breaks the build, as my test {{testParseNonSystemLocale()}} assumed the localized pattern change and now fails.

I suggest you add a couple of tests, based on your new tests. E.g. you have:

{code}
    // Parse German date with English Locale
    @Test(expected=ParseException.class)
    public void testLANG799_EN_FAIL() throws ParseException {
        Locale dflt = Locale.getDefault();
        Locale.setDefault(Locale.ENGLISH);
        try {
            DateUtils.parseDate(""Mi, 09 Apr 2008 23:55:38 GMT"", ""EEE, dd MMM yyyy HH:mm:ss zzz"");
        } finally {
            Locale.setDefault(dflt);            
        }
    }
{code}

And so I would now add, for example:

{code}
    // Parse German date with English Locale, specifying German Locale override
    @Test
    public void testLANG799_EN_WITH_DE_LOCALE() throws ParseException {
        Locale dflt = Locale.getDefault();
        Locale.setDefault(Locale.ENGLISH);
        try {
            DateUtils.parseDate(""Mi, 09 Apr 2008 23:55:38 GMT"", Locale.GERMAN, ""EEE, dd MMM yyyy HH:mm:ss zzz"");
        } finally {
            Locale.setDefault(dflt);            
        }
    }
{code}

You can ditch my test {{testParseNonSystemLocale}} and the associated {{getLongDateFormatForLocale}}.","22/Sep/12 13:56;joehni;Please, ensure the tests ruin with Java 5 as well as with newer ones. And note, that the JDK switched the behavior between Java 5 and 6. Java 5 always uses English time zone short cuts (e.g. ""CET"" for Central European Time), while they are localized since Java 6 (""MEZ"" for Mitteleuropäische Zeit).","22/Sep/12 13:58;dmjones500;Also, we should now remove {{testParseBadLocale()}} as we are no longer checking the Locale upon entry to the method.","22/Sep/12 15:37;sebb@apache.org;bq. That last commit now breaks the build, as my test testParseNonSystemLocale() assumed the localized pattern change and now fails.

Does not fail for me, even if I change the default Locale to Locale.GERMAN(Y)","22/Sep/12 15:38;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1388818&view=rev
Log:
LANG-799 - DateUtils#parseDate uses default locale; add Locale support
Remove unnecessary test

Modified:
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java

URL: http://svn.apache.org/viewvc?rev=1388821&view=rev
Log:
LANG-799 - DateUtils#parseDate uses default locale; add Locale support
Parse German date with English Locale, specifying German Locale override

Modified:
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java","22/Sep/12 15:40;sebb@apache.org;bq. Please, ensure the tests ruin with Java 5 as well as with newer ones. 

The pom specifies Java 1.6 for Lang3

bq. And note, that the JDK switched the behavior between Java 5 and 6. Java 5 always uses English time zone short cuts (e.g. ""CET"" for Central European Time), while they are localized since Java 6 (""MEZ"" for Mitteleuropäische Zeit).

Not sure what that refers to; sounds like a separate bug (if any).","22/Sep/12 17:23;dmjones500;bq. Does not fail for me, even if I change the default Locale to Locale.GERMAN(Y)

This appears to be related to Java version. I was inadvertently compiling and executing the tests with JDK 7 not 6. The test passes under 6 and fails under 7.","24/Sep/12 00:12;sebb@apache.org;Java 7 has many more Locales. It so happens that the first different format string for Java 1.7 use formatting entries that are not in the standard pattern.

Removed the test, as it no longer applies (we don't use localized formats)

URL: http://svn.apache.org/viewvc?rev=1389172&view=rev
Log:
LANG-799 - DateUtils#parseDate uses default locale; add Locale support
Remove inappropriate test - we don't use localized formats

Modified:
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java
",,,,,,,,,,,,,,,,,
DateUtils.addDays does not work properly with daylight saving time (DST),LANG-796,12548305,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,nicola.barbiero,nicola.barbiero,27/Mar/12 13:20,22/Oct/14 14:50,07/Apr/19 20:37,,3.3.2,,,,Discussion,,lang.time.*,,,2,,,,,,,,"{{DateUtils.addDays}} does not work properly with daylight saving time. The signature of the method is {{Date addDays(Date date, int amount)}} and the javadocs says:

bq. Adds a number of days to a date returning a new object. The original date object is unchanged

so if X=date.getTime() is the number of milliseconds of the date in input,
the expected behaviour is that the returned Date has a number of milliseconds equal to X+amount*(86400000), where 86400000 is the number of milliseconds in one day.
But when the calculation goes across the DST change date, the number of milliseconds added does not correspond to whole days.

For example, here in Brussels, this code fragment:

{code:java}
Date input = DateUtils.parseDateStrictly(""25-03-2012_00:00"", new String[] { ""dd-MM-yyyy_HH:mm"" });
Date output = DateUtils.addDays(input, 1);
{code}

will give:

'input' equals to ""Sun Mar 25 00:00:00 CET 2012""    ==> input.getTime() equals to 1332630000000
'output' equals to ""Mon Mar 26 00:00:00 CEST 2012""  ==> output.getTime() equals to 1332712800000

where 1332712800000-1332630000000=82800000 < 86400000
(in fact 82800000 is equivalent to 23h).

Since {{addDays}} is working with objects Date, it should not be influenced by events like the DST.


Proposed solution: replace the current implementation

{code:java}
public static Date add(Date date, int calendarField, int amount) {
        if (date == null) {
            throw new IllegalArgumentException(""The date must not be null"");
        }
        Calendar c = Calendar.getInstance();
        c.setTime(date);
        c.add(calendarField, amount);
        return c.getTime();
    }
{code}

based on Calendar with an implementation that works only with Date objects, for example:

{code:java}
public static Date add(Date date, int calendarField, int amount) {
        if (date == null) {
            throw new IllegalArgumentException(""The date must not be null"");
        }
        return new Date(input.getTime() + amount * 86400000l);
    }
{code}


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-03-27 13:57:40.045,,,false,,,,,,,,,,,,,,233402,,,Wed Oct 22 14:50:51 UTC 2014,,,,,,0|i0b5if:,63005,,,,,,,,"27/Mar/12 13:57;adrianc@hlmksw.com;The current behavior is correct. The result added one day. One day is NOT equal to 86400000 milliseconds - as you can see from the result.
","27/Mar/12 15:34;nicola.barbiero;From http://docs.oracle.com/javase/6/docs/api/java/util/Date.html:
""The class Date represents a specific instant in time, with millisecond precision. [...] the Date class is intended to reflect coordinated universal time (UTC) [...] Nearly all modern operating systems assume that 1 day = 24 × 60 × 60 = 86400 seconds in all cases.""

The concept of daylight saving time (DST) is not present in UTC, and UTC is NEVER effected by DST, so a method that receives a Date in input and returns a Date should never be effected by DST.
http://en.wikipedia.org/wiki/Coordinated_Universal_Time#Daylight_saving

The current behavior would be correct if working on Calendar objects, since a Calendar takes in account the concept of DST.

By the way, even if the final choice will be to not change the current behavior for this method, at least it should be better documented in its javadoc, to avoid misuses and misunderstanding in its way of working.","27/Mar/12 16:31;adrianc@hlmksw.com;If you want to perform millisecond arithmetic, then I recommend you use long values and avoid using the DateUtils class.

The JavaDocs seem clear to me - the method adds a day, not 86400000 milliseconds.
","27/Mar/12 16:36;tn;I had to deal with DST problems just recently myself:

The behaviour of DateUtils is perfectly valid if you consider your local timezone. The method uses internally the default Calendar instance (that is set to your local timezone) and is thus affected by DST. If you want to operate on UTC dates only, use a Calendar configured for the UTC timezone.

It could be elaborated a bit more in the javadoc, so that people are aware of the fact, but there is nothing wrong with it imho.","28/Mar/12 08:11;nicola.barbiero;That's the point: DateUtils.addDays receives in input a Date, that is an absolute time, so it should not be influenced by DST. Using a Calendar configured for the UTC timezone means to not use DateUtils.addDays, since there is no overloading method that receives a Calendar in input.
As Thomas said, the method uses internally the default Calendar instance, that is set to the local timezone of the server where the code is running, and this is quite problematic in those time of cloud computing, because the code will work differently if the server is located in a zone where DST is applied or not (some countries do not implement any DST at all).

Summarizing, for me the issue is that the user of this method is affected by the TimeZone but he has no way to set this TimeZone, because always the default Calendar instance and the local timezone are used.","28/Mar/12 08:36;tn;The whole idea of DateUtils is to provide convenience methods when manipulating Date objects. The use-case that you describe, and I assume that's quite a common one, requires a properly configured Calendar object. Now we could add a method like this:

{noformat}
  public static Date add(Date date, int calendarField, int amount, Calendar cal) {
     cal.setTime(date);
     cal.add(calendarField, amount);
     return cal.getTime();
  }
{noformat}

But what's the point of it? If you already have the Calendar that you want to use, why not just do it straight-away?

The fix that you propose would only support the UTC timezone, and will return wrong results for different timezones in case of a DST. While you are right, when you say that a Date object is not influenced by DST, any manipulation of it is in fact (or better could, depending on the timezone). When you need to operate in UTC time, always use proper configured Calendars (and also Formatters) for the UTC timezone (or set your local timezone to UTC).","03/Apr/12 12:13;tn;I was still musing about this issue, and maybe adding an additional version with a TimeZone parameter could make sense:

{noformat}
public static Date add(Date date, int calendarField, int amount, TimeZone tz) {
     Calendar cal = Calendar.getInstance(tz);
     cal.setTime(date);
     cal.add(calendarField, amount);
     return cal.getTime();
}
{noformat}

But to be consistent, this should be done for all methods (e.g. addDays, addMonths, ..), and would definitely bloat the API.",03/Apr/12 13:15;joehni;What about creating UTCDateUtils instead that operates on UTC and is therefore independent of any TZ? Then we have simply to properly document both types. We could use a package private base class to share common functionality.,"04/Apr/12 07:53;tn;I like the idea somehow, but it would also mean to duplicate the signature of a class, as all the methods in DateUtils are static.

Something that I have in mind, is to extract the current interface of DateUtils into a separate class TBD. DateUtils would then provide two static members DEFAULT and UTC, which instantiate the separate class TBD with the corresponding timezones (TimeZone.getDefault() or TimeZone.getTimeZone(""UTC"")). Additionally to mimick the current behavior, the existing static methods in DateUtils would call the corresponding methods of DateUtils.DEFAULT.

Users can instantiate also a TBD instance by providing a custom timezone.

But this is maybe an overkill, the same can be achieved by altering the default Timezone via TimeZone.setDefault. Although there are surely use-cases where this is not possible or desirable (e.g. due to multi-threading).","22/Sep/12 10:43;dmjones500;I agree with Nicola. A class that intends to work with Date values should not be interested in daylight savings. I suspect this was an unintentional error on the part of the original implementation.

At the very least, the Javadocs need to change to reflect this behaviour.

The issue with changing the code is that people may already be relying on this behaviour. All of the {{addXXX}} methods use Calendars and would be impacted.","23/Sep/12 22:29;nicola.barbiero;Right, changing the code now might be dangerous...
And of course I agree that an update of Javadoc will be harmless for those who are already using the library, and helpful for everyone.",16/Oct/13 08:56;bayard;Javadoc patch needed.,"26/Sep/14 11:23;dmjones500;I've just updated the Javadoc to provide a warning in the opening paragraphs:

{quote}
Several methods are provided for adding to {{Date}} objects, of the form 
{{addXXX(Date date, int amount)}}. It is important to note these methods 
use a {{Calendar}} internally (with default timezone and locale) and may
be affected by changes to daylight saving time (DST).
{quote}

We should discuss whether this behaviour should change in a future release. I've updated the affected version to the latest, since this is still an issue.

SVN log:

Author: djones
Date: Fri Sep 26 11:19:32 2014
New Revision: 1627753

URL: http://svn.apache.org/r1627753
Log:
Added Javadoc warnings related to LANG-796.

Modified:
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/DateUtils.java","27/Sep/14 07:31;adrianc@hlmksw.com;I repeat:

The current behavior is correct. The result added one day. One day is NOT equal to 86400000 milliseconds - as you can see from the result.
","22/Oct/14 14:50;jpollak;I am affected by this situation as well, and I agree with [~nicola.barbiero] - As he quoted the Oracle specification at the top of bug: ""Nearly all modern operating systems assume that 1 day = 24 × 60 × 60 = 86400 seconds in all cases"".

Adding a day should add a 86400 seconds, in all cases, regardless of timezone.",,,,,,,,,,,,,,,,
"SystemUtils.IS_OS_WINDOWS_2008, VISTA are incorrect",LANG-794,12546860,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,britter,thobbs,thobbs,16/Mar/12 23:15,06/Apr/15 17:28,07/Apr/19 20:37,03/Apr/15 12:02,3.1,,,,3.4,,lang.*,,,0,,,,,,,,"On Windows Server 2008 R2 (a Rackspace Cloud Instance), the values of SystemUtils.IS_OS_WINDOWS_2008 and SystemUtils.IS_OS_WINDOWS_VISTA are incorrect: the former is false and the latter is true.

I'm not sure how to fix the VISTA flag (as I don't have an instance to test against), but the cause of WINDOWS_2008 being set to false is that the match explicitly requires the version to be 6.1, where 6.0 can apparently also be the version number for 2008 R2.","Windows Server 2008 R2, Rackspace Cloud Instance",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-12 06:19:46.52,,,false,,,,,,,,,,,,,,232018,,,Fri Apr 03 12:46:23 UTC 2015,,,,,,0|i0b5iv:,63007,,,,,,,,12/Sep/12 06:19;bayard;Wondering why we mess with the version. http://www.milesdennis.com/2010/05/detecting-which-os-is-running-in-java.html seems to imply that osName matches nicely on Windows to the properties we want to set.,30/Sep/14 08:18;dmjones500;Looks like that blog page has moved to: http://milesdennis.blogspot.co.uk/2010/05/detecting-which-os-is-running-in-java.html.,"27/Mar/15 22:31;hzpz;I agree with [~bayard], on Windows commons-lang should use the value of os.name to determine the version. Take a look at http://hg.openjdk.java.net/jdk8u/jdk8u40/jdk/file/tip/src/windows/native/java/lang/java_props_md.c for possible values.",28/Mar/15 11:17;britter;Patches welcome!,"28/Mar/15 22:20;githubbot;GitHub user hzpz opened a pull request:

    https://github.com/apache/commons-lang/pull/60

    LANG-794: Use os.name only when determining Windows versions

    As suggested in previous JIRA comments and according to some other sources (see http://lopica.sourceforge.net/os.html and http://hg.openjdk.java.net/jdk7u/jdk7u/jdk/file/tip/src/windows/native/java/lang/java_props_md.c for example) the Windows version can be determined by os.name alone. I also added a constant for Windows Server 2012.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hzpz/commons-lang LANG-794

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/commons-lang/pull/60.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #60
    
----
commit 7e4205a22339deebd5d7215282e9a3ec72a847ed
Author: hzpz <mailantimo@gmx.de>
Date:   2015-03-28T22:11:23Z

    LANG-794: Use os.name only when determining Windows versions

----
","03/Apr/15 12:02;britter;{code}
$ svn ci -m ""LANG-794: SystemUtils.IS_OS_WINDOWS_2008, VISTA are incorrect. This also fixes #60 from github. Thanks to Timo Kockert.""
Sending        RELEASE-NOTES.txt
Sending        src/changes/changes.xml
Sending        src/main/java/org/apache/commons/lang3/SystemUtils.java
Transmitting file data ...
Committed revision 1671040.
{code}","03/Apr/15 12:46;githubbot;Github user asfgit closed the pull request at:

    https://github.com/apache/commons-lang/pull/60
",,,,,,,,,,,,,,,,,,,,,,,,
ToStringStyle registry may retain entries between invocations - is this a problem?,LANG-792,12545597,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,sebb@apache.org,sebb@apache.org,08/Mar/12 02:58,15/Oct/13 02:33,07/Apr/19 20:37,08/Mar/12 22:28,,,,,,,,,,0,,,,,,,,"The class ToStringStyle maintains a registry in order to try to detect object cycles (introduced by LANG-69).

Multiple instances in the same thread share the same registry (it's a ThreadLocal - not clear why).
Entries can be left in the registry on return from calling various methods on the instance.
Is this a bug? Can object cycles cause problems across method calls?
If it is intended for the registered objects to remain across method calls, can objects from different instances interfere with each other?

The registry uses a WeakHashMap, so the entries should not cause problems for garbage collection.

One solution would be to use an instance field to hold the map instead of sharing them.
Would that use more memory, or be otherwise less efficient?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-03-08 17:00:02.256,,,false,,,,,,,,,,,,,,230783,,,Thu Mar 08 22:28:26 UTC 2012,,,,,,0|i0d5br:,74639,,,,,,,,"08/Mar/12 17:00;garydgregory;Howdy,

A thread local is used so that calling reflectionToString on the same object (and any of its referred objects) from multiple threads works (returns the same String).

If the registry was _not_ a thread local, then all threads would share the registry and that would lead to some threads not getting a proper toString of an object because another thread already registered it, erroneously thinking it was already visited.

For example for an object o that has one ivar x which itself has a y ivar pointing to ""y"":

Thread 1: registers x and does a deep toStrings on x
Thread 2: checks that x is registered, it is, so it uses the default toString for x (not the deep toString)
Thread 1: ungisters x
...

Thread 1 gets x[y[""y""]] OK
Thread 2 gets x[y@123] BAD

Also, with a thread local, the registry does not need to be a thread-safe data structure.","08/Mar/12 18:23;sebb@apache.org;bq. If the registry was not a thread local, then all threads would share the registry

That is only true if the ToStringStyle (TSS) instance is shared between threads.

I had assumed that each ToStringBuilder would use its own TSS instance, but that is not the case.
Looking again at the code, I see that the ToStringStyle (TSS) classes seem to be intended to be used as singletons which are then shared between threads. 

That explains why the ThreadLocal is needed.

Also, I now realise that the earlier problem with the test cases failing on Gump is that some of them created a builder but then failed to use the toString() method on it. That left entries in the registry, and caused the subsequent test to fail if it checked that the registry was empty.

In normal use, the toString() method is required; the registry will then be cleaned up.
The test cases need to do so too; I'll fix them up again.","08/Mar/12 22:28;sebb@apache.org;Seems to be OK; have added comment to source code to say why ThreadLocal is needed, and updated tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
SerializationUtils clone method fails to perform some deep cloning,LANG-789,12544295,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,akubot,akubot,27/Feb/12 19:15,01/Mar/12 15:40,07/Apr/19 20:37,01/Mar/12 15:40,3.1,,,,,,lang.*,,,0,",","clone,","externalizable,",serializable,,,,"SerializationUtils clone method fails to perform some deep cloning of at least some objects containing Externalizable subobjects.

Here is the @version text from the SerializationUtils.java source file:

SerializationUtils.java 1199718 2011-11-09 12:43:20Z sebb $


To reproduce possible bug:

1. Create two classes (let's call them Parent and Child) and mark both as ""implements Externalizable"".

2. Write required Externalizable methods readExternal and writeExternal

3. Make Child a private member/field of Parent

4. Write code to override toString if necessary for Parent and Child

5. Create a separate Java class to test creation and cloning of Parent and Child 

6. In the test class write to code to do this:
a. Create a Parent object
b. Create a Child object
c. Attach Child to Parent via setter
d. Print out Parent object
e. Use SerializationUtils.clone() to clone Parent (call it ParentClone)
f. Print ParentClone

7. Compare print output of Parent and ParentClone, observe that ParentClone does not contain Child object
","Windows 7, Java 7 (1.7.0_03), Apache Commons Lang 3.1, NetBeans 7.1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-03-01 02:37:45.073,,,false,,,,,,,,,,,,,,229532,,,Thu Mar 01 15:40:46 UTC 2012,,,,,,0|i0d5bz:,74640,,,,,,,,"01/Mar/12 02:37;detinho;I tested this on Windows 7 Sun JDK 1.7.0_03 and Ubuntu 10.04 Sun JDK 1.6.0.26, and worked fine. I used this test case:

{code}
    public void testInnerClassImplementsExternalizable() {
        ExternalizableParent parent = new ExternalizableParent(""test"");
        ExternalizableParent parentClone = SerializationUtils.clone(parent);
        
        assertEquals(parent.toString(), parentClone.toString());
    }
    
    private static final class ExternalizableParent implements Serializable, Externalizable {
        private ExternalizableChild child;

        public ExternalizableParent() {}
        
        public ExternalizableParent(String value) {
            child = new ExternalizableChild(value);
        }
        
        @Override
        public String toString() {
            return child.value;
        }

        public void readExternal(ObjectInput in) throws IOException,
                ClassNotFoundException {
            child = (ExternalizableChild)in.readObject();
        }

        public void writeExternal(ObjectOutput out) throws IOException {
            out.writeObject(child);
        }
    }
    
    private static final class ExternalizableChild implements Serializable, Externalizable {
        public String value;

        public ExternalizableChild() {}
        
        public ExternalizableChild(String value) {
            this.value = value;
        }

        public void readExternal(ObjectInput in) throws IOException,
                ClassNotFoundException {
            value = (String)in.readObject();
        }

        public void writeExternal(ObjectOutput out) throws IOException {
            out.writeObject(value);
        }
    }
{code}

Are you doing something different?","01/Mar/12 15:40;akubot;Thanks Marcos, closing this issue now.

It turned out to be a bug in my code elsewhere, and not the clone ""bug"" issue I submitted.

I was able to run a version of your code that ran fine. Also fixed my own code and disabled the clone workaround I developed for the child class, all works fine now.

Thanks again for looking at this, sorry to waste your time!
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SerializationUtils throws ClassNotFoundException when cloning primitive classes,LANG-788,12542230,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,rene.link,rene.link,11/Feb/12 12:36,22/Aug/12 09:25,07/Apr/19 20:37,29/Feb/12 14:39,3.1,,,,3.2,,,,,0,,,,,,,,"If a serializable object contains a reference to a primitive class, e.g. int.class or int[].class, the SerializationUtils throw a ClassNotFoundException when trying to clone that object.

{noformat}
import org.apache.commons.lang3.SerializationUtils;
import org.junit.Test;


public class SerializationUtilsTest {

	
	@Test
	public void primitiveTypeClassSerialization(){
		Class<?> primitiveType = int.class;
		
		Class<?> clone = SerializationUtils.clone(primitiveType);
		assertEquals(primitiveType, clone);
	}
}
{noformat} 

The problem was already reported as a java bug http://bugs.sun.com/view_bug.do?bug_id=4171142 and ObjectInputStream is fixed since java version 1.4.
The SerializationUtils problem arises because the SerializationUtils internally use the ClassLoaderAwareObjectInputStream that overrides the ObjectInputStream's
resoleClass method without delegating to the super method in case of a ClassNotFoundException.

I understand the intention of the ClassLoaderAwareObjectInputStream, but this implementation should also implement a fallback to the original implementation.

For example:
{noformat}
        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
            String name = desc.getName();
            try {
                return Class.forName(name, false, classLoader);
            } catch (ClassNotFoundException ex) {
            	try {
            	     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
            	} catch (Exception e) {
		     return super.resolveClass(desc);
		}
            }
        }
{noformat}

Here is the code in ObjectInputStream that fixed the java bug.
{noformat}
    protected Class<?> resolveClass(ObjectStreamClass desc)
	throws IOException, ClassNotFoundException
    {
	String name = desc.getName();
	try {
	    return Class.forName(name, false, latestUserDefinedLoader());
	} catch (ClassNotFoundException ex) {
	    Class cl = (Class) primClasses.get(name);
	    if (cl != null) {
		return cl;
	    } else {
		throw ex;
	    }
	}
    }
{noformat}
",,,,,,,,,,,,,,,,,,,,,,,,,,29/Feb/12 00:29;detinho;LANG-788;https://issues.apache.org/jira/secure/attachment/12516478/LANG-788,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-29 00:29:04.768,,,false,,,,,,,,,,,,,,227517,,,Wed Feb 29 14:39:49 UTC 2012,,,,,,0|i0d5c7:,74641,,,,,,,,29/Feb/12 00:29;detinho;Attaching patch.,29/Feb/12 14:39;garydgregory;Committed and added missing support to the patch for {{void.class}},29/Feb/12 14:39;garydgregory;In SVN.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils equals() relies on undefined behavior,LANG-786,12539203,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,dtrebbien,dtrebbien,20/Jan/12 19:50,21/Oct/13 05:46,07/Apr/19 20:37,23/Jan/12 17:52,,,,,3.2,,lang.*,,,0,StringUtils,,,,,,,"Since the {{java.lang.CharSequence}} class was first introduced in 1.4, the JavaDoc block has contained the following note:

{quote}
This interface does not refine the general contracts of the equals and hashCode methods. The result of comparing two objects that implement CharSequence is therefore, in general, undefined. Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other.
{quote}

When the signature of the StringUtils equals() method was changed from {{equals(String, String)}} to {{equals(CharSequence, CharSequence)}} in R920543, the implementation still relied on calling CharSequence#equals(Object) even though, in general, the result is undefined.

One example where {{equals(Object)}} returns {{false}} even though, as CharSequences, two objects represent equal sequences is when one object is an instance of {{javax.lang.model.element.Name}} and the other object is a String.","java version ""1.7.0_02""
Java(TM) SE Runtime Environment (build 1.7.0_02-b13)
Java HotSpot(TM) 64-Bit Server VM (build 22.0-b10, mixed mode)

Fedora 15 AMD64",,,,,,,,,,,,,,,,,,,,,,,,,20/Jan/12 19:58;dtrebbien;equals.patch;https://issues.apache.org/jira/secure/attachment/12511312/equals.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-01-23 17:52:39.297,,,false,,,,,,,,,,,,,,224705,,,Thu Oct 18 18:12:26 UTC 2012,,,,,,0|i0afuv:,58842,,,,,,,,"20/Jan/12 19:58;dtrebbien;Fix

This re-introduces StringUtils#equals(String, String) and changes StringUtils#equals(CharSequence, CharSequence) to compare chars individually.","23/Jan/12 17:52;mbenson;Hi, Daniel, and thanks for your contribution!  Notwithstanding the obvious potential for arguments about OO design and method overloading, I have reworked your patch so that {{String-String}} comparisons are still handled in the body of the basic {{equals(CharSequence, CharSequence)}} method; thus no exception is needed in {{StringUtilsTest#testStringUtilsCharSequenceContract()}}.  Specifically I have retained your {{StringUtilsEqualsIndexOfTest}} improvements.

{{Committed revision 1234915.}}","18/Oct/12 17:25;dma_k;I think there is still area for improvement: [line 192 of CharSequenceUtils()|http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java?revision=1199894&view=markup#l192] reads

{{TODO: Implement rather than convert to String}}

In my case I have {{CharSequence}} that implements a ""lazy"" string, and {{toString()}} implementation is very expensive plus can potentially cause OOM.

Thus {{CharSequenceUtils.regionMatches()}} should really do char-by-char comparison, leaving the optimization to underlying {{CharSequence}} implementation.","18/Oct/12 18:12;sebb@apache.org;@Dmitry: please raise this as a new JIRA issue (you can then link it to this one if you want).

We have already closed this issue, and your comment is about performance rather than correctness.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation bug: StringUtils.split,LANG-783,12535425,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,sam@rfc1149.net,sam@rfc1149.net,16/Dec/11 08:38,28/Dec/11 05:58,07/Apr/19 20:37,28/Dec/11 05:58,3.1,,,,3.2,,lang.*,,,0,documentation,,,,,,,"The documentation for StringUtils.split(String, String, int) contains wrong strings:

StringUtils.split(""ab de fg"", null, 0)   = [""ab"", ""cd"", ""ef""]
StringUtils.split(""ab   de fg"", null, 0) = [""ab"", ""cd"", ""ef""]

This should read:

StringUtils.split(""ab cd ef"", null, 0)   = [""ab"", ""cd"", ""ef""]
StringUtils.split(""ab   cd ef"", null, 0) = [""ab"", ""cd"", ""ef""]",,,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-28 05:58:37.228,,,false,,,,,,,,,,,,,,221109,,,Wed Dec 28 05:58:37 UTC 2011,,,,,,0|i0d5cf:,74642,,,,,,,,28/Dec/11 05:58;bayard;Thanks Samuel. Resolved in r1225104.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
jar contains velocity template of release notes,LANG-777,12532303,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,joehni,joehni,22/Nov/11 10:23,15/Oct/13 02:33,07/Apr/19 20:37,27/Sep/12 12:34,3.1,,,,3.2,,General,,,0,build,,,,,,,"The released Java archive of 3.1 contains the velocity template ""release-notes.vm"" (claiming to be for 3.0.1 anyway) in the Java package ""templates"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-22 12:39:46.799,,,false,,,,,,,,,,,,,,218036,,,Thu Sep 27 12:34:13 UTC 2012,,,,,,0|i0d5cn:,74643,,,,,,,,"22/Nov/11 12:39;sebb@apache.org;It looks like the RM used a different method for generating the release notes

Ideally the .vm file is updated, and and then can run

mvn changes:announcement-generate
mv target/announcement/RELEASE-NOTES.txt RELEASE-NOTES.txt

Commons Parent 22 has a profile for this:

mvn changes:announcement-generate -Prelease-notes

but this requires the vm file to be located under

src/changes

rather than

arc/main/resources/templates

OK to move the file accordingly?","22/Nov/11 13:03;sebb@apache.org;Alternatively, I suppose one could override the CP release-notes profile to fix the location.

Or copy them to the new location.

Depends on whether there is any need to keep the existing location or not.","24/Nov/11 06:00;bayard;Yeah, I forgot all about the template. It was so simple to write the release notes by hand (changes.xml, then update release notes).

Is there any value in the velocity approach? I know I added it back in August but I've no idea why.","24/Nov/11 09:55;sebb@apache.org;The file changes.xml is used to create the changes-report.html file, so needs to be kept up to date anyway.

Using the same file for the release notes means that they are consistent.

Note: one can select the required version for the release notes as follows:

mvn changes:announcement-generate -Dchanges.version=3.1

This overrides the default, which is taken from the POM version.",24/Nov/11 22:02;bayard;Seems much simpler to edit changes.xml and then copy to the release notes before release. The template approach sounds overly complex.,"24/Nov/11 22:31;sebb@apache.org;You don't often need to edit the template, especially now it does not have a fixed version in it.

Mostly you only need to edit changes.xml and then run

mvn changes:announcement-generate -Dchanges.version=x.x

Check that the new file looks OK, and check it in.

That's it.

Try it and see.","04/Mar/12 14:19;tn;The parent pom version 23 defines as default location for the release-notes template:

  src/changes/release-notes.vm
  src/changes/changes.xml

So the templates can not slip into the resulting jar. CM3 for example already follows this scheme.",12/Sep/12 06:25;bayard;Noticing we have two release-notes.vm files since r1342642. Not sure what the plan is. ,"27/Sep/12 12:34;sebb@apache.org;Log:
LANG-777 jar contains velocity template of release notes
Merge releases notes into standard location

Removed:
    commons/proper/lang/trunk/src/main/resources/templates/release-notes.vm
Modified:
    commons/proper/lang/trunk/RELEASE-NOTES.txt
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/changes/release-notes.vm
",,,,,,,,,,,,,,,,,,,,,,
TypeUtilsTest contains incorrect type assignability assertion due to lost/skipped type variable information during the decision process,LANG-776,12531869,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,mbenson,mbenson,mbenson,17/Nov/11 23:55,22/Aug/12 09:25,07/Apr/19 20:37,18/Nov/11 00:02,3.1,,,,3.2,,lang.reflect.*,,,0,,,,,,,,"{{TypeUtilsTest}} originally contained the following under #{{testIsAssignable()}}:
{code}
Assert.assertTrue(""WRONG!"", TypeUtils.isAssignable(dingType, disType));
{code}
For background:
{code}
public interface This<K, V> {
}

public class Other<T> implements This<String, T> {
}

public class Thing<Q> extends Other<B> {
}
{code}
{{<B>}} refers to a type parameter on the {{TypeUtilsTest}} class itself.
{{disType}} and {{dingType}} refer to the generic types of the following fields, respectively:
{code}
public This<String, String> dis;
public Thing ding;
{code}

Thus the assertion in question declares that type {{Thing}} is assignable to {{This<String, String>}}.  If we start at {{This}} we can see that the implementing class {{Other}} maps its {{T}} type parameter to the {{V}} type parameter of {{This}}.  From this point we can proceed down to {{Thing}} and see that it maps the {{B}} type parameter of the enclosing {{TypeUtilsTest}} class to the {{T}} type parameter of {{Other}}.  Thus it is fairly obvious that only a {{TypeUtilsTest<String>.Thing}} is assignable to {{This<String, String>}}.  From this we can determine that the intent of the message in the original test assertion must indeed have been to flag an incorrect assertion.  This is the associated bug report.
",,,,,,,,,,,,,,,,LANG-775,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,217605,,,Fri Nov 18 00:02:32 UTC 2011,,,,,,0|i0d5cv:,74644,,,,,,,,18/Nov/11 00:02;mbenson;rev 1203429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
TypeUtils.getTypeArguments() misses type arguments for partially-assigned classes,LANG-775,12531865,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,mbenson,mbenson,mbenson,17/Nov/11 23:38,22/Aug/12 09:25,07/Apr/19 20:37,18/Nov/11 00:02,3.1,,,,3.2,,lang.reflect.*,,,0,,,,,,,,"failing test code to add to TypeUtilsTest.testGetTypeArguments():
{code}
typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
Assert.assertEquals(2, typeVarAssigns.size());
Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
{code}

These should pass based on:
{code}

public interface This<K, V> {
}

public class Other<T> implements This<String, T> {
}
{code}

This case fails because the current code ignores the Other class due to its specifying its own type variables, which is obviously incorrect.  This report is extrapolated from an offline report received by Hen.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,217601,,,Fri Nov 18 00:02:15 UTC 2011,,,,,,0|i0d5d3:,74645,,,,,,,,18/Nov/11 00:02;mbenson;rev 1203429,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ImmutablePair doc contains nonsense text,LANG-773,12531610,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,cogen,cogen,16/Nov/11 13:03,22/Aug/12 09:25,07/Apr/19 20:37,16/Nov/11 13:44,3.1,,,,3.2,,lang.tuple.*,,,0,,,,,,,,"Description of this class contains the following nonsense text:

#ThreadSafe# if the objects are threadsafe",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-16 13:42:50.992,,,false,,,,,,,,,,,,,,217346,,,Wed Nov 16 13:44:27 UTC 2011,,,,,,0|i0d5db:,74646,,,,,,,,16/Nov/11 13:42;sebb@apache.org;The comment means that the class is thread-safe if the objects it pairs are both threadsafe,16/Nov/11 13:44;sebb@apache.org;Comment clarified,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassUtils.PACKAGE_SEPARATOR javadoc contains garbage text,LANG-772,12531449,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,cogen,cogen,15/Nov/11 12:37,22/Aug/12 09:25,07/Apr/19 20:37,16/Nov/11 03:14,3.0.1,,,,3.2,,lang.*,,,0,,,,,,,,"javadoc description of ClassUtils.PACKAGE_SEPARATOR is as follows:

The package separator String: ""&amp;#x2e;"".

It should be something like the following:

The package separator String: ""."".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-16 03:05:10.834,,,false,,,,,,,,,,,,,,217185,,,Wed Nov 16 03:10:57 UTC 2011,,,,,,0|i0d5dj:,74647,,,,,,,,"16/Nov/11 03:05;bayard;They're the same character. Looks like something we did in 2003 to stop the javadoc doclet complaining. 

https://svn.apache.org/viewvc?view=revision&revision=137345

Marking as Wontfix.","16/Nov/11 03:10;sebb@apache.org;No, the problem is that <code> was replaced by {@code} which does not behave the same.

I'll fix shortly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtils.ceiling does not behave correctly for dates on the boundaries,LANG-771,12531406,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,,rizariza,rizariza,15/Nov/11 03:53,18/Dec/16 15:41,07/Apr/19 20:37,,3.0.1,,,,Patch Needed,,lang.time.*,,,3,,,,,,,,"{{DateUtils.ceiling}} does not behave as expected for dates exactly on the boundaries specified.  

To be consistent with the name ""ceiling"", it follows that if a date is already at its ""ceiling"", it should not be pushed any higher.  Yet the current implementation (and, it would appear, all implementations since its creation) of {{DateUtils.ceiling}} push a value exactly on its ceiling to the next value.

Observe what happens if the following tests are added to {{DateUtilsTest.testCeil()}}:

{code:java}
         double double4 = 15.0;
         assertEquals(""ceiling double-4 failed"",
         		double4,
         		Math.ceil(double4));
         
         Date date4 = dateTimeParser.parse(""March 30, 2003 01:10:00.000"");
         assertEquals(""ceiling minute-4 failed"",
         		date4,
         		DateUtils.ceiling(date4, Calendar.MINUTE));
{code}

The first assert passes, as Math.ceil behaves as it should (i.e. Mail.ceil(15.0) = 15.0).

However, the second assert fails with:

{code}
   ceiling minute-4 failed expected:<Sun Mar 30 01:10:00 GMT+08:00 2003> but was:<Sun Mar 30 01:11:00 GMT+08:00 2003>
{code}

as the routine incorrectly (I believe) pushes the value to the next minute.


Either the method is incorrectly named ([as previously suggested|https://issues.apache.org/jira/browse/LANG-434?focusedCommentId=12855836#comment-12855836]) or it should probably be corrected to be consistent with expected behaviour (using Math.ceil as a benchmark).

If changing the behaviour of {{DateUtils.ceiling}} is perceived to have too many flow-on effects (e.g. backwards compatibility issues) then perhaps it should be renamed to {{DateUtils.ceil}} to make it consistent with the Math class method name and to make the change in behaviour obvious (and perhaps also have a {{DateUtils.floor}} as a synonym for {{DateUtils.truncate}}).","Windows XP Professional
Java 1.6",,,,,,,,,,,,,,,LANG-434,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-10-19 18:33:57.361,,,false,,,,,,,,,,,,,,217142,,,Wed Oct 16 08:57:27 UTC 2013,,,,,,0|i0anqv:,60120,,,,,,,,"19/Oct/12 18:33;brady.ellison;Given this behavior the naming of this function is highly misleading.  This ceiling function is not ceiling at all, but a truncate date plus one to the date's calendar field.

It is probably worth ensuring each item in [http://en.wikipedia.org/wiki/Floor_and_ceiling_functions#Relations_among_the_functions] hold for date math.

The function is exactly equivalent to (plus its variants):
{code}
Date input = new Date();
Date truncatedToDate = DateUtils.truncate(input, Calendar.DATE);
Date output = DateUtils.addDays(truncatedToDate, 1);
{code}

Naive fix: (only for non-negative dates)
{code}
int field = Calendar.DATE;
Date input = new Date();
Date truncatedToDate = DateUtils.truncate(input, field);
Date output;
if (input.equals(truncatedToDate)) { // Because if floor(val) == val, then ceil(val) (should)== val.
  output = truncatedToDate;
} else {
  output = DateUtils.ceiling(truncatedToDate, field);
}
{code}","16/Oct/13 08:57;bayard;Noting as patch needed, though I think overhaul for 4.0 might be a better phrase :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.join(Object[]) performance issue if .toString() is not trivial,LANG-770,12531397,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Not A Problem,,jbarnett,jbarnett,15/Nov/11 01:06,04/Jun/12 07:43,07/Apr/19 20:37,04/Jun/12 07:43,,,,,,,,,,0,,,,,,,,"I have some code that builds syntax trees, and then uses a combination of TreeNode.toString() and StringUtils.join() to recursively convert that syntax tree to a String representation.

example .toString() of a SumNode class, where children is a TreeNode[]:

public String toString() {
    return StringUtils.join(children, ""+"");
}

The problem is, StringUtils.join(Object[], String, int, int) is trying to be too smart about preallocating the StringBuffer size it uses internally, as it does:

bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())
                        + separator.length());

followed by implicitly calling .toString() on each object in the array:

buf.append(array[i]);

For deep syntax trees, this results in incredibly bad performance, as when traversing the syntax tree, every time we go to the first node, we re-expand the entire tree below that node (which does the same thing with the first node below that, etc).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-03-11 20:01:00.786,,,false,,,,,,,,,,,,,,217133,,,Mon Jun 04 07:43:23 UTC 2012,,,,,,0|i0d5dr:,74648,,,,,,,,"11/Mar/12 20:01;detinho;Seems that the piece of code in the description doesn't exists anymore. The initial buffer size is being calculated as:

{code}
int noOfItems = endIndex - startIndex;
....
StringBuilder buf = new StringBuilder(noOfItems * 16);
{code}
Using this implementation solves the issue?",04/Jun/12 07:43;bayard;Agreed. Resolving this as Not A Problem.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EventListenerSupport.ProxyInvocationHandler defines serialVersionUID but is not Serializable,LANG-765,12530874,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,09/Nov/11 12:55,28/Dec/11 06:28,07/Apr/19 20:37,28/Dec/11 06:28,,,,,3.2,,,,,0,,,,,,,,Inconsistency needs to be resolved.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-28 06:28:35.293,,,false,,,,,,,,,,,,,,216612,,,Wed Dec 28 06:28:35 UTC 2011,,,,,,0|i0d5dz:,74649,,,,,,,,"28/Dec/11 06:28;bayard;I don't see any particular reason to keep serialVersionUID so removing it.

svn ci -m ""Dropping the serialVersionUID from EventListenerSupport per LANG-765""
Sending        src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java
Transmitting file data .
Committed revision 1225109.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrBuilder has a serialVersionUID but is not serializable - this is inconsistent,LANG-764,12530872,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,09/Nov/11 12:26,28/Dec/11 06:33,07/Apr/19 20:37,28/Dec/11 06:33,3.0.1,,,,3.2,,lang.text.*,,,0,,,,,,,,"StrBuilder has a serialVersionUID but is not serializable.

Is StrBuilder supposed to be Serializable?
If so, then add the interface; if not remove the field.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-28 06:33:45.077,,,false,,,,,,,,,,,,,,216610,,,Wed Dec 28 06:33:45 UTC 2011,,,,,,0|i0d5e7:,74650,,,,,,,,"28/Dec/11 06:33;bayard;Makes sense that this should be Serializable given that StringBuilder and StringBuffer are.

svn ci -m ""Making StrBuilder Serializable per LANG-764""
Sending        src/main/java/org/apache/commons/lang3/text/StrBuilder.java
Transmitting file data .
Committed revision 1225111.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Handle or document ReflectionToStringBuilder and ToStringBuilder for collections that are not thread safe,LANG-762,12527474,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,garydgregory,garydgregory,17/Oct/11 18:20,21/Oct/13 19:51,07/Apr/19 20:37,21/Oct/13 19:51,,,,,3.2,,lang.builder.*,,,0,,,,,,,,"Moving discussion here from https://issues.apache.org/jira/browse/POOL-191 ConcurrentModificationException in GenericObjectPool LinkedList.

It is possible to get a {{ConcurrentModificationException}} in a {{LinkedList}} from a Commons Pool {{GenericObjectPool}}.

This happens when I call {{ReflectionToStringBuilder.toString(this)}} from a subclass of {{GenericObjectPool}}. My guess is that it would happen with just {{ReflectionToStringBuilder.toString(gop)}}. IOW, subclassing does not have anything to do with it I would venture.

For example, in this stack trace {{JmsSessionPool}} is a subclass of {{GenericObjectPool}}.

{noformat}
java.util.ConcurrentModificationException
at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:761)
at java.util.LinkedList$ListItr.next(LinkedList.java:696)
at java.util.AbstractCollection.toString(AbstractCollection.java:421)
at java.lang.String.valueOf(String.java:2826)
at java.lang.StringBuffer.append(StringBuffer.java:219)
at org.apache.commons.lang3.builder.ToStringStyle.appendDetail(ToStringStyle.java:598)
at org.apache.commons.lang3.builder.ToStringStyle.appendInternal(ToStringStyle.java:473)
at org.apache.commons.lang3.builder.ToStringStyle.append(ToStringStyle.java:436)
at org.apache.commons.lang3.builder.ToStringBuilder.append(ToStringBuilder.java:848)
at org.apache.commons.lang3.builder.ReflectionToStringBuilder.appendFieldsIn(ReflectionToStringBuilder.java:528)
at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:692)
at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:288)
at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:119)
at com.seagullsw.appinterface.comm.jms.JmsSessionPool.toString(JmsSessionPool.java:120)
at java.lang.String.valueOf(String.java:2826)
at java.lang.StringBuffer.append(StringBuffer.java:219)
at org.apache.commons.lang3.builder.ToStringStyle.appendDetail(ToStringStyle.java:586)
at org.apache.commons.lang3.builder.ToStringStyle.appendInternal(ToStringStyle.java:550)
at org.apache.commons.lang3.builder.ToStringStyle.append(ToStringStyle.java:436)
at org.apache.commons.lang3.builder.ToStringBuilder.append(ToStringBuilder.java:848)
at org.apache.commons.lang3.builder.ReflectionToStringBuilder.appendFieldsIn(ReflectionToStringBuilder.java:528)
at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:689)
at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:288)
at org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(ReflectionToStringBuilder.java:119)
at com.seagullsw.appinterface.server.comm.BasicCommunicationManager.toString(BasicCommunicationManager.java:828)
at com.seagullsw.appinterface.server.comm.BasicCommunicationManager.toString(BasicCommunicationManager.java:817)
at java.lang.String.valueOf(String.java:2826)
at java.lang.StringBuilder.append(StringBuilder.java:115)
at com.seagullsw.appinterface.server.AisHelper.waitForCommuncationManagers(AisHelper.java:217)
at com.seagullsw.appinterface.server.AisHelper.start(AisHelper.java:136)
at com.seagullsw.appinterface.server.AisHelper.startFromResource(AisHelper.java:161)
at com.seagullsw.appinterface.server.AbstractServerJunit4.startServer(AbstractServerJunit4.java:179)
at com.seagullsw.appinterface.server.comm.jms.AbstractJmsRoundtripMaxConcurrencyTestCase.setUpOnce(AbstractJmsRoundtripMaxConcurrencyTestCase.java:141)
at com.seagullsw.appinterface.server.comm.jms.ibmmq.JmsRoundtripMaxConcurrency032TestCase.setUpOnce(JmsRoundtripMaxConcurrency032TestCase.java:40)
{noformat}

We should either: 
- Document ReflectionToStringBuilder and ToStringBuilder such that call sites use synchronized if the object passed in contains collections that are not thread-safe. F

or example:
{code:java}
    @Override
    public synchronized String toString() {
        return ReflectionToStringBuilder.toString(this);
    }
{code}

- Or have our code in ReflectionToStringBuilder and ToStringBuilder lock collections while they are being toString'd.
","Apache Maven 3.0.3 (r1075438; 2011-02-28 12:31:09-0500)
Maven home: C:\Java\apache-maven-3.0.3\bin\..
Java version: 1.6.0_24, vendor: Sun Microsystems Inc.
Java home: C:\Program Files\Java\jdk1.6.0_24\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,,,,,,,,22/Oct/11 07:11;psteitz;ReflectionToStringBuilderConcurrencyTest.java;https://issues.apache.org/jira/secure/attachment/12500310/ReflectionToStringBuilderConcurrencyTest.java,22/Oct/11 01:59;acumiskey;patch-LANG762.txt;https://issues.apache.org/jira/secure/attachment/12500277/patch-LANG762.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-10-22 01:59:57.32,,,false,,,,,,,,,,,,,,88662,,,Mon Oct 21 19:51:56 UTC 2013,,,,,,0|i0b5lb:,63018,,,,,,,,"22/Oct/11 01:59;acumiskey;I tried pretty hard to try and reproduce ConcurrentModificationException in a fairly elaborate multithreaded unit test (but alas failed...).

I looked at the two approaches you proposed for fixing this issue.  I believe it is not correct to expect the ReflectionToStringBuilder caller to synchronize his toString() implementation.  

I believe the best place for the guard is just prior to the object being appended by the StringBuffer.  I have provided a small patch that takes care of synchronizing any Collection or Map in ToStringStyle. 

Cheers, Adrian.",22/Oct/11 03:11;garydgregory;I'll have to provide my test case that shows the failure. I'm on vacation now so it might be a couple of days.,"22/Oct/11 05:26;acumiskey;Hi Gary,

No problem.  That would be great if you are able to provide a test case which is able to reliably reproduce the failure on trunk.  It might be the following weekend before I get chance to revisit if the patch doesn't resolve the issue.  Enjoy your vacation! :-)

Cheers, Adrian.","22/Oct/11 07:11;psteitz;Attaching a test that illustrates the problem, which I don't think is solvable by the [lang] code (so probably this class should not be committed, as it will never pass).

The problem is that when you circumvent a class' internal synchronization to protect fields, all bets are off in terms of data integrity or CoMod exceptions. This should be clearly documented - i.e., users should be warned that this class should not be used in concurrent applications, or at least fields protected by synchronization should be excluded.

What is going on in the test case is that there are two different kinds of threads spawned concurrently - one kind uses the reflection back door opened by the builder to ""inspect"" an instance and the other kind mutates the instance using its synchronized methods.  Note that synchronizing the builder using the private field's monitor will not solve the problem (i.e., the first patch does not work) because what really needs to happen is that the access by the builder needs to be synchronized using the instance's monitor.  You could try to fix that by synchronizing on the instance, which would solve this example; but there is no guarantee that a class may not use its own internal locks, so there is no generic solution to this problem.

My recommendation is to just document the danger associated with using reflection to access private fields in the class javadoc.
","09/Nov/11 15:17;garydgregory;I've added some unit tests, mostly @Ignore tests. I added Phil's test {{ReflectionToStringBuilderConcurrencyTest.java}} from 22/Oct/11 07:11 as {{ReflectionToStringBuilderMutateInspectConcurrencyTest}} because I already have a {{ReflectionToStringBuilderConcurrencyTest}} in there.

This should make it easier for people to experiment with suggestions and patches.

For example, the patch {{patch-LANG762.txt}} from 22/Oct/11 01:59 does not work for on my machine.

The test ReflectionToStringBuilderMutateInspectConcurrencyTest passes on my machine but I still @Ignored the test based on Phil's comments.

","10/Nov/11 03:29;psteitz;Looking at this again, I am pretty well convinced that [lang] is never going to be able to ""fix"" this issue.  Consider the case where a class uses its own private Lock instances to protect data members.  Unless you want to get into the byte code analysis business, you are not going to be able to pick this up or access the relevant locks.  Moreoever, even if you could discern and acquire the right locks, you might risk introducing deadlocks or liveness problems for the code, because the class may have lock acquisition / release order invariants that you don't know about.

The risks associated with using the ReflectionToStringBuilder to access fields protected by synchronization should be documented. I would suggest just adding something like the following to the class javadoc, after the sentence that reads ""This will fail under a security manager, unless the appropriate permissions are set up correctly"" add ""Using reflection to access private fields also circumvents any synchronization protection guarding access to private fields.  Fields that cannot safely be read at any time by toString should be excluded from the generated method, or synchronization consistent with the underlying class' lock management should be added around invocation of the method. Special care should be taken to avoid including non-threadsafe collection classes, as these classes may throw ConcurrentModificationException if modified while the toString method is executing.""

Above is probably too long, but something like it should be added.",10/Nov/11 06:15;garydgregory;Better Javadocs: Committed revision 1200177.,"21/Oct/13 19:51;bayard;Issue documented in 3.2, but no code change made. Reading through the conversation, consensus appears to me to be to make no code change to Lang.",,,,,,,,,,,,,,,,,,,,,,,
[PATCH] Fix javadoc warnings,LANG-761,12527320,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,ville.skytta@iki.fi,ville.skytta@iki.fi,15/Oct/11 21:47,16/Oct/13 08:55,07/Apr/19 20:37,28/Dec/11 06:39,,,,,3.2,,General,,,0,documentation,,,,,,,"There are a few ""Multiple sources of package comments found"" warnings and one for commons-collections linkage in commons-lang svn, will attach a patch.

By the way, I'm wondering why the javadocs for the org.apache.commons.lang3.compare package are not visible at http://commons.apache.org/lang/api-release/ ; they are there if I build javadocs locally from svn.",,,,,,,,,,,,,,,,,,,,,,,,,,15/Oct/11 21:49;ville.skytta@iki.fi;lang-javadoc-warnings.patch;https://issues.apache.org/jira/secure/attachment/12499164/lang-javadoc-warnings.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-12-28 06:36:03.437,,,false,,,,,,,,,,,,,,86733,,,Wed Dec 28 06:39:48 UTC 2011,,,,,,0|i0d5ef:,74651,,,,,,,,28/Dec/11 06:36;bayard;Sorry - missed the question.  The compare package was pulled before release; I'm the only one who wants it in :),"28/Dec/11 06:39;bayard;Thanks Ville :)

svn ci -m ""Applying Ville Skyttä's patch from LANG-761 to fix the javadoc warnings in the Ant build""
Sending        build.xml
Transmitting file data .
Committed revision 1225113.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add Support in SystemUtils for Windows Server 2003 and Windows Server 2008,LANG-759,12526224,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,garydgregory,centic,centic,07/Oct/11 15:19,16/Nov/11 06:56,07/Apr/19 20:37,07/Oct/11 20:24,,,,,,,lang.*,,,0,,,,,,,,"SystemUtils currently only knows about the ""consumer"" versions of Windows, however there are also the Server-Variants, which can be detected separatedely. E.g. in my case I would like to detect a Windows Server 2003 instance, but cannot, as it is not detected by any of the existing IS_OS_WINDOWS_xxx variants.

I extracted the following values that can be used to detect these versions:
* Windows Server 2003 R2: os.name=Windows 2003, os.version=5.2
* Windows Server 2008 R2: os.name=Windows Server 2008 R2, os.version=6.1
",,,,,,,,,,,,,,,,,,,,,,,,,,07/Oct/11 19:53;centic;LANG-759.patch;https://issues.apache.org/jira/secure/attachment/12498232/LANG-759.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-10-07 15:25:50.195,,,false,,,,,,,,,,,,,,50310,,,Sun Oct 09 21:15:10 UTC 2011,,,,,,0|i0d5en:,74652,,,,,,,,07/Oct/11 15:25;garydgregory;Patches welcome! :),"07/Oct/11 19:53;centic;Here you are, I did not find a way to enhance the unit test to really cover these...",07/Oct/11 20:24;garydgregory;The patch did not apply to trunk so I re coded it and marked @since 3.1 based on recent ML discussion.,07/Oct/11 20:24;garydgregory;In SVN @since 3.1.,"08/Oct/11 06:02;centic;Thanks for the quick response, I did this on a fresh svn checkout of trunk, so strange that it did not apply cleanly, was it because of newlines?",09/Oct/11 21:15;garydgregory;I can't quite recall why it did not apply. ,,,,,,,,,,,,,,,,,,,,,,,,,
DateFormatUtils.format manipulates Calendar behaviour,LANG-755,12523669,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,,ironied,ironied,20/Sep/11 08:33,12/Mar/12 04:38,07/Apr/19 20:37,12/Mar/12 04:38,,,,,3.2,,lang.time.*,,,0,,,,,,,,"{code}
@Test
public void testClearCalendar() {
  Calendar cal = Calendar.getInstance();
  cal.clear(Calendar.MINUTE);
  System.out.println(cal.isSet(Calendar.MINUTE)); //false
  System.out.println(DateFormatUtils.ISO_DATETIME_FORMAT.format(cal));
  System.out.println(cal.isSet(Calendar.MINUTE)); //true
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-11-16 07:19:32.343,,,false,,,,,,,,,,,,,,2518,,,Mon Mar 12 04:38:40 UTC 2012,,,,,,0|i0d5ev:,74653,,,,,,,,"16/Nov/11 07:19;bayard;Confirmed.

It appears to be a JDK bug, calling cal.get(Calendar.\*) undoes the cal.clear(Calendar.\*) call. ","12/Jan/12 08:14;bayard;We should definitely javadoc this. I'm not sure we can do much else. It'd be good to test on the latest JDK to see if it's been fixed.

Setting a 3.2 fixversion for the javadoc as it seems like a very non-intrusive change.",12/Mar/12 04:38;bayard;JDK bug. I've made a note in the javadoc of DateFormatUtils (r1299560).,,,,,,,,,,,,,,,,,,,,,,,,,,,,
embedded objects are not toString-ed like top-level objects,LANG-754,12523549,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,dmdevito,dmdevito,19/Sep/11 12:46,15/Oct/13 02:33,07/Apr/19 20:37,20/Apr/13 15:18,2.5,3.0.1,,,3.2,,lang.builder.*,,,0,,,,,,,,"I have a simple class 'A' defined as follows:

======================================
public class A {
  int p1;
  String p2;
  B b;
}
======================================

While I execute the following instructions:
ToStringBuilder builder = new ReflectionToStringBuilder(a);
System.out.println(builder.toString());

The output is:
A@3ea981ca[p1=0,p2=<null>,b=B@1ee7b241]
that's normal, without recursion

So, I defined my own style, for recursive toString-ing display:

======================================
class MyStyle extends ToStringStyle {
  private final static ToStringStyle instance = new MyStyle();

  public MyStyle() {
    setArrayContentDetail(true);
    setUseShortClassName(true);
    setUseClassName(true);
    setUseIdentityHashCode(true);
    setFieldSeparator("", "");
  }

  public static ToStringStyle getInstance() {
    return instance;
  };

  @Override
  public void appendDetail(final StringBuffer buffer, final String fieldName, final Object value) {
    if (!value.getClass().getName().startsWith(""java"")) {
      buffer.append(ReflectionToStringBuilder.toString(value, instance));
    } else {
      super.appendDetail(buffer, fieldName, value);
    }
  }

  @Override
  public void appendDetail(final StringBuffer buffer, final String fieldName, final Collection value) {
    appendDetail(buffer, fieldName, value.toArray());
  }

}
======================================


When I use my custom MyStyle:
String s = ReflectionToStringBuilder.toString(a, MyStyle.getInstance());
System.out.println(s);

The output is:
A@3ea981ca[p1=0, p2=<null>, b=byte@1ee7b241[p4=234]]

So, the name of the class 'B' is not displayed.
I expected something like: b=B@1ee7b241[p4=234]

Instead, the name of the class 'B' is replaced with 'byte'.
I don't know why.
","Linux Ubuntu
java version ""1.6.0_24""
Java(TM) SE Runtime Environment (build 1.6.0_24-b07)
Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02, mixed mode)
",,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,20/Feb/13 19:42;tn;LANG-754.patch;https://issues.apache.org/jira/secure/attachment/12570173/LANG-754.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2012-02-24 20:12:56.647,,,false,,,,,,,,,,,,,,2982,,,Sat Apr 20 15:18:47 UTC 2013,,,,,,0|i0b5lr:,63020,,,,,,,,"24/Feb/12 20:12;tn;I digged into this problem and the problem you describe occurs only when using setUseShortName(true), and the class is located in the default package and the name is one of [IZFJSBDC], explanation follows.

The ToStringStyle uses ClassUtils to get the short name for the class, which uses an internal reverse abbreviation map to resolve primitive array types which are something like [B for a byte[]. Now there seems to be a bug in the ClassUtils.getShortName method as it does this reverse resolve all the time, and if you happen to have a class called B in the default package, it is wrongly identified as byte.","20/Feb/13 19:42;tn;The attached patch fixes ClassUtils.getShortName(String) to only do the reverseAbbreviation lookup if the supplied className contains an array definition.

Otherwise the abbreviated class names for primitive types are not used imho.
","18/Apr/13 08:20;bayard;Any testing you wanted to do before applying the patch Thomas?

It builds fine for me, and your explanation makes sense (though I tend not to do much with the builder code as I don't use it).","18/Apr/13 20:04;tn;I just wanted to wait if there are other opinions on this reverse abbreviation stuff, but I think it is ok.",20/Apr/13 15:18;tn;Applied patch in r1470174.,,,,,,,,,,,,,,,,,,,,,,,,,,
Incorrect Bundle-SymbolicName in Manifest,LANG-749,12520772,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,devnulled,devnulled,30/Aug/11 16:50,01/Sep/11 05:10,07/Apr/19 20:37,01/Sep/11 05:10,3.0.1,,,,3.1,,General,,,0,build,bundle,jar,manifest,osgi,packaging,symbolicname,"The Bundle-SymbolicName in the manifest is:

Bundle-SymbolicName: org.apache.commons.lang

It should be:

Bundle-SymbolicName: org.apache.commons.lang3

When you install the new lang3 library in an OSGi container such as Apache Felix beside the old v2.x library, they conflict with each other because the SymbolicName is used as a unique id and they conflict with each other.  My only work around at the moment is to manually edit the manifest and repackage.

TLDR version:  The SymbolicName in the manifest does not reflect the lang3 package structure and conflicts in OSGi containers which are already using previous versions of Commons Lang.",Snow Leopard,,,,,,,,,,,,,,,,,,,,,,,,,30/Aug/11 19:48;devnulled;pom.xml;https://issues.apache.org/jira/secure/attachment/12492289/pom.xml,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-01 05:06:19.268,,,false,,,,,,,,,,,,,,62967,,,Thu Sep 01 05:10:50 UTC 2011,,,,,,0|i0d5f3:,74654,,,,,,,,"30/Aug/11 19:48;devnulled;Diff thw pom.xml in the root of trunk from this one, and you'll see the simple change that needs to be made to fix this issue.","30/Aug/11 19:49;devnulled;Figured out how to fix the problem.  All that you need to do is add a property to the pom.xml to override a default.  See the attached pom.xml.

","01/Sep/11 05:06;bayard;Looks like the issue is     <commons.componentid>lang</commons.componentid>

That should have said lang3.","01/Sep/11 05:10;bayard;Thanks Brandon - I've applied the fix.

svn ci -m ""Fixing the OSGi SymbolicName by updating the commons.componentid. Issue identified by Brandon Harper in LANG-749"" pom.xml 
Sending        pom.xml
Transmitting file data .
Committed revision 1163904.",,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils does not handle Long Hex numbers,LANG-747,12519820,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,23/Aug/11 12:50,15/Oct/13 02:33,07/Apr/19 20:37,26/Jul/13 01:06,,,,,3.2,,lang.math.*,,,0,,,,,,,,"NumberUtils.createLong() does not handle hex numbers, but createInteger() handles hex and octal.
This seems odd.

NumberUtils.createNumber() assumes that hex numbers can only be Integer.
Again, why not handle bigger Hex numbers?

==

It is trivial to fix createLong() - just use Long.decode() instead of valueOf().
It's not clear why this was not done originally - the decode() method was added to both Integer and Long in Java 1.2.

Fixing createNumber() is also fairly easy - if the hex string has more than 8 digits, use Long.

Should we allow for leading zeros in an Integer? 
If not, the length check is trivial.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2012-09-12 06:12:35.64,,,false,,,,,,,,,,,,,,2984,,,Fri Jul 26 01:06:08 UTC 2013,,,,,,0|i0d5fb:,74655,,,,,,,,"12/Sep/12 06:12;bayard;Originally: A combination of the original code being written for Java 1.1 (on a Psion netBook!) and my lack of awareness/knowledge when moving to Java 1.2. :)

For leading zeroes - could you look for the first non-zero character and then length check?","25/Jul/13 21:25;jkoppel;createNumber() still does not handle 8-digit hex longs (e.g.: ""0x80000000""). ","25/Jul/13 23:01;sebb@apache.org;Thanks for the report.

If 0x80000000 is unsigned, it is the same as Integer.MIN_VALUE, whereas if it is signed, it is invalid as a posititve int.

The NumberUtils code currently assumes that any 8 digit hex number is valid as an Integer, i.e. the code assumes that hex numbers are unsigned.

The documentation does say that hex numbers may be negative, so the assumption that hex numbers are unsigned is wrong, and 0x80000000-0xFFFFFFFF should be treated as positive and therefore will require conversion to Long.
Likewise for a 16 digit hex number starting with 0x8-0xF; that will require a BigInteger.","26/Jul/13 01:06;sebb@apache.org;Fixed 8 and 16 digit hex numbers
Also now ignores leading zeros when calculating which number type to use

URL: http://svn.apache.org/r1507169
Log:
LANG-747 NumberUtils does not handle Long Hex numbers

Modified:
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils does not handle upper-case hex: 0X and -0X,LANG-746,12519819,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,23/Aug/11 12:32,09/Nov/11 04:16,07/Apr/19 20:37,23/Aug/11 12:33,3.0,3.0.1,,,3.1,,,,,0,,,,,,,,"NumberUtils.createNumber() should work equally for 0x1234 and 0X1234; currently 0X1234 generates a NumberFormatException

Integer.decode() handles both upper and lower case hex.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,64037,,,Tue Aug 23 12:33:42 UTC 2011,,,,,,0|i0d5fj:,74656,,,,,,,,"23/Aug/11 12:33;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=1160660&view=rev
Log:
LANG-746 NumberUtils does not handle upper-case hex: 0X and -0X

Modified:
   commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
   commons/proper/lang/trunk/src/site/changes/changes.xml
   commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils throws java.security.AccessControlException on Google App Engine,LANG-744,12519660,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,clement.denis,clement.denis,22/Aug/11 10:41,09/Nov/11 04:16,07/Apr/19 20:37,10/Oct/11 02:22,3.0.1,,,,3.1,,lang.*,,,0,,,,,,,,"In the static initializer of org.apache.commons.lang3.StringUtils, there is an attempt to load the class sun.text.Normalizer.
Such a class is prohibited on Google App Engine, and the static intializer throws a java.security.AccessControlException.

{code}
Caused by: java.security.AccessControlException: access denied (java.lang.RuntimePermission accessClassInPackage.sun.text)
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:374)
	at java.security.AccessController.checkPermission(AccessController.java:546)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)
	at com.google.appengine.tools.development.DevAppServerFactory$CustomSecurityManager.checkPermission(DevAppServerFactory.java:166)
	at java.lang.SecurityManager.checkPackageAccess(SecurityManager.java:1512)
	at java.lang.Class.checkMemberAccess(Class.java:2164)
	at java.lang.Class.getMethod(Class.java:1602)
	at org.apache.commons.lang3.StringUtils.<clinit>(StringUtils.java:739)
{code}

The exception should be caught in the catch clauses around loadClass(""sun.text.Normalizer"").

Commons lang 2 worked fine on GAE.
",Google App Engine,,,,,,,,,,,,,,,,,,,,,,,,,12/Sep/11 18:08;sebb@apache.org;LANG-744.patch;https://issues.apache.org/jira/secure/attachment/12494087/LANG-744.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-22 12:07:58.782,,,false,,,,,,,,,,,,,,2517,,,Mon Oct 10 02:22:21 UTC 2011,,,,,,0|i0d5fr:,74657,,,,,,,,"22/Aug/11 12:07;sebb@apache.org;The static code should probably just catch Exception.

Do we really want any RuntimeExceptions to escape into the calling code?","23/Aug/11 07:03;bayard;No, but equally I'd like to hear when issues are found rather than hide them before hand.","23/Aug/11 07:06;bayard;I've added the new exception. Feel free to reopen if you disagree Sebb.

svn ci -m ""Adding an exception to catch AccessControlExceptions in Google App Engine as reported by Clément Denis in LANG-744"" src/main/java/org/apache/commons/lang3/StringUtils.java
Sending        src/main/java/org/apache/commons/lang3/StringUtils.java
Transmitting file data .
Committed revision 1160568.
","23/Aug/11 11:53;sebb@apache.org;Why do we care which Exceptions can be generated?

We take the same action in each case, so I don't see the point of enumerating the Exceptions, unless there is different action to be taken for some of them.

But even then, we would probably need a catchall Exception.","25/Aug/11 14:42;garydgregory;This is not a bug but the way Java Security Manager is designed to work. 

The patch should be reverted IMO because the exception is correct. 

This does not only happen with GAE, it happens anytime when running under Java's security manager ({{-Djava.security.manager}})

I do not think we should swallow the exception. In my case, I need to give proper rights to the code.

In my test at work with the security manager enabled I see: 

{{java.security.AccessControlException: access denied (java.lang.RuntimePermission accessClassInPackage.sun.text)}}

Which means I need to add the following to my .policy file:

{noformat}
grant {
  // ...  
  // Apache Commons Lang3
  permission java.lang.RuntimePermission ""accessClassInPackage.sun.text"";
  // ...
};
{noformat}

","25/Aug/11 15:11;clement.denis;I don't agree with that.
The security manager cannot be changed in GAE, or in any other managed environment with strong security policiy.

The use of a sun.* class is basically a hack, so I don't see why it should prevent me from using StringUtils in GAE.
From a user point of view, it's a huge regression (I think I'm right when I say that StringUtils is one of the most widely used class in commons-lang).

It would be acceptable if the method stripAccents raised a RuntimeError if no Normalizer could be found.
But this bug prevents the use of the whole class.
","25/Aug/11 15:39;garydgregory;The current exception tell you what to do for a normal set up with a security manager, clean and simple.

If you do not control the security manager, then you are in a pickle. Perhaps we need some toggle. 

The current implementation should at least be revisited because it is wrong to set sunAvailable to false when in fact I can fix the exception as a user by editing a text file that can be passed in on the JVM CLI. If I never know that an exception was thrown, I cannot fix the problem.",26/Aug/11 07:46;bayard;Much as System.out is weak; should we simply output a printStackTrace on the exception?,"26/Aug/11 14:02;garydgregory;That would be a minimum but I still do not like the design of {{catch (java.security.AccessControlException e)}}. 

If we do that it means that we should go through all [lang] (and [commons]) static initializers to possibly add this block. It is also inconsistent with methods that we do not even know may throw ACE? In one place we catch it, in others we do not. Not great. I need to think about this some more. Crazy day here...


","26/Aug/11 14:29;scolebourne;[lang] already handles something similar in SystemUtils, line 1266
http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/SystemUtils.java?revision=1160564&view=markup
","01/Sep/11 05:17;bayard;I've added a similar item while Gary ruminates on this:

+            System.err.println(""Caught a AccessControlException loading sun.text.Normalizer. "" + 
+                               ""Adjust your security manager if you want to use the stripAccents method. "");

Committed as r1163906.","01/Sep/11 10:00;sebb@apache.org;The message will be thrown even if the sun method is not needed; that does not seem right.

If the sun method is unavailable, the code that conditionally calls it throws UnsupportedOperationException:

""The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM"");

We could record the Exception in the static block, and add it as the cause for the UOE.
It would then only appear when necessary.","02/Sep/11 00:17;garydgregory;Well, I've ruminated, pondered and experimented.

Running all unit tests with a security managers results in:

Tests run: 2046, Failures: 2, Errors: 115, Skipped: 0

Clearly, we need a good overall solution to avoid 117 new Jiras (an exaggeration I know.)

I've created a JAAS policy file to grant just enough permissions to run the unit tests in {{src/test/resource/java.policy}}

The file contains instructions for using it with JAAS.

What this shows is that we should either:

# Run all unit tests a second time with JAAS enabled, or
# Run all unit tests with JAAS enabled, always

We should our solution as a pattern for other Commons component.

Specifically for StringUtils, should we have a SunStringUtils? This would let you know that you are depending on com.sun code.",06/Sep/11 15:18;sebb@apache.org;Reworked static init in r1165701.,"11/Sep/11 05:09;bayard;Gary - are you +1 on Sebb's change?

ie) Keep the exception, but only when stripAccents is invoked (making it the same as other examples presumably are).","11/Sep/11 17:04;garydgregory;Yes, it's better. I'm not crazy about saving the exception but it's a good pragmatic solution. 

Q: Could a JAAS policy be changed dynamically such that the original code work normally?","12/Sep/11 06:29;bayard;Who is the question to?

[As I turn into a release manager and clearly am thinking ""how do I close this?""] :)","12/Sep/11 12:52;garydgregory;The question is to myself or anyone willing to dig in to JAAS. It should not hold up a release.

What I am wondering is this: Is it technically possible to change JAAS permissions at runtime such that the code now in the static initializer could fail and then later, pass.

It might be a far fetched scenario, I am not sure, but JAAS has a some pluggable pieces.

I am pointing this out because we are low level library and we should do our best not to lock out a feature if we don't have to. 

Our code could be changed later to move the check or in the actual method that needs it instead of the class initializer.","12/Sep/11 13:59;sebb@apache.org;It might be worth changing the static init to a lazy init (IOD).
This would reduce the overhead for applications that don't call stripAccents.

Even if it is possible to change permissions without reloading the class, I don't think we should check the methods each time.

",12/Sep/11 18:08;sebb@apache.org;Patch to convert the static checks to IOD,22/Sep/11 22:42;jon;I can confirm that the 3.0.2 snapshot fixes this. Thanks all.,"22/Sep/11 22:53;sebb@apache.org;Any objection to applying the patch to convert the method checks to IOD?

That will remove the overhead for applications that don't use stripAccents.","03/Oct/11 23:05;sebb@apache.org;No objections, so patch applied",10/Oct/11 02:22;bayard;Resolving as fixed in 3.0.2.,,,,,,,
JavaDoc bug in static inner class DateIterator,LANG-743,12519386,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,patrick307,patrick307,19/Aug/11 08:18,28/Dec/11 07:05,07/Apr/19 20:37,28/Dec/11 07:05,2.6,,,,3.2,,lang.time.*,,,0,DateIterator,DateUtils,,,,,,"Possibly there is a bug in the JavaDoc comment of the DateIterator constructor. It says, that the parameter endFinal is not included in the date range that will be iterated, but when I look at the source code I see that the end date will be delivered as a result of the next()-method.

Source code:
/**
 * Constructs a DateIterator that ranges from one date to another. 
 *
 * @param startFinal start date (inclusive)
 * @param endFinal end date (not inclusive)
 */
DateIterator(Calendar startFinal, Calendar endFinal) {
    super();
    this.endFinal = endFinal;
    spot = startFinal;
    spot.add(Calendar.DATE, -1);
}

/**
 * Has the iterator not reached the end date yet?
 *
 * @return <code>true</code> if the iterator has yet to reach the end date
 */
public boolean hasNext() {
    return spot.before(endFinal);
}

/**
 * Return the next calendar in the iteration
 *
 * @return Object calendar for the next date
 */
public Object next() {
    if (spot.equals(endFinal)) {
        throw new NoSuchElementException();
    }
    spot.add(Calendar.DATE, 1);
    return spot.clone();
}


Example:
Value of variable endFinal: 2011-08-20
Current value of variable spot: 2011-08-19

- hasNext returns true because spot is before endFinal
- the if-statement fails because spot is not equal to endFinal
- one day is added to spot
- next returns the 20th of august => endFinal
",,,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-12-28 07:05:33.578,,,false,,,,,,,,,,,,,,2986,,,Wed Dec 28 07:05:33 UTC 2011,,,,,,0|i0d5fz:,74658,,,,,,,,28/Dec/11 07:05;bayard;Thanks Patrick. I've updated the javadoc to state that the endFinal parameter is inclusive in r1225117.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ant build has wrong component.name,LANG-741,12519039,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,hyandell,hyandell,16/Aug/11 19:39,17/Aug/11 04:11,07/Apr/19 20:37,17/Aug/11 04:11,,,,,3.1,,General,,,0,,,,,,,,The component.name in the default.properties should be commons-lang3 and not commons-lang.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-08-17 04:11:59.448,,,false,,,,,,,,,,,,,,64857,,,Wed Aug 17 04:11:59 UTC 2011,,,,,,0|i0d5g7:,74659,,,,,,,,"17/Aug/11 04:11;bayard;svn ci -m ""Fixing the component-name (aka artifactId in Maven language). LANG-741"" default.properties 
Sending        default.properties
Transmitting file data .
Committed revision 1158501.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToStringBuilder leaks memory if toString method causes hash code to be changed,LANG-739,12518333,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,prenon,prenon,09/Aug/11 16:47,25/Oct/13 16:15,07/Apr/19 20:37,,2.3,,,,Review Patch,,lang.builder.*,,,0,,,,,,,,"We have the following abstract class:

{code}
public class AbstractMessageItem {

    private String toString;

    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    public String toString() {
        if (toString == null) {
            toString = ToStringBuilder.reflectionToString(this);
        }
        return toString;
    }
}
{code}

We also have two concrete classes extending the above class and one of them has a reference to the other.

Now, if we call toString() on the 1st one, this will in turn call toString() on the second one.
The call to toString() on the second one will cause its hash code to be changed and as a consequence will also change the hashCode of the first one *while* computing its toString().

This causes the _infinite loop avoidance_ mechanism (i.e. the registry) to fail to unregister some objects and memory will be leaked.

I believe that this leak can be avoided by using the system identity hash code when registering objects (as is done in HashCodeBuilder) instead of the user hash code.

I know the issue can be worked around by removing the toString field (and loosing a dubious ""performance enhancement"" hack) or by making it transient, but I think that other ""mutating"" toString() methods can happen in the field (sometimes for good reasons) and fixing ToStringBuilder can be of help in some cases.
",,,,,,,,,,,,,,,,,,,,,,,,,,24/Oct/13 17:36;woon_san;LANG-739-patch.txt;https://issues.apache.org/jira/secure/attachment/12610115/LANG-739-patch.txt,25/Oct/13 16:15;woon_san;LANG-739-patch2.txt;https://issues.apache.org/jira/secure/attachment/12610335/LANG-739-patch2.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2013-08-24 20:08:15.249,,,false,,,,,,,,,,,,,,2989,,,Fri Oct 25 16:15:20 UTC 2013,,,,,,0|i0b5mn:,63024,,,,,,,,"24/Aug/13 20:08;mureinik;I am wondering if this is not a misuse of HashCodeBuilder.

Wouldn't the right usage be to define toString as transient and use the overloaded HashCodeBuilder.reflectionHashCode(this, false)?","23/Oct/13 14:28;woon_san;Hi [~prenon],

{quote}
I believe that this leak can be avoided by using the system identity hash code when registering objects (as is done in HashCodeBuilder) instead of the user hash code.
{quote}

What do you mean by 'using the system identity hash code when registering objects'? I don't see any registry or any object registration code in ToStringBuilder class (in trunk; 3.2-SNAPSHOT). Could you elaborate it more or did I miss anything?

{quote}
I know the issue can be worked around by removing the toString field (and loosing a dubious ""performance enhancement"" hack) or by making it transient, but I think that other ""mutating"" toString() methods can happen in the field (sometimes for good reasons) and fixing ToStringBuilder can be of help in some cases.
{quote}

HashCodeBuilder.reflectionHashCode(this) should always calculate hash code from the current field values anyway, so I'm not sure if there can be a better way when the operation is invoked in your #hashCode() implementation and a non transient instance member is changing every time. I'm afraid ""mutating"" needs for some good reasons should use transient member as best practice.
By the way, there are two other possible workarounds:
1 -  To invoke HashCodeBuilder.reflectionHashCode(this, ""toString"") instead.
2 - To invoke HashCodeBuilder#append() and HashCodeBuilder#toHashCode() only for meaningful members by yourself instead.

Regards,

Woonsan","23/Oct/13 17:22;prenon;Hi Woosan Ko,

The registry in question is located in the ToStringStyle class (in version 2.3).
If an object's hash code changes after it is added to that registry, then removal will not happen and the object will be leaked (i.e. kept forever in the registry).

I checked the latest code and the situation is somewhat better because the registry now uses a WeakHashMap which will prevent the leak. So now if the hash code of a ""registered"" object changes and is not removed from the registry, the registry will not prevent it from being removed.

Regards,
Philippe.
","23/Oct/13 19:10;woon_san;Hi Philippe,

Thanks a lot for the explanation!
You're right! Indeed, I think ToStringStyle should use the system identity hash code when registering objects for cyclic reference checking like HashCodeBuilder does through IDKey class.
(We don't have to use user hashCode() for cyclic reference checking in ToStringStyle, indeed.)

Because the purpose and usages of REGISTRY in ToStringStyle seems almost the same as in HashCodeBuilder, I think we'd better change it to the following and change the related static methods similarly:
{code}
private static final ThreadLocal<WeakHashMap<IDKey, Object>> REGISTRY;
{code}

Cheers,

Woonsan","24/Oct/13 17:36;woon_san;Attaching a patch (LANG-739-patch.txt) to fix the possible registry object leak found by Philippe.

ToStringStyle#REGISTRY is used only to avoid cyclic references and infinite loop problem. So, it doesn't have to use #hashCode() provided by user, but it is safer to use the system identity hash code.
Therefore, I changed the REGISTRY to use IDKey which uses the system identity hash code instead like HashCodeBuilder does to fix this issue.

Reviews are welcome!

Cheers,

Woonsan",25/Oct/13 07:47;britter;Setting this to Review Patch,"25/Oct/13 13:46;prenon;Had a quick look the patch. It looks good but I think it has an issue. 
Because the only reference to the IDKey is held by the WeakHashMap, there is a risk that it gets garbage collected at any time... 
Additionaly I think that the HashCodeBuilder does not use a WeakHashMap.","25/Oct/13 16:15;woon_san;Thanks a lot for the quick review, Philippe!
Indeed, the risk with WeakHashMap doesn't seem to be necessary.

So, I'm attaching a new patch (LANG-739-patch2.txt), with which I replaced WeakHashMap by HashMap.
I think this is safe because a) ToStringStyle#appendInternal() does register/unregister in try ~ finally block, and b) ToStringStyle#appendStart() does registration and ToStringStyle#appendEnd() should follow and do the unregistration (like ToStringBuilder#reflectionToString() does this).
Also, to show the paired registration/unregistration more clearly in b), I moved the scattered register() calls to #appendStart().

Please take a review again.

Cheers,

Woonsan",,,,,,,,,,,,,,,,,,,,,,,
CharUtils static final array CHAR_STRING is not needed to compute CHAR_STRING_ARRAY,LANG-736,12517679,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,garydgregory,garydgregory,02/Aug/11 18:19,09/Nov/11 04:16,07/Apr/19 20:37,16/Aug/11 14:07,3.0,,,,3.1,,lang.*,,,0,,,,,,,,"CharUtils static final array CHAR_STRING is not needed to compute CHAR_STRING_ARRAY.

This:

{code:java}
    private static final String CHAR_STRING = 
        ""\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007"" +
        ""\b\t\n\u000b\f\r\u000e\u000f"" +
        ""\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017"" +
        ""\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f"" +
        ""\u0020\u0021\""\u0023\u0024\u0025\u0026\u0027"" +
        ""\u0028\u0029\u002a\u002b\u002c\u002d\u002e\u002f"" +
        ""\u0030\u0031\u0032\u0033\u0034\u0035\u0036\u0037"" +
        ""\u0038\u0039\u003a\u003b\u003c\u003d\u003e\u003f"" +
        ""\u0040\u0041\u0042\u0043\u0044\u0045\u0046\u0047"" +
        ""\u0048\u0049\u004a\u004b\u004c\u004d\u004e\u004f"" +
        ""\u0050\u0051\u0052\u0053\u0054\u0055\u0056\u0057"" +
        ""\u0058\u0059\u005a\u005b\\\u005d\u005e\u005f"" +
        ""\u0060\u0061\u0062\u0063\u0064\u0065\u0066\u0067"" +
        ""\u0068\u0069\u006a\u006b\u006c\u006d\u006e\u006f"" +
        ""\u0070\u0071\u0072\u0073\u0074\u0075\u0076\u0077"" +
        ""\u0078\u0079\u007a\u007b\u007c\u007d\u007e\u007f"";

// snip

        for (int i = 127; i >= 0; i--) {
            CHAR_STRING_ARRAY[i] = CHAR_STRING.substring(i, i + 1);
        }
{code}

Can be recoded as:
{code:java}
        for (char c = 0; c < CHAR_STRING_ARRAY.length; c++) {
            CHAR_STRING_ARRAY[c] = String.valueOf(c);
        }
{code}

With the lang 3.0 code, using the Oracle Java 5 String impl, the 128 Strings share the underlying CHAR_STRING char[] because of the way Sun implemented String#substring(int,int).

The proposed implementation does not reply on this private implementation detail but creates one char[1] array per String. 

Thoughts?",,,,,,,,,,,,,,,,,,,,,,,,,,02/Aug/11 18:35;garydgregory;lang-736.diff;https://issues.apache.org/jira/secure/attachment/12489096/lang-736.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-08-05 06:20:03.377,,,false,,,,,,,,,,,,,,64913,,,Tue Aug 16 14:07:08 UTC 2011,,,,,,0|i0d5gf:,74660,,,,,,,,"05/Aug/11 06:20;bayard;Moving to 3.0.2 as it's not pressing.

What about other JDK implementations? The way you word things sounds as though you're relying on a Sun feature.","05/Aug/11 13:27;mbenson;Actually, I read the report as ""the *current* lang code relies on a Sun feature, and should be changed.""","07/Aug/11 02:39;garydgregory;Yes, I would prefer to see:

- simpler code IMO (like my proposal) instead of something looks odd and is undocumented in our code, or
- document our current code and explain why it works, and on what JREs it works.",16/Aug/11 06:17;bayard;New code looks good. Simpler +1.,16/Aug/11 14:07;garydgregory;In SVN.,,,,,,,,,,,,,,,,,,,,,,,,,,
The CHAR_ARRAY cache in CharUtils duplicates the cache in java.lang.Character,LANG-734,12517676,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,garydgregory,garydgregory,02/Aug/11 17:59,16/Nov/11 06:56,07/Apr/19 20:37,02/Aug/11 18:16,3.0,,,,3.0.1,,lang.*,,,0,,,,,,,,The CHAR_ARRAY cache in CharUtils duplicates the cache in java.lang.Character.,"Apache Maven 3.0.3 (r1075438; 2011-02-28 12:31:09-0500)
Maven home: C:\Java\apache-maven-3.0.3\bin\..
Java version: 1.6.0_24, vendor: Sun Microsystems Inc.
Java home: C:\Program Files\Java\jdk1.6.0_24\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,66483,,,Tue Aug 02 18:16:48 UTC 2011,,,,,,0|i0d5gn:,74661,,,,,,,,02/Aug/11 18:16;garydgregory;In trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeXml(str) does not support supplemental characters.,LANG-728,12514313,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,yabuki,yabuki,16/Jul/11 08:09,19/Jul/11 05:10,07/Apr/19 20:37,19/Jul/11 05:10,2.6,,,,3.0,,lang.*,,,0,patch,,,,,,,"Hello.

StringEscapeUtils.escapeXml(str) escapes Unicode characters greater than 0x7f to their numerical \\u equivalent:

String str = StringEscapeUtils.escapeXml(""\uD84C\uDFB4"");
System.out.println(str);
//&#55372;&#57268;

But, the output should be &#144308;.

According to W3C document ""Using character escapes in markup and CSS,"" We must use the single, code point value for supplemental character.
http://www.w3.org/International/questions/qa-escapes

In fact, &#55372;&#57268; is not rendered correctly in some web browsers e.g., Firefox 5.0 and Chrome 12.0.
",,,,,,,,,,,,,,,,,,,,,,,,,,16/Jul/11 08:11;yabuki;lang_2_6_escapexml_20110716.diff;https://issues.apache.org/jira/secure/attachment/12486714/lang_2_6_escapexml_20110716.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-07-19 04:36:17.346,,,false,,,,,,,,,,,,,,67581,,,Tue Jul 19 05:10:17 UTC 2011,,,,,,0|i0d5gv:,74662,,,,,,,,16/Jul/11 08:11;yabuki;Test code and patch for org/apache/commons/lang/Entities.java.,19/Jul/11 04:36;bayard;The API has changed in Lang 3.0; however the issue remains. A failing test (with @Ignore) has been added to StringEscapeUtilsTest. Need to resolve this in 3.0.1.,"19/Jul/11 04:56;bayard;Happiness. This is fixed in 3.0 already! :)

It wasn't clear because escapeXml no longer escapes entities above 7f, instead you have to do a bit more work to get that. Here is the code you would need:

{code:java}
        CharSequenceTranslator escapeXml =
            StringEscapeUtils.ESCAPE_XML.with( UnicodeEscaper.between(0x7f, Integer.MAX_VALUE) );

        assertEquals(""Supplementary character must be represented using a single escape"", ""\u233B4"",
                escapeXml.translate(""\uD84C\uDFB4""));
{code}

Also note the need to use a unicode escape and not a numeric entity in Java.

This has been added to the unit tests run each time. Marking this as Fixed in 3.0.",19/Jul/11 05:03;bayard;Reopening as I explained things badly. ,"19/Jul/11 05:07;bayard;I used the wrong translator :) Code should be:

{code:java}
        CharSequenceTranslator escapeXml =
            StringEscapeUtils.ESCAPE_XML.with( NumericEntityEscaper.between(0x7f, Integer.MAX_VALUE) );

        assertEquals(""Supplementary character must be represented using a single escape"", ""&#144308;"",
                escapeXml.translate(""\uD84C\uDFB4""));
{code}

ie) Ignore the 'note the' comment. ",19/Jul/11 05:10;bayard;Closing again as 'fixed in 3.0'.,,,,,,,,,,,,,,,,,,,,,,,,,
ToStringBuilderTest.testReflectionHierarchyArrayList fails with IBM JDK 6,LANG-727,12514171,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,joehni,joehni,joehni,15/Jul/11 06:58,06/Jun/17 11:38,07/Apr/19 20:37,06/Aug/11 15:44,3.0,,,,3.0.1,,lang.builder.*,,,0,,,,,,,,"The unit test fails when running with IBM JDK 6:
{noformat}
Failed tests: 
  testReflectionHierarchyArrayList(org.apache.commons.lang3.builder.ToStringBuilderTest): null 
expected:<....ArrayList@115b115b[[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,null>,null>,null>},size=0],modCount=0]>
but was:<....ArrayList@115b115b[[firstIndex=0,lastIndex=0,array={<null>,<null>,<null>,<null>,<null>,<null>,<null>,null>,null>,null>}],modCount=0]>
{noformat}
Actually the test is wrong, because it makes wrong assumptions about the implementation of ArrayList in the runtime.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-07-27 03:03:35.495,,,false,,,,,,,,,,,,,,65852,,,Sat Aug 06 15:43:56 UTC 2011,,,,,,0|i0d5h3:,74663,,,,,,,,"27/Jul/11 03:03;bayard;Looking at the code:

{code:java}
        assertEquals(baseStr + ""[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]"", ToStringBuilder.reflectionToString(base, null, true));
        assertEquals(baseStr + ""[size=0]"", ToStringBuilder.reflectionToString(base, null, false));
{code}

I think the 2nd test should pass as there's only one item. So just the first one to fix. I think we can use StringUtils.contains, ie:

{code:java}
        String result = ToStringBuilder.reflectionToString(base, null, true);
        assertTrue( StringUtils.startsWith(result, baseStr + ""["") );
        assertTrue( StringUtils.contains(result, ""[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>}"" ) );
        assertTrue( StringUtils.contains(result, ""size=0"") );
        assertTrue( StringUtils.contains(result, ""modCount=0"") );
        assertTrue( StringUtils.endsWith(result, ""]"") );
        assertEquals(baseStr + ""[size=0]"", ToStringBuilder.reflectionToString(base, null, false));
{code}

Is that something you could easily test in JDK 6 and commit?

I also suspect that we should hard code the elementData size by doing ArrayList(10).","27/Jul/11 14:30;mbenson;Alternatively, when we know that we're making assumptions about a class's inner implementation, we could upgrade the test to JUnit 4 and add an assumption at the beginning of the test wrt the particular JVM vendor.",28/Jul/11 22:19;bayard;It's a bad assumption :),"28/Jul/11 23:08;mbenson;right, so the test will be skipped whenever the assumption proves to have been incorrect...","02/Aug/11 06:15;bayard;I've applied the code change I proposed.

svn ci -m ""Rearranging the testReflectionHierarchyArrayList test per LANG-727; shouldn't make assumptions about ArrayList now""
Sending        src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
Transmitting file data .
Committed revision 1153037.
","02/Aug/11 07:45;joehni;Sorry to say, but it will still fail. See the error message. On IBM JDK there is no ""elementData"" member at all.","02/Aug/11 21:13;joehni;Actually I am not sure what the test shall demonstrate. Is it a special type construction that is arbitrarily present in ArrayList or does it demonstrate that it can also handle an ArrayList. If it is the latter then we have to check for a different String representation with IBM JDK 6 runtime, because it exposes implementation details of the type.","02/Aug/11 21:21;mbenson;I maintain that this test just verifies expectations of the code when running under a certain set of assumptions, including ""the ArrayList implementation in use has an elementData member.""  If we know that that means the Sun JDK, we should just turn the test off under other circumstances.  It's not like we don't have the vendor info readily available; this _is_ Commons Lang, after all.","03/Aug/11 04:48;bayard;1) Doh :) I'll revert the commit.
2) Happy with your Sun JDK only approach Matt.
3) I assume the test is to show it can handle ArrayList too.","03/Aug/11 04:49;bayard;svn ci -m ""Rolling back r1153037 and r1153038 - the changes didn't help""
Sending        src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java
Transmitting file data .
Committed revision 1153343.
","05/Aug/11 06:35;joehni;If you postpone this issue, don't forget to drop it again from changes.xml also :)","05/Aug/11 13:51;mbenson;I presume the property we'd need to check would be *java.vendor* as opposed to *java.vm.vendor*, but I'd be glad for a second opinion.  Note that the test also passes on an Apple JDK, so I'd prefer we disable it only on IBM for now until/unless we encounter another classlib that gives us the same problem.

Joerg, can you give us the java.vendor values for whichever JDKs fail?  Or, for example, does the test pass on an earlier IBM JDK?  If so, can you give me whatever property values I need to distinguish the environment in which we expect a failure?

Thanks!","05/Aug/11 14:45;joehni;java.specification.version: 1.6
java.vm.vendor: IBM Corporation

IBM JDK 1.5 works. Maybe we can compare the strings and if they're not equal, we look for the JDK. For this one we can print a known issue to sysout, for all others we should fail.","05/Aug/11 14:55;mbenson;We _could_ do it that way, though it would at least make the test less concise.  So is it your opinion that the java.vm.vendor is the important thing here, rather than the java.vendor?  I would have thought that *java* would signify the class library in use while *vm* would signify only that (the VM).  WDYT?  What is the value of java.vendor?",05/Aug/11 16:49;joehni;java.vendor is the same. Actually we don't have to take this issue too serious. The implementation can handle the ArrayList also for IBM JDK 6. The internals are different but it provides proper information. It's the test that is flaky with its assumptions. Therefore I'd add a comment to state the fact that the result depends on the implementation details of ArrayList that is vendor/version specific. IBM JDK 6 is known for the difference and is currently the only known one with different implementation.,06/Aug/11 15:43;joehni;Committed revision 1154530.,,,,,,,,,,,,,,,
StringEscapeUtils.escapeXml(input) outputs wrong results when an input contains characters in Supplementary Planes.,LANG-720,12514062,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,yabuki,yabuki,14/Jul/11 13:24,19/Jul/11 05:00,07/Apr/19 20:37,14/Jul/11 18:50,3.0,,,,3.0.1,,lang.*,lang.text.translate.*,,0,patch,,,,,,,"Hello.

I use StringEscapeUtils.escapeXml(input) to escape special characters for XML.
This method outputs wrong results when input contains characters in Supplementary Planes.

String str1 = ""\uD842\uDFB7"" + ""A"";
String str2 = StringEscapeUtils.escapeXml(str1);

// The value of str2 must be equal to the one of str1,
// because str1 does not contain characters to be escaped.
// However, str2 is diffrent from str1.

System.out.println(URLEncoder.encode(str1, ""UTF-16BE"")); //%D8%42%DF%B7A
System.out.println(URLEncoder.encode(str2, ""UTF-16BE"")); //%D8%42%DF%B7%FF%FD

The cause of this problem is that the loop to translate input character by character is wrong.
In CharSequenceTranslator.translate(CharSequence input, Writer out),
loop counter ""i"" moves from 0 to Character.codePointCount(input, 0, input.length()),
but it should move from 0 to input.length().
",,,,,,,,,,,,,,,,,,,,,,,,,,14/Jul/11 13:27;yabuki;CharSequenceTranslator.java.20110714.diff;https://issues.apache.org/jira/secure/attachment/12486437/CharSequenceTranslator.java.20110714.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-07-14 16:59:08.539,,,false,,,,,,,,,,,,,,67582,,,Tue Jul 19 05:00:56 UTC 2011,,,,,,0|i0d5hb:,74664,,,,,,,,14/Jul/11 13:27;yabuki;Patch for org/apache/commons/lang3/text/translate/CharSequenceTranslator.java.,"14/Jul/11 16:59;garydgregory;The patch does not break any unit test with the latest from SVN but it is missing a unit test.

Perhaps we should hold off since we are in the middle of a VOTE.","14/Jul/11 18:50;mbenson;I was also going to ask for a unit test, but wanted to improve my understanding of the situation anyway, so adapted the posted problem code.  Even though we are currently voting on the release of 3.0.0 from RC4 I don't see why we can't fix this in trunk; the RC tag is already cut.  I have used the concept of the patch to rewrite the entire method in question, primarily to avoid the modification of a counter variable within a for loop.

Committed revision 1146844.","14/Jul/11 18:57;garydgregory;OK, thanks for the redo.

I think we should cut another RC to pick this up.","14/Jul/11 18:59;mbenson;was going to punt to the dev list ;)

I just used a sports metaphor.  :|",19/Jul/11 05:00;bayard;Note that we'll release this in 3.0.1. 3.0 will go out with this as a known issue and 3.0.1 will follow (August).,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat formats year differently than SimpleDateFormat in Java 7,LANG-719,12513953,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,joehni,joehni,joehni,13/Jul/11 17:00,19/Jul/11 04:25,07/Apr/19 20:37,13/Jul/11 17:02,,,,,3.0,,lang.time.*,,,0,,,,,,,,"Starting with Java 7 does SimpleDateFormat format a year pattern of 'Y' or 'YYY' as '2003' instead of '03' as in former Java releases. According Javadoc this pattern should have been always been formatted as number, therefore the new behavior seems to be a bug fix in the JDK. FastDateFormat is adjusted to behave the same.",,,,,,,,,,,,,,LANG-593,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-07-13 22:52:29.569,,,false,,,,,,,,,,,,,,67592,,,Wed Jul 13 22:52:29 UTC 2011,,,,,,0|i0d5hj:,74665,,,,,,,,"13/Jul/11 17:02;joehni;{noformat}
commit -m ""Adjust FastDateFormat for Java 7 behavior regarding format of the year pattern (LANG-719)."" /home/joehni/src/Commons/proper/lang/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java /home/joehni/src/Commons/proper/lang/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
    Sending        /home/joehni/src/Commons/proper/lang/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
    Sending        /home/joehni/src/Commons/proper/lang/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
    Transmitting file data ...
    Committed revision 1146138.
{noformat}",13/Jul/11 22:52;niallp;This is a duplicate of LANG-593,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringIndexOutOfBoundsException when calling unescapeHtml4(""&#03"")",LANG-710,12512502,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,bayard,benpicco,benpicco,01/Jul/11 20:57,09/Jul/11 05:09,07/Apr/19 20:37,09/Jul/11 05:09,3.0,,,,3.0,,lang.*,,,0,StringEscapeUtils,StringUtils,,,,,,"When calling unescapeHtml4() on the String ""&#03"" (or any String that contains these characters) an Exception is thrown:

Exception in thread ""main"" java.lang.StringIndexOutOfBoundsException: String index out of range: 4
	at java.lang.String.charAt(String.java:686)
	at org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(NumericEntityUnescaper.java:49)
	at org.apache.commons.lang3.text.translate.AggregateTranslator.translate(AggregateTranslator.java:53)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:88)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:60)
	at org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4(StringEscapeUtils.java:351)","java version ""1.6.0_24""
Java(TM) SE Runtime Environment (build 1.6.0_24-b07)
Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02, mixed mode)
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-07-03 07:57:43.731,,,false,,,,,,,,,,,,,,68680,,,Sat Jul 09 05:09:46 UTC 2011,,,,,,0|i0d5hr:,74666,,,,,,,,"01/Jul/11 21:07;benpicco;any & followed by an invalid escape sequence or just a solitary ""&"" will have the same effect.","03/Jul/11 07:57;bayard;Thanks Benjamin.

I've fixed this in trunk - it would be very appreciated if you could confirm this works for you.

svn ci -m ""Adding tests and resolving LANG-710, reported by Benjamin Valentin. Note that this changed such that the code will now escape an unfinished entity (i.e. &#030). This matches browser behaviour. ""
Sending        src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
Sending        src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
Transmitting file data ..
Committed revision 1142389.

","04/Jul/11 06:57;joehni;I am not sure whether this is really a good idea to accept this input silently. In the end it is an HTML syntax error. While a SIOOBE is not really helpful, a java.text.ParseException seems to me mkore appropriate. WDYT?","04/Jul/11 14:08;garydgregory;Ignoring garbage Input seems like trouble to me too that can only make things worse. Just imagine, why is one method accepting garbage input and another not. IMO, garbage in means that you should blow up.","06/Jul/11 04:56;bayard;Agreed. I was thinking of the browser accepting it, but that's only really applicable to the escape method and because browser's support weakly defined human input. An unescape method should run on already escaped code, and that code should have been escaped properly.

I'll look into throwing a ParseException. ","07/Jul/11 03:44;bayard;So the basic issue imo is that ParseException is a typed exception - we'd have to introduce it to the StringEscapeUtils API.

I'm uncomfortable throwing a random IllegalArgumentException (or similar) when the bad data is passed in. That may be the typed-exception fan in me speaking. I don't like discovering at 4am that someone found a piece of data that caused a heretofore unknown runtime exception to occur.

So we have three options:

1: Leave the data unescaped because it is poorly typed.
2: Claim that we're dealing with XHTML and throw an exception.
3: Escape the data.

All the options seem useful, but none of them seem perfect. So I've implemented all three.

svn ci -m ""Making unescapeHtml _NOT_ escape unfinished numeric entities by default (it ignores them); however adding options that will fire an exception or unescape the numeric entity. LANG-710""
Sending        src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
Sending        src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
Transmitting file data ..
Committed revision 1143641.
",09/Jul/11 05:09;bayard;Resolving.,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeEcmaScript from lang3 cuts off long unicode string,LANG-708,12511349,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,benderamp,benderamp,23/Jun/11 12:13,15/Jul/11 07:27,07/Apr/19 20:37,15/Jul/11 07:27,,,,,3.0.1,,lang.text.translate.*,,,0,,,,,,,,"Hello, I have a really big JSON string (generated from db) with unicode chars and I need to pass it though StringEscapeUtils.escapeEcmaScript(value). This string is generated and in most cases it works ok, but I have met a specific string (attached below) which is not correctly converted - few symbols (about 10) at the end of the string are cut-off (and actually they are not already unicode chars).

the original string ends with:
 ""geonameId"":6544329,""valueCode"":""""}]

and the produced string ends with:
 \""geonameId\"":6544329,\""value

So Code"":""""}] part is missing and this does not allow to parse the result as JSON on the client side.


I have tried to debug a bit with StringEscapeUtils.escapeEcmaScript source code and is seems that the problem is somewhere around here:

CharSequenceTranslator.translate(...){
...
        int sz = Character.codePointCount(input, 0, input.length());
        for (int i = 0; i < sz; i++) {
            // consumed is the number of codepoints consumed
            int consumed = translate(input, i, out);

            if(consumed == 0) { 
                out.write( Character.toChars( Character.codePointAt(input, i) ) );
            }
...
}

If I put breakpoint condition to stop in the loop when i==(sz-5), I can see that the last chars of ""valueCode"" literal are being added to the end of ""out"" stream, but the counter condition ends too early to reach the end of original input String.

So, it seems that somehow with the provided string either the sz value is calculated incorrectly or the processing loop did wrong counter adjustmes at some point.
",,,,,,,,,,,,,,,,,,,,,,,,,,23/Jun/11 13:51;benderamp;Test.java;https://issues.apache.org/jira/secure/attachment/12483594/Test.java,23/Jun/11 13:51;benderamp;input.txt;https://issues.apache.org/jira/secure/attachment/12483595/input.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-06-23 13:19:14.738,,,false,,,,,,,,,,,,,,67975,,,Fri Jul 15 07:27:26 UTC 2011,,,,,,0|i0d5hz:,74667,,,,,,,,23/Jun/11 12:53;benderamp;It seems that StringEscapeUtils.escapeJavaScript(value) from 2 commons.lang 2.1 does not have this problem with same string.,"23/Jun/11 13:19;sebb@apache.org;Once you have created a JIRA issue, you can use More Actions / Attach Files to attach files.

Please could you do so with the test data? It's difficult to use as it is.

The issue text could then be editted to remove the inline data.

Thanks very much.","23/Jun/11 13:51;benderamp;drop both files to same dir and run Test.java as main class - it would print result of conversion with 3.0 and 2.1 to system out - 3.0 will have described problem, 2.1 will not (both libs should be added as project deps).","15/Jul/11 03:31;mbenson;With LANG-720 fixed, lang3 trunk no longer cuts off the end of the string.","15/Jul/11 07:27;bayard;Setting fix version to 3.0.1.

Setting resolution to Fixed; I think we should treat this as a different bug entry to LANG-720, even if the same code change fixed it. It's a notably different symptom and worth calling out.",,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtil generate wrong output for some entities,LANG-705,12509606,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,moudy,moudy,08/Jun/11 15:50,21/Oct/13 05:46,07/Apr/19 20:37,08/Jun/11 16:10,,,,,,,lang.text.translate.*,,,0,,,,,,,,"The entities such as ""äöüÄÖÜß"" are not correctly encoded in the org.apache.commons.lang3.text.translate.EntityArrays. E.g. ""ä"" is encoded as ""00E4"" according to the ISO-8859-1 standard, but is assigned to ""00E5"" in the class EntityArrays.
The consequence is, that StringEscapeUtil can not produce correct output.",,,,,,,,,,,,,,LANG-658,LANG-659,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,71021,,,2011-06-08 15:50:02.0,,,,,,0|i0d5i7:,74668,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.join throws NPE when toString returns null for one of objects in collection,LANG-703,12509366,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,link,link,06/Jun/11 15:42,03/Jul/11 07:07,07/Apr/19 20:37,03/Jul/11 07:04,,,,,3.0,,,,,1,,,,,,,,"Try
{code} 
StringUtils.join(new Object[]{
        new Object() {
          @Override
          public String toString() {
            return null;
          }
        }
    }, ',');
{code}

ToString should probably never return null, but it does in javax.mail.internet.InternetAddress",,,,,,,,,,,,,,,,,,,,,,,,,,06/Jun/11 18:24;asela38;StringUtil_Join_NPE.patch;https://issues.apache.org/jira/secure/attachment/12481597/StringUtil_Join_NPE.patch,07/Jun/11 03:25;asela38;StringUtil_Join_NPE_AVG_16.patch;https://issues.apache.org/jira/secure/attachment/12481650/StringUtil_Join_NPE_AVG_16.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2011-06-06 15:59:52.85,,,false,,,,,,,,,,,,,,69351,,,Sun Jul 03 07:04:57 UTC 2011,,,,,,0|i0d5if:,74669,,,,,,,,"06/Jun/11 15:59;asela38;I suppose following code in the StringUtil.join() makes the issue

3297:bufSize *= ((array[startIndex] == null ? 16 :
                                       array[startIndex].toString().length()) + 1);
3298:StringBuilder buf = new StringBuilder(bufSize);

since StringBuilder any inter","06/Jun/11 16:22;asela38;{code:java}  
  StringUtils.join(new Object[]{
        new Object() {
          @Override
          public String toString() {
            return """";
          }
        },
        new Object() {
          @Override
          public String toString() {
            return null;
          }
        }

    }, ',');
{code}

NPE occurs only when first Object toString method returns null",06/Jun/11 18:24;asela38;fix the NPE and anded Unit Tests for that,"06/Jun/11 19:15;sebb@apache.org;Seems to me that the simplest solution would be just to assume that the average entry size is 16, and not bother with trying to use the actual sizes at all.",07/Jun/11 03:25;asela38;create a patch assuming average string length is 16,"03/Jul/11 07:04;bayard;Thanks Ilya, I've applied the 2nd patch:

svn ci -m ""Applying Ilya's patch from LANG-703 fixing an NPE when toString returns null""
Sending        src/main/java/org/apache/commons/lang3/StringUtils.java
Sending        src/test/java/org/apache/commons/lang3/StringUtilsTest.java
Transmitting file data ..
Committed revision 1142381.
",,,,,,,,,,,,,,,,,,,,,,,,,
Method createNumber from NumberUtils doesn't work for floating point numbers other than Float,LANG-693,12504149,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,rego,rego,13/Apr/11 09:04,15/Oct/13 02:32,07/Apr/19 20:37,19/May/13 10:37,2.6,,,,3.2,,lang.math.*,,,0,,,,,,,,"Method createNumber from NumberUtils is trying to parse a string with a floating point number always first as a Float, that will cause that if we send a string with a number that will need a Double or even a BigDecimal the number will be truncate to accommodate into the Float without an exception to be thrown, so in fact we will no be returning ever neither a Double nor a BigDecimal.",,,,,,,,,,,,,,,,,,,,,,,,,,19/May/13 02:50;calvine;LANG-693(2).patch;https://issues.apache.org/jira/secure/attachment/12583756/LANG-693%282%29.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-04-20 06:26:39.527,,,false,,,,,,,,,,,,,,2999,,,Thu Aug 08 22:03:33 UTC 2013,,,,,,0|i0b5ov:,63034,,,,,,,,"20/Apr/11 06:26;bayard;Can you provide more data? If I run the following test it looks to happily be returning Doubles (and already had a test for BigDecimal):

        // LANG-693
        assertEquals(""createNumber(String) LANG-693 failed"", Double.MAX_VALUE, NumberUtils
                    .createNumber("""" + Double.MAX_VALUE));
        System.err.println( NumberUtils.createNumber(""""+Double.MAX_VALUE));
        System.err.println( NumberUtils.createNumber(""""+Double.MAX_VALUE).getClass());   // prints java.lang.Double","26/Apr/11 07:36;rego;We've have tested it in a JUnit with the following string: ""0.9090909090909091"", that debugging it returns a float with the value 0.90909094, which clearly is wrong. That's why we thought the approach for the conversion is wrong.
Did you tried to debug it just to be sure that the execution flow is going as you expect?","26/Apr/11 10:17;sebb@apache.org;I can confirm that ""0.9090909090909091"" is returned as a float 0.90909094.

Whether this is wrong is a different matter. The Javadoc says:

{quote}
Turns a string value into a java.lang.Number.

First, the value is examined for a type qualifier on the end ('f','F','d','D','l','L'). If it is found, it starts trying to create successively larger types from the type specified until one is found that can represent the value.

If a type specifier is not found, it will check for a decimal point and then try successively larger types from Integer to BigInteger and from Float to BigDecimal.
{quote}

The second paragraph does not specifically say that the code will return the ""best"" match, nor does the 3rd para. It's not clear to me whether the method was ever intended to return a ""best"" match (for some definintion of best). If such behaviour is intended, then the Javadoc needs to be clarified, and the code changed accordingly.

Note that the test of Double.MAX_VALUE works because this is converted to Float.INFINITY.
Non-infinite values are rounded by Float.valueOf(String) to the nearest value, so are never checked as doubles.","27/Apr/11 06:30;rego;In an automatic conversion to string of a number you will not have the qualifier, so if you try to undo the conversion with this method it will fail, because the approach when you don't sent the qualifier is not working. Anyway, we are working with BigDecimal instances that don't have a qualifier.

If you don't want a whole refactor of the method you could at least check if the resulted number has the same toString value than the parameter and if not try with a larger type, that should avoid this kind of problem (not very nice approach anyway).",28/Apr/11 17:31;bayard;Setting fix version to 3.x (i.e. post 3.0). Seems like a very fair issue to take a stab at fixing.,"23/Aug/11 07:10;bayard;The toString may not be the nicest, but it definitely works :)

The only test I get failing if I use it is the LANG-521 ""2."" use case. That switches from being a Float to being a BigDecimal. I suspect there might be problems with exponents though.

All the problems would seem to be creating BigDecimals unnecessarily, rather than creating Floats and losing data. So worst case the String test seems preferable. 
",11/Sep/11 05:10;bayard;Pushing back to 3.0.3; I don't think is ready yet as the toString approach is likely to lead to bugs and there's not another solution on the table.,"11/Nov/12 12:17;tn;Why not trying to create a double first in the createNumber method:

{noformat}
                //Must be a float,double,BigDec
                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                try {
                    Float f = createFloat(str);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        return f;
                    }
                } catch (NumberFormatException nfe) { // NOPMD
                    // ignore the bad number
                }
                try {
                    Double d = createDouble(str);
                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (NumberFormatException nfe) { // NOPMD
                    // ignore the bad number
                }
{noformat}

Right now, we first try to convert it to a float, and if it does not fit, we try it with double.
But this way we will always lose the precision unless one specifies the 'd' suffix.

The default in java for decimal values is double anyway (without specifying a type qualifier), so it makes sense to use the same behavior in the createNumber method imho.

If somebody really wants to have a float, he/she can specify the 'f' type qualifier.","11/Nov/12 14:57;garydgregory;So this proposal is not b-compatible but it sounds like an improvement, or even a bug fix if you consider the loss of precision. +1.","12/Nov/12 02:05;sebb@apache.org;bq. So this proposal is not b-compatible ...

I assume you must mean behaviour compatible rather than binary compatible.

As far as I can tell, if the code is changed to try double and then float, the result will always be a double.
I'm not sure that is much of an improvement.
","12/Nov/12 07:30;tn;Maybe I was unclear, but the float part afterwards would not be needed anymore, as this would never succeed.

Another idea would be to add something like this (pseudo-code)

{noformat}
//Must be a float,double,BigDec
boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
try {
    Float f = createFloat(str);
    BigDecimal one = createBigDecimal(str);
    BigDecimal two = new BigDecimal(f);

    // check for loss of precision in the conversion
    if (one.compareTo(two) == 0) {
       ....

} catch (NumberFormatException nfe) { // NOPMD
    // ignore the bad number
}
{noformat}

Maybe the getPrecision() method from BigDecimal could be used too.
It is also a problem of definition, as a floating-point number can not always precisely expressed in the related data types, so the question is how to define when a float will be returned, and when a double.

That's why I put my original proposal to just assume a double in case of a missing type qualifier, as this is the default in java anyway.","12/Nov/12 16:21;sebb@apache.org;As pointed out in the original issue description, the same problem applies to double/BigDecimal.
If the code is changed to try double first, then the method will never create a BigDecimal unless it is larger than Double.MAX_VALUE, thus potentially losing precision again.

As I see it, the problem is that the method currently only switches output type based on magnitude, not on precision.

Would it make sense to check the precision of the input number and use that to choose the starting conversion?

e.g. if more than 6 digits are present, use double; if more than 17 digits, use BigDecimal.

This should be fairly cheap to do, and it would be easy to determine in advance what number type would be created.

It would not always choose the minimal representation, but at least it would never lose precision.


[AFAICT:

6 is the max number of digits in a number guaranteed not to lose precision (some 7/8 digit numbers are also OK).
Similarly, double can support 15 digits guaranteed (to 17 max).]",12/Nov/12 16:47;garydgregory;I like preserving precision.,12/Nov/12 16:59;tn;sounds pretty reasonable.,"12/Nov/12 17:11;sebb@apache.org;Examples of valid numbers that would trigger an upscale:

Float.MAX_VALUE is 3.4028235e+38 - i.e. 8 digits; that would convert to Double
Double.MAX_VALUE is 1.7976931348623157e+308 - i.e. 17 digits; would convert to BigDecimal

In theory one could do extra work to handle the boundary cases.
I've not looked at what is involved.",19/May/13 02:45;calvine;This is a patch that resolves this bug. Any feedback would be greatly appreciated!,"19/May/13 02:46;calvine;Hello All,

I am new to the Apache Community. I have attached a patch that resolves this issue. I would love any feedback you can provide.

Thank you,
Calvin",19/May/13 02:50;calvine;Fixed error in comments around bug fix.,"19/May/13 10:37;sebb@apache.org;Thanks very much; neat fix. Applied here:

URL: http://svn.apache.org/r1484263
Log:
LANG-693 Method createNumber from NumberUtils doesn't work for floating point numbers other than Float

Modified:
    commons/proper/lang/trunk/src/changes/changes.xml
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java

=====

I made two very trivial style changes: moved the declaration of numDecimals closer to where it is first used, and changed less => fewer in a comment (grammatical pedantry on my part!).

Thanks again.",19/May/13 17:05;calvine;Thank you very much!,"08/Aug/13 22:03;jkoppel;This still can fail if there are digits before the decimal point.

> System.out.println(NumberUtils.createNumber(""169000121.0""));
1.69000128E8",,,,,,,,,,
Remove DateUtils.UTC_TIME_ZONE,LANG-691,12503978,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,11/Apr/11 20:51,11/Apr/11 20:52,07/Apr/19 20:37,11/Apr/11 20:52,,,,,3.0,,,,,0,,,,,,,,"TimeZone is mutable, thus sharing a single variable across many use cases is a bad idea.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,147493,,,2011-04-11 20:51:10.0,,,,,,0|i0d5in:,74670,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils.replaceEachRepeatedly(""aaa"", new String[]{""aa""}, new String[]{""aXa""}); throw an exception",LANG-686,12501015,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,qed,qed,10/Mar/11 13:19,21/Oct/13 05:43,07/Apr/19 20:37,,2.6,,,,Review Patch,,lang.*,,,0,,,,,,,,"After executing line

StringUtils.replaceEachRepeatedly(""aaa"", new String[]{""aa""}, new String[]{""aXa""});

exception is thrown:

Exception in thread ""main"" java.lang.IllegalStateException: TimeToLive of -1 is less than 0: aXaXa
	at org.apache.commons.lang.StringUtils.replaceEach(StringUtils.java:3986)
	at org.apache.commons.lang.StringUtils.replaceEach(StringUtils.java:4099)
	at org.apache.commons.lang.StringUtils.replaceEach(StringUtils.java:4099)
	at org.apache.commons.lang.StringUtils.replaceEachRepeatedly(StringUtils.java:3920)

","jdk 1.6.24, windows xp pro sp3, eclipse helios",,,,,,,,,,,,,,,,,,,,,,,,,03/Apr/12 20:42;tn;LANG-686.patch;https://issues.apache.org/jira/secure/attachment/12521211/LANG-686.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-03-10 16:40:09.45,,,false,,,,,,,,,,,,,,3001,,,Tue Apr 03 20:42:10 UTC 2012,,,,,,0|i0b5pb:,63036,,,,,,,,"10/Mar/11 16:40;maurizio.cucchiara;I'm not sure this is a bug. The IllegalStateException was throwned because your substitution pattern triggers a (though little) recursion, it's a kind of prevention, in order to avoid StackOverflowError","10/Mar/11 18:32;qed;I solved this problem by making this call instead:

StringUtils.replaceEachRepeatedly(""aaa"", new String[]{""aa"", """"}, new String[]{""aXa"", """"});

Maybe there should be a limit to number of iterations or something similar. I didn't know that this function is not supposed to support recursion. I think this function is good suited when (java) regex fail in matching already replaced part of string and hence it shouldn't be dicouraged to use this function as a solution imho.",16/Mar/11 04:00;bayard;At the very least the exception could explain what the problem is rather than what the state of an obscure private variable is.,"27/Jul/11 05:43;bayard;Digging into this, the search should have been:

""aaa""
""aXaa""
""aXaXa""

Which is hardly the deepest loop.

The TTL would have been 1, ie) the length of the inputted String[] { ""aXa"" }.

I wonder if the issue is that TTL needs to be longer (which is what qed did by adding extra """"s).","27/Jul/11 05:56;bayard;For this regexp; and I suspect it's the worst, yet vaguely sane, case; the TTL would have needed to have been text.length() - 1. For large text that's going to offer no protection against StackOverflowError. Options would seem to be:

1) Leave as is, improve IllegalStateException message (and update in javadoc which says IllegalArgumentException).
2) Stop protecting against StackOverflowError.
3) Increase the size by a marginal, yet arbitrary, amount.

I'm going to continue to go with #1.","27/Jul/11 06:35;bayard;Improved error message added (I hope):

""Output of one loop is the input of another; protecting from potential StackOverflowError""

I think there is value in #3 above as well. Some arbitrarily small number to be a minimum TTL. ","27/Jul/11 08:55;sebb@apache.org;The message is ambiguous; protecting could refer to the first part of the sentence rather than the exception itself.

How about

""Aborting to protect against StackOverflowError - output of one loop is the input of another""","27/Jul/11 14:50;qed;> output of one loop is the input of another
And that's a problem? That's how grammars are working. I don't think that this function should prevent such behaviour (ie. output of one loop should be allowed to be input of another loop).","28/Jul/11 22:23;bayard;Sebb: I've changed to your suggested text (r1152021).

qed: Not disagreeing. For 3.0.1, improving the error message to avoid your 'WTF???' is an improvement. Whether we simply strip out the TTL code and let the StackOverflowError happen is another question. My personal feeling is in line with yours (I think). That is - ""let it happen"".","02/Aug/11 07:22;bayard;Moving to 3.0.2. Note that the error message was improved and javadoc Exceptions fixed in 3.0.1. When resolving, make 3.0.1 a fix version as well.","03/Apr/12 20:42;tn;I have worked on this a bit and provide a patch that does the following:

 * refactor the replaceEach method to avoid code duplication
 * change loop detection code

Instead of using a timeToLive variable that tries to detect infinite loops, I used a quite simple but effective method:

Whenever at the end of a replace cycle we end up having a result string that has already be seen so far, we have possibly detected an infinite loop and thus abort the execution (with an exception as before).

I have also added two additional unit test cases.

Edit:

The new loop detection code does not prevent stackoverflow exceptions of course. But as others have pointed out, just let it happen (it is anyway very unlikely to occur, need to come up with a test case for it somehow). I would prefer correct behavior in normal cases, and a robust loop detection for recursive/weird cases.",,,,,,,,,,,,,,,,,,,,
EqualsBuilder synchronizes on HashCodeBuilder,LANG-685,12500960,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,chsemrau,chsemrau,09/Mar/11 23:18,16/Oct/13 08:54,07/Apr/19 20:37,16/Mar/11 03:53,,,,,3.0,,lang.builder.*,,,0,,,,,,,,"EqualsBuilder synchronizes on HashCodeBuilder.class for updates to its own threadlocal REGISTRY variable. While this should not lead to malfunction, it looks like a copy&paste oversight.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-16 03:53:38.079,,,false,,,,,,,,,,,,,,147489,,,Wed Mar 16 03:53:38 UTC 2011,,,,,,0|i0d5iv:,74671,,,,,,,,"16/Mar/11 03:53;bayard;Thanks Christian.

svn ci -m ""Fixing LANG-685 so that EqualsBuilder synchronizes on itself and not HashCodeBuilder""
Sending        src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
Sending        src/site/changes/changes.xml
Sending        src/site/xdoc/upgradeto3_0.xml
Transmitting file data ...
Committed revision 1082042.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
The StringUtils.concat methods duplicate the existing join methods,LANG-683,12500400,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,scolebourne,scolebourne,04/Mar/11 06:15,08/Mar/11 05:34,07/Apr/19 20:37,08/Mar/11 05:34,,,,,3.0,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,LANG-396,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-08 05:34:17.847,,,false,,,,,,,,,,,,,,147488,,,Tue Mar 08 05:34:17 UTC 2011,,,,,,0|i0d5j3:,74672,,,,,,,,"08/Mar/11 05:34;bayard;svn ci -m ""Dropping the concat methods. Moving the join(Object[]) to join(Object...). LANG-396. LANG-683. ""
Sending        src/main/java/org/apache/commons/lang3/StringUtils.java
Sending        src/test/java/org/apache/commons/lang3/StringUtilsTest.java
Transmitting file data ..
Committed revision 1079173.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Public constants on StringEscapeUtils do not have javadoc,LANG-682,12500399,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,scolebourne,scolebourne,04/Mar/11 06:14,08/Mar/11 05:20,07/Apr/19 20:37,08/Mar/11 05:20,,,,,3.0,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-08 05:20:31.256,,,false,,,,,,,,,,,,,,147487,,,Tue Mar 08 05:20:31 UTC 2011,,,,,,0|i0d5jb:,74673,,,,,,,,"08/Mar/11 05:20;bayard;svn ci -m ""Adding Javadoc to public constants - LANG-682""
Sending        src/main/java/org/apache/commons/lang3/StringEscapeUtils.java
Transmitting file data .
Committed revision 1079169.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.startsWithIgnoreCase whrong documentation,LANG-679,12500156,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,newfield,newfield,02/Mar/11 08:36,11/Apr/11 20:46,07/Apr/19 20:37,03/Mar/11 23:55,2.4,,,,,,lang.*,,,0,,,,,,,,Examples within JavaDoc misleads about parameters - according to examples the string and the prefix misplaced.,,,,,,,,,,,,,,LANG-460,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-03-03 04:32:48.861,,,false,,,,,,,,,,,,,,147485,,,Thu Mar 03 23:55:30 UTC 2011,,,,,,0|i0d5jj:,74674,,,,,,,,"03/Mar/11 04:32;bayard;Do you mean these examples?

 StringUtils.startsWithIgnoreCase(null, null)      = true
 StringUtils.startsWithIgnoreCase(null, ""abc"")     = false
 StringUtils.startsWithIgnoreCase(""abcdef"", null)  = false
 StringUtils.startsWithIgnoreCase(""abcdef"", ""abc"") = true
 StringUtils.startsWithIgnoreCase(""ABCDEF"", ""abc"") = true

If so, what's wrong with them?","03/Mar/11 15:40;newfield;No, I'm meaning these:

StringUtils.startsWithIgnoreCase(null, null)      = true
StringUtils.startsWithIgnoreCase(null, ""abcdef"")  = false
StringUtils.startsWithIgnoreCase(""abc"", null)     = false
StringUtils.startsWithIgnoreCase(""abc"", ""abcdef"") = true
StringUtils.startsWithIgnoreCase(""abc"", ""ABCDEF"") = true

That can be found in version 2.4
As I understand this is fixed in more recent version, so it's can be closed ?",03/Mar/11 23:55;niallp;Duplicates LANG-460 fixed in Lang 2.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtils.isSameLocalTime does not work correct,LANG-677,12497472,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,chrisatpinguin,chrisatpinguin,02/Feb/11 15:08,16/Oct/13 09:01,07/Apr/19 20:37,03/Mar/11 04:35,,,,,2.7,3.0,lang.time.*,,,0,,,,,,,,"Hi, I think I found a bug in the DateUtils class in the method isSameLocalTime.

Example: 
Calendar a = Calendar.getInstance();
a.setTimeInMillis(1297364400000L);

Calendar b = Calendar.getInstance();
b.setTimeInMillis(1297321200000L);

Assert.assertFalse(DateUtils.isSameLocalTime(a, b));

This is because the method compares 
cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) 

but I think it has to be 
cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)


	","linux 2.6.32-28, java version ""1.6.0_22""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-03 05:23:26.241,,,false,,,,,,,,,,,,,,34110,,,Thu Feb 03 05:23:26 UTC 2011,,,,,,0|i0d5jr:,74675,,,,,,,,"03/Feb/11 05:23;bayard;Looks like Niall fixed this.

r1066645 | niallp | 2011-02-02 13:55:15 -0800 (Wed, 02 Feb 2011) | 1 line
Changed paths:
   M /commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/time/DateUtils.java
   M /commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java

LANG-677 DateUtils isSameLocalTime() compares the hour using 12hour Calendar.HOUR instead of 24hour Calendar.HOUR_OF_DAY - thanks to Christian
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Potential Autoboxing problems with BooleanUtils methods,LANG-676,12497425,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,bayard,bayard,02/Feb/11 05:44,06/Feb/11 06:58,07/Apr/19 20:37,03/Feb/11 05:17,,,,,3.0,,,,,0,,,,,,,,"FindBugs points out the following are bad:

org.apache.commons.lang3.BooleanUtils.toBooleanObject(String, String, String, String)
org.apache.commons.lang3.BooleanUtils.toBooleanObject(String
org.apache.commons.lang3.BooleanUtils.toBooleanObject(Integer, Integer, Integer, Integer)
org.apache.commons.lang3.BooleanUtils.toBooleanObject(Integer)
org.apache.commons.lang3.BooleanUtils.toBooleanObject(int, int, int, int)
org.apache.commons.lang3.BooleanUtils.negate(Boolean)

For each case it's because the method returns Boolean, and returns null. That used to be a feature, but apparently that plays merry havoc with autoboxing:

++NP: Method with Boolean return type returns explicit null (NP_BOOLEAN_RETURN_NULL)

++A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException. 

The only solution imo is to let autoboxing do its job and remove these methods.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-02-02 06:38:44.251,,,false,,,,,,,,,,,,,,147483,,,Sun Feb 06 06:58:22 UTC 2011,,,,,,0|i0d5jz:,74676,,,,,,,,"02/Feb/11 06:38;pbenedict;I think this issue is invalid. There's nothing wrong with methods that return Boolean objects, which could be null. The method, after all, is toBooleanObject. An object can be null.","02/Feb/11 07:13;bayard;
So it's someone's own fault if they do the following?

  boolean b = BooleanUtils.toBooleanObject(3, 1, 2, 3);
",02/Feb/11 07:16;pbenedict;Absolutely.,"03/Feb/11 05:17;bayard;No other comments, so I'll close this as wontfix.",03/Feb/11 12:02;sebb@apache.org;Could perhaps add a short note to the Javadoc warning about the possible behaviour under autoboxing?,"06/Feb/11 06:58;bayard;svn ci -m ""Adding note on potential NPE if autoboxing occurs per LANG-676""
Sending        src/main/java/org/apache/commons/lang3/BooleanUtils.java
Transmitting file data .
Committed revision 1067606.
",,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils and decimal point character,LANG-674,12497147,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,bayard,bayard,30/Jan/11 03:43,16/Nov/14 15:39,07/Apr/19 20:37,,,,,,Patch Needed,,lang.math.*,,,1,,,,,,,,"Stevo Slavić reports on commons-user:

Is there any valid reason why '.' is hardcoded as decimal point
character in lang.math.NumberUtils, commons-lang (2.6) ? Shouldn't
this be locale dependent?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-30 09:03:31.279,,,false,,,,,,,,,,,,,,3004,,,Sun Nov 16 15:39:12 UTC 2014,,,,,,0|i0b5pr:,63038,,,,,,,,"30/Jan/11 09:03;scolebourne;NumberUtils should match Java source code, which requires a dot.","30/Jan/11 18:38;sslavic;With plain Java I can parse String number representations with either dot or comma as decimal point character depending on locale, but not with commons-lang 2.6 lang.math API. See java.text.NumberFormat, java.text.DecimalFormatSymbols.decimalSeparator.

E.g.

NumberFormat.getNumberInstance(Locale.US).parse(sPrice)

will properly handle price string with dot as decimal point character for US locale while

NumberFormat.getNumberInstance(new Locale(""nl"")).parse(sPrice);

will properly handle price string with comma as decimal point character for Dutch locale.
","03/Sep/11 21:09;bentels;I have to say I agree with Stevo that something is rotten in the state of Denmark with this one. True, what exactly is wrong depends on your point of view, but it is definitely something.

If, as Stephen says, the semantics of NumberUtils should match those of Java sourcecode, then the simple problem is that the documentation on the methods in NumberUtils doesn't SAY that. Or otherwise doesn't say that you're supposed to use input formatted according to the en_US locale.

From a different point of view, the (larger) problem may indeed be that the NumberUtils methods do not take locale into account. In the nl locale, as Stevo says, the value ""123,4"" is a valid number equivalent to 1234/10.

Perhaps a good solution is to do both: overload all the methods that take String arguments to take a Locale argument as well, then put in the documentation that the existing methods implicitly use locale en_US.","17/Oct/13 08:23;bayard;Provided it doesn't balloon the source + API, I like Ben's solution. Improve documentation and provide the Locale option.","30/Oct/14 10:29;mtruchado;Hi

I was hit yesterday by this issue. As today the docummentation is:

--
public static boolean isNumber(String str)

Checks whether the String a valid Java number.

Valid numbers include hexadecimal marked with the 0x qualifier, scientific notation and numbers marked with a type qualifier (e.g. 123L).
--

It might be useful to add a hint warning about the use of locales and this class do not play well together. A NumberUtils that supports locale would be an excellent feature, play with parsing/unparsing requires ugly code taking care of checked exceptions and so on.
","16/Nov/14 15:39;sebb@apache.org;One might say that isNumber uses the 'Java' Locale.
AFAIK Java does not allow anything other than ""."" as the decimal point marker.

However, I agree that other methods in the class might benefit from Locale-specific versions.
And the ones that assume a specific Locale should say so.",,,,,,,,,,,,,,,,,,,,,,,,,
Doc bug in DateUtils#ceiling,LANG-672,12495796,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,pihentagy,pihentagy,17/Jan/11 15:29,18/Apr/12 05:10,07/Apr/19 20:37,23/Jan/11 05:25,2.5,,,,3.0,,,,,0,,,,,,,,"{quote}{noformat}For example, if you had the datetime of 28 Mar 2002
     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
     * 2002 13:00:00.000.  If this was passed with MONTH, it would
     * return 1 Mar 2002 0:00:00.000. {noformat}{quote}

Looks like copy-paste from truncate. (the dates are incorrect)",,,600,600,,0%,600,600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-22 08:29:06.514,,,false,,,,,,,,,,,,,,147482,,,Sun Jan 23 05:25:34 UTC 2011,,,,,,0|i0d5k7:,74677,,,,,,,,22/Jan/11 08:29;bayard;Confirmed - need to fix the javadoc and add unit tests to be doubly sure that the examples are good.,"23/Jan/11 05:25;bayard;Thanks for noticing that Gergely.

svn ci -m ""Fixing javadoc for DateUtils.ceiling per LANG-672"" src/main/java/org/apache/commons/lang3/time/DateUtils.java src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java 
Sending        src/main/java/org/apache/commons/lang3/time/DateUtils.java
Sending        src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java
Transmitting file data ..
Committed revision 1062326.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils.stripEnd() using a '.' as an ""any"" character",LANG-666,12492755,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Invalid,,neodem,neodem,08/Dec/10 18:01,01/Jan/11 06:47,07/Apr/19 20:37,08/Dec/10 20:01,2.5,,,,,,lang.*,,,0,,,,,,,,"The documentation for stripEnd() indicates that the second parameter should be the string to stip from the end of the first paramater. This mostly works, but I think I found a case where it doesn't and that's when there is a period '.' character in the stripChars. It seems to be counting the period as a regex anychar. Example code :

		// trying to strip the cents from a dollar amount
		String result = StringUtils.stripEnd(""120.00"", "".00"");
		System.out.println(""Expected \""120\"", got \"""" + result + ""\"""");
		
		// maybe we should escape the dot?
		result = StringUtils.stripEnd(""120.00"", ""\\.00"");
		System.out.println(""Expected \""120\"", got \"""" + result + ""\"""");","JAVA 6, mac os X",,,,,,,,,,,,,,,,,,,,,,,,,08/Dec/10 18:02;neodem;StringUtilsTest.java;https://issues.apache.org/jira/secure/attachment/12465819/StringUtilsTest.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-12-08 20:01:09.296,,,false,,,,,,,,,,,,,,147477,,,Wed Dec 08 20:01:09 UTC 2010,,,,,,0|i0d5kf:,74678,,,,,,,,08/Dec/10 18:02;neodem;sample code,"08/Dec/10 20:01;sebb@apache.org;The second parameter is not a String - it is the *set* of characters to strip.

So StringUtils.stripEnd(""120.00"", "".00"") - which is the same as StringUtils.stripEnd(""120.00"", "".0"") - results in ""12"" because there is a ""0"" on the end.

However, StringUtils.stripEnd(""121.00"", "".0"") gives ""121"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NumberUtils.isNumber(String)  is not right when the String is ""1.1L""",LANG-664,12492580,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,cctvfly,cctvfly,07/Dec/10 05:29,01/Jan/11 06:57,07/Apr/19 20:37,01/Jan/11 06:57,,,,,3.0,,lang.math.*,,,0,,,,,,,,"""1.1L""  is not a Java Number . but NumberUtils.isNumber(String) return true.

perhaps change:
{code:java}
            if (chars[i] == 'l'
                || chars[i] == 'L') {
                // not allowing L with an exponent
                return foundDigit && !hasExp;
            }
{code}
to:
{code:java}
            if (chars[i] == 'l'
                || chars[i] == 'L') {
                // not allowing L with an exponent
                return foundDigit && !hasExp && !hasDecPoint;
            }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-01 06:57:18.884,,,false,,,,,,,,,,,,,,34044,,,Sat Jan 01 06:57:18 UTC 2011,,,,,,0|i0d5kn:,74679,,,,,,,,"01/Jan/11 06:57;bayard;Thanks - that's exactly the fix I applied :)

svn ci -m ""Fixing NumberUtils.isNumber so that 1.1L is not considered a number. LANG-664""
Sending        src/main/java/org/apache/commons/lang3/math/NumberUtils.java
Sending        src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
Transmitting file data ..
Committed revision 1054202.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
org.apache.commons.lang3.math.Fraction does not always succeed in multiplyBy and divideBy,LANG-663,12492558,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,chsemrau,chsemrau,06/Dec/10 23:15,17/Jan/11 04:13,07/Apr/19 20:37,17/Jan/11 04:13,3.0,,,,3.0,,lang.math.*,,,0,,,,,,,,"The Fraction.multiplyBy and divideBy methods fail sometimes when the arguments are not reduced.

{code:title=FunctionTest.java|borderStyle=solid}
    public void testMultiply() {
        // ...
        f1 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
        f2 = Fraction.getFraction(42, 1);
        f = f1.multiplyBy(f2);
        assertEquals(42, f.getNumerator());
        assertEquals(1, f.getDenominator());

    public void testDivide() {
        // ...
        f1 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
        f2 = Fraction.getFraction(42, 1);
        f = f1.divideBy(f2);
        assertEquals(1, f.getNumerator());
        assertEquals(42, f.getDenominator());
{code}
",,,,,,,,,,,,,,MATH-251,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-01 07:13:10.805,,,false,,,,,,,,,,,,,,147475,,,Mon Jan 17 04:13:06 UTC 2011,,,,,,0|i0d5kv:,74680,,,,,,,,"06/Dec/10 23:16;chsemrau;These methods fail to reduce their arguments. This may be due to the commons-math Fraction (which seems to be the source) is always in reduced form. But commons-lang Fraction is not always reduced, and so multiplyBy must reduce its arguments, before cross-reducing the two arguments.
","06/Dec/10 23:23;chsemrau;Even if both arguments are reduced, if the divisor has numerator Integer.MIN_VALUE, divideBy may fail despite the quotient being representable with positive denominator.

{code:title=FractionTest.java|borderStyle=solid}
    public void testDivide() {
        // ...
        f1 = Fraction.getFraction(2, 3);
        f2 = Fraction.getFraction(Integer.MIN_VALUE, 3);
        f = f1.divideBy(f2);
        assertEquals(-1, f.getNumerator());
        assertEquals(-Integer.MIN_VALUE / 2, f.getDenominator());
{code} 
","01/Jan/11 07:13;bayard;Effectively the same issue as MATH-251. In Commons Math they added a BigFraction that doesn't overflow. Our options would seem to be:

* Dump Fraction and recommend Math.
* Add commentary to Fraction pointing towards Math and its BigFraction.
* Implement BigFraction.

I'm still in favour of dropping Fraction from Lang and sending people over to Commons Math.",01/Jan/11 19:28;bayard;Need to resolve before 3.0 release.,"03/Jan/11 09:20;chsemrau;I favor having only one Fraction class, preferably in Math.

In MATH-251, the solution to overflow is using a larger number range (BigInteger). This issue (LANG-663) and  LANG-662 mention spurious overflows that need not occur when using int: The overflows mentioned here can be avoided. Of course, there are many overflows that cannot be avoided, and therefore BigFraction was a valueable addition.","03/Jan/11 13:47;chsemrau;Oh, and seeing that method Fraction.addSub (both in Lang and Math) does all it can to ensure that spurious overflow is prevented (by using a BigInteger for an intermediate value), I wonder if the overflow of 2 / 3 divided by MIN_VALUE / 3 would be acceptable (in the Math version!), when it can be prevented too.","03/Jan/11 18:37;scolebourne;Commons Math is a specialist library, Lang is a general purpose one. Fraction is definitely a general purpose concept, and so shoudl remain in Lang. Of course any bugs should be fixed, but remembering the general-purpose, rather than mathematical, focus.",03/Jan/11 19:03;sebb@apache.org;I agree - Lang needs to keep its existing basic mathematical (mainly arithmetical) classes.,13/Jan/11 16:27;bayard;Resolution sounds like it'll be pointing to Math BigFraction in the javadoc of Lang Fraction.,"17/Jan/11 04:13;bayard;svn ci -m ""Adding note that this has overflow issues and pointing to BigFraction"" src/main/java/org/apache/commons/lang3/math/Fraction.java 
Sending        src/main/java/org/apache/commons/lang3/math/Fraction.java
Transmitting file data .
Committed revision 1059747.
",,,,,,,,,,,,,,,,,,,,,
"org.apache.commons.lang3.math.Fraction does not reduce (Integer.MIN_VALUE, 2^k)",LANG-662,12492553,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,chsemrau,chsemrau,06/Dec/10 22:40,17/Jan/11 04:30,07/Apr/19 20:37,17/Jan/11 04:30,3.0,,,,3.0,,lang.math.*,,,0,,,,,,,,"The greatestCommonDivisor method in class Fraction does not find the gcd of Integer.MIN_VALUE and 2^k, and this case can be triggered by taking Integer.MIN_VALUE as the numerator. Note that the case of taking Integer.MIN_VALUE as the denominator is handled explicitly in the getReducedFraction factory method.

{code:title=FractionTest.java|borderStyle=solid}
	// additional test cases
	public void testReducedFactory_int_int() {
		// ...
		f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
		assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());
		assertEquals(1, f.getDenominator());

	public void testReduce() {
		// ...
		f = Fraction.getFraction(Integer.MIN_VALUE, 2);
		result = f.reduce();
		assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());
		assertEquals(1, result.getDenominator());
{code} 
",,,,,,,,,,,,,,,,LANG-663,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-01 07:14:12.735,,,false,,,,,,,,,,,,,,34104,,,Mon Jan 17 04:30:27 UTC 2011,,,,,,0|i0d5l3:,74681,,,,,,,,"06/Dec/10 23:04;chsemrau;The current implementation:

{code:title=Fraction.java|borderStyle=solid}
    private static int greatestCommonDivisor(int u, int v) {
        //if either op. is abs 0 or 1, return 1:
        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {
            return 1;
        }
{code} 

The case u==0 || v==0 is already handled at the calling site (). So you might switch to testing for abs==1 only:

{code:title=Fraction.java|borderStyle=solid}
    private static int greatestCommonDivisor(int u, int v) {
    	// the case u==0 || v==0 is handled by the caller.
        // if either op. is abs 1, return 1:
        if (Math.abs(u) == 1 || Math.abs(v) == 1) {
            return 1;
        }
{code} 

Dropping this test altogether does not change correctness, but might influence performance. If you expect many fractions with numerator 1 or denominator 1, keep the test.
","01/Jan/11 07:14;bayard;See LANG-663. Commons Math solved this, as such, by adding a BigFraction. My suggestion is that we drop Fraction from Lang and point people towards Math's more in depth implementation.",01/Jan/11 19:28;bayard;Need to resolve before 3.0 release.,"03/Jan/11 14:02;chsemrau;The commons-math version does not have this overflow in its gcd implementation, and it can be easily prevented.
But as written in LANG-663, I'd drop the commons-lang Fraction class in favor of commons-math Fraction.
",13/Jan/11 16:27;bayard;Definitely fix then - general task here should be to examine Math Fraction for changes that need to be applied to Lang Fraction.,"17/Jan/11 04:30;bayard;svn ci -m ""Adding first method check from Math's MathUtils.gcd method; and unit tests showing that this was needed. Bug reported and solved by Christian Semrau [LANG-662]""
Sending        src/main/java/org/apache/commons/lang3/math/Fraction.java
Sending        src/test/java/org/apache/commons/lang3/math/FractionTest.java
Transmitting file data ..
Committed revision 1059749.
",,,,,,,,,,,,,,,,,,,,,,,,,
"EntityArrays typo: {""\u2122"", ""&minus;""}, // minus sign, U+2212 ISOtech",LANG-659,12479868,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,sebb@apache.org,sebb@apache.org,sebb@apache.org,13/Nov/10 15:54,08/Jun/11 16:09,07/Apr/19 20:37,13/Nov/10 16:54,3.0,,,,3.0,,lang.text.*,,,0,,,,,,,,"EntityArrays typo in HTML40_EXTENDED_ESCAPE: 

{noformat}
      {""\u2122"", ""&minus;""}, // minus sign, U+2212 ISOtech
{noformat}

should be

{noformat}
      {""\u2212"", ""&minus;""}, // minus sign, U+2212 ISOtech
{noformat}

as is obvious from the comment and the position in the list.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,71572,,,Sat Nov 13 16:54:37 UTC 2010,,,,,,0|i0d5lb:,74682,,,,,,,,13/Nov/10 16:54;sebb@apache.org;Fixed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Some Entitys like &Ouml; are not matched properly against its ISO8859-1 representation,LANG-658,12479866,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mkonietzka,mkonietzka,13/Nov/10 14:31,08/Jun/11 16:10,07/Apr/19 20:37,13/Nov/10 16:52,3.0,,,,3.0,,lang.text.translate.*,,,0,,,,,,,,"In EntityArrays 

In
 private static final String[][] ISO8859_1_ESCAPE 
some matching is wrong, for example
       
{noformat} 
        {""\u00D7"", ""&Ouml;""}, // Ö - uppercase O, umlaut
        {""\u00D8"", ""&times;""}, // multiplication sign
{noformat} 

but this must be   

{noformat} 
       {""\u00D6"", ""&Ouml;""}, // Ö - uppercase O, umlaut
        {""\u00D7"", ""&times;""}, // multiplication sign
{noformat} 

according to http://www.fileformat.info/info/unicode/block/latin_supplement/list.htm

First look:

u00CA is missing in the array and all following entries are matched wrong by an offset of 1.


Found on http://stackoverflow.com/questions/4172784/bug-in-apache-commons-stringescapeutil/4172915#4172915",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-13 16:09:03.034,,,false,,,,,,,,,,,,,,71571,,,Sat Nov 13 18:12:15 UTC 2010,,,,,,0|i0d5lj:,74683,,,,,,,,"13/Nov/10 16:09;sebb@apache.org;Later on, there are two instances of E5:

{noformat} 
        {""\u00E5"", ""&auml;""}, // ä - lowercase a, umlaut
        {""\u00E5"", ""&aring;""}, // å - lowercase a, ring
{noformat} 

The latter is correct, and subsequent entries seem OK.","13/Nov/10 16:16;sebb@apache.org;Another duplicate entry:

{noformat} 
        {""\u00F1"", ""&ntilde;""}, // ñ - lowercase n, tilde
        {""\u00F3"", ""&ograve;""}, // ò - lowercase o, grave accent
        {""\u00F3"", ""&oacute;""}, // ó - lowercase o, acute accent
{noformat} 

first F3 entry should be F2",13/Nov/10 16:52;sebb@apache.org;Now hopefully fixed.,"13/Nov/10 18:12;sebb@apache.org;Note: ran a check comparing the values agains the ones from lang2 Entities, and the two implementations now seem to agree",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Example StringUtils.indexOfAnyBut(""zzabyycdxx"", '') = 0 incorrect",LANG-656,12479355,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,dstarke@starke-net.de,dstarke@starke-net.de,08/Nov/10 08:55,01/Jan/11 06:47,07/Apr/19 20:37,08/Nov/10 15:20,2.5,,,,3.0,,lang.*,,,0,,,,,,,,"I recognized the following example in class StringUtils:
\\
{noformat}      StringUtils.indexOfAnyBut(""zzabyycdxx"", '') = 0
{noformat}

According to Niall Pembertons answer on the user mailing list (Oct, 27th 2010) I should report an issue on this.
He suggested the following replacement:

{noformat}      StringUtils.indexOfAnyBut(""zzabyycdxx"", """")   = -1
{noformat}

Regards,
Dirk",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-11-08 15:20:11.779,,,false,,,,,,,,,,,,,,147473,,,Mon Nov 08 15:20:11 UTC 2010,,,,,,0|i0d5lr:,74684,,,,,,,,08/Nov/10 15:20;ggregory@seagullsw.com;Fixed in trunk.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtils.truncate method is buggy when dealing with DST switching hours ,LANG-654,12477895,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,maximocapo,maximocapo,20/Oct/10 18:43,28/May/16 16:18,07/Apr/19 20:37,27/Sep/14 17:46,2.4,,,,,,lang.time.*,,,0,,,,,,,,"DateUtils.trucate() does not work properly with daylight saving time.
e.g.:

Date:  2010-10-10 05:16:14.0

DateUtils.truncate(date, Calendar.DATE) : Sun Oct 10 01:00:00 CLST 2010

Instead of showing 10/10/2010, it shows 10/10/2010 01:00:00



",Operating System: Linux Red Hat,,,,,,,,,,,,,,,LANG-59,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-17 03:11:25.222,,,false,,,,,,,,,,,,,,3008,,,Sat Sep 27 17:46:02 UTC 2014,,,,,,0|i0b5qn:,63042,,,,,,,,17/Jan/11 03:11;bayard;Assigning to 3.1 for investigation there. It's not blocking for 3.0.,"27/Sep/14 17:44;dmjones500;What's causing the confusion here  is that there *is* no Sun Oct 10 00:00:00 CLST 2010. The hour between midnight and 1am simply doesn't exist.The time changes immediately to Sun Oct 10 01:00:00 CLST 2010. So it's not possible to truncate the date on this particular date in the Chilean time zone.

In case you're wondering, Java handles this situation by parsing midnight as 1am:

{code:java}
TimeZone.setDefault(TimeZone.getTimeZone(""Chile/Continental""));
String dateString = ""2010-10-10 00:00:00.0"";
SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.S"");
Date date = sdf.parse(dateString);
System.out.println(date);
{code}

Output: {{Sun Oct 10 01:00:00 CLST 2010}}.

Consequently, I don't believe this is a bug.",27/Sep/14 17:46;dmjones500;Closing as an invalid report. Please comment again if you'd like to reopen this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.unescapeJava doesn't handle octal escapes and Unicode with extra u,LANG-646,12472194,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,polygenelubricants,polygenelubricants,22/Aug/10 17:46,17/Jan/11 05:35,07/Apr/19 20:37,17/Jan/11 05:35,2.5,,,,3.0,,lang.*,,,0,,,,,,,,"CODE TO REPRODUCE BUG:

{noformat}
System.out.println(""\45"");
// %
System.out.println(StringEscapeUtils.unescapeJava(""\\45""));
// 45, should be %

System.out.println(""\uu0030"");
// 0
System.out.println(StringEscapeUtils.unescapeJava(""\\uu0030""));
// throws NestableRuntimeException:
{noformat}

This is not compliant with the JLS, which allows both [OctalEscape] and extraneous u for [UnicodeMarker] in Java string literal.

REFERENCES:

3.10.6 Escape Sequences for Character and String Literals
http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.10.6

3.3 Unicode Escapes
http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.3

EXTERNAL LINKS:

http://stackoverflow.com/questions/3537706/howto-unescape-a-java-string-literal-in-java/",Irrelevant,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-25 20:08:17.064,,,false,,,,,,,,,,,,,,34112,,,Mon Jan 17 05:35:23 UTC 2011,,,,,,0|i0d5lz:,74685,,,,,,,,"25/Aug/10 20:08;bayard;The 'uu' version isn't a problem in the current 3.0 codebase, that was added as a part of creating a UnicodeUnescaper.

The octal escape isn't handled though and needs to be added as a new Unescaper/Escaper pair in text translate.","08/Sep/10 06:38;bayard;Escaper is easy to write; unescaper is a bit of a pain. Ideally the generic unescaper would know how to escape '\\510' happily, but Java adds the constraints of a max of 377, leading to that being inferred as '\\51' + '0'. Thus the unescaper needs to have a configurable range, and as it plucks numbers off the text it needs to check if has gone beyond the maximum size.
","08/Sep/10 11:55;polygenelubricants;By the way Henri, the double backslashes in your comment are rendered as newlines somehow. I also had the same problem with the original bug report before I figured out how to quote codes. This is a bug in the bug tracking system rendered, it seems.

Let's reproduce this again \\ there you go.","17/Jan/11 05:35;bayard;svn ci -m ""Adding an OctalUnescaper to handle Java's support of 1->377 Octal values. LANG-646""
Sending        src/main/java/org/apache/commons/lang3/StringEscapeUtils.java
Adding         src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java
Adding         src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java
Transmitting file data ...
Committed revision 1059753.

I didn't see much point in an OctalEscaper, so I didn't bother adding that. When escaping Java, we wouldn't know to escape a particular character to Octal for the aesthetic value.

It also only supports Java's 1->377 octal range; this is because Integer.parseInt(..., 8) only supports that. I didn't see any point in trying to do better than that given that the use case is primarily for Java at the moment.",,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat.format() outputs incorrect week of year because locale isn't respected,LANG-645,12472098,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,muv,muv,20/Aug/10 14:11,08/Sep/10 06:10,07/Apr/19 20:37,08/Sep/10 06:10,2.5,,,,3.0,,lang.time.*,,,0,,,,,,,,"FastDateFormat apparently doesn't respect the locale it was sent on creation when outputting week in year (e.g. ""ww"") in format(). It seems to use the settings of the system locale for firstDayOfWeek and minimalDaysInFirstWeek, which (depending on the year) may result in the incorrect week number being output.

Here is a simple test program to demonstrate the problem by comparing with SimpleDateFormat, which gets the week number right:
{code}
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.text.SimpleDateFormat;

import org.apache.commons.lang.time.FastDateFormat;

public class FastDateFormatWeekBugDemo {
    public static void main(String[] args) {
        Locale.setDefault(new Locale(""en"", ""US""));
        Locale locale = new Locale(""sv"", ""SE"");

        Calendar cal = Calendar.getInstance(); // setting locale here doesn't change outcome
        cal.set(2010, 0, 1, 12, 0, 0);
        Date d = cal.getTime();
        System.out.println(""Target date: "" + d);

        FastDateFormat fdf = FastDateFormat.getInstance(""EEEE', week 'ww"", locale);
        SimpleDateFormat sdf = new SimpleDateFormat(""EEEE', week 'ww"", locale);
        System.out.println(""FastDateFormat:   "" + fdf.format(d)); // will output ""FastDateFormat:   fredag, week 01""
        System.out.println(""SimpleDateFormat: "" + sdf.format(d)); // will output ""SimpleDateFormat: fredag, week 53""
    }
}
{code}
If sv/SE is passed to Locale.setDefault() instead of en/US, both FastDateFormat and SimpleDateFormat output the correct week number.
","Ubuntu 10.04
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) 64-Bit Server VM (build 16.3-b01, mixed mode)
Commons Lang 2.5",,,,,,,,,,,,,,,,,,,,,,,,,08/Sep/10 06:08;bayard;LANG-645.patch;https://issues.apache.org/jira/secure/attachment/12454075/LANG-645.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-09-08 06:08:01.164,,,false,,,,,,,,,,,,,,34041,,,Wed Sep 08 06:10:03 UTC 2010,,,,,,0|i0d5m7:,74686,,,,,,,,"08/Sep/10 06:08;bayard;Confirmed. The issue looks to be that when creating the GregorianCalendar in format(Date), the locale is not passed. ","08/Sep/10 06:10;bayard;svn ci -m ""Applying my fix to LANG-645, and Mikael's test case; fixing the FastDateFormat to properly include the locale when formatting a Date""
Sending        src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
Sending        src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
Transmitting file data ..
Committed revision 993620.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Javadoc StringUtils.left() claims to throw on negative len, but doesn't",LANG-643,12471555,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,vgl,vgl,13/Aug/10 14:52,29/Aug/10 22:39,07/Apr/19 20:37,29/Aug/10 22:39,2.5,3.0,,,3.0,,lang.*,,,0,,,,,,,,"The Javadoc comment for StringUtils.left() claims to throw an exception ""if len is negative"" (and that input argument len ""must be zero or positive""):

http://commons.apache.org/lang/api/org/apache/commons/lang3/StringUtils.html#left(java.lang.String,%20int)
http://commons.apache.org/lang/api-2.5/org/apache/commons/lang/StringUtils.html#left(java.lang.String,%20int)

{quote}public static String left(String str, int len)

    Gets the leftmost len characters of a String.

    If len characters are not available, or the String is null, the String will be returned without an exception. {color:red}An exception is thrown if len is negative.{color}

     StringUtils.left(null, *)    = null
     StringUtils.left(*, -ve)     = """"
     StringUtils.left("""", *)      = """"
     StringUtils.left(""abc"", 0)   = """"
     StringUtils.left(""abc"", 2)   = ""ab""
     StringUtils.left(""abc"", 4)   = ""abc""

    Parameters:
        str - the String to get the leftmost characters from, may be null
        len - the length of the required String, {color:red}must be zero or positive{color}
    Returns:
        the leftmost characters, null if null String input{quote}

But it  doesn't. (Luckily and preferably anyway :-).)
Instead an empty string will be returned. (Which is good.) As is seen from the implementation code ...

{code}........
        if (len < 0) {
            return EMPTY;
        }
        ...{code}

..., and by example, too:

{code}$ cat StringUtilsTest.java
import org.apache.commons.lang.StringUtils;

public final class StringUtilsTest {
    public static void main(final String[] args) {
        final String result = StringUtils.left(""foobar"", -42);
        System.out.println("">"" + result + ""<"");
    }
}

$ javac -classpath commons-lang.jar StringUtilsTest.java

$ java -classpath .:commons-lang.jar StringUtilsTest
><{code}

The Javadoc comment should be updated.

Same issue for right() and mid(), by the way.

Volker Glave",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-25 20:00:46.16,,,false,,,,,,,,,,,,,,34062,,,Sun Aug 29 22:39:13 UTC 2010,,,,,,0|i0d5mf:,74687,,,,,,,,25/Aug/10 20:00;bayard;Thanks Volker. The javadoc has been fixed in svn.,"26/Aug/10 09:52;vgl;Thanks ... and now for a little nitpicking (sorry):

As mentioned before the javadoc for param ""len"" still is a bit overly strict:
""len - the length of the required String{color:red}, must be zero or positive{color}""

Since it must not, as discussed.

Again: left(), right() and mid().

V.","29/Aug/10 22:39;bayard;Please, nit pick away :)

Text deleted in r990663.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Maven build failing --Two Junit test cases in ArrayUtilsTest giving Error,LANG-641,12471034,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,shekhargulati,shekhargulati,07/Aug/10 10:40,16/Oct/13 08:54,07/Apr/19 20:37,07/Aug/10 12:07,,,,,3.0,,lang.*,,,0,,,,,,,,"Two unit test in ArrayUtilsTest are giving error hence the build is failing.
-------------------------------------------------------------------------------
Test set: org.apache.commons.lang3.ArrayUtilsTest
-------------------------------------------------------------------------------
Tests run: 145, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.067 sec <<< FAILURE!
testEmptyArrayCreation(org.apache.commons.lang3.ArrayUtilsTest)  Time elapsed: 0.003 sec  <<< ERROR!
java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;
	at org.apache.commons.lang3.ArrayUtilsTest.testEmptyArrayCreation(ArrayUtilsTest.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)

testIndirectEmptyArrayCreation(org.apache.commons.lang3.ArrayUtilsTest)  Time elapsed: 0 sec  <<< ERROR!
java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;
	at org.apache.commons.lang3.ArrayUtilsTest.testIndirectEmptyArrayCreation(ArrayUtilsTest.java:193)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)



",Windows Vista ,,900,900,,0%,900,900,,,,,,,,,,,,,,,,,,07/Aug/10 10:48;shekhargulati;patch_Issue-641-ArrayUtilsTest_Failure.txt;https://issues.apache.org/jira/secure/attachment/12451497/patch_Issue-641-ArrayUtilsTest_Failure.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-08-07 12:07:16.222,,,false,,,,,,,,,,,,,,147465,,,Sat Aug 07 12:07:16 UTC 2010,,,,,,0|i0d5mn:,74688,,,,,,,,07/Aug/10 10:48;shekhargulati;I have fixed the problem you can apply the patch attached with this issue. Test was failing because it was not specifying the type to be used while creating an empty generic array.,07/Aug/10 12:07;jwcarman;I've made the changes.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Compile error using ArrayUtils.add,LANG-639,12470784,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,zgu@ucdavis.edu,zgu@ucdavis.edu,04/Aug/10 03:39,04/Aug/10 12:26,07/Apr/19 20:37,04/Aug/10 05:32,2.5,,,,,,,,,0,,,,,,,,"Hi,

Sorry for bothering. I've googled it but cannot find the solution. I am new to commons.lang. 

I tried to use ArrayUtils.add(arrString, aString); but got the following compile error. (Here arrString is a type of String[], and aString type of String)

incompatible types
found   : java.lang.Object[]
required: java.lang.String[]
String[] sa = ArrayUtils.add(arrString, aString); 

I've also tried other types. All have this compile error. I don't know why. 

Thanks.

Best

Zhongxian
",jdk 6,,86400,86400,,0%,86400,86400,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-08-04 12:26:31.091,,,false,,,,,,,,,,,,,,147463,,,Wed Aug 04 12:26:31 UTC 2010,,,,,,0|i0d5mv:,74689,,,,,,,,04/Aug/10 05:32;zgu@ucdavis.edu;Sorry about that. My bad. I found the problem. ,"04/Aug/10 12:26;jwcarman;For issues such as this, please use commons user email list (http://commons.apache.org/lang/mail-lists.html) for support.  If we determine that there is a true bug/issue with the code, we'll urge you to open up a JIRA.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NumberUtils createNumber throws a StringIndexOutOfBoundsException when argument containing ""e"" and ""E"" is passed in",LANG-638,12470639,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,iheinrich,iheinrich,02/Aug/10 10:59,03/Aug/10 04:45,07/Apr/19 20:37,03/Aug/10 04:42,2.5,,,,3.0,,lang.math.*,,,0,,,,,,,,"NumberUtils createNumber throws a StringIndexOutOfBoundsException instead of NumberFormatException when a String containing both possible exponent indicators is passed in.
One example of such a String is ""1eE"".
",,,,,,,,,,,,,,,,,,,,,,,,,,02/Aug/10 11:00;iheinrich;NumberUtils.java.patch;https://issues.apache.org/jira/secure/attachment/12451032/NumberUtils.java.patch,02/Aug/10 11:05;iheinrich;NumberUtilsTest.java.patch;https://issues.apache.org/jira/secure/attachment/12451033/NumberUtilsTest.java.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-08-03 04:42:17.967,,,false,,,,,,,,,,,,,,34132,,,Tue Aug 03 04:42:17 UTC 2010,,,,,,0|i0d5n3:,74690,,,,,,,,02/Aug/10 11:00;iheinrich;Patch proposal fixing the bug.,02/Aug/10 11:05;iheinrich;Patch to NumberUtilsTest.java for bug reproduction.,"03/Aug/10 04:42;bayard;svn ci -m ""Making it so that NumberUtils.createNumber throws a NumberFormatException instead of a StringIndexOutOfBoundsException when Strings such as 1eE are passed in. Thanks to Ingo Heinrich's report and patch in LANG-638""
Sending        src/main/java/org/apache/commons/lang3/math/NumberUtils.java
Sending        src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
Transmitting file data ..
Committed revision 981736.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
text.ExtendedMessageFormat doesn't override java.text.MessageFormat.equals(Object),LANG-636,12469802,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,niallp,sebb@apache.org,sebb@apache.org,21/Jul/10 10:55,03/Feb/11 05:26,07/Apr/19 20:37,11/Jan/11 00:28,,,,,2.6,,lang.text.*,,,0,,,,,,,,"Findbugs:

Bug: org.apache.commons.lang3.text.ExtendedMessageFormat doesn't override java.text.MessageFormat.equals(Object)
Pattern id: EQ_DOESNT_OVERRIDE_EQUALS, type: Eq, category: STYLE

This class extends a class that defines an equals method and adds fields, but doesn't define an equals method itself. Thus, equality on instances of this class will ignore the identity of the subclass and the added fields. Be sure this is what is intended, and that you don't need to override the equals method. Even if you don't need to override the equals method, consider overriding it anyway to document the fact that the equals method for the subclass just return the result of invoking super.equals(o). 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-17 05:06:49.2,,,false,,,,,,,,,,,,,,34061,,,Tue Jan 11 00:28:11 UTC 2011,,,,,,0|i0d5nb:,74691,,,,,,,,17/Sep/10 05:06;bayard;Do you have a specific solution in mind?,11/Jan/11 00:28;niallp;Fixed in the trunk and 2.x branch,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"CompareToBuilder.reflectionCompare(Object lhs, Object rhs, boolean compareTransients, Class reflectUpToClass) ignores third parameter",LANG-635,12469702,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,radkiewicz,radkiewicz,20/Jul/10 10:02,20/Jul/10 18:11,07/Apr/19 20:37,20/Jul/10 18:11,2.5,,,,3.0,,lang.builder.*,,,0,,,,,,,,"The parameter ""compareTransients"" is ignored and false is always used, as a short look in the code shows:

{quote}
    return reflectionCompare(lhs, rhs, false, reflectUpToClass, null);
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-20 18:11:17.362,,,false,,,,,,,,,,,,,,147462,,,Tue Jul 20 18:11:17 UTC 2010,,,,,,0|i0d5nj:,74692,,,,,,,,"20/Jul/10 18:11;bayard;Thanks Robert. I've fixed that line to pass the compareTransients along:


svn ci -m ""Fixing the pass along of compareTransients to the reflectionCompare method as identified by Robert Radkiewicz in LANG-635""
Sending        src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
Transmitting file data .
Committed revision 965941.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.isNumeric returns false on negative value,LANG-634,12469325,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,ajmoraal,ajmoraal,15/Jul/10 07:23,15/Jul/10 11:34,07/Apr/19 20:37,15/Jul/10 11:32,2.2,,,,,,lang.*,,,0,,,,,,,,"StringUtils.isNumeric returns false for negative values.

So this unit test line will break the test:

		assertTrue(StringUtils.isNumeric(""-1""));
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-15 11:32:28.244,,,false,,,,,,,,,,,,,,147461,,,Thu Jul 15 11:34:33 UTC 2010,,,,,,0|i0d5nr:,74693,,,,,,,,"15/Jul/10 11:32;jwcarman;Check the javadocs:

""Checks if the String contains only unicode digits.""

This is not a bug.",15/Jul/10 11:34;jwcarman;Try NumberUtils.isNumber().,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils JavaDoc contains erroneous examples,LANG-631,12468545,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,maxxyme,maxxyme,05/Jul/10 09:29,06/Jul/10 07:30,07/Apr/19 20:37,06/Jul/10 07:28,2.5,3.0,,,3.0,,lang.*,,,0,,,,,,,,"For the method: static int 	lastIndexOf(String str, String searchStr) 

@
(v2.5): http://commons.apache.org/lang/api-release/org/apache/commons/lang/StringUtils.html#lastIndexOf(java.lang.String,%20java.lang.String)
(v3.0): http://commons.apache.org/lang/api/org/apache/commons/lang3/StringUtils.html#lastIndexOf(java.lang.String,%20java.lang.String)

These results are wrong:
 StringUtils.lastIndexOf(""aabaabaa"", ""a"")  = 0
 StringUtils.lastIndexOf(""aabaabaa"", ""b"")  = 2
 StringUtils.lastIndexOf(""aabaabaa"", ""ab"") = 1

Correct values:
1st = 7
2nd = 5
3rd = 4",,,60,60,,0%,60,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-07-06 07:28:05.723,,,false,,,,,,,,,,,,,,34046,,,Tue Jul 06 07:28:05 UTC 2010,,,,,,0|i0d5nz:,74694,,,,,,,,"06/Jul/10 07:28;bayard;Current trunk had addressed this, but had transposed the 4 and 5 results. I've fixed that in r960831, namely:

     * StringUtils.lastIndexOf(""aabaabaa"", ""a"")  = 7
     * StringUtils.lastIndexOf(""aabaabaa"", ""b"")  = 5
     * StringUtils.lastIndexOf(""aabaabaa"", ""ab"") = 4
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
mutable.MutableObject defines equals(MutableObject) method and uses Object.equals(Object),LANG-630,12468340,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,01/Jul/10 09:52,18/Jul/10 05:54,07/Apr/19 20:37,18/Jul/10 05:54,,,,,3.0,,,,,0,,,,,,,,"FIndbugs:

mutable.MutableObject defines equals(MutableObject) method and uses Object.equals(Object)

This class defines a covariant version of the equals() method, but inherits the normal equals(Object) method defined in the base java.lang.Object class.  The class should probably define a boolean equals(Object) method. 
",,,,,,,,,,,,,,,,,,,,,,,,,,03/Jul/10 22:36;sparkspit;MutableObject-equals.txt;https://issues.apache.org/jira/secure/attachment/12448631/MutableObject-equals.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-07-03 16:51:21.654,,,false,,,,,,,,,,,,,,147458,,,Sun Jul 18 05:54:13 UTC 2010,,,,,,0|i0d5o7:,74695,,,,,,,,"03/Jul/10 16:51;sparkspit;It seems like the best option is replacing the equals(MutableObject) with equals(Object). It simplifies the code, refactors  to what most developers expect, and the minor overhead associated calling intanceof is worth the improvement in the code.

The equality check is very simple and the hashCode operation will not have to change. Just making sure I'm not missing something before I give this a go.","03/Jul/10 22:36;sparkspit;The attached patch file addresses this bug. MutableObject.equals(MutableObject) has been refactored to MutableObject.equals(Object). There are also some minor javadoc cleanups and a little more javadoc information has been added.

No changes to MutableObject.hashCode were necessary.

MutableObjectTest.java verifies that equals continues to work correctly and also that hashCode continues to work correctly. All unit tests ran successfully.","18/Jul/10 05:54;bayard;Thanks Sean.

svn ci -m ""Applying Sean Mickey's patch to LANG-630 such that MutableObject.equals is as would be expected. Now it directly overrides the equals(Object) method. "" src/main/java/org/apache/commons/lang3/mutable/
Sending        src/main/java/org/apache/commons/lang3/mutable/MutableObject.java
Transmitting file data .
Committed revision 965162.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Charset may not be threadsafe, because the HashSet is not synch.",LANG-629,12468338,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,01/Jul/10 09:38,17/Sep/10 07:18,07/Apr/19 20:37,17/Sep/10 07:18,,,,,3.0,,lang.*,,,0,,,,,,,,"Charset may not be threadsafe, because the HashSet ""set"" is not synch.

The set is only updated by the protected add() method, which is currently only used by the protected ctors.

Perhaps add() should be private?
This would prevent any changes to the set after construction, and might be sufficient to ensure safe publication between threads.

Alternatively, make the set synch, as is done for COMMON.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-09-17 07:18:23.465,,,false,,,,,,,,,,,,,,147457,,,Fri Sep 17 07:18:23 UTC 2010,,,,,,0|i0d5of:,74696,,,,,,,,"17/Sep/10 07:18;bayard;
I've gone with simply making the underlying set synchronized.

svn ci -m ""Per LANG-629, making the underlying set synchronized for CharSet""
Sending        src/main/java/org/apache/commons/lang3/CharSet.java
Transmitting file data .
Committed revision 998000.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc for HashCodeBuilder.append(boolean) does not match implementation.,LANG-628,12468074,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sparkspit,sparkspit,28/Jun/10 18:12,06/Jul/10 07:37,07/Apr/19 20:37,30/Jun/10 03:20,,,,,3.0,,lang.*,,,0,,,,,,,,"The Javadoc description for HashCodeBuilder.append(boolean) says that it ""adds iConstant * 1 to the hashCode,"" however, the code is actually:
iTotal = iTotal * iConstant + (value ? 0 : 1). It is probably just a typo, but it easy to correct.

And the reference to hashCode handling in java.lang.Boolean:  ""not a 1231 or 1237 as done in java.lang.Boolean"" could be clarified with more detail. Otherwise, it requires going to the java.lang Javadoc and finding the java.lang.Boolean.hashCode Javadoc description.


",,,3600,3600,,0%,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-06-30 03:20:29.275,,,false,,,,,,,,,,,,,,147456,,,Tue Jul 06 07:37:15 UTC 2010,,,,,,0|i0d5on:,74697,,,,,,,,"30/Jun/10 03:20;bayard;I've dropped the 'iConstant *' part. None of the other appends cover that. I've noted that you have to check the java.lang.Boolean javadoc for the 1231/1237 part - I'm not sure what other detail could be offered; feel free to propose anything if you can think of what you'd like to see there.

I've added the following to the class javadoc:

+ * The following is the approach taken. When appending a data field, the current total is multiplied by the 
+ * multiplier then a relevant value 
+ * for that data type is added. For example, if the current hashCode is 17, and the multiplier is 37, then 
+ * appending the integer 45 will create a hashcode of 674, namely 17 * 37 + 45. 

Please reopen if you think more should be done.

","04/Jul/10 00:48;sparkspit;Here is a copy of the javadoc I included in the hashCode patch I created for LANG-411 to include information about the java.lang.Boolean handling:

<p>
* This is in contrast to out-of-the-box <code>java.lang.Boolean.hashCode</code> handling, which computes
* a <code>hashCode</code> value of <code>1231</code> for <code>java.lang.Boolean</code> instances
* that represent <code>true</code> or <code>1237</code> for <code>java.lang.Boolean</code> instances
* that represent <code>false</code>.
* </p>

It doesn't seem to warrant reopening the issue, however, if you agree that this added javadoc is useful, I guess it would be a quick reopen and close to add this bit of content. I will be happy to reopen the issue and create a patch with the additional javadoc if you like.",06/Jul/10 07:37;bayard;I've updated the Javadoc with your text.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
object cloning with SerializationUtils has classloader problems with no workaround,LANG-626,12467372,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,ernestp,ernestp,18/Jun/10 19:54,16/Nov/11 06:56,07/Apr/19 20:37,02/Aug/11 06:57,,,,,3.0.1,,lang.*,,,2,,,,,,,,"In WebLogic 10.3, commons_lang is included on the main classpath, trumping the commons_lang on a webapp classpath (in webinf/lib).  This causes ClassNotFoundException errors when using SerializationUtils.clone() because Java serialization uses the classloader of the current class (class invoked from) when doing serialization.  Java serialization does not respond to the thread context classloader.

Fix: The following web page suggests a fix (including the full source code) that honors the context classloader if set.  I don't know if this is the ideal solution, but at least it allows the problem to be worked around without affecting working behavior for existing clients.
http://www.mail-archive.com/commons-dev@jakarta.apache.org/msg44524.html

Workaround: There is a flag to set on weblogic that inverts the classloader.  *HOWEVER*, this only works if the webapp does not need certain xml jars.   Otherwise, WebLogic will fail to start because *it* has classloader issues.    Therefore, this is not an acceptable workaround.  

Another workaround: The only workaround I know of is to copy the SerializationUtils class into a different package in my app so that the proper invocation context will be used for serialization.  This is very undesirable.

I found these 3 bugs in the database that all seem to be the same problem.  
https://issues.apache.org/jira/browse/OJB-140
https://issues.apache.org/jira/browse/LANG-241
https://issues.apache.org/jira/browse/JS2-831

",WebLogic 10.3,,,,,,,,,,,,,,,,,,,,,,,,,16/Mar/11 10:29;sludwig;ClassLoaderAwareCloneMethod.zip;https://issues.apache.org/jira/secure/attachment/12473774/ClassLoaderAwareCloneMethod.zip,07/Jul/10 08:59;sludwig;ContextClassLoaderAwareCloneMethod.zip;https://issues.apache.org/jira/secure/attachment/12448868/ContextClassLoaderAwareCloneMethod.zip,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-06-22 06:51:21.566,,,false,,,,,,,,,,,,,,66520,,,Tue Aug 02 06:57:18 UTC 2011,,,,,,0|i0d5ov:,74698,,,,,,,,"22/Jun/10 06:51;bayard;mail-archive isn't working for me right now; I'm guessing it's this thread from 2004:

http://commons.markmail.org/thread/trfdrjeb6qohru7p

The right solution, imo, is for Weblogic to do what all containers do/should do and use a package name rewrite at build time so they have their dependencies in private space. Presumably not likely to happen.

Need to look at the attached mailing list code, also consider the option in LANG-241 that asked for an optional ClassLoader parameter.","23/Jun/10 12:46;ernestp;Yes, that appears to be the same thread I was referring to.

I agree that it seems like WebLogic should repackage the code to avoid this issue, but I also agree that's not likely to happen. :(","06/Jul/10 12:25;sludwig;I encountered the same problem within the Tomcat-Container and my web-application. commons-lang is on the shared classpath, but the objects to clone are in the web-application.

I vote for this issue to be fixed in such a way that the developer does not need to do more than call the right method on SerializationUtils. In these modern days it would be nice to have a working clone tool that saves one the potentially large hassle of keeping track of deep-clone methods or deep-clone copy-constructors.
","06/Jul/10 16:21;markt;w.r.t. WebLogic: I assume folks using it have a support contract and since this is a clear bug I'd recommend using your support contract to pressure Oracle into a fix. Yes it takes time and requires generally making a nuisance of yourself but it can be done - at least I got a handful of Oracle app server bugs fixed that way.

w.r.t. Tomcat: if commons-lang is on the common class path it is because the user put it there. Tomcat does not use and does not ship with commons-lang and to the best of my recollection never has. The correct solution in this case is to put commons-lang where it belongs - in WEB-INF/lib. This would also work for any spec compliant servlet container.

In terms of the original proposed patch, I am not a fan of configuration via system properties unless there is no other choice. I'm not convinced that is the case here. I would also recommend testing to ensure that this patch does not trigger a class-loader memory leak. It shouldn't, but based on past experience I wouldn't be surprised if it did. Assuming no memory leak, the only remaining argument against the patch is one of bloat. Should we add code to commons-lang just to work around another product's bugs? My general view is that we shouldn't so I'd be -0 for applying this patch.
","07/Jul/10 08:59;sludwig;Proposal of additional method for the SerializationUtils that works with the current thread context ClassLoader. Fixes the problem under Tomcat. Attached ContextClassLoaderAwareCloneMethod.zip with two java files. Note that the code makes use of generics, but it can be easily adjusted to work under Java 1.4.","28/Jul/10 13:46;azgard;@Mark:
Whats about a OSGi environment? There are many classloaders around and i could not copy commons-lang.jar to every plugin it use commons-lang.

Why not add all SerializationUtils methods a second method with classloader attribute and then resolve classes within the ObjectOutputStream with the submitted classloader and/or ContextClassLoader?",16/Mar/11 04:04;bayard;Assigning to 3.1 to consider Sven's patch.,"16/Mar/11 10:29;sludwig;Attaching new second version as a good alternative. In this one it is possible to specify a ClassLoader that takes precedence over the Context-ClassLoader. We needed this, because in a Mock-Scenario we had some cglib-generated classes that could not be found on the Context-ClassLoader.","02/Aug/11 06:57;bayard;Thanks Sven :)

svn ci -m ""Applying Sven Ludwig's patch from LANG-626. This modifies the SerializationUtils.clone method to use the threadContextLoader if it is unable to find a class using the object's current classloader. This should (hopefully) help with Weblogic and Tomcat situations where Lang is outside the web-inf for some reason (likely user error with Tomcat, by design for Weblogic)""
Sending        pom.xml
Sending        src/main/java/org/apache/commons/lang3/SerializationUtils.java
Transmitting file data ..
Committed revision 1153046.
",,,,,,,,,,,,,,,,,,,,,,
SystemUtils.getJavaVersionAsFloat throws StringIndexOutOfBoundsException on Android runtime/Dalvik VM,LANG-624,12465596,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,trumant,trumant,27/May/10 21:09,01/Feb/11 16:31,07/Apr/19 20:37,01/Feb/11 16:31,2.5,,,,3.0,,lang.*,,,0,,,,,,,,"Can be replicated in the Android emulator quite easily.

Stack trace:

{noformat}

at org.apache.commons.lang.builder.ToStringBuilder.<clinit>(ToStringBuilder.java:98)
E/AndroidRuntime( 1681): 	... 17 more
E/AndroidRuntime( 1681): Caused by: java.lang.ExceptionInInitializerError
E/AndroidRuntime( 1681): 	at org.apache.commons.lang.builder.ToStringStyle$MultiLineToStringStyle.<init>(ToStringStyle.java:2276)
E/AndroidRuntime( 1681): 	at org.apache.commons.lang.builder.ToStringStyle.<clinit>(ToStringStyle.java:94)
E/AndroidRuntime( 1681): 	... 18 more
E/AndroidRuntime( 1681): Caused by: java.lang.StringIndexOutOfBoundsException
E/AndroidRuntime( 1681): 	at java.lang.String.substring(String.java:1571)
E/AndroidRuntime( 1681): 	at org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat(SystemUtils.java:1153)
E/AndroidRuntime( 1681): 	at org.apache.commons.lang.SystemUtils.<clinit>(SystemUtils.java:818)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,28/May/10 17:07;AndriodJavaVersion.png;https://issues.apache.org/jira/secure/attachment/12445796/AndriodJavaVersion.png,27/Jan/11 09:08;bayard;LANG-624.patch;https://issues.apache.org/jira/secure/attachment/12469533/LANG-624.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-05-27 21:11:20.161,,,false,,,,,,,,,,,,,,147454,,,Tue Feb 01 16:31:43 UTC 2011,,,,,,0|i0d5p3:,74699,,,,,,,,27/May/10 21:11;ggregory@seagullsw.com;Can you copy a stack trace here please?,"27/May/10 21:38;ggregory@seagullsw.com;Fixed in trunk, I will commit shortly.","28/May/10 07:17;joehni;The problem is that SystemUtils make wrong assumptions about the format of ""java.version"". It completely depends on the vendor what this property contains and it does not have to be at all a string that can be interpreted as float value. It is more or less unfortunate that a Sun JDK matches a number format. See http://java.sun.com/j2se/1.4.2/docs/guide/versioning/spec/versioning2.html#wp90020. If we really want to return the version of the Java Runtime as float, we have to use java.specification.version.","28/May/10 10:12;ggregory@seagullsw.com;Committed fix to trunk, unit test improvements and clean ups:

- Fixed and tested (LANG-624) SystemUtils.getJavaVersionAsFloat throws StringIndexOutOfBoundsException on Android runtime/Dalvik VM. This is based on a new implementation of the underlying code with less reliance of hard coded array indices, for example, calls like substring (0, 3).
- Refactored some private methods into one private and one package private method such that the latter can be called from unit tests. This allows [LANG-624] to be tested along with other methods. See below.
- Removed ""dead code"" from unit tests: The SystemUtilsTest unit test contained code that was cut and pasted from SystemUtils for four constants and associated initialization methods. The test methods then called these SystemUtilsTest methods instead of the SystemUtils methods. The refactoring allows for the test to run against as much of the code in SystemUtils as possible.
- Added assertions for Java version ""0"", ""1.4.2"", ""1.6"" and ""1.7"" to some tests.
- Added Javadocs to document what happens with ""1.6.0_20"" vs. ""1.6.0"", which is that the patch level is ignored.

","28/May/10 12:04;joehni;Sorry, this fix is simply. Aonix J9 VM (also used on mobile devices) returned ""1.3.0 subset"". As explained, you cannot rely on ""java.version"" per definition.

{noformat}
Index: src/test/java/org/apache/commons/lang3/SystemUtilsTest.java
===================================================================
--- src/test/java/org/apache/commons/lang3/SystemUtilsTest.java (revision 949153)
+++ src/test/java/org/apache/commons/lang3/SystemUtilsTest.java (working copy)
@@ -201,6 +201,7 @@
         assertEquals(1.5f, SystemUtils.toJavaVersionFloat(""1.5.0""), 0.000001f);
         assertEquals(1.6f, SystemUtils.toJavaVersionFloat(""1.6.0""), 0.000001f);
         assertEquals(1.31f, SystemUtils.toJavaVersionFloat(""JavaVM-1.3.1""), 0.000001f);
+        assertEquals(1.3f, SystemUtils.toJavaVersionFloat(""1.3.0 subset""), 0.000001f);
         // This used to return 0f in [lang] version 2.5:
         assertEquals(1.3f, SystemUtils.toJavaVersionFloat(""XXX-1.3.x""), 0.000001f);
     }
@@ -219,6 +220,7 @@
         assertEquals(150, SystemUtils.toJavaVersionInt(""1.5.0""), 0.000001f);
         assertEquals(160, SystemUtils.toJavaVersionInt(""1.6.0""), 0.000001f);
         assertEquals(131, SystemUtils.toJavaVersionInt(""JavaVM-1.3.1""), 0.000001f);
+        assertEquals(130, SystemUtils.toJavaVersionInt(""1.3.1 subset""), 0.000001f);
         // This used to return 0f in [lang] version 2.5:
         assertEquals(130, SystemUtils.toJavaVersionInt(""XXX-1.3.x""), 0.000001f);
     }
{noformat}

This simply fails.","28/May/10 16:29;ggregory@seagullsw.com;I expect this assertion to fail:

{quote}
assertEquals(130, SystemUtils.toJavaVersionInt(""1.3.1 subset""), 0.000001f);
{quote}

You must mean:

{quote}
assertEquals(131, SystemUtils.toJavaVersionInt(""1.3.1 subset""), 0.000001f);
{quote}

I applied and changed the test patch above.","28/May/10 17:07;ggregory@seagullsw.com;The attached screen shot shows that you now get a version number, just not a very useful one: 0.0.","13/Jul/10 05:53;joehni;I can only emphasis again, that it is wrong to use java.version instead of java.specification.version and expect something useful.",18/Jul/10 05:49;bayard;So should we be moving from java.version to java.specification.version?,18/Jul/10 07:11;ggregory@seagullsw.com;Wouldn't backward compatibility be an issue? Should we consider adding parallel APIs for java.specification.version?,"20/Jul/10 18:00;bayard;Now's the time to break back compat if need be.

Is java.specification.version the right value to use? Is it less useful than java.version?","20/Jul/10 18:12;jwcarman;Agreed, Henri.  If we're talking 3.0, we've got some freedom here to break some stuff.  I would think that most folks are going to check to see what specification version is running, not what specific implementation version.","20/Jul/10 18:52;sebb@apache.org;The Javadoc for getJavaVersionAsFloat() does not specify how it obtains the information, so I think one could use ""java.specification.version"" instead of ""java.version"" without breaking compatibility.

However the Javadoc for JAVA_VERSION does say that it uses ""java.version"", so one cannot change that without changing the API (and Javadoc!).

How about adding a JAVA_SPEC_VERSION field and using that in the AsFloat() method?
","20/Jul/10 19:00;mbenson;IMO principle of least surprise would dictate that we use java.specification.version, *document it clearly*, and provide JAVA_VENDOR_VERSION if we really feel the need to provide the results of java.version.",17/Sep/10 05:05;bayard;+1. I see no reason why we can't change the API.,"17/Sep/10 15:36;sebb@apache.org;I don't think we need to change the API, just the implementation of AsFloat() (and clarify its Javadoc)

Keep JAVA_VERSION
Add JAVA_SPECIFICATION_VERSION
Change asFloat() to use JAVA_SPEC_VERSION and document this.

Could add JAVA_VENDOR_VERSION as an alias for JAVA_VERSION but I cannot see the point.","17/Jan/11 05:46;bayard;I'm still +1 to change the API. I don't care that the javadoc for one item says how it works and the other doesn't; a change in functionality is a change in functionality. 

In this case, the right thing to do is to use the correct java.specification version. That's what we meant, and it's how we use the code everywhere.","23/Jan/11 05:59;bayard;Digging deeper into SystemUtils and specifically what I think should change:

JAVA_VERSION: Keep as is. It's fair to expect it to point to java.version. That that is the vendor version should be noted in the javadoc.

JAVA_VERSION_TRIMMED: We shouldn't be trying to parse the specification version out of java.version. Remove this. 

getJavaVersionTrimmed(): Private method for the above. Also remove.

JAVA_VERSION_FLOAT: This now becomes impossible. Remove this - I don't think there's huge need to have code only run on 1.6.1 of a JVM. Sure it might be a good way to get around some bug in 1.6.0, but the code becomes inherently unportable.

JAVA_VERSION_INT: Same as above. Remove.

getJavaVersionMatches: Move this over to using JAVA_SPECIFICATION_VERSION. 

isJavaVersionAtLeast: Move to spec version. This means having a private Float version(?). Drop the int variant of this method as it's silly to pass in 13 instead of 1.3. In general this is a silly method; the better solution imo would be to have a JAVA_1_2 enum :) I wonder if that's something we should consider for all of the IS_XYZ 'constants'?

",23/Jan/11 06:53;scolebourne;We shouldn't remove the float/int methods. They are the useful ones!,"24/Jan/11 07:00;bayard;isJavaVersionAtLeast is good; making it float/int based seems unnecessary and I think it's an artifact of the work to deal with the obtuse vendor version string.

isJavaVersionAtLeast(SystemUtils.JAVA_1_2) would be better. For once I would like a static import there :)","24/Jan/11 09:25;joehni;The only problem that remains then is for Android, because IIRC it used to return something like 0.9 as specification version. Where are the Android guys to affirm my 2nd hand knowledge? Question is what isJavaAtLeast should do in this platform, because someone who uses c-l will probably expect that his check will succeed for Java 5 also on Android.","27/Jan/11 05:53;bayard;Well, technically it should return false all the time. We can add an 'isJava' method that returns false for Android :)

As it is, sounds like a hack for Android such that 0.9 is considered equivalent to 5.0 with specification version would be suitable. I'm not an Android coder - I'm assuming 0.9 = 5.0 from your text and I'm assuming if they move to 6.0 equivalent, it would be 0.91 or something.","27/Jan/11 09:08;bayard;Here's the proposed change. 

Needs more javadoc/unit test of the new enum; but I wanted to get feedback before finishing it off.","27/Jan/11 13:14;ggregory@seagullsw.com;I like the JavaVersion enum. No more magic numbers in the code.

But when I see:

JAVA_0_9(1.5f, ""0.9""),    // Android 

I think we should have:

JAVA_0_9(1.5f, ""0.9"", ""Android"")

Which means JavaVersion needs a description field.

What is the description for the other versions?

Also instead of duplicating Strings like ""0.9"", I would rather have private constants.","27/Jan/11 13:16;ggregory@seagullsw.com;For:

    public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty(""java.specification.version"");
    private static final JavaVersion Enum_JAVA_SPECIFICATION_VERSION = JavaVersion.get(JAVA_SPECIFICATION_VERSION);

The name Enum_JAVA_SPECIFICATION_VERSION looks odd, how about one of:

- JAVAVERSION_SPECIFICATION
- JAVA_VERSION_SPECIFICATION
- JAVAVERSION_ENUM_SPECIFICATION
- JAVA_VERSION_ENUM_SPECIFICATION
","27/Jan/11 16:23;mbenson;Agreed; +1 for JAVA_VERSION_SPECIFICATION.

Perhaps we should talk more about the int/float calls.  I would like for existing code to continue to compile (the user having adjusted the import to the lang3 package).  However:
 * the int-based handling seems to invite chaos in the future.  What happens when version 1.12 of the spec emerges?
 * the specification-based version idea we've moved to only accommodates the one decimal, further marking the whole 3-digit int concept as obsolete.
 * we could support Number, comparing its float value, but this would yield a different behavior for Integer/boxed int than what had worked previously, and would break clients more insidiously than compilation failure.

Considering these points I don't see an acceptable way to support existing code.  Until someone suggests a better way, my position is that they're more trouble than they're worth.","28/Jan/11 05:37;bayard;
Gary's replies:

Agreed that 'Android' could be there as some kind of String description; however I don't think it's a backwards compat issue and would prefer to keep it simple. We can add another parameter to the constructor.

On the Magic ""0.9"" String; I believe it's overkill to have a variable that is effectively String_0_9 = ""0.9"" and it will make the code less readable. 

On the name of the Enum_JAVA_SPECIFICATION_VERSION variable; absolutely. That was a 'whatever, it's private' decision. I effectively went with some kind of Hungarian notation :) Cant' say the alternatives provided are very readable though.

Matt's reply:

Glad to see you argued your way out of it :)","30/Jan/11 03:49;bayard;svn ci -m ""Removed isJavaVersionAtLeast(float) and (int), and added an enum variant with the new JavaVersion enum. Updated the rest of the code, switched isJavaVersionAtLeast over to using java.specification.version and not java.version (the vendor code) and dropped JAVA_VERSION_TRIMMED, JAVA_VERSION_FLOAT and JAVA_VERSION_INT. See: LANG-624""
Sending        src/main/java/org/apache/commons/lang3/ClassUtils.java
Adding         src/main/java/org/apache/commons/lang3/JavaVersion.java
Sending        src/main/java/org/apache/commons/lang3/SystemUtils.java
Sending        src/test/java/org/apache/commons/lang3/CharEncodingTest.java
Sending        src/test/java/org/apache/commons/lang3/ClassUtilsTest.java
Sending        src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java
Sending        src/test/java/org/apache/commons/lang3/SystemUtilsTest.java
Sending        src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
Sending        src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java
Sending        src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java
Transmitting file data ..........
Committed revision 1065174.

Leaving this open for a short while in case there's any feedback. I went with: ""JAVA_SPECIFICATION_VERSION_AS_ENUM"" as the variable name.",01/Feb/11 16:31;bayard;Resolving.,,
"Replace characters seems to not be able to replace Icelanding Thorn (Þ, þ)",LANG-623,12464331,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Cannot Reproduce,,tsmets,tsmets,12/May/10 09:03,21/May/10 07:19,07/Apr/19 20:37,21/May/10 06:48,2.5,,,,,,lang.*,,,0,,,,,,,,"Failing test case :

{code}
    @Ignore
    public void convert_English_Thorn(){
    	beforeConversion = ""AAÞþaa"";
        expectedAfterConversion = ""aattaa"";
        Assert.assertEquals(""Test NOT correctly configured length not correct"",
                beforeConversion.length(),
                expectedAfterConversion.length());
        afterConversion = converter.replaceAccents(beforeConversion);
        Assert.assertEquals(""Cannot convert (Icelandic/old english thorn) '"" + beforeConversion + ""'."", expectedAfterConversion, afterConversion);
    }
{code}

{code}
 
    String replaceAccents(final String aField) {
        String result = StringUtils.lowerCase(aField),
               target = null,
               charsToRemove = null;
        char charToPut = Constants.UNDERSCORE_CHARACTER,
             charToRemove = Constants.UNDERSCORE_CHARACTER;
        for (Object element : conversionMappings.keySet()) {
            target = element.toString();
            if (target.equals(Constants.SPECIAL_CHARACTER_KEY)) {
                continue;
            }
            result = StringUtils.stripToNull(result);
            charsToRemove = conversionMappings.getProperty(target, Constants.EMPTY_STRING).toString();
            charToPut = target.charAt(Constants.ZERO);
            for (int i=0; i<charsToRemove.length(); i++) {
                charToRemove = charsToRemove.charAt(i);
                result = StringUtils.replaceChars(result, charToRemove, charToPut);
            }
        }

        return result;
    }
{code}



",W2K3-server / JDK 1.5 (from SAP) ,,,,,,,,,,,,,,,,,,,,,,,,,12/May/10 09:09;tsmets;ConversionMappings.UTF8;https://issues.apache.org/jira/secure/attachment/12444286/ConversionMappings.UTF8,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-05-21 06:48:53.656,,,false,,,,,,,,,,,,,,147453,,,Fri May 21 07:19:52 UTC 2010,,,,,,0|i0d5pb:,74700,,,,,,,,"12/May/10 09:09;tsmets;This file in pure UTF-8 encoding (Eclipse or jEdit) is converted into a property-file through an ANT-task (native2ascii) :


    <echo>Converting ...</echo>
    <native2ascii encoding=""UTF-8""
                  src=""${resources.dir}""
                  dest=""${build.dir}""
                  includes=""**/*.UTF8"" ext="".properties""
                  description=""Conversion the weird foreign characters into proper UTF-8 escaped characters"" />
    <echo>Conversion done !</echo>","21/May/10 06:48;bayard;Seems odd. 

Testing, the following passes:

+    public void testLang623() {
+        assertEquals(""t"", StringUtils.replaceChars(""\u00DE"", '\u00DE', 't'));
+        assertEquals(""t"", StringUtils.replaceChars(""\u00FE"", '\u00FE', 't'));
+    }

So I think the issue is outside of StringUtils.replace. 

Closing the issue, but please reopen if something is wrong with my test above.",21/May/10 07:19;joehni;This test can only proof something if Thomas set the encoding option of the compiler to utf-8. Otherwise the test is simply wrong. Therefore it is always a bad idea to put non-ASCII characters directly into source.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeXML() can't process UTF-16 supplementary characters,LANG-617,12461956,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,dav.garcia,dav.garcia,13/Apr/10 15:25,17/Sep/10 05:11,07/Apr/19 20:37,17/Sep/10 05:12,2.4,,,,3.0,,lang.*,,,0,,,,,,,,"Supplementary characters in UTF-16 are those whose code points are above 0xffff, that is, require more than 1 Java char to be encoded, as explained here: http://java.sun.com/developer/technicalArticles/Intl/Supplementary/

Currently, StringEscapeUtils.escapeXML() isn't aware of this coding scheme and treats each char as one character, which is not always right.

A possible solution in class Entities would be:

    public void escape(Writer writer, String str) throws IOException {
        int len = str.length();
        for (int i = 0; i < len; i++) {
            int code = str.codePointAt(i);
            String entityName = this.entityName(code);
            if (entityName != null) {
                writer.write('&');
                writer.write(entityName);
                writer.write(';');
            } else if (code > 0x7F) {
                    writer.write(""&#"");
                    writer.write(code);
                    writer.write(';');
            } else {
                    writer.write((char) code);
            }

            if (code > 0xffff) {
                    i++;
            }
        }
    }

Besides fixing escapeXML(), this will also affect HTML escaping functions. I guess that's a good thing, but please remember I have only tested escapeXML().
",,,,,,,,,,,,,,,,,,,,,,,,,,14/Apr/10 11:11;dav.garcia;ASF.LICENSE.NOT.GRANTED--utf8-fragment.txt;https://issues.apache.org/jira/secure/attachment/12441714/ASF.LICENSE.NOT.GRANTED--utf8-fragment.txt,14/Apr/10 11:11;dav.garcia;ASF.LICENSE.NOT.GRANTED--xml-escaped-fragment.txt;https://issues.apache.org/jira/secure/attachment/12441715/ASF.LICENSE.NOT.GRANTED--xml-escaped-fragment.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-04-14 07:48:04.277,,,false,,,,,,,,,,,,,,147449,,,Fri Sep 17 05:11:59 UTC 2010,,,,,,0|i0d5pj:,74701,,,,,,,,"14/Apr/10 07:48;bayard;In 3.0 the code has changed a fair amount. These will no longer escape for escapeXML and escapeHTML, but it's easy to turn the feature back on. The code is also now codepoint based, but I need to get a good unit test in for supplementary characters to decide what the code should actually do:

http://svn.apache.org/repos/asf/commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java","14/Apr/10 11:11;dav.garcia;I am attaching two files with a very simple test case:
- utf8-fragment.txt
  Contains an UTF-8 encoded string with a few BMP (Basic Multilingual Plane) characters and 6 non-BMP characters (the ones causing trouble).
- xml-escaped-fragment.txt
  Contains the expected XML-escaped string.

I hope you find it useful.
","22/Jun/10 06:32;bayard;I tested with 10C22, broken down into supplementary \uD803\uDC22 and the new code seems happy for the numeric entity escaping. 

Unescaping will need some work, so I will leave this open. ","22/Jun/10 06:36;bayard;Change made to the NumericEntityUnescaper so &#68642; escapes to \uD803\uDC22.

Very interested in how the current trunk works for you. ",17/Sep/10 05:11;bayard;Marking this as closed. Feel free to reopen if you find the current codebase is still problematic David. Things seem good with the data you provided (many thanks for that by the way).,,,,,,,,,,,,,,,,,,,,,,,,,,
ConstructorUtils.getAccessibleConstructor() Does Not Check the Accessibility of Enclosing Classes,LANG-613,12460455,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,mbenson,sledged,sledged,27/Mar/10 22:49,04/Mar/14 17:19,07/Apr/19 20:37,20/Jan/14 17:20,3.0,,,,3.3,,lang.reflect.*,,,0,patch,,,,,,,"ConstructorUtils.getAccessibleConstructor() checks if the declaring class is public but not whether it's a top-level class or an enclosed one.  Consequently, with enclosed declaring classes, the method does not check if the enclosing class is public, or it's enclosing class, or it's enclosing class, etc...",,,,,,,,,,,,,,,,,,,,,,,,,,03/Sep/11 23:58;bentels;LANG-613_Recursive_visibility_check_up_the_enclosing_tree.patch;https://issues.apache.org/jira/secure/attachment/12492934/LANG-613_Recursive_visibility_check_up_the_enclosing_tree.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2011-09-03 23:58:16.174,,,false,,,,,,,,,,,,,,3015,,,Mon Jan 20 17:20:38 UTC 2014,,,,,,0|i0b5s7:,63049,,,,,,,,"03/Sep/11 23:58;bentels;I've uploaded a patch with a check that a constructor is either:
- For a normal, top-level class; or
- for an inner class that is a public, top-level class enclosed in a (set of) classes such that it is still visible.

For the visibility rule I have maintained the existing rule in ConstructorUtils that ""visible"" means ""public"". However, that is not quite correct in reality -- a constructor of an inner class can still be visible if it is contained within a class with default or protected visibility and the accessing code is in the right package. I'll leave the code this way as long as the Commons-Lang team does not decide to change the definition used.","12/Jan/14 11:36;britter;{quote}
a constructor of an inner class can still be visible if it is contained within a class with default or protected visibility and the accessing code is in the right package
{quote}

although this is true, it is very unlikely to happen, since the calling code that does the reflection is in package {{org.apache.commons.lang3}}.","12/Jan/14 12:19;britter;Hello Ben,

I've reviewed your patch. Here are my findings:
* You're using tabs to indent your code. Please only use spaces, since the representation of tabs depends on your editor
* The tests are missing the {{@Test}} annotation
* The new files are missing the Apache License header

usually I would fix this myself and apply the patch, but the missing AL header is a problem. You either have to file an [Individual Contributor License Agreement|http://www.apache.org/licenses/] or reapply the patch with AL headers included. Sorry for the hassle but this is necessary to make sure we don't run into trouble regarding intellectual property.

Thanks for contributing,
Benedikt","17/Jan/14 12:31;britter;[~bentels]: I can not apply your patch, without the ICLA, since I would have to modify your code. I'm only allowed to do this if you have the ICLA filled or if you resubmit a modified patch (ICLA would be better...).

TIA!","20/Jan/14 17:20;mbenson;No response from OP; recoded without looking at the patch.

Committed revision 1559779.",,,,,,,,,,,,,,,,,,,,,,,,,,
Some StringUtils methods should take an int character instead of char to use String API features.,LANG-608,12459223,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,garydgregory,,16/Mar/10 00:48,10/Mar/11 22:30,07/Apr/19 20:37,16/Mar/10 00:50,2.5,,,,3.0,,lang.*,,,0,,,,,,,,"Change the APIs from char to int character input to match underlying JRE API called. There is no need to narrow the input type argument to the JRE, in fact this causes us to loose support for Unicode supplementary characters. The APIs changed are:
- indexOf(String, char) -> indexOf(String, int)
- indexOf(String, char, int) -> indexOf(String, int, int)
- lastIndexOf(String, char) -> lastIndexOf(String, int)
- lastIndexOf(String, char, int) -> lastIndexOf(String, int, int)
- contains(String, char) -> contains(String, int) 

The matches methods like String#indexOf(int)","java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)

Microsoft Windows [Version 6.0.6002]

Apache Maven 2.2.1 (r801777; 2009-08-06 12:16:01-0700)
Java version: 1.6.0_16
Java home: C:\Program Files\Java\jdk1.6.0_16\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows vista"" version: ""6.0"" arch: ""amd64"" Family: ""windows""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-03-16 00:50:16.75,,,false,,,,,,,,,,,,,,147442,,,Tue Mar 16 00:50:16 UTC 2010,,,,,,0|i0d5pr:,74702,,,,,,,,16/Mar/10 00:50;ggregory@seagullsw.com;In SVN.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils methods do not handle Unicode 2.0+ supplementary characters correctly.,LANG-607,12459042,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,,garydgregory,ggregory,ggregory,14/Mar/10 00:38,21/Oct/13 05:35,07/Apr/19 20:37,,2.5,,,,Patch Needed,,lang.*,,,0,,,,,,,,"StringUtils.containsAny methods incorrectly matches Unicode 2.0+ supplementary characters.

For example, define a test fixture to be the Unicode character U+20000 where U+20000 is written in Java source as ""\uD840\uDC00""

	private static final String CharU20000 = ""\uD840\uDC00"";
	private static final String CharU20001 = ""\uD840\uDC01"";

You can see Unicode supplementary characters correctly implemented in the JRE call:

	assertEquals(-1, CharU20000.indexOf(CharU20001));

But this is broken:

	assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));
	assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));

This is fine:

	assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));
	assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));
	assertEquals(true, StringUtils.contains(CharU20000, CharU20000));
	assertEquals(false, StringUtils.contains(CharU20000, CharU20001));

because the method calls the JRE to perform the match.

More than you want to know:
- http://java.sun.com/developer/technicalArticles/Intl/Supplementary/","java version ""1.6.0_16""
Java(TM) SE Runtime Environment (build 1.6.0_16-b01)
Java HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)

Microsoft Windows [Version 6.0.6002]

Apache Maven 2.2.1 (r801777; 2009-08-06 12:16:01-0700)
Java version: 1.6.0_16
Java home: C:\Program Files\Java\jdk1.6.0_16\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows vista"" version: ""6.0"" arch: ""amd64"" Family: ""windows""",,,,,,,,,,,,,,,,,,,,,,,,,14/Mar/10 00:53;LANG-607.diff;https://issues.apache.org/jira/secure/attachment/12438726/LANG-607.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-14 00:53:00.78,,,false,,,,,,,,,,,,,,3016,,,Mon Jan 17 05:49:59 UTC 2011,,,,,,0|i0b5sf:,63050,,,,,,,,14/Mar/10 00:53;ggregory@seagullsw.com;Attaching patch for the record.,15/Mar/10 20:29;ggregory@seagullsw.com;Renaming ticket to fix this issue in other SU methods.,22/Jun/10 06:53;bayard;Noting that fixing this isn't a change in binary compatibly; so we can release without it. That said - needs working on.,"10/Jan/11 21:42;niallp;Is the work complete on this?

I have ported the changes back to the 2.x branch (I copied the Character.isHighSurrogate(char) method from Apache Harmony into CharUtils)",10/Jan/11 21:48;ggregory@seagullsw.com;I am pretty sure that I did not complete the task. Lots of nooks and crannies...,11/Jan/11 00:44;niallp;Is the work thats been done so far OK to go into a release? I'm wondering whether I should revert it from the 2.x branch before releasing 2.6 or is whats been done in trunk (and ported to 2.x) good to go?,"11/Jan/11 01:12;sebb@apache.org;Looks like the following condition could be taken out of the loop:

CharUtils.isHighSurrogate(ch)

as there's no point rechecking it for each search character.

I don't know if the code is otherwise correct.

",11/Jan/11 01:44;ggregory@seagullsw.com;What is there is good to go but I did not cover all of our APIs. ,17/Jan/11 05:49;bayard;Moving to 3.1 as not a backwards incompatibility.,,,,,,,,,,,,,,,,,,,,,,
EqualsBuilder causes StackOverflowException,LANG-606,12459035,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sao,sao,13/Mar/10 20:10,20/Mar/10 20:17,07/Apr/19 20:37,20/Mar/10 20:17,2.5,,,,3.0,,lang.builder.*,,,0,,,,,,,,"EqualsBuilder causes StackOverflowException when comparing objects with cyclical object references.

e,g.
static class TestObjectReference {
		@SuppressWarnings(""unused"")
		private TestObjectReference reference;
    	@SuppressWarnings(""unused"")
		private TestObject one;
    	
    	public TestObjectReference(int one) {
			this.one = new TestObject(one);
		}
    	
    	public void setObjectReference(
    			TestObjectReference reference) {
			this.reference = reference;
		}

		@Override
		public boolean equals(Object obj) {
			return EqualsBuilder.reflectionEquals(this, obj);
		}
    }",,,,,,,,,,,,,,,,,,,,,,,,,,18/Mar/10 21:51;sao;EqualsBuilderCyclicalObjectReferences-v01.patch;https://issues.apache.org/jira/secure/attachment/12439214/EqualsBuilderCyclicalObjectReferences-v01.patch,13/Mar/10 20:18;sao;EqualsBuilderCyclicalObjectReferences.patch;https://issues.apache.org/jira/secure/attachment/12438705/EqualsBuilderCyclicalObjectReferences.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2010-03-17 18:29:28.537,,,false,,,,,,,,,,,,,,147441,,,Sat Mar 20 20:17:03 UTC 2010,,,,,,0|i0d5pz:,74703,,,,,,,,"13/Mar/10 20:18;sao;Attached patch should solve the issue.

I've used the same attempt used in HashCodeBuilder solving the cyclical reference issue.

Only difference is that a registry with objects pairs is used. When checking if two objects have already be compared resp. registered those two objects need to be swapped as the cyclical reference takes place when ""the other object"" is the ""this object"".","17/Mar/10 18:29;bayard;Can you check the patch? It doesn't apply cleanly, but neither file in question has changed since you posted the patch.","18/Mar/10 21:51;sao;Strange. I created the patch with svn diff >  EqualsBuilderCyclicalObjectReferences.patch. When I then reverted all files (svn revert -R .) and tried to apply the patch it did not apply cleanly on my system either.
After some research I found out that I probably hit a subversion bug (http://subversion.tigris.org/issues/show_bug.cgi?id=2164).

Well to workaround this problem instead of using svn diff I used the old fashion but working diff utility.

This patch now applies cleanly with the command patch -p1 -i EqualsBuilderCyclicalObjectReferences-v01.patch.","20/Mar/10 20:17;bayard;Thanks Oliver.

I modified the @since tags, but otherwise committed as is.

svn ci -m ""Applying the copy of the HashCodeBuilder code to stop cyclic references over to EqualsBuilder per LANG-606 and Oliver Sauder's patch"" src/
Sending        src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
Sending        src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java
Transmitting file data ..
Committed revision 925671.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
"Removes ""implement Cloneable"" from StrBuilder",LANG-603,12458492,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Won't Fix,,jasonngyl,jasonngyl,09/Mar/10 02:50,16/Oct/13 09:00,07/Apr/19 20:37,10/Jan/11 21:24,2.2,,,,,,lang.text.*,,,0,,,,,,,,"I know this will be fixed in 3.0; meanwhile however, it's confusing people when they try to use the clone method, only to find that it's not visible.",,,,,,,,,,,,,,,,LANG-302,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2011-01-10 21:24:41.403,,,false,,,,,,,,,,,,,,147439,,,Mon Jan 10 21:24:41 UTC 2011,,,,,,0|i0d5q7:,74704,,,,,,,,10/Jan/11 21:24;niallp;The clone() method has been implemented in the 2.x branch (see LANG-302),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ContextedRuntimeException no longer an 'unchecked' exception,LANG-602,12458378,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,joehni,dashmore,dashmore,07/Mar/10 09:55,26/Mar/10 06:03,07/Apr/19 20:37,08/Mar/10 22:22,3.0,,,,3.0,,lang.exception.*,,,0,,,,,,,,"The purpose of ContextedRuntimeException was to provide an 'unchecked' exception with contexted features.  the fact that it now extends 'java.langException' makes it a checked exception identical to ContextedException and doesn't fulfill its purpose.

Recommend you either just remove ContextedRuntimeException (as it's now redundant with ContextedException) or revert the change that has it extending java.lang.Exception back so that it extends java.lang.RuntimeException.  I would prefer keeping ContextedRuntimeException and having it extend RuntimeException.

I apologize for not catching this earlier.  I only caught it now in attempt to use ContextedRuntimeException on one of my projects and discovering that it is no longer unchecked.

Thanks for looking at this.",,,,,,,,,,,,,,,,,,,,,,,,,,07/Mar/10 21:30;dashmore;ContextedRuntimeException.java;https://issues.apache.org/jira/secure/attachment/12438150/ContextedRuntimeException.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-08 22:22:11.415,,,false,,,,,,,,,,,,,,147438,,,Mon Mar 08 22:22:11 UTC 2010,,,,,,0|i0d5qf:,74705,,,,,,,,"07/Mar/10 21:30;dashmore;If it helps, I've attached a slightly modified ContextedRuntimeException class that fixes the issue -- just changes the class to extend RuntimeException instead of Exception.

Thanks, again, for looking at this.","08/Mar/10 22:22;joehni;Thanks for heads-up.

{noformat}
commit -m ""ContextedRuntimeException must extend RuntimeException (LANG-602)."" 
    Sending        src/Commons/proper/lang/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java
    Transmitting file data ...
    Committed revision 920544.
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrSubstitutor should also handle the default properties of a java.util.Properties class,LANG-596,12457731,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,boente,boente,01/Mar/10 12:17,29/Aug/10 22:54,07/Apr/19 20:37,29/Aug/10 22:54,2.5,,,,3.0,,lang.text.*,,,0,,,,,,,,"The following program show a problem with a shortcoming of the java.util.Properties class. 
The default properties are not substituted by the StrSubstitutor.

{code:title=StrSubstTest.java|borderStyle=solid}
import org.apache.commons.lang.text.StrSubstitutor;

public class StrSubstTest
{
    public static void main(String[] args)
    {
        String org = ""${doesnotwork}"";
        System.setProperty(""doesnotwork"", ""It work's!"");

        // create a new Poperties object with the System.getProperties as default
        Properties props = new Properties(System.getProperties());

        String subst = StrSubstitutor.replace(org, props);
        // is ${doesnotwork} substituted?
        System.out.println(subst);

    }
}
{code} 


The following method could be added to the StrSubstitutor class to fix this problem in an easy way:
{code:borderStyle=solid}
    /**
     * Replaces all the occurrences of variables in the given source object with their matching
     * values from the properties.
     * 
     * @param source the source text containing the variables to substitute, null returns null
     * @param properties the properties with values, may be null
     * @return the result of the replace operation
     */
    public static String replace(Object source, Properties valueProperties)
    {
        if (valueProperties == null) {
            return source;
        }
        Map valueMap = new HashMap();
        Enumeration propNames = valueProperties.propertyNames();
        while (propNames.hasMoreElements())
        {
            String propName = (String)propNames.nextElement();
            String propValue = valueProperties.getProperty(propName);
            valueMap.put(propName, propValue);
        }
        return StrSubstitutor.replace(source, valueMap);
    }
{code}",,,1800,1800,,0%,1800,1800,,,,,,,,,,,,,,,,,,24/Aug/10 03:15;tdepriede;Patch_LANG-596_1.0;https://issues.apache.org/jira/secure/attachment/12452888/Patch_LANG-596_1.0,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2010-03-02 07:03:00.909,,,false,,,,,,,,,,,,,,34064,,,Sun Aug 29 22:54:57 UTC 2010,,,,,,0|i0d5qn:,74706,,,,,,,,02/Mar/10 07:03;bayard;Sounds good - assigning to 3.1. Needs code/test patch.,"24/Aug/10 03:15;tdepriede;hello,
I went up the patch with the code

Regards
Tom","29/Aug/10 22:54;bayard;Thanks - patch commited.

svn ci -m ""Adding Ulrich + Tomas' patch to LANG-596 adding a replace(String, Properties) variant to StrSubstitutor""
Sending        src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
Sending        src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java
Transmitting file data ..
Committed revision 990671.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Testing with JDK 1.7,LANG-593,12456951,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,niallp,niallp,21/Feb/10 19:35,19/Jul/11 03:52,07/Apr/19 20:37,19/Jul/11 03:52,2.5,,,,3.0,,General,,,0,,,,,,,,"I ran the tests for the Lang 2.5 RC2 using JDK 1.7.0-b78 and they all passed except the testFormat() in FastDateFormatTest.

The problem seems to be that in JDK 1.7 the ""yyy"" and ""y"" patterns now cause a four digit year with SimpleDateFormat - whereas previous JDK versions resulted in a 2 digit year (as FastDateFormat does).

JDK 1.7 hasn't yet been released and that may be fixed in the JDK by the time it is, but I thought it worth making a note.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-24 09:07:25.613,,,false,,,,,,,,,,,,,,67601,,,Tue Jul 19 03:52:56 UTC 2011,,,,,,0|i0cvjj:,73054,,,,,,,,24/Feb/10 09:07;bayard;Worth reporting to wherever JDK 1.7 bugs get reported nowadays?,"24/Feb/10 09:49;niallp;I tested b78 - but the latest available is b84, so probably a good idea to check if its still a problem in that version first.

   http://download.java.net/jdk7/binaries/

If it is a problem I guess the place to report it is here:
  https://jdk7.dev.java.net/servlets/ProjectIssues",01/Jan/11 19:35;bayard;Note to test under JDK 7 before release.,"12/Jan/11 00:48;niallp;With b102 the same problem with FastDateFormatTest exists
With b124 the same problem with FastDateFormatTest exists and now ExtendedMessageFormatTest also fails

The problem with ExtendedMessageFormatTest is that it is using Locale.getDefault() when no Locale is supplied, which is returning Locale..en_US - but DateFormat & Number format are now (in b124) using the new Locale.getDefault(Locale.Category.FORMAT) which is returning Locale.en_GB. So this appears to be a bug in the 1.7 JDK",17/Jan/11 05:59;bayard;Sounds good. 2 bugs in JDK; nothing to hold up a release on our side. ,"30/Jan/11 03:50;bayard;Need to report bugs back to JDK, but no reason to link this to the next release (or any release really).","19/Jul/11 03:52;bayard;Resolving as fixed.

We fixed the JDK 7 'yyy' issue in LANG-719 prior to releasing 3.0. The other issue didn't show up iirc.",,,,,,,,,,,,,,,,,,,,,,,,
"StringUtils: indexOf("""", String) and indexOf("""", char) have different behaviour",LANG-589,12455563,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,bayard,bayard,07/Feb/10 06:18,08/Feb/10 06:58,07/Apr/19 20:37,08/Feb/10 06:58,,,,,3.0,,lang.*,,,0,,,,,,,,"One returns -1, the other returns 0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-07 10:33:05.768,,,false,,,,,,,,,,,,,,147430,,,Mon Feb 08 06:58:31 UTC 2010,,,,,,0|i0d5qv:,74707,,,,,,,,"07/Feb/10 10:33;bishiboosh;In the javadoc, the only example with """" as first parameter for the String version is StringUtils.indexOf("""", """") = 0

Will this example be still valid ? Do I understand clearly that we must have both this behaviour and StringUtils.indexOf("""", *) = -1 ?","08/Feb/10 06:44;chandrashekarm;          StringUtils.indexOf("""","""")   returns 0
          StringUtils.indexOf("""",""a"")  returns -1 
          StringUtils.indexOf("""",'')  cant be given
          StringUtils.indexOf("""",'c') returns  -1

I think API is working correctly or is there any other scenario where it behaves  differently?","08/Feb/10 06:58;bayard;Thanks Valentin and Chandrashekar. You're both correct.

I've updated the javadoc to make it clearer, sorry for the false alarm :)

svn ci -m ""Adding extra javadoc to point out that usually indexOf on an empty String == -1. LANG-589"" src/
Sending        src/main/java/org/apache/commons/lang3/StringUtils.java
Transmitting file data .
Committed revision 907561.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassUtils.toClass(Object[]) throws NPE on null array element,LANG-587,12455497,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mbenson,mbenson,05/Feb/10 21:30,03/Mar/10 09:34,07/Apr/19 20:37,05/Feb/10 21:35,2.4,,,,2.5,,lang.*,,,0,,,,,,,,see summary,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,34036,,,Fri Feb 05 22:55:23 UTC 2010,,,,,,0|i0d5r3:,74708,,,,,,,,05/Feb/10 21:35;mbenson;fixed in trunk r907102,05/Feb/10 22:55;mbenson;merged for [lang] 2.5 r907121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use of ThreadLocals in ToStringStyle and HashCodeBuilder trigger memory leaks in container environments,LANG-586,12455350,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,markt,markt,04/Feb/10 20:51,03/Mar/10 09:34,07/Apr/19 20:37,04/Feb/10 21:59,,,,,2.5,,lang.builder.*,,,0,,,,,,,,"The thread local in org.apache.commons.lang3.builder.ToStringStyle is created but never removed and no API is provided to remove it. If a webapp's use of LANG triggers the loading of this class, a reference chain will be created that will cause a memory leak on web application reload.

See http://markmail.org/thread/uetw2fdrsqgbh2cv for more info.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-04 21:11:17.963,,,false,,,,,,,,,,,,,,147428,,,Sun Feb 07 03:14:51 UTC 2010,,,,,,0|i0d5rb:,74709,,,,,,,,04/Feb/10 21:11;mbenson;As it happens I'm currently working on similar issues at $work and just removed a ThreadLocal from the [flatfile] component; I'll take a look.,"04/Feb/10 21:59;mbenson;svn commit: r906673
svn commit: r906676",04/Feb/10 23:57;markt;Thanks for such a quick response.,05/Feb/10 23:20;mbenson;merged for [lang] 2.5 r907129,07/Feb/10 03:14;mbenson;HashCodeBuilder fixed for 3.0 r907373,,,,,,,,,,,,,,,,,,,,,,,,,,
exception.DefaultExceptionContext.getFormattedExceptionMessage catches Throwable,LANG-585,12447102,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,31/Jan/10 01:34,03/Feb/10 11:41,07/Apr/19 20:37,03/Feb/10 07:38,,,,,3.0,,lang.exception.*,,,0,,,,,,,,"It's generally a bad idea to catch Throwable.

The getFormattedExceptionMessage method should be changed to catch less; e.g. Exception + RuntimeException should be adequate.

The Javadoc examples in ContextedException and ContextedRuntimeException suggest catching Throwable; these examples should be changed too.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-02-01 06:58:50.445,,,false,,,,,,,,,,,,,,147427,,,Wed Feb 03 11:41:44 UTC 2010,,,,,,0|i0d5rj:,74710,,,,,,,,"01/Feb/10 06:58;bayard;Agreed, setting fix version to 3.0.","03/Feb/10 07:38;bayard;Fixed - Exception caught now instead of Throwable. That handles RuntimeException too.

svn ci -m ""Fixing LANG-585. Don't catch Throwable, catch Exception instead. ""
Sending        src/main/java/org/apache/commons/lang3/exception/DefaultExceptionContext.java
Transmitting file data .
Committed revision 905922.
","03/Feb/10 11:41;sebb@apache.org;Also fixed Javadoc that referred to Throwable:

URL: http://svn.apache.org/viewvc?rev=906015&view=rev
Log:
LANG-585. Don't suggest catching Throwable, catch Exception instead.

Modified:
   commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/exception/ContextedException.java
   commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionUtils uses mutable lock target,LANG-584,12446940,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,28/Jan/10 18:22,03/Mar/10 09:34,07/Apr/19 20:37,02/Feb/10 23:37,2.4,,,,2.5,,lang.exception.*,,,0,,,,,,,,"ExceptionUtils uses a mutable lock target: both the methods removeCauseMethodName() and addCauseMethodName() take out a lock on CAUSE_METHOD_NAMES but then modify it.

That doesn't work - locks need to be immutable.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-29 17:11:13.914,,,false,,,,,,,,,,,,,,147426,,,Tue Feb 02 23:37:20 UTC 2010,,,,,,0|i0d5rr:,74711,,,,,,,,"29/Jan/10 17:11;bayard;Looks like, apart from one comment, we removed being able to modify the cause names in 3.0. 

API is (the deprecated):

    public static Throwable getCause(Throwable throwable) {
    public static Throwable getCause(Throwable throwable, String[] methodNames) {
","29/Jan/10 17:12;bayard;javadoc mention of addCauseMethodName removed. 

Do you think this should stay open against 2.x, or minor and close?","29/Jan/10 19:24;sebb@apache.org;If the methods are to be kept, then the easiest solution is just to create an immutable lock object and use that instead.

If that's OK, I'm happy to implement it.",30/Jan/10 08:09;bayard;Sticking in 2.x in case such a thing ever happens. Not an issue in 3.0.,"02/Feb/10 23:37;niallp;Looks like this was fixed in trunk before the locks were removed:
    * http://svn.apache.org/viewvc?view=revision&revision=755391

So I ported that change back to the 2.x branch:
    * http://svn.apache.org/viewvc?view=revision&revision=905837",,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc bug in org.apache.commons.lang.StringUtils.removeEndIgnoreCase(),LANG-581,12445485,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,sebb@apache.org,wangcee,wangcee,14/Jan/10 07:42,25/Feb/10 20:59,07/Apr/19 20:37,15/Jan/10 03:28,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"the org.apache.commons.lang.StringUtils online document 
http://commons.apache.org/lang/api-release/org/apache/commons/lang/StringUtils.html#removeEndIgnoreCase%28java.lang.String,%20java.lang.String%29

at removeEndIgnoreCase()  description, there is one line 
StringUtils.removeEnd(""www.domain.com"", "".com."")  = ""www.domain.com.""

it should be 
StringUtils.removeEnd(""www.domain.com"", "".com."")  = ""www.domain.com""


",Online document,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-14 14:45:48.768,,,false,,,,,,,,,,,,,,147423,,,Fri Jan 15 03:28:05 UTC 2010,,,,,,0|i0d5rz:,74712,,,,,,,,"14/Jan/10 14:45;sebb@apache.org;Yes, the example is wrong.

In fact all the Javadoc examples for removeEndIgnoreCase() are wrong, as they all refer to removeEnd().

","14/Jan/10 15:14;sebb@apache.org;Fixed the issue originally reported:

URL: http://svn.apache.org/viewvc?rev=899231&view=rev
Log:
LANG-581 - Javadoc bug in org.apache.commons.lang.StringUtils.removeEndIgnoreCase()
","15/Jan/10 03:28;sebb@apache.org;Fixed the Javadoc examples:

URL: http://svn.apache.org/viewvc?rev=899242&view=rev
Log:
LANG-581 - Javadoc bug in org.apache.commons.lang.StringUtils.removeEndIgnoreCase()
Add some case-insensitive examples

URL: http://svn.apache.org/viewvc?rev=899231&view=rev
Log:
LANG-581 - Javadoc bug in org.apache.commons.lang.StringUtils.removeEndIgnoreCase()",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Problem while using simple quotes in ExtendedMessageFormat when a registry is specified,LANG-578,12444386,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,oterrien,oterrien,30/Dec/09 15:41,25/Feb/10 20:31,07/Apr/19 20:37,31/Dec/09 08:13,2.4,,,,2.5,,lang.text.*,,,0,,,,,,,,"This runs successfully : 

{code:java}
ExtendedMessageFormat templateFormat = new ExtendedMessageFormat(""''{0}''"");
System.out.println(templateFormat.format(new String[] { ""MESSAGE"" })); 
{code}

The result is 'MESSAGE'.

This raises an error :

{code:java}
Map<String, FormatFactory> formatFactory = new HashMap<String, FormatFactory>();
        formatFactory.put(""formatDate"", new FormatFactory() {

            @SuppressWarnings(""all"")
            public Format getFormat(String name, String arguments, Locale locale) {

                return new SimpleDateFormat();
            }
        });
ExtendedMessageFormat templateFormat = new ExtendedMessageFormat(""''{0}''"", , formatFactory);
System.out.println(templateFormat.format(new String[] { ""MESSAGE"" })); 
{code}

The result is an exception (java heap space).

*way* : In _appendQuotedString_ method the code above doesn't seem to increment the index pos before returning
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-30 17:05:47.776,,,false,,,,,,,,,,,,,,147420,,,Thu Dec 31 08:13:54 UTC 2009,,,,,,0|i0d5s7:,74713,,,,,,,,"30/Dec/09 17:05;niallp;This looks liked a duplicate of LANG-477 to me which was fixed in r733169:

http://svn.apache.org/viewvc?view=revision&revision=733169
","31/Dec/09 08:13;oterrien;I downloaded the new version of ExtendedMessageFormat class. It runs. 
I'll use it by shadowing the ExtendedMessageFormat 2.4 by waiting the release 3.0.
Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HashCodeBuilder reflectionAppend creates unnecessary copy of excludeFields,LANG-575,12443995,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,awhitford,awhitford,22/Dec/09 09:12,25/Feb/10 19:51,07/Apr/19 20:37,09/Jan/10 11:44,2.4,,,,2.5,,lang.builder.*,,,0,,,,,,,,"See http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/java/org/apache/commons/lang3/builder/HashCodeBuilder.java?view=markup

Please review the implementation for *reflectionAppend* (lines 174 to 202)...  Specifically, see line 182:

{code}
List<String> excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();
{code}

Note that if you are in the habit of passing in a String array for excluding fields ({{String[] excludeFields}}) -- which is a best practice when using Hibernate (to skip primary keys ({{@id}}) and version fields ({{@version}}) that change upon persistence) -- _EVERY TIME_ the _hashCode_ is calculated, an _ArrayList_ is being created -- generating fodder for the garbage collector.

I thought I might get around this by passing a {{Collection<String>}} instead of a {{String[]}}, but ironically the implementation of the {{reflectionHashCode(Object object, Collection<String> excludeFields)}} (see lines 475 to 477), for example, transforms the {{Collection<String>}} into a {{String[]}} only to have it transformed internally into a temporary {{ArrayList<String>}}.

I would expect the implementation to use and read what is submitted, whether that is a {{String[]}} or a {{Collection<String>}}.  I don't think it needs to create another copy just to have a convenient {{contains}} method.  Efficiency is important, especially in the event of rehashing.
",Sun Java JDK 1.6.0_17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-29 06:43:57.187,,,false,,,,,,,,,,,,,,147418,,,Sat Jan 09 11:44:17 UTC 2010,,,,,,0|i0d5sf:,74714,,,,,,,,"22/Dec/09 09:20;awhitford;Note that *EqualsBuilder* has the exact same issue.
See:  http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/java/org/apache/commons/lang3/builder/EqualsBuilder.java?view=markup
*reflectionAppend*, line 321:
{code}
List<String> excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();
{code}

And so does *CompareToBuilder*...
See:  http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/java/org/apache/commons/lang3/builder/CompareToBuilder.java?view=markup
*reflectionAppend*, line 356:
{code}
List<String> excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();
{code}
","22/Dec/09 09:22;awhitford;Considering how repetitive this issue is, you may want to consider LANG-283 because there does seem to be a refactoring opportunity here.","29/Dec/09 06:43;bayard;Definitely hoping to challenge the builder code before 3.0 is released. Its got the most duplication and the most JIRA items open.

Thanks for both of your optimization suggestions.","09/Jan/10 11:44;bayard;svn ci -m ""Replacing the creation of a List in the core of each Builder class to test contains on the excludeFields with a call to ArrayUtils.contains. Reported by Anthony Whitford in LANG-575""
Sending        src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
Sending        src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
Sending        src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
Transmitting file data ...
Committed revision 897421.
",,,,,,,,,,,,,,,,,,,,,,,,,,,
"ArrayUtils.add(T[] array, T element) can create unexpected ClassCastException",LANG-571,12443723,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,18/Dec/09 04:38,25/Jan/10 07:06,07/Apr/19 20:37,16/Jan/10 12:39,,,,,3.0,,lang.*,,,0,,,,,,,,"ArrayUtils.add(T[] array, T element) can create an unexpected ClassCastException.

For example, the following code compiles without a warning:

{code}
String[] sa = ArrayUtils.add(stringArray, aString);
{code}

and works fine, provided at least one of the parameters is non-null. However, if both parameters are null, the add() method returns an Object[] array, hence the Exception.

If both parameters are null, it's not possible to determine the correct array type to return, so it seems to me this should be disallowed.

I think the method ought to be changed to throw IllegalParameterException when both parameters are null.
",,,,,,,,,,,,,,,,LANG-568,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-16 08:07:47.448,,,false,,,,,,,,,,,,,,34106,,,Sat Jan 16 12:39:59 UTC 2010,,,,,,0|i0d5sn:,74715,,,,,,,,"18/Dec/09 05:04;sebb@apache.org;The same comments apply to the method ArrayUtils.add(T[] array, int index, T element)

","16/Jan/10 08:07;bayard;Assuming you mean IllegalArgumentException, +1.",16/Jan/10 11:56;sebb@apache.org;Yes - I keep forgetting which it is.,"16/Jan/10 12:39;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=899929&view=rev
Log:
LANG-571 ArrayUtils.add(T[] array[, offset], T element) can create unexpected ClassCastException

Modified:
   commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/ArrayUtils.java
   commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java
   commons/proper/lang/trunk/xdocs/changes.xml",,,,,,,,,,,,,,,,,,,,,,,,,,,
"@SuppressWarnings(""unchecked"") is used too generally",LANG-568,12443539,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,sebb@apache.org,sebb@apache.org,sebb@apache.org,16/Dec/09 15:31,30/Dec/09 10:58,07/Apr/19 20:37,18/Dec/09 19:03,,,,,3.0,,General,,,0,,,,,,,,"@SuppressWarnings(""unchecked"") is used in several places on entire methods.
Mostly there is no documentation as to why it is safe to ignore the warnings.

Seems to me the annotation should be used as close as possible to the site of the warning, and the reason should be documented, so it can be revisited if there is a code change later.

In fact, at least one of the warnings is NOT safe to ignore:

String[] s = ArrayUtils.add((String[])null, null);

generates a ClassCastException, which should not happen if the warning is OK to ignore.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-17 03:30:14.626,,,false,,,,,,,,,,,,,,34079,,,Fri Dec 18 19:03:52 UTC 2009,,,,,,0|i0d5sv:,74716,,,,,,,,"17/Dec/09 03:30;bayard;Seems good. I count 11 in the main source, so not that painful to fix. 

./ArrayUtils.java:    @SuppressWarnings(""unchecked"")
./ArrayUtils.java:    @SuppressWarnings(""unchecked"")
./ArrayUtils.java:    @SuppressWarnings(""unchecked"")
./ArrayUtils.java:    @SuppressWarnings(""unchecked"")
./ArrayUtils.java:    @SuppressWarnings(""unchecked"")
./builder/CompareToBuilder.java:    @SuppressWarnings(""unchecked"")
./Range.java:            @SuppressWarnings(""unchecked"") // OK because we checked the class above
./Range.java:        @SuppressWarnings(""unchecked"")
./Range.java:        @SuppressWarnings(""unchecked"")
./text/StrBuilder.java:    @SuppressWarnings(""null"") // str cannot be null
./text/StrLookup.java:            @SuppressWarnings(""unchecked"") // System property keys and values are always Strings
","18/Dec/09 05:06;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=892135&view=rev
Log:
LANG-568 - @SuppressWarnings(""unchecked"") is used too generally
Partial fix - some warnings remain to be addressed

URL: http://svn.apache.org/viewvc?rev=892136&view=rev
Log:
LANG-568 - @SuppressWarnings(""unchecked"") is used too generally
Partial fix - some warnings remain to be addressed

Note: this exercise has discovered two places where the casts were not safe - see LANG-571","18/Dec/09 19:03;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=892343&view=rev
Log:
LANG-568 - @SuppressWarnings(""unchecked"") is used too generally

I think all the warnings that can be safely suppressed have now been suppressed (and documented).

There are two warnings that remain cannot be suppressed safely; see LANG-571",18/Dec/09 19:03;sebb@apache.org;Warnings have now been tidied up,,,,,,,,,,,,,,,,,,,,,,,,,,,
"ArrayUtils.addAll(T[] array1, T... array2) does not handle mixed types very well",LANG-567,12443536,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,16/Dec/09 15:05,25/Feb/10 19:38,07/Apr/19 20:37,18/Dec/09 02:53,,,,,2.5,,lang.*,,,0,,,,,,,,"ArrayUtils.addAll(T[] array1, T... array2) does not handle mixed array types very well.

The stack trace for 

Number[] st = ArrayUtils.addAll(new Integer[]{1}, new Long[]{2L});

starts:

java.lang.ArrayStoreException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)

which is not all that obvious.

It would be a lot clearer if the method threw an IlegalArgumentException or similar.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-17 03:25:19.178,,,false,,,,,,,,,,,,,,34058,,,Fri Dec 18 16:13:08 UTC 2009,,,,,,0|i0d5t3:,74717,,,,,,,,16/Dec/09 15:56;sebb@apache.org;Better example,17/Dec/09 03:25;bayard;+1,"18/Dec/09 02:53;sebb@apache.org;Added test.
Changed code to catch ArrayStoreException and report IllegalArgument if types are not compatible

URL: http://svn.apache.org/viewvc?rev=892114&view=rev
Log:
LANG-567 - ArrayUtils.addAll(T[] array1, T... array2) does not handle mixed types very well
Also remove unnecessary main() and suite() from test class",18/Dec/09 06:10;pbenedict;Do you want to include the root cause to the IAE? I am not a fan of swapping exception types without chaining them.,"18/Dec/09 15:59;sebb@apache.org;I did consider checking the types before trying the array copy in which case the issue would not have arisen.

However it should be cheaper to wait until a problem occurs, and also slightly safer in case the check is too strict.

I'll update the code shortly.","18/Dec/09 16:13;pbenedict;Sebb, I agree. The code should assume things work, and catch exceptions for the exceptional cases. ",,,,,,,,,,,,,,,,,,,,,,,,,
Improve StrLookup API documentation,LANG-564,12443271,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,14/Dec/09 15:03,23/Aug/11 08:41,07/Apr/19 20:37,16/Jan/10 13:07,,,,,3.0,,lang.text.*,,,0,,,,,,,,"The API for StrLookup is confused. The class has been partly genericised, but why?

The Javadoc says the class is for looking up Strings which are indexed by Strings, and this agrees with the method lookup()

Surely if the class is generic on <V>, the lookup() method should return V, not String?

Does it make any sense for the class to return anything but a String? If not, then why is the class generic?
If it does make sense, then lookup() should return V.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-24 06:48:04.962,,,false,,,,,,,,,,,,,,64048,,,Tue Aug 23 08:41:30 UTC 2011,,,,,,0|i0d5tb:,74718,,,,,,,,24/Dec/09 06:48;bayard;Agreed that this is confused. I think we should roll back the generics changes.,24/Dec/09 14:32;joehni;Or consider using <T extends CharSequence>,"24/Dec/09 15:54;mbenson;+1 for T extends CharSequence for parameters, but to guarantee a T return type would a) require a Class<T> parameter, and b) require us to make assumptions about constructors of T subclasses... so either String or CharSequence (returning String) would still seem the appropriate RT.","16/Jan/10 08:24;bayard;The class is for providing a Str, Str view on a Str, V storage. From the tests:

{code:java}
        Map<String, Object> map = new HashMap<String, Object>();
        map.put(""number"", new Integer(2));
        assertEquals(""2"", StrLookup.mapLookup(map).lookup(""number""));
{code}

Based on that, the genercizing looks good to me (yeah I know I'm contradicting my previous comment, I hadn't dug into the previous code). I think a bit more javadoc explanation is in need but not a generics change.","16/Jan/10 13:07;sebb@apache.org;URL: http://svn.apache.org/viewvc?rev=899933&view=rev
Log:
LANG-564 Improve StrLookup API documentation

Modified:
   commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/text/StrLookup.java
   commons/proper/lang/trunk/xdocs/changes.xml","22/Aug/11 21:34;eneveu;I was also confused by the StrLookup type parameter while browsing the commons-lang 3.0.1 source. Instead of creating a duplicate issue, I thought it would be better to comment here, even though this issue seems to be closed...


I don't see the point of having a generic type parameter on the StrLookup class, if it's not used anywhere. No method / field in StrLookup references this type parameter. IntelliJ IDEA itself reports a warning: ""Type parameter 'V' is never used"". Moreover, Java generics are not reified, so there is no reliable way to access the type parameter at runtime (and I don't see the point of doing that anyway...).

While the Javadoc tries to clarify the purpose of a StrLookup, the unused type parameter is still confusing, and the client code has to un-necessarily specify type parameters. For example, I have to write:

{code}
StrLookup<?> lookup = StrLookup.noneLookup();
StrLookup<String> lookup2 = StrLookup.systemPropertiesLookup();
StrLookup<Integer> lookup3 = StrLookup.mapLookup(integerMap);
{code}

instead of

{code}
StrLookup lookup = StrLookup.noneLookup();
StrLookup lookup2 = StrLookup.systemPropertiesLookup();
StrLookup lookup3 = StrLookup.mapLookup(integerMap);
{code}


My best guess is that this type parameter was added when commons-lang was generified, because StringLookup.mapLookup() takes a generified Map. Doing this is not really needed, though: we could remove the <V> type parameter everywhere, and replace the StrLookup.mapLookup()'s Map<String, V> with a Map<String, ?> (which is the same as Map<String, ? extends Object>, but shorter).

I guess it's too late to change this now, due to backward compatibility... But I thought I'd comment just in case it's still possible.",23/Aug/11 07:01;bayard;I've put your comment in LANG-745. Closed issues are far too easy to miss comments on.,"23/Aug/11 08:41;eneveu;Ok. I wasn't sure whether I should create a new issue, but it makes sense since this one was closed 18 months ago. Thanks!",,,,,,,,,,,,,,,,,,,,,,,
unescapeHtml has been dropped without going through deprecation,LANG-561,12442682,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,sebb@apache.org,sebb@apache.org,08/Dec/09 00:38,17/Dec/09 03:41,07/Apr/19 20:37,10/Dec/09 12:12,,,,,3.0,,lang.*,,,0,,,,,,,,"The method StringEscapeUtils.unescapeHtml() is missing from version 3.0, yet is not deprecated in 2.4.

As far as I can tell, unescapeHtml is now called unescapeHtml4.

ISTM that unescapeHtml should be reinstated (and deprecated), and perform the same function as Html4.

Another issue - unescapeHtml3 has no Javadoc.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-08 02:04:20.646,,,false,,,,,,,,,,,,,,147408,,,Thu Dec 10 12:12:48 UTC 2009,,,,,,0|i0d5tj:,74719,,,,,,,,08/Dec/09 02:04;pbenedict;A 2.4.1 version can be released to deprecate the method appropriately?,"08/Dec/09 08:36;bayard;Agreed that unescapeHtml3 needs Javadoc.

I don't see any reason to deprecate unescapeHtml. There is lots of backwards incompatible changes in Lang, there's no point trying to sugar coat other changes and putting the pain off until later. Better to get it done with now when people are having to go to the work of making their code work.",08/Dec/09 08:37;bayard;To go further - there should be no deprecated code in Lang 3.0.,"08/Dec/09 18:05;sebb@apache.org;How about keeping unescapeHtml as an alias for unescapeHtml4 in LANG3?
(With suitable Javadoc).

This would not be the same as keeping deprecated code in LANG3.

I found the problem with the Gump build of JMeter.
There's currently no easy way to fix this, as unescapeHtml4 does not exist in LANG2 and LANG3 has yet to be released.",08/Dec/09 19:00;niallp;Presumably there is going to be a package name change before Lang 3.0 is released? If so everything breaks.,10/Dec/09 12:12;bayard;Closing per Sebb's comment on dev now that the package name has been changed.,,,,,,,,,,,,,,,,,,,,,,,,,
"Javadoc wrong for StringUtils startsWith, startsWithIgnoreCase, endsWith and endsWithIgnoreCase",LANG-557,12441389,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,ashkg2001,ashkg2001,22/Nov/09 12:00,25/Feb/10 20:42,07/Apr/19 20:37,26/Nov/09 17:41,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"In the examples given along with the descriptions of startsWith, startsWithIgnoreCase, endsWith and endsWithIgnoreCase of StringUtils class, the full string and the suffix/prefix are used in the wrong order.

eg: 

It is mentioned that StringUtils.startsWith(""abc"", ""abcdef"") = true
It should be StringUtils.startsWith(""abcdef"", ""abc"") = true
",http://commons.apache.org/lang//api/org/apache/commons/lang/StringUtils.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-26 10:02:45.199,,,false,,,,,,,,,,,,,,147404,,,Thu Nov 26 17:41:56 UTC 2009,,,,,,0|i0d5tr:,74720,,,,,,,,26/Nov/09 10:02;bayard;Looks like this has already been caught in svn - keeping this issue until the site is regenerated.,26/Nov/09 11:08;bayard;Site uploaded. Will take a few hours to sync from staging to prod.,26/Nov/09 17:41;bayard;Snapshot javadoc now shows fix.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils replaceEach - Bug or Missing Documentation ,LANG-552,12440184,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,fabianlange,fabianlange,09/Nov/09 12:40,25/Feb/10 19:48,07/Apr/19 20:37,14/Dec/09 07:51,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"The following Test Case for replaceEach fails with a null pointer exception.
I have expected that all StringUtils methods are ""null-friendly""
The use case is that i will stuff Values into the replacementList of which I do not want to check whether they are null.
I admit the use case is not perfect, because it is unclear what happens on the replace.
I outlined three expectations in the test case, of course only one should be met.

If it is decided that none of them should be possible, I propose to update the documentation with what happens when null is passed as replacement string

{code}
import static org.junit.Assert.assertEquals;

import org.apache.commons.lang.StringUtils;
import org.junit.Test;


public class StringUtilsTest {

	@Test
	public void replaceEach(){
		String original = ""Hello World!"";
		String[] searchList = {""Hello"", ""World""};
		String[] replacementList = {""Greetings"", null};
		String result = StringUtils.replaceEach(original, searchList, replacementList);
		assertEquals(""Greetings !"", result);
		//perhaps this is ok as well
                //assertEquals(""Greetings World!"", result);
                //or even
		//assertEquals(""Greetings null!"", result);
	}

	
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-13 07:26:25.043,,,false,,,,,,,,,,,,,,34120,,,Mon Dec 14 07:51:45 UTC 2009,,,,,,0|i0d5tz:,74721,,,,,,,,"13/Nov/09 07:26;bayard;Agreed that at the least a javadoc update should be done. Whether to change code - something up for discussion.

Usually the null safe approach covers passing null directly in, rather than null inside an array.","14/Dec/09 07:51;bayard;I dug more into the code and the intent appears to be that null in the replacement list is ignored. I've null protected the part that was dying and new tests pass.

svn ci -m ""Applying fix for LANG-552. StringUtils.replaceEach(String, String[], String[]) no longer NPEs when null appears in the last String[]""
Sending        src/java/org/apache/commons/lang3/StringUtils.java
Sending        src/test/org/apache/commons/lang3/StringUtilsTest.java
Transmitting file data ..
Committed revision 890212.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Need to release the latest code!,LANG-549,12439354,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,,fern,fern,29/Oct/09 02:25,26/Nov/09 09:32,07/Apr/19 20:37,26/Nov/09 09:32,2.4,,,,,,,,,0,,,,,,,,"A few of us are waiting for a critical fix on ExtendedMessageFormat, that was fixed in January 09.  Can we please have a commons-lang release?? please :)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-11-05 07:38:35.725,,,false,,,,,,,,,,,,,,147398,,,Fri Nov 13 07:24:47 UTC 2009,,,,,,0|i0d5u7:,74722,,,,,,,,"05/Nov/09 07:38;bayard;Are you really waiting, or are you just wanting to get off of local forks?

Aim is to get 3.0 out rather than doing a 2.4.1. Ideally by end of this year/January.","05/Nov/09 07:49;fern;well, I am resolved to not use any singly escaped apostrophe ''; since of course I can't just stop our project waiting for

but this might come to bite me at any time, and who knows what other bug fixes have been waiting in the code for a year..

so you're saying that people should just do a local build and just depend on a SNAPSHOT build?","13/Nov/09 07:24;bayard;Normally Lang has a release each year. The 2.4->3.0 change has slowed that down to 2 years. Given 3.0 is not backwards compatible with 2.4, I think that's fair.

Ideally I know that I'd rather not use 3.0 time to release a 2.4.1 or 2.5 unless there's a strong reason. I'm not sold on any of the bugfixes being release drivers, and the 2.x JIRA version only has a few items that are there because the code was deleted in 3.0 and a fix was also not readily identifiable.

Depending on the snapshot build would provide very useful feedback, or you could take the 2.4 source and fix the one bug affecting you in a local version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToStringStyle.registry ThreadLocal initialValue should return a Set that implements reference equality checking instead of object equality,LANG-544,12438599,Bug,Open,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,michael.richards@paetec.com,michael.richards@paetec.com,20/Oct/09 17:22,21/Oct/13 05:45,07/Apr/19 20:37,,2.4,,,,Patch Needed,,lang.builder.*,,,0,,,,,,,,"ToStringStyle.registry ThreadLocal initialValue should return a Set that implements reference equality checking instead of object equality.

This change would still protect against cyclical object graphs, but also protect against the following conditions:
* Incorrect implementations of hashCode/equals for any objects in the object graph
* Unintended side effects of the hashCode/equals methods for any objects in the object graph

Unfortunately, Java versions prior to 1.6 do not provide a simple built-in mechanism to create such a Set.  This issue is discussed here in detail:
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4479578

A possible work-around is to use an IdentityHashMap instead of a Set.  This class is available in Java 1.4 and later.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2010-01-16 08:49:54.425,,,false,,,,,,,,,,,,,,3023,,,Thu Jan 27 07:58:05 UTC 2011,,,,,,0|i0b5tr:,63056,,,,,,,,"16/Jan/10 08:49;bayard;If we're unable to move to JDK 1.6, a possibility is implementing Collections.newSetFromMap(Map) in Lang.

Alternatively, implement an IdentityHashSet (rough draft):

{code:java}
package org.apache.commons.lang3.collections;

import java.util.AbstractSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Iterator;

public class IdentityHashSet<E> extends AbstractSet<E> {

    private IdentityHashMap<E, E> decorated;

    public IdentityHashSet() {
        super();
    }

    public IdentityHashSet(Collection<E> collection) {
        if (collection != null) {
            HashMap<E, E> map = new HashMap<E, E>();
            for (E element : collection) {
                map.put(element, element);
            }
            decorated = new IdentityHashMap<E, E>(map);
        } else {
            decorated = new IdentityHashMap<E, E>();
        }
    }

    public int size() {
        return decorated.size();
    }

    public Iterator<E> iterator() {
        return decorated.keySet().iterator();
    }

    public boolean add(E element) {
        if (decorated.contains(element) ) {
            return false;
        } else {
            decorated.put(element, element);
            return true;
        }
    }
}
{code}",27/Jan/11 07:58;bayard;Moving to 3.1 as no activity on a patch and I don't have an itch for the builder package. I'd like to see us move to Java 6 in a later 3.x version so might be best implemented then.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateFormatUtils.format does not correctly change Calendar TimeZone in certain situations,LANG-538,12438318,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,jpeterson,jpeterson,16/Oct/09 16:47,13/Sep/13 01:19,07/Apr/19 20:37,17/Dec/09 06:05,2.4,,,,2.5,,lang.time.*,,,0,,,,,,,,"If a Calendar object is constructed in certain ways a call to Calendar.setTimeZone does not correctly change the Calendars fields.  Calling Calenar.getTime() seems to fix this problem.  While this is probably a bug in the JDK, it would be nice if DateFormatUtils was smart enough to detect/resolve this problem.

For example, the following unit test fails:

{noformat}
  public void testFormat_CalendarIsoMsZulu() {
    final String dateTime = ""2009-10-16T16:42:16.000Z"";

    // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)
    // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone
    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(""GMT-8""));
    cal.clear();
    cal.set(2009, 9, 16, 8, 42, 16);


    FastDateFormat format = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""GMT""));
    assertEquals(""dateTime"", dateTime, format.format(cal));
  }
{noformat}

However, this unit test passes:

{noformat}
  public void testFormat_CalendarIsoMsZulu() {
    final String dateTime = ""2009-10-16T16:42:16.000Z"";
    GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(""GMT-8""));
    cal.clear();
    cal.set(2009, 9, 16, 8, 42, 16);
    cal.getTime();

    FastDateFormat format = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""GMT""));
    assertEquals(""dateTime"", dateTime, format.format(cal));
  }
{noformat}","Sun JDK6, RHEL 5.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-12-17 06:03:53.491,,,false,,,,,,,,,,,,,,34034,,,Fri Sep 13 01:17:37 UTC 2013,,,,,,0|i0d5uf:,74723,,,,,,,,"17/Dec/09 06:03;bayard;I think this is due to FastDateFormat's:

        if (mTimeZoneForced) {
            calendar = (Calendar) calendar.clone();
            calendar.setTimeZone(mTimeZone);
        }

If I call getTime() before that, then the code works. If however I wait until after that to call getTime(), it does not work. The calendar before and after report themselves to be equal, and their toString contains the same information in both cases, yet something must not be getting lazy-initialized and then lost in the clone.","17/Dec/09 06:05;bayard;Thanks for the report Jeff. I've inserted a getTime() into FastDateFormat that fixes your test case, and hopefully extends to the general problem.

svn ci -m ""Fixing LANG-538 - you need to call getTime() on a calendar sometimes to get it in the right state, otherwise the timezone gets out of whack. "" src
Sending        src/java/org/apache/commons/lang3/time/FastDateFormat.java
Sending        src/test/org/apache/commons/lang3/time/FastDateFormatTest.java
Transmitting file data ..
Committed revision 891542.
","13/Sep/13 01:17;cpm;Hi. This bug is existing in version 3.3.1. The ""assertEquals(""dateTime"", dateTime, format.format(cal));"" from the test above returns the following error:
org.junit.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>

Reproduced whit Sun Java version: 1.6.0_45 and 1.7.0_21 on Fedora 17 (Linux 3.9.10-100.fc17.i686.PAE).

I will try to clone this issue.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ClassUtils.getShortClassName() will not work with an array;  it seems to add a semicolon to the end.,LANG-535,12436341,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,mjuchems,mjuchems,22/Sep/09 19:53,25/Feb/10 19:22,07/Apr/19 20:37,15/Oct/09 07:31,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"A semicolon is introduced into the class name at the end for all arrays...

String sArray[] = new String[2];
sArray[0] = ""mark"";
sArray[1] = ""is cool"";
String simpleString = ""chris"";
		
assertEquals(""String"", ClassUtils.getShortClassName(simpleString, null));
assertEquals(""String;"", ClassUtils.getShortClassName(sArray, null));",Java 1.4.2,,,,,,,,,,,,,,,,,,,,,,,,,13/Oct/09 06:44;bayard;LANG-535.patch;https://issues.apache.org/jira/secure/attachment/12421955/LANG-535.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-09-24 05:07:19.334,,,false,,,,,,,,,,,,,,34097,,,Thu Oct 15 07:31:51 UTC 2009,,,,,,0|i0d5un:,74724,,,,,,,,24/Sep/09 05:07;bayard;I wonder if the package name equivalent is prefixed by '[' for arrays.,"24/Sep/09 13:30;mjuchems;Doing this in java :

String sArray[] = new String[2];
sArray[0] = ""mark"";
sArray[1] = ""is cool"";
String simpleString = ""chris"";

sArray.getClass() = ""class [Ljava.lang.String;""

I am sure this is where they are going wrong.  I have not looked into the code, however, I would imagine they are taking everything past the last ""."".

I am not sure what the correct return should be.  I know what I would like it to be, and that is apparent.  However, an ""array"" is a primitive data type and therefore not an Object,  so I believe it should throw and exception.  But that would not be helpful...
",24/Sep/09 16:10;joehni;Actually ClassUtils.getShortName should do what Class.getSimpleName does in JDK 1.5,25/Sep/09 01:59;bayard;Or it needs deleting if there is a JDK 1.5 alternative.,25/Sep/09 06:30;joehni;Since 3.0 targets JDK 1.5 only - yes.,"25/Sep/09 12:49;mjuchems;So I put it all together in 1.5:

String sArray[] = new String[2];
sArray[0] = ""mark"";
sArray[1] = ""is cool"";
sArray.getClass().getSimpleName();

this returns:  String[]

I guess the java team has spoken.  I suggest deleting since 1.5 has an alternative...

 I still think I would rather have just the name and no brackets, however.   For my use I would have to do some additional editing.  I am sending in an Object[] or an Object into a method and need the same behavior for both.  

This failed when I sent in an array:

protected void createXML(XStream xStream, PrintWriter pw, Object o) {
		pw.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>"");
		xStream.alias(ClassUtils.getShortClassName(o, null), o.getClass());
		xStream.toXML(o, pw);
}

So I changed it to this:

protected void createXML(XStream xStream, PrintWriter pw, Object o, Class c) {
		pw.write(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" ?>"");
		xStream.alias(ClassUtils.getShortClassName(c), c);
		xStream.toXML(o, pw);
}

Not a big change, but it is something..","25/Sep/09 13:06;joehni;In that case you could have written:

{code:java}
ClassUtils.getShortClassName(o.getClass().isArray() ? o.getClass().getComponentType() : o.getClass())
{code}

However, we're getting OT here. Come to the user's list of Commons, or for XStream specific questions to XStream's user's list ...

Cheers,
Jörg","13/Oct/09 05:54;bayard;Difference in behaviour between JDK getSimpleName and Lang getShortClassName:

  JDK returns the class name for an inner class.
  Lang returns the surrounding class name and the class name of the inner class as the class name.

Difficult to say which is correct imo. Lang relies on '$' as the inner class name separator.","13/Oct/09 06:42;bayard;Plus Lang provides a String API in addition to the Class API. Given that a Class may not be available, this isn't the same as say relying on the File API instead of Strings for IO work.","13/Oct/09 06:44;bayard;Attaching a patch that adds support for:

* arrays
* primitive arrays
* multiple dimension arrays
* Stops getPackageName using the underlying cls.getPackage().getName() after discovering java.lang.String[]'s getPackage to be null (at least within the Maven2/JUnit classloader).

Plus various tests.","15/Oct/09 07:31;bayard; svn ci -m ""Applying my patch from LANG-535 - adding support to getShortClassName and getPackageName for arrays, including primitive arrays and multi-dimensional arrays. Also stopped getPackageName relying on the underlying class.getPackage as it's sometimes null"" src/test/org/apache/commons/lang/ClassUtilsTest.java src/java/org/apache/commons/lang/ClassUtils.java 
Sending        src/java/org/apache/commons/lang/ClassUtils.java
Sending        src/test/org/apache/commons/lang/ClassUtilsTest.java
Transmitting file data ..
Committed revision 825420.",,,,,,,,,,,,,,,,,,,,
parseDate cannot parse ISO8601 dates produced by FastDateFormat,LANG-530,12435117,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,azeckoski,azeckoski,08/Sep/09 14:38,25/Feb/10 19:42,07/Apr/19 20:37,17/Dec/09 07:21,2.4,,,,2.5,,lang.time.*,,,0,,,,,,,,"I cannot see why this is failing but here is my code:

   Date parseDate(String dateStr) {
       Date d = null;
       if (dateStr != null && ! """".equals(dateStr)) {
           try {
               // try to parse the date from ISO8601, general
formats, and RFC-2822
               d = DateUtils.parseDate(dateStr, new String[] {

DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern()
                       });
           } catch (ParseException e) {
               // nothing to do
               log.info(""Failed to parse: "" + dateStr + "":"" + e, e);
               d = null;
           }
       }
       return d;
   }

The string I am sending in to that method was generated like this:
String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(date);

The exception is:
2009-09-03 13:29:37,644 [399355530@qtp3-2] INFO
search.SOLRSearchService  - Failed to parse:
2009-09-03T13:29:30+01:00:java.text.ParseException: Unable to parse
the date: 2009-09-03T13:29:30+01:00
java.text.ParseException: Unable to parse the date: 2009-09-03T13:29:30+01:00
       at org.apache.commons.lang.time.DateUtils.parseDate(DateUtils.java:285)
       at org.steeple.impl.search.SOLRSearchService.parseDate(SOLRSearchService.java:412)
       at org.steeple.impl.search.SOLRSearchService.execute(SOLRSearchService.java:311)
....

",,,,,,,,,,,,,,,,LANG-462,,,,,,,,,,17/Dec/09 06:51;bayard;LANG-530-exception.patch;https://issues.apache.org/jira/secure/attachment/12428267/LANG-530-exception.patch,17/Dec/09 07:19;bayard;LANG-530-protect-SimpleDateFormat.patch;https://issues.apache.org/jira/secure/attachment/12428270/LANG-530-protect-SimpleDateFormat.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2009-09-15 07:14:14.947,,,false,,,,,,,,,,,,,,34086,,,Thu Dec 17 07:21:50 UTC 2009,,,,,,0|i0d5uv:,74725,,,,,,,,"15/Sep/09 07:14;bayard;Issue seems to be that DateFormatUtils.ISO_DATETIME objects are
FastDateFormat objects; whereas parseDate uses SimpleDateFormat. The
former supports ""ZZ"" whereas the latter does not.

Java 1.4 (not sure about later) had 'Z' which meant +0100.
FastDateFormat adds 'ZZ' to support the ISO standard of +01:00. ie)
presumably your actual value is +0100+0100.

Solution is probably to have parseDate use FastDateFormat, though
there will always be the issue that getPattern from FastDateFormat may
not work with SimpleDateFormat.",13/Oct/09 06:55;bayard;Fixing this is not so easy. LANG-462 points out that FastDateFormat does not currently support parse/parseObject.,12/Dec/09 11:44;bayard;I think the solution (so to speak) here is for DateUtils to throw an exception if a pattern is passed in containing ZZ. Might need a bit of parsing to avoid causing problems for people using the literal 'ZZ'.,"12/Dec/09 11:46;bayard;Alternatively, implement parse(..) such that it handles ZZ before relying on SimpleDateFormat.",12/Dec/09 11:48;bayard;In either case - the better place for the fix is inside DateUtils rather than FastDateFormat.,"17/Dec/09 06:49;bayard;No simple matter to parse the ZZ and then send the code on to SimpleDateFormat.parseObject. 

Definitely an option to point DateUtils to FastDateFormat and have an exception thrown if TimeZoneNumberRule.INSTANCE.COLON is in the pattern. Potential downside - FastDateFormat maintains a static cache of patterns used and we'd be exposing DateUtils users to that memory usage.

Another option is to modify the incoming String to not have the ':'. Either in DateUtils, or as it's a better fit, in the same code as above but with the modification instead of the exception. Downside is who knows what's in the pattern's literals.

A meld of the two:

Switch to FastDateFormat
If the pattern in use equals one of DateFormatUtils' ones, then use regexp.
Otherwise throw exception.","17/Dec/09 06:50;bayard;Suggested regexp: str.replaceAll(""([-+][0-9][0-9]):([0-9][0-9])"", ""$1$2"");",17/Dec/09 06:51;bayard;Patch attached showing exception throwing option.,"17/Dec/09 07:13;bayard;
Arbitrarily moving DateUtils to FastDateFormat concerns me. So does running regexp on the user input. However I think the following will a) fix 80% of issues and b) be safe:

if the pattern in question ends in ZZ, which all of the ones in DateFormatUtils do, then go ahead and do the regexp. If it ends in ZZ, then it's not part of a literal, so there's no concern for clash. There might be other ZZ's that don't get fixed, but this will ensure the items in DateFormatUtils work and cover another set of formats.",17/Dec/09 07:19;bayard;Attaching patch to protect SimpleDateFormat from ZZ as mentioned in previous comment.,"17/Dec/09 07:21;bayard;Applying the least worst of the various suggestions I've come up with :)

svn ci -m ""Applying 'fix' for LANG-530. DateUtils.parseDate now protects the common use case of FastDateFormat ZZ output, namely ZZ on the end of the pattern, from being passed to SimpleDateFormat as is. Use of ZZ elsewhere in the pattern isn't protected and will want to consider emulating the String changes made in this patch. ""
Sending        src/java/org/apache/commons/lang3/time/DateUtils.java
Sending        src/test/org/apache/commons/lang3/time/DateUtilsTest.java
Transmitting file data ..
Committed revision 891572.
",,,,,,,,,,,,,,,,,,,,
NumberUtils.isNumber() Should Return True for Valid Number with a Trailing Decimal Place,LANG-521,12432212,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,crompot,crompot,04/Aug/09 22:21,25/Feb/10 19:48,07/Apr/19 20:37,22/Dec/09 08:08,2.4,,,,2.5,,lang.math.*,,,0,,,,,,,,"NumberUtils.isNumber() should return true for a valid number ending in a trailing decimal place; e.g., ""2."" should be considered a number because new BigDecimal(""2."") works fine.  This could be done by adding the code below after line 1444, which is the if (chars[i] == 'e' || chars[i] == 'E') block.

if (chars[i] == '.') {
    if (hasDecPoint || hasExp) {
        // two decimal points or dec in exponent   
        return false;
    }
    return foundDigit; // single trailing decimal point after non-exponent is ok
}","Windows XP SP3, Intel CPU",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-09 02:43:09.328,,,false,,,,,,,,,,,,,,34090,,,Tue Dec 22 08:08:26 UTC 2009,,,,,,0|i0d5v3:,74726,,,,,,,,"09/Aug/09 02:43;bayard;Fair enough. Adding to 3.0 version. 

Unit tests needed. createNumber also needs to make sure it works.","22/Dec/09 06:40;bayard;Noting that ""2."" works for Double and Float too.","22/Dec/09 08:08;bayard;Fixed in 893088.

Both createNumber and isNumber now accept ""2."". createNumber returns a Float in that case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
OutOfMemory Error caused by ExtendedMessageFormat,LANG-509,12427323,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,schlaufuchs,schlaufuchs,08/Jun/09 06:57,25/Feb/10 21:04,07/Apr/19 20:37,09/Jun/09 19:13,2.4,,,,2.5,,lang.text.*,,,1,,,,,,,,"It is possible to let ExtendedMessageFormat cause an OutOfMemory Error (Java heap space) - no matter how large you define the memory, because the code produces an endless loop that extends a StringBuffer ad infinitum.

Code to reproduce:


instantiate an ExtendedMessageFormat object using the constructor 
public ExtendedMessageFormat(String pattern, Locale locale, Map registry) 

locale and registry (not null) don't matter actually, but pattern as String looks like this:
{{The field ''{0}'' must be completed}}
notice the doubled single quotes.

The constructor then executes applyPattern(pattern)
In applyPattern, line 158 (that is inside the loop over the pattern length)  {{appendQuotedString(pattern, pos, stripCustom, true);}} is called, it is the last statement for that case in the loop. 
In  appendQuotedString, line 422 the quote character gets appended to the return StringBuffer, then return. The problem in fact is, that the pointer (ParsePosition pos) isn't updated and after return the procedure will check the same character again and again and again. 

Primitive workaround: no use of single quotes in messages as input of ExtendedMessageFormat.

","Windows XP, Tomcat 5.5.27, Sun JDK 1.6.0_13",,,,,,,,,,,,,LANG-477,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-06-09 19:13:40.343,,,false,,,,,,,,,,,,,,147369,,,Tue Jun 09 19:13:40 UTC 2009,,,,,,0|i0d5vb:,74727,,,,,,,,09/Jun/09 19:13;niallp;This has been fixed already see LANG-477,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Entities - missing final modifiers; thread-safety issues,LANG-506,12425718,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,niallp,sebb@apache.org,sebb@apache.org,18/May/09 12:12,03/Mar/10 09:34,07/Apr/19 20:37,03/Feb/10 00:21,,,,,2.5,,lang.*,,,0,,,,,,,,"Some fields in Entities are used as constants but they are not final, so can be changed accidentally or maliciously:

ISO8859_1_ARRAY_LENGTH
HTML40_ARRAY_LENGTH

Entities.map should also be final
Entities.LookupEntityMap.LOOKUP_TABLE_SIZE should be final

Entities.MapIntMap.mapValueToName and mapNameToValue would benefit from being made final.
This would require a constructor to be added that can initialise the Maps.

LookupEntityMap is not thread-safe - it creates the lookup table without synchronisation, and mutates it after initial creation.

Entities.ArrayEntityMap.growBy should be final

As far as possible, all instance fields to be made final.

Patch to follow",,,,,,,,,,,,,,,,LANG-505,,,,,,,,,,18/May/09 13:06;sebb@apache.org;entities-506-1.patch;https://issues.apache.org/jira/secure/attachment/12408375/entities-506-1.patch,18/May/09 17:23;sebb@apache.org;entities-506-2.patch;https://issues.apache.org/jira/secure/attachment/12408394/entities-506-2.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2009-06-06 08:46:20.442,,,false,,,,,,,,,,,,,,147366,,,Wed Feb 03 00:21:44 UTC 2010,,,,,,0|i0d5vj:,74728,,,,,,,,"18/May/09 13:06;sebb@apache.org;The attached patch adds final modifiers where possible.
It requires a minor change to the test code.

There are still some internal classes that are not yet thread-safe; these have been marked with TODO comments",18/May/09 17:23;sebb@apache.org;Oops - overlooked another test that needs access to the map,06/Jun/09 08:46;bayard;Planning to rewrite Entities.,25/Jun/09 04:32;bayard;Entities deleted from 3.0 codebase.,"03/Feb/10 00:21;niallp;Applied the patch (manually) to the 2.x branch

http://svn.apache.org/viewvc?view=revision&revision=905846",,,,,,,,,,,,,,,,,,,,,,,,,,
CharSet sub-classes cannot be made thread-safe,LANG-494,12416915,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,15/Mar/09 15:25,25/Feb/10 19:39,07/Apr/19 20:37,09/Jan/10 10:07,,,,,2.5,,lang.*,,,0,,,,,,,,"AFAICT, CharSet sub-classes cannot be made thread-safe.

This is because the HashMap and HashSet collections are not thread-safe.

If a sub-class updates COMMON, there is no guarantee that getInstance() will see the update.

In the case of the instance variable ""set"", the sub-class could override all the read/write methods to provide thread-safety.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-11 06:44:45.919,,,false,,,,,,,,,,,,,,147358,,,Sat Jan 09 10:07:00 UTC 2010,,,,,,0|i0d5vr:,74729,,,,,,,,"11/Aug/09 06:44;bayard;So, do we wrap it in a Collections synchronized wrapper?","09/Jan/10 10:07;bayard;svn ci -m ""Synchronizing the COMMON Map so that getInstance doesn't miss a put from a subclass in another thread. LANG-494""
Sending        src/main/java/org/apache/commons/lang3/CharSet.java
Transmitting file data .
Committed revision 897408.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToStringBuilder is thread-hostile,LANG-487,12416892,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,14/Mar/09 15:52,25/Feb/10 19:55,07/Apr/19 20:37,16/Jan/10 07:43,,,,,2.5,,lang.builder.*,,,0,,,,,,,,"ToStringBuilder is thread-hostile due to the use of the static ""defaultStyle"" variable.

Adding synchronization won't solve this.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-04-09 08:20:09.353,,,false,,,,,,,,,,,,,,147351,,,Sat Jan 16 07:43:06 UTC 2010,,,,,,0|i0d5vz:,74730,,,,,,,,"15/Mar/09 02:35;sebb@apache.org;If the setDefaultStyle() method is not used, then the class is not thread-hostile, so the Javadoc should at least point this out.

The get/setDefaultStyle() methods should really be synch, otherwise there is no guarantee what one thread will get when another sets.

If this were done, then it would be safe to call the set() method before any use is made of the class.

Users that provide a non-null ToStringStyle to constructors and static methods should not be affected by changes to the default style, so perhaps the constructors should enforce this.",09/Apr/09 08:20;bayard;Rewrite for 3.0 to deal with/remove the static variable?,"26/Oct/09 22:07;scolebourne;Variable made volatile.

I propose we close this call.",16/Jan/10 07:43;bayard;Closing per Stephen's commit.,,,,,,,,,,,,,,,,,,,,,,,,,,,
Possible race-conditions in hashCode of the range classes,LANG-481,12413122,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,2091c76f726f21a61b6d2f8b885cc39d,2091c76f726f21a61b6d2f8b885cc39d,23/Jan/09 19:48,16/Jan/10 08:04,07/Apr/19 20:37,16/Jan/10 08:04,2.4,,,,3.0,,lang.*,,,0,,,,,,,,"The hashCode() methods of the range classes look very suspicious to me. The value is lazily initialized, but the calculation is done _on the cached value. With some unlucky timing a caller may get an incomplete hash.

An unlucky sequence of Code could be something like
T1:        if (hashCode == 0) // true
T1:            hashCode = 17;
T2:         if (hashCode == 0) // now false because hashCode was already set to 17
T2:         return hashCode; // return 17
T1:            hashCode = 37 * hashCode...........

where T1 and T2 are different threads accessing the method in parallel and T2 gets the wrong hash ""17"".

Affected classes are

org.apache.commons.lang.math.DoubleRange
org.apache.commons.lang.math.FloatRange
org.apache.commons.lang.math.IntRange
org.apache.commons.lang.math.LongRange
org.apache.commons.lang.math.NumberRange
org.apache.commons.lang.math.Range

Possible fix: calculate the hash on a temporary variable and finally assign it to the member",,,,,,,,,,,,,,,,,,,,,,,,,,10/Oct/09 19:27;2091c76f726f21a61b6d2f8b885cc39d;LANG-481-reordering_datarace.patch;https://issues.apache.org/jira/secure/attachment/12421806/LANG-481-reordering_datarace.patch,12/Aug/09 19:03;2091c76f726f21a61b6d2f8b885cc39d;LANG-481.patch;https://issues.apache.org/jira/secure/attachment/12416350/LANG-481.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2009-01-24 12:57:41.867,,,false,,,,,,,,,,,,,,147347,,,Sat Jan 16 08:04:53 UTC 2010,,,,,,0|i0d5w7:,74731,,,,,,,,"24/Jan/09 12:57;jwcarman;If this is indeed an issue, there are other cached values also that have the same problem (toString, maxObject, minObject) in LongRange  This JIRA issue should encompass those, also.","24/Jan/09 15:24;2091c76f726f21a61b6d2f8b885cc39d;toString, maxObject and minObject do not have *this* kind of race where you could end up with *wrong* data.
Of course there is race too, but in the worst case, you may only end up calculating the value every time the method is called and the cached value is not visible to your Thread. Of course you get no caching, but you'll never get wrong data.
So this worst case is pretty much like not caching it at all, but with some luck you get the value cached - at least once for each thread.

Looking at other classes this seems to be a common technique in commons-lang.","24/Jan/09 16:03;sebb@apache.org;I'm not sure that would be true for an arbitrary object: if an object is written in one thread, another thread may see a partially updated object unless the two threads synchronise on the same lock.

However, the objects in this case (Long) are final which I think means that their contents will be published correctly - i.e. other threads will see the updated object in full or not at all.","24/Jan/09 16:46;2091c76f726f21a61b6d2f8b885cc39d;Sebb, you're right. What I said is not true for arbitrary Objects. Sorry.
I think it's only true for immutable Objects (that use final fields). And only for atomic assignment operations (assignments of primitive longs and doubles on a non-volatile field is AFAIK not atomic, but object-reference assignment is indeed). But I guess there are better explanations out there then mine :-/",12/Aug/09 07:05;bayard;What's the open topic on this issue? Which classes have the problem?,"12/Aug/09 18:56;2091c76f726f21a61b6d2f8b885cc39d;Henri, as far as I can see all the classes I mentioned in my report have the problem. All other classes I looked at not because they don't use the member-variable as a temp to calculate the value.
There is one exception from my first list (at least in current trunk): org.apache.commons.lang.math.Range looks safe

So it comes down to this classes:
org.apache.commons.lang.math.DoubleRange
org.apache.commons.lang.math.FloatRange
org.apache.commons.lang.math.IntRange
org.apache.commons.lang.math.LongRange
org.apache.commons.lang.math.NumberRange","12/Aug/09 19:03;2091c76f726f21a61b6d2f8b885cc39d;Possible patch to this issue.
This uses the same technique used elsewhere in commons-lang. Using a non-volatile field to cache the value (in the worst case it may be calculated every time, in the best case only once) and calculating the value on a temp variable so that there is never an inconsistent value stored in the field.",07/Sep/09 17:56;bayard;Patch applied - thanks Boris :),"10/Oct/09 19:26;2091c76f726f21a61b6d2f8b885cc39d;I'm sorry, I just dicovered that there is another data-race in that methods that I overlooked before.

In short: Due to the Java Memory Model and allowed reorderings it is possible that the hashCode() can return 0 instead of the correct value and thus breaking HashMaps etc. in this case.
Please see [this post|http://jeremymanson.blogspot.com/2008/12/benign-data-races-in-java.html] for details on this issue and String.hashCode() in the java-sources as a reference how to do it right. He explained it better than I can.

I'll attach a patch against trunk to fix this.",08/Nov/09 18:11;bayard;Currently considering deleting the *Range classes and replacing with a single Range class. Presumably it doesn't resolve this issue - need to check post LANG-551.,14/Nov/09 10:02;bayard;*Range classes deleted. Need to figure out a fix for the hashCode data-race reordering. Seems that we need to cache the value or work it out in the constructor.,"14/Nov/09 15:33;2091c76f726f21a61b6d2f8b885cc39d;Henri,
The current hashCode() is fine of course :) And as optimum long as speed is no concern it's also the best. Just my 2ct on this topic:

Caching or pre-calculating the value will be a trade-off on how you want to use the class. If you pre-calculate the value and never use hashCode() the ""effort"" was pointless. If you cache it, it will MAY be re-calculated on every call (but this is rather unlikely).

I think the cached-approach is the best (if it's done right of course :)), but the constructor-approach is easier to get right.
But as one can use String.hashCode() as a boilerplate it should be easy to implement optimistic caching right.","14/Nov/09 19:43;bayard;Link to license useable String.java:

http://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk/modules/luni/src/main/java/java/lang/String.java","10/Dec/09 19:45;2091c76f726f21a61b6d2f8b885cc39d;Sorry for the delay of my answer.

The hashCode() of Harmony has the same reorder-bug as described above. It loads from a non-volatile field without synchronisation, so the code can be reordered and 0 could be wrongly returned as a hashCode.","11/Dec/09 10:14;tellison;Boris,
Harmony's String#hashCode() is fine, see the discussions on the dev list

http://markmail.org/thread/3ckdhgonbh7xtulg
http://markmail.org/thread/3ckdhgonbh7xtulg
",16/Jan/10 08:04;bayard;Closing out with Boris' 2nd patch effectively applied to the new Range class while adding hashCode caching (r899897).,,,,,,,,,,,,,,,
StringEscapeUtils.escapeHtml incorrectly converts unicode characters above U+00FFFF into 2 characters,LANG-480,12412851,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,capitol,capitol,20/Jan/09 17:36,17/Dec/09 03:41,07/Apr/19 20:37,01/Mar/09 20:55,2.4,,,,3.0,,lang.*,,,0,,,,,,,,"Characters that are represented as a 2 characters internaly by java are incorrectly converted by the function. The following test displays the problem quite nicely:

import org.apache.commons.lang.*;

public class J2 {
    public static void main(String[] args) throws Exception {
        // this is the utf8 representation of the character:
        // COUNTING ROD UNIT DIGIT THREE
        // in unicode
        // codepoint: U+1D362
        byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };

        //output is: &amp;#55348;&amp;#57186;
        // should be: &amp;#119650;
        System.out.println(""'"" + StringEscapeUtils.escapeHtml(new String(data, ""UTF8"")) + ""'"");
    }
}

Should be very quick to fix, feel free to drop me an email if you want a patch.",doesn't matter,,,,,,,,,,,,,,,,,,,,,,,,,21/Jan/09 09:27;capitol;lang-480.patch;https://issues.apache.org/jira/secure/attachment/12398388/lang-480.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-01-21 09:40:59.301,,,false,,,,,,,,,,,,,,34071,,,Sun Mar 01 20:55:06 UTC 2009,,,,,,0|i0d5wf:,74732,,,,,,,,21/Jan/09 08:31;capitol;Here is a fix for the problem i think,21/Jan/09 09:27;capitol;And of course you shouldn't develop before you dring your coffe. Here is a working patch for the same problem.,"21/Jan/09 09:40;joehni;Unfortunately this patch will have to wait until minimum requirement for commons-lang is JDK 5. Currently commons-lang is still compatible to JDK 1.2. However, talk for a JDK 5 version has already started.","21/Jan/09 15:50;capitol;That is a bit sad.

How likely do you think that the JDK 5 version to be, will it happen within this quarter?

I guess i could try to write a patch that is compatible with java 1.2, but that would require me to do my own parsing of the format that java stores characters in memory, so i would really like to avoid having that code in a library.","21/Jan/09 17:39;sebb@apache.org;I've not looked at the code, so this may be nonsense - 

Perhaps you could make the processing conditional - if it finds it's running under JVM 1.5+, then use the JVM Method, otherwise ignore the problem?","21/Jan/09 17:57;jwcarman;Wouldn't you have to use reflection, then?  ","21/Jan/09 20:21;sebb@apache.org;Yes, but AFAICT Class.getMethod() is available in Java 1.2.

The method could be fetched in a static block.","22/Jan/09 14:18;jwcarman;Of course it is. :)  My point was that we would be engaging in reflection nastiness and it might not be worth it.  I would suggest that if Alexander needs a release sooner that they do an ""internal"" release from the trunk with the changes applied and then ""upgrade"" when we get a newer release out.  I don't like the idea of building in the reflection stuff.  We get no compiler checking that way and it leads to unreadable code.","22/Jan/09 14:35;capitol;Just my 2 cents, I don't need a release that fixes this bug, i stumbled on it by chance and wrote a patch so that the next person that have the same problem that i do won't have to dig through the library in order to understand what's going on.

I'm mainly interested in fixing this because i don't like buggy software, but i totally agree that building in reflection stuff leads to more problems than it solves in the long run.

My opinion on how to fix this is either push for the JDK 1.5 dependency, or write some code that parses the format the strings are stored in memory. The latter might sound complicated but i think it's quite straight forward.","01/Mar/09 20:55;bayard;svn ci -m ""Applying Alexander Kjall's patch from LANG-480; along with a unit test made from his example. Fixes unicode conversion above U+00FFFF being done into 2 characters""

Sending        src/java/org/apache/commons/lang/Entities.java
Sending        src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
Transmitting file data ..
Committed revision 749095.",,,,,,,,,,,,,,,,,,,,,
StopWatch does not resist to system time changes,LANG-478,12412011,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,rdesgroppes,rdesgroppes,09/Jan/09 10:12,17/Dec/09 03:45,07/Apr/19 20:37,01/Mar/09 21:18,2.3,,,,3.0,,lang.time.*,,,0,,,,,,,,"org.apache.commons.lang.time.StopWatch seems to be relying on wall clock, i.e. by calling java.lang.System.currentTimeMillis() to sample current time.

When a system time change occurs (user action, NTP synchronization...) between 2 calls to StopWatch.getTime(), the difference between the 2 samples is wrong: the measured duration may noticeably differ from the real one. Moreover, should the system time change consist in a backward adjustment, the difference could be negative.

In order to make StopWatch resistant to system time changes, would it be possible to use the process time, i.e. by making implementation calling java.lang.System.nanoTime() -multiplied by appropriate factor, of course.

Thanks a lot,
Regis.
",all operating systems.,,,,,,,,,,,,,LANG-323,,,,,,,,,,,,01/Mar/09 21:17;bayard;LANG-478.patch;https://issues.apache.org/jira/secure/attachment/12401207/LANG-478.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2009-02-28 04:11:32.829,,,false,,,,,,,,,,,,,,147345,,,Sun Mar 01 21:18:29 UTC 2009,,,,,,0|i0d5wn:,74733,,,,,,,,"28/Feb/09 04:11;bayard;Sounds good. We've wanted to do this once we're 1.5 dependent, which 3.0 will be.",01/Mar/09 21:17;bayard;Attaching patch to move to nanoTime.,"01/Mar/09 21:18;bayard;svn ci -m ""Applying my patch from LANG-478 - moving StopWatch to using nanoTime under the hood. ""

Sending        src/java/org/apache/commons/lang/time/StopWatch.java
Transmitting file data .
Committed revision 749114.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExtendedMessageFormat: OutOfMemory with custom format registry and a pattern containing single quotes,LANG-477,12412010,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,niallp,djeley,djeley,09/Jan/09 10:05,25/Feb/10 19:45,07/Apr/19 20:37,09/Jan/09 22:08,2.4,,,,2.5,,lang.text.*,,,0,,,,,,,,"When using ExtendedMessageFormat with a custom format registry and a pattern conatining single quotes, an OutOfMemoryError will occur.

Example that will cause error:

{code:title=ExtendedMessageFormatTest.java|borderStyle=solid}

private static Map<String, Object> formatRegistry = new HashMap<String, Object>();    
    static {
        formatRegistry.put(DummyFormatFactory.DUMMY_FORMAT, new DummyFormatFactory());
    }
    
    public static void main(String[] args) {
        ExtendedMessageFormat mf = new ExtendedMessageFormat(""it''s a {dummy} 'test'!"", formatRegistry);
        String formattedPattern = mf.format(new String[] {""great""});
        System.out.println(formattedPattern);
    }
}

{code}

The following change starting at line 421 on the 2.4 release seems to fix the problem:

{code:title=ExtendedMessageFormat.java|borderStyle=solid}
CURRENT (Broken):
if (escapingOn && c[start] == QUOTE) {
        return appendTo == null ? null : appendTo.append(QUOTE);
}

WORKING:
if (escapingOn && c[start] == QUOTE) {
        next(pos);
        return appendTo == null ? null : appendTo.append(QUOTE);
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,09/Jan/09 10:09;djeley;DummyFormat.java;https://issues.apache.org/jira/secure/attachment/12397500/DummyFormat.java,09/Jan/09 10:09;djeley;DummyFormatFactory.java;https://issues.apache.org/jira/secure/attachment/12397499/DummyFormatFactory.java,09/Jan/09 10:08;djeley;ExtendedMessageFormatTest.java;https://issues.apache.org/jira/secure/attachment/12397498/ExtendedMessageFormatTest.java,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2009-01-09 22:08:19.541,,,false,,,,,,,,,,,,,,147344,,,Sat Oct 03 01:52:50 UTC 2009,,,,,,0|i0d5wv:,74734,,,,,,,,"09/Jan/09 22:08;niallp;Thanks for reporting this and working out the problem - fixed:

http://svn.apache.org/viewvc?view=rev&revision=733169","03/Oct/09 01:52;roshan_ail;Any chance of this being put into an interim release.
We ran into this in production. I spent a lot of time debugging it before finding out where it went into the loop.
This is a serious bug. It would be helpful to everybody if this was released as version 2.5 or something and pushed to the central maven repo.
I can then update our poms to pull this in.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Fixes for thread safety,LANG-474,12409294,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,26/Nov/08 19:10,17/Dec/09 03:42,07/Apr/19 20:37,11/Aug/09 06:39,,,,,3.0,,General,,,0,,,,,,,,"org.apache.commons.lang.exception.NestableDelegate
- the static boolean fields should probably be made volatile to ensure that they are visible across threads
If not, the Javadoc should be updated to note that changing the setting renders the class not thread-safe.
- the ""nestable"" field should be declared final

org.apache.commons.lang.exception.NestableError / NestableRuntimeException / NestableException
- Fields ""cause"" and ""delegate"" should be made final to improve thread-safety

The following fields could be made final:
org.apache.commons.lang.text.ExtendedMessageFormat.registry
org.apache.commons.lang.text.StrMatcher - class variables in nested classes could be made final
org.apache.commons.lang.CharSet.set

Also:
org.apache.commons.lang.IntHashMap.Entry - the field ""key"" is never used
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2009-08-11 06:35:52.267,,,false,,,,,,,,,,,,,,147341,,,Tue Aug 11 06:39:46 UTC 2009,,,,,,0|i0d5x3:,74735,,,,,,,,"14/Mar/09 15:34;sebb@apache.org;Given that these were added for backwards compatibility, they could now be removed.

If the original behaviour is still required, then this should be provided in a thread-safe manner.
","11/Aug/09 06:35;bayard;Most of the above is gone. The following is still open:

The following fields could be made final:

org.apache.commons.lang.text.StrMatcher - class variables in nested classes could be made final

These have already been made final:

org.apache.commons.lang.text.ExtendedMessageFormat.registry
org.apache.commons.lang.CharSet.set","11/Aug/09 06:39;bayard;StrMatch inner class fields now final. Closing.

svn ci -m ""Making inner class private fields final per LANG-474""
Sending        src/java/org/apache/commons/lang/text/StrMatcher.java
Transmitting file data .
Committed revision 803006.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeJava () not escaping forward slash correctly.,LANG-473,12409282,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,kala2031,kala2031,26/Nov/08 16:50,03/Mar/10 09:34,07/Apr/19 20:37,25/Feb/10 20:39,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"We are trying to escape forward slash using StringEscapeUtils.escapeJava ()  method. The output returned by this method is no longer a valid Java String. 

e.g. 

String s = ""a/b/c"";
System.out.println(StringEscapeUtils.escapeJava (s));

The output returned is a\/b\/c which is not a even a valid Java String.

This was working fine in 2.0 release of this jar.



",Solaris and Windows,,,,,,,,,,,,,LANG-421,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-11-26 17:00:01.923,,,false,,,,,,,,,,,,,,34077,,,Wed Nov 26 17:25:56 UTC 2008,,,,,,0|i0d5xb:,74736,,,,,,,,26/Nov/08 17:00;sebb@apache.org;Duplicate of LANG-421,"26/Nov/08 17:16;kala2031;Sebb,

Thanks a lot for the information on this issue. Can you please let me
know by when the 3.0 version will be available?

Thanks & Regards,
Vishal Kala

","26/Nov/08 17:25;sebb@apache.org;No idea - anyway JIRA is not the forum for such questions...

Please ask the question in the Commons User List; remember to prefix the subject with [LANG]",,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomUtils.nextLong() get all even number,LANG-472,12409241,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,kaqi072821,kaqi072821,26/Nov/08 03:30,03/Mar/10 09:34,07/Apr/19 20:37,06/Feb/10 02:42,,,,,2.5,,lang.math.*,,,0,,,,,,,,"when we use the following code , we can see that the method produce only even number.

         while (true) {
//        for (int i = 0; i < 100; i++) {
            if (RandomUtils.nextLong() % 2 == 1) {
                System.out.println(""ok"");
            }
        }",all system,,,,,,,,,,,,,,,,,,,,,,,,,04/Feb/10 02:47;niallp;LANG-472-alt.patch;https://issues.apache.org/jira/secure/attachment/12434774/LANG-472-alt.patch,27/Nov/08 17:25;psteitz;lang-472.patch;https://issues.apache.org/jira/secure/attachment/12394857/lang-472.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2008-11-26 03:49:27.295,,,false,,,,,,,,,,,,,,147340,,,Sat Feb 06 02:42:17 UTC 2010,,,,,,0|i0d5xj:,74737,,,,,,,,"26/Nov/08 03:49;jwcarman;So, you're saying you never see an ""ok""?","27/Nov/08 17:25;psteitz;Looks like this is due to loss of significance in the multiply (per the comment ;)

Attached patch replaces the impl with the JDK-supplied method, maintaining the (undocumented) non-negative behavior.  Added test confirms that returned values are evenly distributed mod 2. 

This problem also affects nextLong(n) where n is sufficiently large.  We should either replace the implementation with something else that works for large values of n or determine and document the upper bound.","27/Nov/08 23:12;psteitz;Just realized that the patch violates / changes the contract of JVMRandom (as I understand it).  If we want to maintain the static, single-underlying-Random behavior, we would need to create a static random instance and use that instance's nextLong() method in place of super.nextLong() in the patch.","02/Mar/09 02:43;bayard;I'm not tied to JVMRandom. I needed it for a particular set of code, but haven't used it since.","30/Apr/09 05:49;bayard;JVMRandom is removed for 3.0, along with RandomUtils, so making this a 2.x issue.","04/Feb/10 01:39;sebb@apache.org;Applied Phil's patch, but adjusted so that the class now uses a static Random() instance for all random number generation.

URL: http://svn.apache.org/viewvc?rev=906318&view=rev
Log:
LANG-472 - RandomUtils.nextLong() get all even number

Modified:
   commons/proper/lang/branches/LANG_2_X/src/main/java/org/apache/commons/lang/math/JVMRandom.java
   commons/proper/lang/branches/LANG_2_X/src/test/java/org/apache/commons/lang/math/RandomUtilsTest.java

I suspect nextLong(long) probably does not generate very evenly distributed numbers.

Also documented non-negative behaviour:

URL: http://svn.apache.org/viewvc?rev=906319&view=rev
Log:
LANG-472 - Document >=0 behaviour

Modified:
   commons/proper/lang/branches/LANG_2_X/src/main/java/org/apache/commons/lang/math/JVMRandom.java

",04/Feb/10 02:47;niallp;Alternative patch which just fixes the issue when n is Long.MAX_VALUE,04/Feb/10 02:49;niallp;Doh! Sorry didn't see Sebb had already fixed this - ignore me,"04/Feb/10 03:49;niallp;Just reviewed Sebb's change - RandomUtils.nextLong() is now fixed because it no longer calls JVMRandom nextLong(Long.MAX_VALUE) - but instead delagates to SHARED_RANDOM.nextLong(). AFAICS calling JVMRandom nextLong(Long.MAX_VALUE)  will still see the same problem.

Do we want to do anything about this (my nasty hack?)","04/Feb/10 04:24;sebb@apache.org;[Actually it was Phil's patch, amended to use the shared static Random instance.]

One could also use Phil's solution and put:

{code}
if (n == Long.MAX_VALUE) {
    return Math.abs(SHARED_RANDOM.nextLong());
}
{code}

However, that only fixes the one value - as far as I can tell, nextLong(long) starts failing tests at around Long.MAX_VALUE/920 (not that there are any tests in SVN yet!)

BTW, I think your hack would be more efficient as

{code}
if (n == Long.MAX_VALUE) {
    double random = -1;
    while (random < 0) {
        random = Math.random();
    }
    return new BigDecimal(random).movePointRight(19).longValue();
}
{code}","04/Feb/10 12:05;sebb@apache.org;It's just occurred to me that using Math.abs() to ensure non-negative numbers means that the value 0 will appear with half the expected freqency.

So maybe looping whilst looking for a non-negative number would be a better solution (let's hope any run of negative numbers is not too long!)","04/Feb/10 16:14;sebb@apache.org;Just realised that nextInt() will never return Integer.MAX_VALUE. 
Should it?

If so, then maybe the way to do this is:

{code}
int random=SHARED_RANDOM.nextInt();
if (random == Integer.MIN_VALUE) {
    random = 0; // should solve problem of reduced frequency of 0
} else {
    random = - random;
}
{code}

Could use the same approach for nextLong()

Thoughts?","04/Feb/10 22:39;sebb@apache.org;Math.abs() can return a negative number if parameter is MIN_VALUE.
Replacing this with 0 makes it non-negative and solves problem of reduced frequency of zero.

Applied to nextInt() and nextLong():

URL: http://svn.apache.org/viewvc?rev=906693&view=rev
Log:
Math.abs(long) can return a negative number
Fix nextInt() and nextLong() so all values 0 -> MAX_VALUE are equally likely

I think the only remaining problem is the method nextLong(long) does not generate properly distributed numbers above about Long.MAX_VALUE/1000, possibly lower.
","06/Feb/10 02:42;sebb@apache.org;The behaviour of nextLong(long) has been fixed by adapting the nextInt(int) code from Harmony's Random class:

URL: http://svn.apache.org/viewvc?rev=907160&view=rev
Log:
Revert nextInt() and nextLong() to 2.4 behaviour, i.e MAX_VALUE is not included
Rewrite nextLong(long) based on Harmony's implementation of nextInt(int)

Modified:
   commons/proper/lang/branches/LANG_2_X/src/main/java/org/apache/commons/lang/math/JVMRandom.java",,,,,,,,,,,,,,,,,
JDK 1.5 build/runtime failure on LANG-393 (EqualsBuilder),LANG-468,12407865,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,05/Nov/08 15:58,17/Dec/09 03:44,07/Apr/19 20:37,06/Nov/08 20:36,2.4,,,,3.0,,lang.builder.*,,,0,,,,,,,,See LANG-393,,,,,,,,,,,,,,LANG-464,,LANG-393,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,34057,,,Thu Nov 06 20:36:54 UTC 2008,,,,,,0|i0d5xr:,74738,,,,,,,,"06/Nov/08 20:30;bayard;(From LANG-464)

Line 381 of org.apache.commons.lang.EqualsBuilder fails to compile because the compareTo call requires a BigDecimal rather than an object.

376 public EqualsBuilder append(Object lhs, Object rhs) {
...
379 if (!lhsClass.isArray()) {
380 if (lhs instanceof java.math.BigDecimal) { 381 isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0); 382 } else {

I'm using Sun's JDK 1.6.0_07 in Eclipse, not sure if this is a JDK version issue or not.","06/Nov/08 20:36;bayard;svn ci -m ""Updating the BigDecimal.compareTo(Object) to BigDecimal.compareTo(BigDecimal) to match JDK change - fixes LANG-468/LANG-464"" src

Sending        src/java/org/apache/commons/lang/builder/EqualsBuilder.java
Transmitting file data .
Committed revision 711969.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EqualsBuilder and HashCodeBuilder treat java.math.BigDecimal inconsistantly and break general contract of hashCode,LANG-467,12407261,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,davey.jones,davey.jones,27/Oct/08 09:53,27/Apr/15 20:23,07/Apr/19 20:37,14/Nov/09 10:10,2.4,,,,2.5,,lang.builder.*,,,1,,,,,,,,"A POJO with a BigDecimal field and equals() and hashCode() methods implemented using EqualsBuilder and HashCodeBuilder breaks the general contract of Object.hashCode();

EqualsBuilder treats BigDecimal specially by comparing it using BigDecimal.compareTo() == 0 rather than BigDecimal.equals()
Using BigDecimal.compareTo() ignores the scale of the BigDecimal()

However the append(Object o) method of HashCodeBuilder uses BigDecimal.hashCode() in the case that o is a BigDecimal, which takes the scale into account when generating the hashCode.

The following test case shows the problem!
{code:title=TestApacheCommonsLangHashCodeBuilder.java|borderStyle=solid}
// package declaration and imports not shown
public class TestApacheCommonsLangHashCodeBuilder extends TestCase {
    
    public void testHashCode() {
        MyPojo myPojo1 = new MyPojo(new String(""foo""), new BigDecimal(""10.2""));
        MyPojo myPojo2 = new MyPojo(new String(""foo""), new BigDecimal(""10.20""));
        
        // equals method ignores the scale of the big decimal
        // so this test passes
        assertTrue(myPojo1.equals(myPojo2));
        
        // however in the case the equals returns true the
        // hashCode must be the same according to the contract
        // TEST FAILS AT THIS LINE
        assertEquals(myPojo1.hashCode(), myPojo2.hashCode());
    }
    
    private class MyPojo {
        private String name;
        private BigDecimal value;
        
        public MyPojo(String name, BigDecimal value) {
            this.name = name;
            this.value = value;
        }
        
        public String getName() {
            return name;
        }
        public BigDecimal getValue() {
            return value;
        }
        /**
         * equals method implemented using EqualsBuilder 
         * as documented by apache commons
         */
        @Override public boolean equals(Object obj) {
            if(this == obj) {
                return true;
            }
            
            if(!(obj instanceof MyPojo)) {
                return false;
            }
            
            MyPojo other = (MyPojo) obj;
            return new EqualsBuilder()
                .append(name, other.getName())
                .append(value, other.getValue())
                .isEquals();
        }
        
        /**
         * hashCode method implemented using HashCodeBuilder
         * as documented by apache commons
         */
        @Override public int hashCode() {
            HashCodeBuilder hcb = new HashCodeBuilder(17, 31);
            return hcb
                .append(name)
                .append(value)
                .toHashCode();
        }
    }
}
{code}

Note that the only reason I haven't provided a patch is because I could not think of one which I thought was reasonable.

*Option 1*
Always set the scale to some value and then get the hashCode()
Example change in HashCodeBuilder.append(Object) add the following:
{code}
else if (object instanceof BigDecimal) {
	append(((BigDecimal) object).setScale(DEFAULT_BIGDECIMAL_SCALE, RoundingMode.DOWN).hashCode());
}
{code}
However what is a reasonable scale for calculating this hashCode? I cannot see a reasonanble scale to choose, that depends on the circumstance

*Option 2*
stripTrailingZeros() before calculating the hashCode()
Example change in HashCodeBuilder.append(Object) add the following:
{code}
else if (object instanceof BigDecimal) {
	append(((BigDecimal) object).stripTrailingZeros().hashCode());
}
{code}
The performance of this method under different circumstances is not documented.

*Option 3*
Document the problem and propose that the client solves the problem.
For example change HashCodeBuilder documentation as follows
{code}
/*
 * ...
 * public class Person {
 *   String name;
 *   int age;
 *   boolean smoker;
 *   BigDecimal netWorth;
 *   ...
 *
 *   public int hashCode() {
 *     // you pick a hard-coded, randomly chosen, non-zero, odd number
 *     // ideally different for each class
 *     return new HashCodeBuilder(17, 37).
 *       append(name).
 *       append(age).
 *       append(smoker).
 *       // take special care when using BigDecimal as scale takes 
 *       // is included in the hashCode calculation breaking hashCode contract
 *       // choose a scale which is reasonable for hashCode calculation
 *       append(netWorth == null ? null : netWorth.setScale(2)).
 *       toHashCode();
 *   }
 * }
 * ...
 */
{code}
",,,,,,,,,,,,,,,,LANG-1113,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-27 15:54:30.829,,,false,,,,,,,,,,,,,,34126,,,Sat Nov 14 10:10:43 UTC 2009,,,,,,0|i0d5xz:,74739,,,,,,,,27/Oct/08 10:19;davey.jones;typo fix and clarity improved,27/Oct/08 15:54;joehni;According javadoc of BigDecimal.equals() the method should fail for values with different scale. So the use of compareTo in the EqualsBuilder is wrong in this case.,27/Oct/08 15:57;joehni;Has already been reported in LANG-393. See discussion there.,"27/Oct/08 16:45;davey.jones;The use of compareTo() in EqualsBuilder() is arguably wrong, however compareTo is referenced from the BigDecimal javadoc as the alternative to equals for cases where the scale is not relevant

In LANG-393 it was decided that EqualsBuidler should use the compareTo() method to compare BigDecimals(), which is a nice convenience for those of use using BigDecimals in conjunction with EqualsBuilder and who want 0 and 0.0 to be considered equal.

However LANG-393 did not put the equivalent fix into the HashCodeBuilder so this has made HashCodeBuilder and EqualsBuilder non-symmetric. It was actually LANG-393 which added a feature to EqualsBuilder and at the same time created this bug in HashCodeBuilder.

So as far as the EqualsBuilder is concerned 10.2 and 10.20 are equal, i.e. the following evaluates to true.
 {code}
new EqualsBuilder().append(new BigDecimal(""10.2""), new BigDecimal(""10.20"")).isEquals();
{code}

However when using these two values with HashCodeBuilder they actually give different hashCodes(), the following evaluates to false.
{code}
new HashCodeBuilder(17, 37).append(new BigDecimal(""10.2"")).toHashCode() == new HashCodeBuilder(17, 37).append(new BigDecimal(""10.20"")).toHashCode()
{code}

However the contract of hashCode() method for Object says that if two objects are considered equal using their equals method then they must also generate the same hashCode().

Of course this is true for BigDecimal class itself, even though it is somewhat inconvenient. 

MyPojo class as given in the test case above 
* implements the equals() method as documented by EqualsBuilder
* implements the hashCode() method as documented by HashCodeBuilder

Despite following the documented approach for implementing equals and hashCode the test case *proves* that MyPojo breaks the contract of hashCode(), the following evaluates to true
{code}
myPojo1.equals(myPojo2)
{code}
However myPojo1 and myPojo2 generate different hashCodes(), the following evaluates to false
{code}
myPojo1.hashCode() == myPojo2.hashCode()
{code}
","24/Oct/09 13:02;scolebourne;We can't have EqualsBuilder and HashCodeBuilder out of line.

My preferred fix would be to revert the invalid change to EqualsBuilder.","14/Nov/09 10:10;bayard;Agreed, in that I don't see a solution for HashCodeBuilder and the two need to be the same.

I've reverted the change as r836149.",,,,,,,,,,,,,,,,,,,,,,,,,
EqualsBuilder doesn't compile in 2.4 source code release,LANG-464,12405588,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,hallorant,hallorant,01/Oct/08 20:54,06/Nov/08 20:37,07/Apr/19 20:37,06/Nov/08 20:29,2.4,,,,,,,,,0,,,,,,,,"Line 381 of org.apache.commons.lang.EqualsBuilder fails to compile because the compareTo call requires a BigDecimal rather than an object.

376 public EqualsBuilder append(Object lhs, Object rhs) {
...
379         if (!lhsClass.isArray()) {
380             if (lhs instanceof java.math.BigDecimal) {
381                 isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0);
382             } else {

I'm using Sun's JDK 1.6.0_07 in Eclipse, not sure if this is a JDK version issue or not.",Windows Vista in Eclipse,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-10-06 06:20:16.641,,,false,,,,,,,,,,,,,,147336,,,Thu Nov 06 20:37:10 UTC 2008,,,,,,0|i0d5y7:,74740,,,,,,,,"06/Oct/08 06:20;bayard;Bit odd in that javadoc for 1.5 shows that the compareTo(Object) was removed then; though maybe it's an Apple bug that it still has compareTo(Object) in it.

1.4: http://java.sun.com/j2se/1.4.2/docs/api/java/math/BigDecimal.html
1.5: http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html
1.6: http://today.java.net/download/jdk6/doc/api/java/math/BigDecimal.html

So - JDK version issue. Presumably we should check that both lhs and rhs are BigDecimal and cast both.",06/Nov/08 20:29;bayard;Resolving as duplicate of LANG-468 which came out of an earlier discussion on this.,"06/Nov/08 20:37;bayard;svn ci -m ""Updating the BigDecimal.compareTo(Object) to BigDecimal.compareTo(BigDecimal) to match JDK change - fixes LANG-468/LANG-464"" src

Sending        src/java/org/apache/commons/lang/builder/EqualsBuilder.java
Transmitting file data .
Committed revision 711969.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ant build file does not include ReflectTestSuite,LANG-463,12404851,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,22/Sep/08 09:36,25/Feb/10 20:40,07/Apr/19 20:37,06/Oct/08 06:05,2.4,,,,2.5,,lang.reflect.*,,,0,,,,,,,,"Ant build file does not include ReflectTestSuite.

Patch to follow.",,,,,,,,,,,,,,,,,,,,,,,,,,22/Sep/08 09:37;sebb@apache.org;build_xml.patch;https://issues.apache.org/jira/secure/attachment/12390622/build_xml.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-10-06 06:05:40.15,,,false,,,,,,,,,,,,,,147335,,,Mon Oct 06 06:05:40 UTC 2008,,,,,,0|i0d5yf:,74741,,,,,,,,22/Sep/08 09:37;sebb@apache.org;Patch to add ReflectTestSuite to build.xml,06/Oct/08 06:05;bayard;Applied in 701953.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Wrong, interchanged parameters in Dokumentation of StringUtils.startsWith[IgnoreCase](String, String)",LANG-460,12404496,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,niallp,jogi,jogi,17/Sep/08 08:27,03/Mar/11 23:54,07/Apr/19 20:37,17/Sep/08 23:27,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"The parameters in the examples of the JavaDoc of StringUtils.startsWithIgnoreCase(String, String) and StringUtils.startsWith(String, String) are interchanged.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-17 23:27:39.647,,,false,,,,,,,,,,,,,,147334,,,Wed Sep 17 23:27:39 UTC 2008,,,,,,0|i0d5yn:,74742,,,,,,,,"17/Sep/08 23:27;niallp;Fixed thanks

http://svn.apache.org/viewvc?view=rev&revision=696516",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Issue in HashCodeBuilder which only shows up under high load multi-threaded usage.,LANG-459,12404365,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,anewilson7272,anewilson7272,15/Sep/08 16:09,25/Feb/10 19:53,07/Apr/19 20:37,16/Sep/08 16:36,2.4,,,,2.5,,lang.builder.*,,,0,,,,,,,,"We found we were having problems with HashCodeBuilder under multi-threaded high load.

I narrowed this down to the following attached test case.

When I dug into the code, I found the problem was solved by commenting out the isRegistered method (though this would break the infinite loop problem).
( I did a lot of other digging that I wont bore you with).

So instead I replaced the HashSet with an ArrayList and just added the object, rather than the toIdentityHashCodeInteger(object)

This results in about 5 lines of change.  

My suspicion is that System.identityHashCode does not return unique values (it is after all a hashcode method).  The code assumes it will return a unique value and this causes the problem at high loads.

The downside is a List vs. a Set, but I believe this is necessary.

I'd like to submit this fix and have it verified (and perhaps improved).  I am convinced it is a necessary fix which we have seen show up under high loads.

Kindest regards, 
Andrew.",All,,300,300,,0%,300,300,,,,,,,,,,,,,,,,,,15/Sep/08 16:14;anewilson7272;HashCodeBuilder.java;https://issues.apache.org/jira/secure/attachment/12390119/HashCodeBuilder.java,15/Sep/08 16:12;anewilson7272;MyTest.java;https://issues.apache.org/jira/secure/attachment/12390118/MyTest.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2008-09-16 06:44:59.31,,,false,,,,,,,,,,,,,,147333,,,Tue Sep 16 16:07:51 UTC 2008,,,,,,0|i0d5yv:,74743,,,,,,,,15/Sep/08 16:12;anewilson7272;Here is the simple testcase for this problem.  If you run it with one thread everything is fine.  If you run it with 1000 it starts blowing up!,15/Sep/08 16:14;anewilson7272;Here is my suggested solution.  Its about 5 lines of change.  Switch the HashSet to an ArrayList and stop using the HashCode method for equality.,"16/Sep/08 06:44;joehni;Hi Andrew, it is a lot easier for us to look over a patch, if you use a diff as attachment. Especially if development continues, nobody knows in the end, what you really changed when your version of the code was current.
-- Jörg","16/Sep/08 09:12;anewilson7272;Joerg,  no problem, what do you want me to use to create the diff file?  Andrew.","16/Sep/08 10:24;sebb@apache.org;Unified diff format is the usual method.

For example, as created by Eclipse or ""svn diff"".

By the way, I can confim that I have seen the bug, and it is a problem with indentityHashCode - identical system hashcodes can be generated for both the class MyClass1 and the field containing the class MyClass2. Object.equals() on the two objects gives false (I commented out the overrides of equals) so the objects are different.

A quick google shows that this has been noticed elsewhere. 

It is not a bug in indentityHashCode bcause that is not guaranteed to generate unique hashes for distinct objects.
- it just has to try to do so. The hashcode is only an int (rather than long), which reduces the number of possible values somewhat.

It's not possible to use HashMap on the original object, as HashMap uses the hash to decide where to store the key.
If there is no other way of generating a unique value for an object, then something other than a HashMap will have to be used - e.g. ArrayList.

Debuggers seem to be able to generate unique names for objects, but the code may be rather expensive.
","16/Sep/08 10:28;sebb@apache.org;Or it may be possible to use the IdentityHashMap - I'll try that now.
...
Unfortunately that is Java 1.4+ and Lang currently targets 1.3+","16/Sep/08 10:48;joehni;Javadoc for Object.hashCode():
{quote}
The general contract of hashCode is:

* Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.
* If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.
* It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables. 
{quote}

The problem is that a common implementation like

{code}
    public static class MyClass {
        public Object arg;

        public MyClass(Object arg) {
            this.arg = arg;
        }

        public boolean equals(Object o) {
            return EqualsBuilder.reflectionEquals(o, this);
        }

        public int hashCode() {
            return HashCodeBuilder.reflectionHashCode(this);
        }
    }
{code}

... will simply violate point two of the upper specification if HashCodeBuilder.reflectionHashCode(Object) will use the identityHashCode.","16/Sep/08 11:30;sebb@apache.org;More googling shows that Mina and Axis have hit the same problem.

Axis has a neat solution - they wrap the identityHashCode in an object which also contains a copy of the value to disambiguate the hash collisions.

I can apply that as a fix - it should be cheaper than switching to a List.","16/Sep/08 12:38;anewilson7272;Sounds good to me.  I can run my TestCase against this afterwards (I have a few) and help to verify the fix.  Many thanks for your prompt response.  Andrew.

PS. I'm presuming the fix is this http://marc.info/?l=axis-dev&m=103079325806666&w=2 ","16/Sep/08 12:47;sebb@apache.org;@Andrew

Yes, my suggested fix is as you mention.

I copied IDKey from Axis, and then replaced 

    toIdentityHashCodeInteger(value)

with

   new IDKey(value)

throughout. The private toIdentityHashCodeInteger(value) method can then be deleted.

It seems to work for me, but it would be worth trying some more tests.","16/Sep/08 14:54;anewilson7272;Yup, that fix seemed to work well for me.  Andrew.","16/Sep/08 16:07;sebb@apache.org;Fixes applied to SVN:

URL: http://svn.apache.org/viewvc?rev=695951&view=rev
Log:
LANG-459 HashCodeBuilder.reflectionHashCode() can generate incorrect hashcodes",,,,,,,,,,,,,,,,,,,
"NumberUtils createNumber thows a StringIndexOutOfBoundsException when only an ""l"" is passed in.",LANG-457,12403927,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,wrochow,wrochow,08/Sep/08 20:00,25/Feb/10 19:47,07/Apr/19 20:37,05/Nov/08 16:33,,,,,2.5,,lang.math.*,,,0,,,,,,,,"Seems to be similar to LANG-300, except that if you don't place a digit in front of the ""l"" or ""L"" it throws a StringIndexOutOfBoundsException instead.",,,,,,,,,,,,,,,,LANG-300,,,,,,,,,,05/Nov/08 16:12;bayard;LANG-457.patch;https://issues.apache.org/jira/secure/attachment/12393379/LANG-457.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-09-08 20:22:49.238,,,false,,,,,,,,,,,,,,34039,,,Wed Nov 05 16:33:36 UTC 2008,,,,,,0|i0d5z3:,74744,,,,,,,,08/Sep/08 20:22;jwcarman;What would you rather it do?  Perhaps IllegalArgumentException?,"09/Sep/08 14:39;wrochow;James,

No, I would actually expect a NumberFormatException. I haven't looked at the code again today, but I believe that that is what gets thrown if the String cannot be converted to a number for example if it is any other group of letters.

Waldo",05/Nov/08 16:12;bayard;Test/fix for this issue.,"05/Nov/08 16:33;bayard;svn ci -m ""Applying test/fix from LANG-457 - getting a StringIndexOutOfBounds from createNumber rather than a NumberFormatException""

Sending        src/java/org/apache/commons/lang/NumberUtils.java
Sending        src/test/org/apache/commons/lang/NumberUtilsTest.java
Transmitting file data ..
Committed revision 711605.",,,,,,,,,,,,,,,,,,,,,,,,,,,
HashCodeBuilder throws StackOverflowError in bidirectional navigable association,LANG-456,12403156,Bug,Reopened,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,,,bob fields,bob fields,27/Aug/08 14:20,08/Jun/16 20:32,07/Apr/19 20:37,,2.4,,,,,,lang.builder.*,,,1,,,,,,,,"This is not the reflection methods, it is the regular HashCodeBuilder append methods. It causes EqualsBuilder, ToStringBuilder, CompareToBuilder to also throw the StackOverflowException, but those methods work when one of the HashCodeBuilder bidirectional association attributes .hashCode() is commented out. The problem is that all of the builders call registerObject() which creates a hashCode, but only the reflectionAppend method checks if an object is registered.

Bi-directional associations are a very common pattern in Jaxb and Hibernate. In this case, I generate code from a model in order to avoid the reflection penalty - I already know what the attributes are at compile time, so I use .append instead of .reflectionAppend.

See attached example + unit test. One side of the bidirectional association must be commented out in the hashCode method.",Widows XP. Sun JDK 1.5 or 1.6.,,,,,,,,,,,,,,,LANG-279,,,,LANG-1229,,,,,,01/May/15 10:50;kinow;0001-LANG-456-HashCodeBuilder-throws-StackOverflowError-i.patch;https://issues.apache.org/jira/secure/attachment/12729738/0001-LANG-456-HashCodeBuilder-throws-StackOverflowError-i.patch,23/Sep/08 22:12;bob fields;HashCodeBuilderStackOverflow.zip;https://issues.apache.org/jira/secure/attachment/12390791/HashCodeBuilderStackOverflow.zip,22/Oct/13 16:27;woon_san;LANG-456-patch.txt;https://issues.apache.org/jira/secure/attachment/12609676/LANG-456-patch.txt,27/Aug/08 14:21;bob fields;StackOverflowError.zip;https://issues.apache.org/jira/secure/attachment/12389004/StackOverflowError.zip,,,,,,,4.0,,,,,,,,,,,,,,,,,,,2008-08-27 15:32:28.629,,,false,,,,,,,,,,,,,,3032,,,Wed Jun 08 20:32:09 UTC 2016,,,,,,0|i0b5v3:,63062,,,,,,,,27/Aug/08 14:21;bob fields;BidirectionalTest demonstrating StackOverflowError when using non-reflection HashCodeBuilder methods.,"27/Aug/08 15:32;jwcarman;Have you tried using UUIDs rather than basing hashCode/equals on ""business"" fields?",22/Sep/08 08:30;sebb@apache.org;Can you provide a simpler test case that works with Java 1.3 and does not require JAXB?,"23/Sep/08 22:12;bob fields;Does anybody even use JDK 1.3 any more? I haven't had it on my machine in years.

Here's an updated version with all the Jaxb stuff removed, built with JDK 1.4.2 with compiler compliance level set to JDK 1.3, that should work for you. There's no dependencies other than commons-lang and JUnit.","23/Sep/08 22:41;sebb@apache.org;Thanks for the updated test case which causes the expected stack overflow.

In fact LANG is currently targeted at Java 1.2 - I believe it may be used by Java ME code, which is not so easily upgraded.

==

Since the HashCode for the Bidirectional class depends on the hash code for the JavBVO class and vice versa, it's not surprising that there is a stack overflow.

If you were not using the HashCodeBuider, how would you define the hashcodes?

","24/Sep/08 15:48;bob fields;The other builder methods (toString, compare, equals) specifically check for recursive behavior and prevent a StackOverflow.

We use HashCodeBuilder globally on all ValueObjects generated by templates using AndroMDA www.andromda.org. Right now I check for the recursive relationship in the model and remove one side of the relationship from the HashCodeBuilder generated code output. That defaults to the hashCode for all attributes (except the recursive one on one side) plus the hashCode of the ancestor.",17/Jan/11 05:48;bayard;Moving to 3.1; there's no patch and I don't think a fix would be backwards incompatible [i.e. doesn't have to be done in 3.0].,"22/Oct/13 16:27;woon_san;Attaching my patch (LANG-456-patch.txt) to fix this issue.

I moved the isRegistered()->register()->unregister() code from #reflectionAppend() to #append().
I think this should be more reasonable because #reflectionAppend() invokes #append() method anyway.
Also, #append(Object) code has been improved to check registration status only when the object argument is neither primitive nor String type.

Please take a review.

Cheers,

Woonsan",22/Oct/13 16:31;bayard;Thanks Woonsan :) Moving to Review Patch.,"01/May/15 10:50;kinow;Applying the patch to my project today resulted in errors both via command line and using Eclipse (guess it's something with my `patch -p0 -i ...` command?). Using Eclipse, however, let me at least copy the test code without the +'s in the beginning of the line. 

After importing the tests from the patch, the bug was reproducible via a new test method. Later I imported the part of the code that fixes the issue, and it worked like a charm. 

+1 to applying the Woonsan's patch",01/May/15 20:28;britter;Fixed by applying 0001-LANG-456-HashCodeBuilder-throws-StackOverflowError-i.patch. Thanks to all who helped fixing this.,08/Jun/16 20:32;pascalschumacher;I reverted the commit because it caused LANG-1229. I believe we can not justify a major performance regression to add this feature. The best approach would be to add a new method that appends with the check (see discussion of LANG-1229).,,,,,,,,,,,,,,,,,,,
"isWhitespace returns true for empty ("""") strings.",LANG-451,12401124,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Invalid,jwcarman,rovrevik,rovrevik,27/Jul/08 21:53,05/Nov/08 15:55,07/Apr/19 20:37,27/Jul/08 22:27,2.4,,,,,,,,,0,,,,,,,,"if (StringUtils.isWhitespace("""") == true) {
			//seems wrong
		}",windows xp/java 1.5.0.12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-07-27 22:27:15.606,,,false,,,,,,,,,,,,,,147327,,,Sun Jul 27 22:27:15 UTC 2008,,,,,,0|i0d5zb:,74745,,,,,,,,27/Jul/08 22:27;jwcarman;The Javadocs specifically state that the method will return true for empty strings.  This is the intended behavior.  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Lower Ascii Characters don't get encoded by Entities.java,LANG-448,12399345,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,apache.org@add.za.net,apache.org@add.za.net,01/Jul/08 08:07,17/Dec/09 03:41,07/Apr/19 20:37,19/Jul/09 18:31,2.4,,,,3.0,,lang.*,,,0,,,,,,,,"I have an XML files which sometimes contain control characters like 0x0c, or 0x18. These aren't allowed to be directly in the file (the validator fails with invalid character), so they need to be escaped.

When using ""StringEscapeUtils.escapeXml(String str)"", which in turn uses ""Entities.escape(Writer writer, String str)"", these characters don't get escaped. Only characters above 0x7F get escaped.

I fixed this bug, and attached a patch.",N/A,,,,,,,,,,,,,,,LANG-515,LANG-439,LANG-505,,,,,,,,01/Jul/08 08:08;apache.org@add.za.net;lowerascii.patch;https://issues.apache.org/jira/secure/attachment/12385021/lowerascii.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-07-02 06:32:41.443,,,false,,,,,,,,,,,,,,147324,,,Sun Jul 19 18:31:36 UTC 2009,,,,,,0|i0d5zj:,74746,,,,,,,,"01/Jul/08 08:08;apache.org@add.za.net;Patch to cause lower ascii characters to be encoded.

Boils down to: if (c >= 0x7F || (c < 0x20 && c != 0x0A && c != 0x0D))","02/Jul/08 06:32;joehni;This patch is only valid, if you operate with XML 1.0. For XML 1.1 the allowed character set is different. See LANG-66 with a related change.","19/Jul/09 18:31;bayard;Rewrite in LANG-505 supports the user choosing not to do this easily.

LANG-515 to define how XML should be escaped by default. Or whether to support XML_1_0 and XML_1_1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Internal links on User Guide page don't work,LANG-442,12397383,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,03/Jun/08 14:48,09/Jun/08 06:48,07/Apr/19 20:37,09/Jun/08 06:48,2.4,,,,,,,,,0,,,,,,,,"The links on the http://commons.apache.org/lang/userguide.html page under ""Users Guide"" don't work.

e.g. [lang.builder.*] points to the anchor ""lang.builder.*"", but the actual anchor is ""lang.builder."" - i.e. the ""*"" is missing.

Only the [Description] link works",http://commons.apache.org/lang/userguide.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-09 06:48:23.203,,,false,,,,,,,,,,,,,,147318,,,Mon Jun 09 06:48:23 UTC 2008,,,,,,0|i0d5zr:,74747,,,,,,,,"09/Jun/08 06:48;bayard;Looks like the issue is that mvn site is stripping off the *'s from the end of the section names and not putting them in the anchors. I've removed them from the href's.

The anchor names were also being set manually, leading to duplicates, so I've removed the manual setting.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtils.round doesn't work correct for Calendar.AM_PM,LANG-440,12397316,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,rfscholte-getthere,rfscholte-getthere,02/Jun/08 20:47,02/May/13 02:29,07/Apr/19 20:37,05/Nov/08 17:01,2.4,,,,2.5,,lang.time.*,,,0,,,,,,,,"The provided JUnit-tests test with wrong expected values
{code:title= original DateUtilsTest.java}
dateAmPm1 = dateTimeParser.parse(""February 3, 2002 01:10:00.000"");
dateAmPm2 = dateTimeParser.parse(""February 3, 2002 11:10:00.000"");
dateAmPm3 = dateTimeParser.parse(""February 3, 2002 13:10:00.000"");
dateAmPm4 = dateTimeParser.parse(""February 3, 2002 19:10:00.000"");

assertEquals(""truncate ampm-1 failed"",
                dateTimeParser.parse(""February 3, 2002 00:00:00.000""),
                DateUtils.round(dateAmPm1, Calendar.AM_PM));
        assertEquals(""truncate ampm-2 failed"",
                dateTimeParser.parse(""February 4, 2002 00:00:00.000""),
                DateUtils.round(dateAmPm2, Calendar.AM_PM));
        assertEquals(""truncate ampm-3 failed"",
                dateTimeParser.parse(""February 3, 2002 12:00:00.000""),
                DateUtils.round(dateAmPm3, Calendar.AM_PM));
        assertEquals(""truncate ampm-4 failed"",
                dateTimeParser.parse(""February 4, 2002 12:00:00.000""),
                DateUtils.round(dateAmPm4, Calendar.AM_PM));
{code}

but expected values must be

{code}
dateTimeParser.parse(""February 3, 2002 00:00:00.000"");
dateTimeParser.parse(""February 3, 2002 12:00:00.000"");
dateTimeParser.parse(""February 3, 2002 12:00:00.000"");
dateTimeParser.parse(""February 4, 2002 00:00:00.000"");
{code}

Also in the junit-comment the word 'truncate' must be replaced with 'round'",,,,,,,,,,,,,,,,,,,,,,,,,,24/Jun/08 13:46;rfscholte-getthere;LANG-440-2-rs.patch;https://issues.apache.org/jira/secure/attachment/12384584/LANG-440-2-rs.patch,03/Jun/08 07:49;rfscholte-getthere;LANG-440-rs.patch;https://issues.apache.org/jira/secure/attachment/12383280/LANG-440-rs.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2008-06-09 07:17:30.739,,,false,,,,,,,,,,,,,,34040,,,Wed Nov 05 17:01:09 UTC 2008,,,,,,0|i0d5zz:,74748,,,,,,,,02/Jun/08 20:48;rfscholte-getthere;Patch is on it's way,03/Jun/08 07:49;rfscholte-getthere;Added code for correct rounding based on AM_PM and repaired the JUnit-tests (and their comments),"09/Jun/08 07:17;bayard;Patch applied, thanks Robert.","24/Jun/08 13:43;rfscholte-getthere;I've started writing new DateUtils-tests according to [LANG-443]. And now it seems AM_PM is still not rounded in the correct way. 
It's switch-point is between 06:59.999 and 07:00.000, which is exactly one hour too late. The tests provided didn't cover these times. Another reason for better tests.
","24/Jun/08 13:46;rfscholte-getthere;AM_PM ""one off""-fix","05/Nov/08 17:01;bayard;svn ci -m ""Applying Robert Scholte's excellent unit tests from LANG-443 and his second patch from LANG-440 fixing a discovered boundary case for AM_PM in round""

Sending        pom.xml
Sending        src/java/org/apache/commons/lang/time/DateUtils.java
Adding         src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java
Sending        src/test/org/apache/commons/lang/time/TimeTestSuite.java
Transmitting file data ....
Committed revision 711616.",,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeHTML() does not escape chars (0x00-0x20),LANG-439,12397175,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,psivolob,psivolob,30/May/08 14:16,17/Dec/09 03:41,07/Apr/19 20:37,19/Jul/09 18:49,2.4,,,,3.0,,lang.*,,,0,,,,,,,,"I encountered this problem when I sent html from the server to a client using AjaxRequest. HTML was escaped wrapped in CDATA. I thought it was pretty safe. See my xml fragment below:
//------------------------------------------------------------------------------------------
<?xml version=""1.0"" encoding=""UTF-8""?>
<ajax-fragment>
<html-rows>
<![CDATA[
<div style=""padding-left: 1px;"" class=""columnContent4  column4"">
<span  column-id=""Message""  class=""cellContent""  onmouseover=""w12450823.onDwell(event); w12450823.onCellSelectionOnMouseOver(event);""  onclick=""w12450823.onCellSelectionOnClick(event)""  >May 29 10:48:29 rdia643 su: - 2 nitroqa-nss</span></div>
]]>
</html-rows>
</ajax-fragment>
//------------------------------------------------------------------------------------------
However in FF2 there was js error:
//-------------------------------------------------------------------------------------------- 
Error: not well-formed
Source Code:
<span  column-id=""Message""  class=""cellContent ""  onmouseover=""w12450823.onDwell(event); w12450823.onCellSelectionOnMouseOver(event); "" onclick=""w12450823.onCellSelectionOnClick(event)""  >May 29 10:48:29 rdia643 su: - 2 nitroqa-nss</span></div
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^
I figured out that StringEscapeUtils.escapeHTML() did not escape one of the characters. it was a '\b'(ascii 8).
I had to change to org.apache.commons.lang.Entities.excape() method:
public void escape(Writer writer, String str) throws IOException {
	int len = str.length();
	for (int i = 0; i < len; i++) {
		char c = str.charAt(i);
		String entityName = this.entityName(c);
		if (entityName == null) {
			if ((c < 0x20 && c != 9 && c != 10 && c != 13) || c >> 0x7F) {
				writer.write(""&#"");
				writer.write(Integer.toString(c, 10));
				writer.write(';');
			}
			else {
				writer.write(c);
			}
		}
		else {
			writer.write('&');
			writer.write(entityName);
			writer.write(';');
		}
	}
}

//---------------------------------------------------------------------------------------
It can be tested with unittest:

import java.io.Reader;
import java.io.StringReader;

import junit.framework.TestCase;
import org.apache.commons.lang.StringEscapeUtils;
import org.jdom.input.SAXBuilder;

public class StringEscapeUtilsTest extends TestCase {

public void testPR73092() throws Exception {
	StringBuilder test = new StringBuilder(50);
	for (int i = 0; i <= 50; i++) {
		test.append((char)i);
	}

	StringBuilder result = new StringBuilder(""<test>\n<![CDATA[\n"");
	result.append(StringEscapeUtils.escapeHtml(test.toString()));
	result.append(""\n]]>\n</test>\n"");

	validate(new StringReader(result.toString()));

	result = new StringBuilder(""<test>\n<![CDATA[\n"");
	result.append(test.toString());
	result.append(""\n]]>\n</test>\n"");

	try {
		validate(new StringReader(result.toString()));
		fail(""expected to blow up"");
	}
	catch (Exception e) {
		//
	}
}

/** make sure that xml is well-formed */
private static void validate(Reader xmlSource) throws Exception {
	SAXBuilder saxBuilder = new SAXBuilder();
	saxBuilder.build(xmlSource);
}

}
",java5,,,,,,,,,,,,,,,LANG-505,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-06-09 06:51:58.382,,,false,,,,,,,,,,,,,,34093,,,Sun Jul 19 18:49:34 UTC 2009,,,,,,0|i0d607:,74749,,,,,,,,09/Jun/08 06:51;bayard;I thought we'd hit this for escapeXml before and the spec said that such characters were not escaped.,"09/Jun/08 07:55;jochen@apache.org;It is crystal clear, that escapeXml *must* not escape such characters, but should throw an exception.

I haven't got any idea for HTML documents. I'd be in favour for the same handling as XML, though, for practical reasons. Whoever needs these binary characters should use BASE64 or something similar. At least I'd wait for an explicit hint, that escaped 0x00 characters *are* valid in HTML.

However, I must admit, that I do not like the current implementation. Simply *ignoring* such characters is, IMO, worse than trying to escape them. IMO, we should throw an exception, if we find characters that we suspect to be invalid.

","09/Jun/08 13:57;psivolob;actualy 9(tab),10(newline),13(c-return) are valid chars. But only these 3 are valid from the range from 0 to 0x20","19/Jul/09 18:49;bayard;Closing as LANG-505 has given the user the ability to customize their escaping, and LANG-515 drives deciding what our standard default pattern should be.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Complaints that the IE fix for StringEscapeUtils.escapeJavaScript is causing problems elsewhere. Rollback?,LANG-437,12395792,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,bayard,bayard,11/May/08 05:01,25/Feb/10 21:03,07/Apr/19 20:37,18/May/09 04:04,2.4,,,,2.5,,lang.*,,,1,,,,,,,,Need to decide if we should roll LANG-363 back or not. ,,,,,,,,,,,,,,,,LANG-421,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-09-23 21:38:58.09,,,false,,,,,,,,,,,,,,147316,,,Mon May 18 04:04:39 UTC 2009,,,,,,0|i0d60f:,74750,,,,,,,,"23/Sep/08 21:38;bob fields;This change broke our application www.andromda.org. We use StringEscapeUtils to fix documentation contained in Strings for inclusion in Java files and then compile those java files, resulting in the error:

Invalid escape sequence (valid ones are  \b  \t  \n  \f  \r  \""  \'  \\ )

Note that \/ is not a valid String escape sequence.

Should use escapeJavaScript if String is meant to be used in html or XML environment rather than in a Java environment.

See also https://issues.apache.org/jira/browse/LANG-421.",28/Sep/08 03:35;bayard;Does LANG-421 not fix this for you?,18/May/09 04:04;bayard;Problems are because the escapeJavaScript change leaked into escapeJava due to shared code. Fixed in LANG-421.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Remove caching from MethodUtils,LANG-436,12395524,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,niallp,niallp,niallp,07/May/08 13:55,25/Feb/10 20:35,07/Apr/19 20:37,07/May/08 16:08,,,,,2.5,,lang.reflect.*,,,0,,,,,,,,I think we should remove the caching from MethodUtils. This has caused memory leak problems in BeanUtils (where it was copied from) and better IMO to just provide the pure reflection API in lang and let downstream users provide solutions for improving performance.,,,,,,,,,,,,,,,,,,,,,,,,,,07/May/08 13:57;niallp;LANG-436-remove-MethodUtils-caching.patch;https://issues.apache.org/jira/secure/attachment/12381599/LANG-436-remove-MethodUtils-caching.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-07 16:00:03.741,,,false,,,,,,,,,,,,,,147315,,,Fri Jun 13 14:25:51 UTC 2008,,,,,,0|i0d60n:,74751,,,,,,,,"07/May/08 13:57;niallp;Attaching a patch to remove caching from MethodUtils, which I plan to apply","07/May/08 16:00;mbenson;I have no problems with this.  Apply away!  Thanks, Niall!","07/May/08 16:08;niallp;OK removed

http://svn.apache.org/viewvc?view=rev&revision=654159","13/Jun/08 09:50;evoorbraak;So you removed caching for org.apache.commons.lang.reflect.MethodUtils.java. Should the same not also happen for org.apache.commons.beanutils/MethodUtils.java? This is where I discovered a memory leak today.

As far as I can see, it uses a WeakHashMap, whose keys are weak references. However, the map is filled with MethodDescriptor instances, which are created in the same method as where they are put as keys in the map. So one would expect that the get garbage collected on the first occasion. It looks like the cache should have been one where the values are weak. Why we still had the memory leak, I cannot explain.","13/Jun/08 14:25;niallp;Whoever implemented MethodUtils's caching in BeanUtils presumably did so to improve performance and therefore removing it could negatively affect existing applications - for example Struts1 users. The copy of MethodUtils here in lang has only recently been added - its not in a released version and therefore has no existing users to be concerned about. Better then IMO to just provide the reflection functionality here without the caching which is much cleaner.

I have done some work on the memory leak associated with the WeakHashMap (nothing to do with the lack of synchronization - which I agree is another issue, thanks for reporting it) and problem seems to be caused by the Method reference held in the MethodDescriptor - see BEANUTILS-291 and http://tinyurl.com/5ksjrh which seems to fix this.

The BEANUTILS-291 memory leak issues is still on my todo list - but its currently in a broken state - with the same kind of issue as BEANUTILS-318, caused by me replacing the FastHashMap with WeakHashMap. I need to find time to finish up so that we can get a BeanUtils release out with these issues resolved.",,,,,,,,,,,,,,,,,,,,,,,,,,
Fix case-insensitive string handling,LANG-432,12394820,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bentmann,bentmann,25/Apr/08 16:02,25/Feb/10 19:47,07/Apr/19 20:37,22/Oct/09 05:47,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"{{String.to*Case()}} is locale-sensitive, this is usually not intended for case-insensitive comparisions. Please see [Common Bug #3|http://www.nabble.com/Re%3A-Common-Bugs-p14931921s177.html] for details.",,,,,,,,,,,,,,,,,,,,,,,,,,25/Apr/08 16:02;bentmann;LANG-432.patch;https://issues.apache.org/jira/secure/attachment/12380953/LANG-432.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-05-11 06:29:02.257,,,false,,,,,,,,,,,,,,34128,,,Thu Oct 22 05:47:05 UTC 2009,,,,,,0|i0d60v:,74752,,,,,,,,11/May/08 06:29;bayard;SystemUtilsTest and StringEscapeUtils both fixed. Need to dig more into the StringUtils one to understand the nature of the change.,"11/May/08 08:11;bentmann;The proposed changes to {{StringUtils.containsIgnoreCase()}} aim at establishing the following assertion:
{noformat}
str1.equalsIgnoreCase(str2)    ==>  StringUtils.containsIgnoreCase(str1, str2)
{noformat}
or more completely
{noformat}
StringUtils.containsIgnoreCase(str1, str2) 
iff. there exists k >= 0 such that
str1.substring(k, k + str2.length()).equalsIgnoreCase(str2)
{noformat}
","22/Oct/09 05:47;bayard;Apologies for the long delay in applying the rest of the patch. Looks good and it's gone in as:

svn ci -m ""Applying the final part of Benjamin Bentmann's patch to LANG-432, improving our handling of case-insens
itive Strings""
Sending        src/java/org/apache/commons/lang/StringUtils.java
Sending        src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java
Transmitting file data ..
Committed revision 828317.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException (NPE) in FastDateFormat.getInstance(FastDateFormat.java:211),LANG-429,12394699,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,kburjack,kburjack,24/Apr/08 13:04,17/May/08 05:24,07/Apr/19 20:37,17/May/08 05:24,2.2,,,,,,,,,0,,,,,,,,"Sometimes (sadly this is not reproducible) the following method call results in a NullPointerException (NPE):

Stacktrace:

java.lang.NullPointerException
        at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:211)
        at org.apache.commons.lang.time.DateFormatUtils.format(DateFormatUtils.java:258)
        at org.apache.commons.lang.time.DateFormatUtils.format(DateFormatUtils.java:232)

I don't know how this is actually possible, since the exception is being raised when accessing a static field 'cInstanceCache' that will be implicitly initialized...

Could this have something to do with class gc?","MS Windows XP (SP 2), Java 1.5.0 Update 11",,,,,,,,,,,,,LANG-367,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-04-24 13:33:55.897,,,false,,,,,,,,,,,,,,147310,,,Sat May 17 05:24:02 UTC 2008,,,,,,0|i0d613:,74753,,,,,,,,"24/Apr/08 13:33;sebb@apache.org;I think it's possible because the cInstanceCache field is not final - see LANG-367.

Updating to version 2.4 should fix the problem.",24/Apr/08 13:35;sebb@apache.org;This issue appears to be the same,"24/Apr/08 13:52;julien.ayme@gmail.com;IMHO, this is rather an example of a data-race issue due to the cInstanceCache field not being final and not being synchronized in <clinit> in FastDateFormat in Lang 2.2.

I suppose that the following scenario could explain your problem:
- at least two Threads concurrently access to FastDateFormat.getInstance() method, while FastDateFormat is not being loaded by the current classloader:
- Thread A loads FastDateFormat.class, and creates cInstanceCache.
- Thread B enters the FastDateFormat.getInstance() method, BUT FastDateFormat.class is in a incoherent state (cInstanceCache is null) because of memory synchronization and/or compiler optimizations
     => this causes the NullPointerException in Thread B
- Thread A enters in FastDateFormat.getInstance() method and everything is correct.

I suggest you to upgrade to Lang 2.4 in which the cInstanceCache field has been made final, and see if this problem still occurs.

Furthermore, the semantic of final keyword has been strengthen due to JSR-133 , which is part of Java 5.
I encourage you to read the following section: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#finalWrong
and the Final Fields paragraph in JSR-133: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf
","24/Apr/08 13:54;julien.ayme@gmail.com;Ugh, my comment came in late :-), this issue is indeed the same as LANG-37.","25/Apr/08 09:21;kburjack;Thanks for your VERY fast answers!
I will give it a try with 2.4",11/May/08 06:06;bayard;Did 2.4 fix things Kai?,17/May/08 05:24;bayard;Closing with the assumption that this fixed things.,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.isNumeric,LANG-428,12394687,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,artemsakhnov,artemsakhnov,24/Apr/08 10:28,01/Mar/11 06:32,07/Apr/19 20:37,01/Mar/11 06:32,2.3,,,,3.0,,lang.*,,,0,,,,,,,,"StringUtils.isNumeric.
if we put empty string as parameter we got true.
StringUtils.isNumeric("""") return true.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-04-24 13:36:52.353,,,false,,,,,,,,,,,,,,34048,,,Tue Mar 01 06:32:13 UTC 2011,,,,,,0|i0d61b:,74754,,,,,,,,"24/Apr/08 13:36;jwcarman;The javadocs specifically state that 

{panel}
An empty String ("""") will return true.
{panel}

So, I think we should close this one.  This is desired behavior apparently.","24/Apr/08 13:49;artemsakhnov;but later in javadoc says

Returns:
    true if only contains digits, and is non-null

so, you shure we can close it?","24/Apr/08 14:07;jwcarman;Yes, the javadocs specifically mention the empty string case.  So, it is desired behavior (or at least was when the author wrote it).  

Also, there could be code out there that depends on this behavior.  Changing it now would be a regression bug.","24/Apr/08 14:10;artemsakhnov;closing, but ill rewrite it for myself, because empty string is not numeric :) cya","24/Apr/08 14:12;sebb@apache.org;Note that null is different from the empty string.

Most of the isType() methods in this class work the same way: after checking for null, they check to make sure there are no illegal characters in the String.

An empty String has no characters, so cannot contain an illegal character.

If you want to ensure that the String is non-empty, use StringUtils.isNotEmpty().
","24/Apr/08 14:22;artemsakhnov;> If you want to ensure that the String is non-empty, use StringUtils.isNotEmpty().
thats ok

but i need to check GET parameter. and i dont want put it in 2 conditions, i just want call  StringUtils.isNumeric(myGetParameter) and get valid answer. 

so my 	opinion, StringUtils.isNumerric("""") should return false. if it so, then we dont need additionall conditions for result 	approve","24/Apr/08 14:23;jwcarman;Maybe the method could be better named isNotNonNumeric()?  :)
",24/Apr/08 14:28;artemsakhnov;just put there 1 more condition for empty string )))) thats be nice.,"24/Apr/08 14:47;skitching;The existing behaviour is consistent with the other methods. 
And as James notes, any change would break existing code.

So IMO, WONTFIX is the correct resolution. Sorry Artem but backwards compatibility and consistency are very important in widely-used libs like commons-lang.

I guess that a new method, isNumericValue(String) could be added to implement the requested behaviour. But I'm not sure it is worth it.
",24/Apr/08 14:52;artemsakhnov;ok,24/Apr/08 16:20;mbenson;Actually given that the behavior is documented I would argue that the truly correct resolution would have been INVALID.  But I don't feel strongly enough about it to reopen and re-resolve the issue.,"25/Jan/11 11:03;sslavic;For anyone wandering around, you can use org.apache.commons.lang.math.NumberUtils.isDigits(String) or isNumber(String) instead (see [javadoc|http://commons.apache.org/lang/api-2.4/org/apache/commons/lang/math/NumberUtils.html#isDigits%28java.lang.String%29] )","06/Feb/11 06:53;bayard;Must admit I don't see why isNumeric, isAlphanumeric, isAlpha return true for """". ","06/Feb/11 07:10;ggregory@seagullsw.com;Yeah, that does not make sense. I wonder if the intent of the author of that Javadoc comment was to just document behavior. ",20/Feb/11 06:14;bayard;Reopening to consider changing this functionality in 3.0. ,"20/Feb/11 14:42;ggregory@seagullsw.com;+1 to fix. The ""does not contain illegal chars"" semantic should be captured in a different method if at all IMO. ","21/Feb/11 15:37;mbenson;I was recently frustrated by the apparent nonsensicality of {{StringUtils.isNumeric("""") == true}} as well, and this despite my having added a comment to this issue those approximately 3 years ago.  :P  +1 from me to change this behavior.","01/Mar/11 06:32;bayard;svn ci -m ""Resolving LANG-428 - Changing StringUtils.isAlpha, isAlphanumeric and isNumeric to return false when passed an empty String. Documenting this in the changes report and in the upgrade article. Also fixing a Javadoc c+p error in isNumericSpace and isAlphanumericSpace. ""
Sending        src/main/java/org/apache/commons/lang3/StringUtils.java
Sending        src/site/changes/changes.xml
Sending        src/site/xdoc/article3_0.xml
Sending        src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java
Transmitting file data ....
Committed revision 1075673.
",,,,,,,,,,,,,
StringEscapeUtils.escapeJava() behavior changed; backslash escapes '/' characters,LANG-423,12393761,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,mhurne,mhurne,11/Apr/08 15:36,11/Apr/08 18:04,07/Apr/19 20:37,11/Apr/08 17:53,2.4,,,,,,,,,0,,,,,,,,"StringEscapeUtils.escapeJava(String str) escapes forward-slash (""/"") characters.  Prior to 2.4, this was not the case.  This is caused by the patch in LANG-363, which changed the behavior of StringEscapeUtils.escapeJavaScript(String str) to escape forward-slashes for compatibliity with IE.  The change was implemented in code common to both methods; StringEscapeUtils.escapeJavaStyleString() .

This side-effect change to StringEscapeUtils.escapeJava() is a problem in my project.  I don't see any reason why it is necessary to escape forward-slashes in escapeJava(), so I suggest the behavior be changed so that escapeJavaScript() escapes forward-slashes, but escapeJava() does not.",,,,,,,,,,,,,,LANG-421,,,,,,,,,,,,11/Apr/08 17:45;mhurne;patch.diff;https://issues.apache.org/jira/secure/attachment/12379940/patch.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,34107,,,Fri Apr 11 17:53:14 UTC 2008,,,,,,0|i0d61j:,74755,,,,,,,,11/Apr/08 17:45;mhurne;Attached is a patch that will revert the behavior of both variants of StringEscapeUtils.escapeJava() to NOT escape forward slashes.,"11/Apr/08 17:49;mhurne;Hehe, looking at that diff, it appears someone already implemented a nearly identical fix in svn.  So I suppose my patch isn't really needed.  I'm leaving the ticket open, however.",11/Apr/08 17:53;mhurne;Closing.  I see now this duplicates LANG-421.  Don't know why I didn't see that in my search results before I created this ticket...,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringEscapeUtils.escapeJava(String) escapes '/' characters,LANG-421,12392947,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Blocker,Fixed,garydgregory,shanmann,shanmann,02/Apr/08 15:42,10/Mar/11 22:27,07/Apr/19 20:37,02/Apr/08 16:07,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"Commons Lang 2.4 StringEscapeUtils.escapeJava(String) now escapes '/' characters, which is not a valid ""escapable"" character in Java strings.  I haven't tried the other Java escape/unescape methods to see if they have a similar problem, or that only Java ""escapable"" characters are escaped by escapeJava(String).

This bug may have appeared as an unintended side-effect of the fix for LANG-363.

Also the javadoc for escapeJava is now a little off, in that '/' should now be included in the sentence describing the differences between Java and Javascript strings, with respect to escaping rules.

The following is a JUnit3 test demonstrating the bug.

import junit.framework.TestCase;

import org.apache.commons.lang.StringEscapeUtils;

public class StringEscapeUtilsTest extends TestCase {
    public void testEscapeJavaWithSlash() {
        final String input = ""String with a slash (/) in it"";
        
        final String expected = input;
        final String actual   = StringEscapeUtils.escapeJava( input );

        /**
         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters,
         * which are not a valid character to escape in a Java string.  
         */
        assertEquals( expected, actual );
    }
}

",,,,,,,,,,,,,,,,,,,,,,,,,,02/Apr/08 15:44;shanmann;StringEscapeUtilsTest.java;https://issues.apache.org/jira/secure/attachment/12379147/StringEscapeUtilsTest.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-04-02 15:50:35.264,,,false,,,,,,,,,,,,,,34053,,,Wed Apr 02 16:07:57 UTC 2008,,,,,,0|i0d61r:,74756,,,,,,,,"02/Apr/08 15:44;shanmann;I attached the JUnit3 test as a file, after I noticed the inline test didn't retain end-of-lines.",02/Apr/08 15:50;ggregory@seagullsw.com;The JLS reference is http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#101083 (3.10.5 String Literals),02/Apr/08 16:07;ggregory@seagullsw.com;Fixed. Added unit test method based on attachment provided.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
WordUtils.abbreviate bug when lower is greater than str.length,LANG-419,12392362,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,v.behar,v.behar,26/Mar/08 17:05,25/Feb/10 19:50,07/Apr/19 20:37,11/May/08 05:18,2.4,,,,2.5,,lang.*,,,0,,,,,,,,"In WordUtils.abbreviate, upper is adjusted to the length of the string, then to lower.
But lower is never adjusted to the length of the string, so if lower is greater than str.lengt(), upper will be too...
Then, str.substring(0, upper) throw a StringIndexOutOfBoundsException

The fix is to adjust lower to the length of the string",,,,,,,,,,,,,,,,,,,,,,,,,,26/Mar/08 17:07;v.behar;WordUtils_abbreviate_lowerLimit_bug.patch;https://issues.apache.org/jira/secure/attachment/12378641/WordUtils_abbreviate_lowerLimit_bug.patch,27/Mar/08 09:04;v.behar;WordUtils_abbreviate_lowerLimit_bug_fixed.patch;https://issues.apache.org/jira/secure/attachment/12378693/WordUtils_abbreviate_lowerLimit_bug_fixed.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2008-03-26 17:09:32.424,,,false,,,,,,,,,,,,,,34131,,,Sun May 11 05:18:15 UTC 2008,,,,,,0|i0d61z:,74757,,,,,,,,"26/Mar/08 17:07;v.behar;here is a patch with the corresponding unit-test

I also had to fix another assert statement in the unit test",26/Mar/08 17:09;pbenedict;Congrats on the logging the first 2.4 bug.,"26/Mar/08 23:10;bayard;When I apply the patch, the tests don't pass. ie) Looks like the fix doesn't fix it.","27/Mar/08 09:04;v.behar;ok my mistake, I should have done something wrong yesterday while playing with it.
I've done a clean checkout and fixed the patch : the new one (...fixed.patch) is good, I checked it with ""mvn test"".","11/May/08 05:18;bayard;svn ci -m ""Applying Vincent Behar's second patch for LANG-419 - fixing a bug in abbreviate such that lower limits greater than the length of the string weren't working correctly"" src

Sending        src/java/org/apache/commons/lang/WordUtils.java
Sending        src/test/org/apache/commons/lang/WordUtilsTest.java
Transmitting file data ..
Committed revision 655246.",,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc incorrect for StringUtils.endsWithIgnoreCase,LANG-418,12392197,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,gmlongo,gmlongo,24/Mar/08 19:24,16/Dec/09 08:50,07/Apr/19 20:37,25/Mar/08 07:36,2.4,,,,3.0,,lang.*,,,0,,,,,,,,"The javadoc for StringUtils.endsWithIgnoreCase() shows an example that appears incorrect.  It currently looks like the following:

    StringUtils.endsWithIgnoreCase(""def"", ""ABCDEF"") = false

I believe that should return true.

It also appears that the examples in the javadoc have the parameters backwards, as the signature shows the second parameter as the ""suffix"", yet the suffix in the examples is the first parameter.  The following sample I think would be more correct:

    StringUtils.endsWithIgnoreCase(""ABCDEF"", ""def"") = true

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-03-25 07:36:02.35,,,false,,,,,,,,,,,,,,147304,,,Tue Mar 25 07:36:02 UTC 2008,,,,,,0|i0d627:,74758,,,,,,,,"25/Mar/08 07:36;bayard;Agreed - the javadoc is quite confusing.

svn ci -m ""Fixing the javadoc for endsWithIgnoreCase as per LANG-418, and adding some javadoc to test the novel javadoc examples"" src

Sending        src/java/org/apache/commons/lang/StringUtils.java
Sending        src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java
Transmitting file data ..
Committed revision 640727.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtils.round() often fails,LANG-414,12389294,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Duplicate,,plink,plink,22/Feb/08 10:17,24/Feb/08 04:24,07/Apr/19 20:37,24/Feb/08 04:24,2.2,2.3,,,2.4,,,,,0,,,,,,,,"The example below shows the failure of DateUtils.round(Date,int). With version 2.1 round() works fine.
{code}
        Now                                 DateUtils                        calculated directly     
2008-02-22T11:09:06,680 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:07,000    ERROR
2008-02-22T11:09:06,680 Truncated: 2008-02-22T11:09:06,000         2008-02-22T11:09:06,000    ok
2008-02-22T11:09:07,040 Rounded:   2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:07,040 Truncated: 2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:07,399 Rounded:   2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:07,399 Truncated: 2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:07,743 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:08,000    ERROR
2008-02-22T11:09:07,743 Truncated: 2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:08,102 Rounded:   2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:08,102 Truncated: 2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:08,446 Rounded:   2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:08,446 Truncated: 2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:08,805 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:09,000    ERROR
2008-02-22T11:09:08,805 Truncated: 2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:09,149 Rounded:   2008-02-22T11:09:09,000         2008-02-22T11:09:09,000    ok
2008-02-22T11:09:09,149 Truncated: 2008-02-22T11:09:09,000         2008-02-22T11:09:09,000    ok
2008-02-22T11:09:09,508 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:10,000    ERROR
2008-02-22T11:09:09,508 Truncated: 2008-02-22T11:09:09,000         2008-02-22T11:09:09,000    ok
2008-02-22T11:09:09,852 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:10,000    ERROR
2008-02-22T11:09:09,852 Truncated: 2008-02-22T11:09:09,000         2008-02-22T11:09:09,000    ok
2008-02-22T11:09:10,211 Rounded:   2008-02-22T11:09:10,000         2008-02-22T11:09:10,000    ok
2008-02-22T11:09:10,211 Truncated: 2008-02-22T11:09:10,000         2008-02-22T11:09:10,000    ok
2008-02-22T11:09:10,555 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:11,000    ERROR
2008-02-22T11:09:10,555 Truncated: 2008-02-22T11:09:10,000         2008-02-22T11:09:10,000    ok
2008-02-22T11:09:10,915 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:11,000    ERROR
2008-02-22T11:09:10,915 Truncated: 2008-02-22T11:09:10,000         2008-02-22T11:09:10,000    ok
2008-02-22T11:09:11,258 Rounded:   2008-02-22T11:09:11,000         2008-02-22T11:09:11,000    ok
2008-02-22T11:09:11,258 Truncated: 2008-02-22T11:09:11,000         2008-02-22T11:09:11,000    ok
2008-02-22T11:09:11,618 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:12,000    ERROR
2008-02-22T11:09:11,618 Truncated: 2008-02-22T11:09:11,000         2008-02-22T11:09:11,000    ok
2008-02-22T11:09:11,961 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:12,000    ERROR
2008-02-22T11:09:11,961 Truncated: 2008-02-22T11:09:11,000         2008-02-22T11:09:11,000    ok
2008-02-22T11:09:12,321 Rounded:   2008-02-22T11:09:12,000         2008-02-22T11:09:12,000    ok
2008-02-22T11:09:12,321 Truncated: 2008-02-22T11:09:12,000         2008-02-22T11:09:12,000    ok
2008-02-22T11:09:12,665 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:13,000    ERROR
2008-02-22T11:09:12,665 Truncated: 2008-02-22T11:09:12,000         2008-02-22T11:09:12,000    ok
{code}
{code:title=Example Code|borderStyle=solid}
java.text.SimpleDateFormat dtFormat = new java.text.SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss,SSS"");

System.out.println(
    ""        Now            ""
    + ""            ""
    + ""   DateUtils  ""
    + ""         ""
    + ""       calculated directly ""
    + ""    "");
int errorCnt = 0;
while(errorCnt < 10)
{
  java.util.Date now = new java.util.Date();
  
  java.util.Date roundedByUtils = org.apache.commons.lang.time.DateUtils.round(now, java.util.Calendar.SECOND);
  java.util.Date truncatedByUtils = org.apache.commons.lang.time.DateUtils.truncate(now, java.util.Calendar.SECOND);
  
  long rest = now.getTime() % 1000;
  java.util.Date rounded;
  java.util.Date truncated = new java.util.Date(now.getTime() - rest);
  if (rest < 500)
    rounded = truncated;
  else
    rounded = new java.util.Date(now.getTime() + (1000 - rest));
  boolean roundError = !roundedByUtils.equals(rounded);
  boolean truncateError = !truncatedByUtils.equals(truncated);
  if (roundError || truncateError)
    errorCnt++;

  System.out.println(
      dtFormat.format(now)
      + "" Rounded:   ""
      + dtFormat.format(roundedByUtils)
      + ""         ""
      + dtFormat.format(rounded)
      + ""    ""
      + (roundError ? ""ERROR"" : ""ok""));
  System.out.println(
      dtFormat.format(now)
      + "" Truncated: ""
      + dtFormat.format(truncatedByUtils)
      + ""         ""
      + dtFormat.format(truncated)
      + ""    ""
      + (truncateError ? ""ERROR"" : ""ok""));
  Thread.sleep(351);
}
{code}",,,,,,,,,,,,,,LANG-346,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-02-24 04:24:58.643,,,false,,,,,,,,,,,,,,34124,,,Sun Feb 24 04:24:58 UTC 2008,,,,,,0|i0d62f:,74759,,,,,,,,24/Feb/08 04:24;bayard;Thanks Peter - this was reported earlier (LANG-346) and you should find that the latest code in SVN [and the forthcoming 2.4] fix it.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrBuilder appendFixedWidth does not handle nulls,LANG-412,12388510,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,poxenham,poxenham,13/Feb/08 04:23,02/May/13 02:29,07/Apr/19 20:37,13/Feb/08 05:45,2.3,,,,2.4,,,,,0,,,,,,,,Appending a null value with fixed width causes a null pointer exception if getNullText() has not been set.,Java  1.5,,,,,,,,,,,,,,,,,,,,,,,LANG-407,,13/Feb/08 05:43;bayard;LANG-412.patch;https://issues.apache.org/jira/secure/attachment/12375447/LANG-412.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-02-13 05:33:49.147,,,false,,,,,,,,,,,,,,34029,,,Wed Feb 13 05:45:03 UTC 2008,,,,,,0|i0d62n:,74760,,,,,,,,"13/Feb/08 05:33;bayard;Confirmed (visually). As appendNull's effect is to do nothing if it is set to null, my assumption is that having nullText be null is merely an optmization for the empty String.

So I think the solution will be to make the fixed width methods use an empty string if they get back a null nullText.","13/Feb/08 05:43;bayard;Attaching tests and a fix (null -> """").","13/Feb/08 05:45;bayard;svn ci -m ""Applying my patch from LANG-412; fixing Peter Oxenham's report that the appendFixedWidthPadRight and appendFixedWidthPadLeft are not null safe if the nullText has not been set"" src

Sending        src/java/org/apache/commons/lang/text/StrBuilder.java
Sending        src/test/org/apache/commons/lang/text/StrBuilderTest.java
Transmitting file data ..
Committed revision 627248.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Ambiguous / confusing names in StringUtils replace* methods,LANG-410,12388001,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,06/Feb/08 19:10,16/Dec/09 08:50,07/Apr/19 20:37,17/Feb/08 01:27,,,,,2.4,,lang.*,,,0,,,,,,,,"The recently added replaceEach* methods use ""repl"" for the original string list, and ""with"" for the new (replacement) string list.

These names are rather confusing.

RE engines tend to use words such as:

Perl:
searchlist
replacementlist

ORO:
pattern
replacement

Java has String.replace(regex, replacement)

In all cases, ""replacement"" is used for the NEW string, not the original string which is to be replaced.

Seems to me that searchString/List and replacement[List] would be unambiguous as well as descriptive.
Also useful in IDEs which show possible method completions.

Changing the names of the parameters would not affect the API.

Patch to follow",,,,,,,,,,,,,,,,,,,,,,,,,,06/Feb/08 19:12;sebb@apache.org;StringUtils.patch;https://issues.apache.org/jira/secure/attachment/12374896/StringUtils.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-02-13 06:57:55.633,,,false,,,,,,,,,,,,,,147300,,,Wed Feb 13 20:42:20 UTC 2008,,,,,,0|i0d62v:,74761,,,,,,,,"13/Feb/08 06:57;bayard;Looks good - but the patch doesn't work. I think Gary and Matt made changes just after you did this and it's thrown things off.

Could you update and repatch or commit?","13/Feb/08 20:42;sebb@apache.org;commit -m ""LANG-410 - Ambiguous / confusing names in StringUtils replace* methods"" src/java/org/apache/commons/lang/StringUtils.java
   Committed revision 627588.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Add FractionFormat to oacl.text,LANG-406,12387713,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,mbenson,mbenson,mbenson,02/Feb/08 19:51,13/Feb/08 07:04,07/Apr/19 20:37,04/Feb/08 15:35,2.3,,,,,,,,,0,,,,,,,,"I'd like to add a FractionFormat implementation, capable of formatting Numbers including oacl.math.Fraction to fractions, and of parsing fraction representation (and standalone integers) into oacl.math.Fraction instances.  Implementation and test forthcoming; opinions welcome.",,,,,,,,,,,,,,,,,,,,,,,,,,02/Feb/08 19:54;mbenson;FractionFormat.java;https://issues.apache.org/jira/secure/attachment/12374613/FractionFormat.java,02/Feb/08 19:57;mbenson;FractionFormatTest.java;https://issues.apache.org/jira/secure/attachment/12374614/FractionFormatTest.java,02/Feb/08 20:10;mbenson;FractionToString.patch.txt;https://issues.apache.org/jira/secure/attachment/12374615/FractionToString.patch.txt,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2008-02-03 05:37:20.69,,,false,,,,,,,,,,,,,,147298,,,Mon Feb 04 15:35:07 UTC 2008,,,,,,0|i0d633:,74762,,,,,,,,"02/Feb/08 20:00;mbenson;Patch #3:  Fraction.toString() and Fraction.toProperString() should use FractionFormat, to keep all fraction formatting/parsing in one (IMO here=the right) place.",03/Feb/08 05:37;bayard;Only opinion so far is that 2.4 is close enough to start asking whether we want to add new issues to 2.4. The last batch got added because this'll be an M2 release and we were blocked on the unreleased commons-parent pom. That's no longer blocking us now.,"03/Feb/08 15:13;mbenson;As always, I""m fine with whatever consensus says.  Though if this code is such that we don't have any contention over it, this issue could be resolved before the other two we've got outstanding.","04/Feb/08 04:44;niallp;I'm not sure why we have Fraction in both Lang and Math - I guess historically they just evolved separately. The duplication does seem like a waste of effort though and Math IMO is a better location - also Math already has a FractionFormat implementation. Perhaps would be a good idea to compare both Fraction implementations and ensure that one supports all features of the other and then deprecate one.

http://svn.apache.org/repos/asf/commons/proper/math/trunk/src/java/org/apache/commons/math/fraction/
http://svn.apache.org/repos/asf/commons/proper/lang/trunk/src/java/org/apache/commons/lang/math/","04/Feb/08 14:20;mbenson;Ah... actually I began working on this before even realizing [math] had a Fraction (not being a consumer, never thought about it), much less a FractionFormat.  I only learned about the [math] Fraction from your (Niall's) recent JIRA comments.  I will check out the [math] FractionFormat and make sure it's up to snuff.  ;)  If that all works out, then should we not also deprecate oacl.math.Fraction?",04/Feb/08 15:35;mbenson;I'm okay to drop this.,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc bugs - cannot find object,LANG-399,12385863,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,09/Jan/08 13:11,10/Jan/08 04:11,07/Apr/19 20:37,10/Jan/08 04:11,,,,,2.4,,,,,0,,,,,,,,Patch follows to fix some Javadoc @see and @link errors,,,,,,,,,,,,,,,,,,,,,,,,,,09/Jan/08 13:11;sebb@apache.org;lang-javadoc.patch;https://issues.apache.org/jira/secure/attachment/12372795/lang-javadoc.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-01-09 16:06:11.595,,,false,,,,,,,,,,,,,,147293,,,Wed Jan 09 16:54:57 UTC 2008,,,,,,0|i0d63b:,74763,,,,,,,,"09/Jan/08 16:06;bayard;Looks good - feel free to commit if you want, otherwise I'll get to it tonight.","09/Jan/08 16:54;sebb@apache.org;OK:

commit -m ""LANG-399 - Javadoc fixes"" 
Committed revision 610452.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Equalsbuilder fails at using unmodifiable collection,LANG-394,12385497,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,bm,bm,03/Jan/08 14:42,05/Jan/08 06:25,07/Apr/19 20:37,05/Jan/08 06:25,2.3,,,,,,,,,0,,,,,,,,"When using the equalsbuilder to build a equals-method it comes to failures, when comparing object which have unmodifiable list properties.

Look at the simplified example. A class Foo with a collection (A,B,C) is build up. The equals method uses the equalsbuilder to append the list to it. The getter of the list returns a unmodifiable collection. This situation leads to the test failure. Without capsulation in a unmodifiable collection the test succeeds. What's wrong? I want to compare such objects by value not by reference.

 @Test
  public void testInEqualsBuilder() {
    class Foo {
      private final Collection<String> list;

      public Foo() {
        this.list = new ArrayList<String>();
        this.list.add(""A"");
        this.list.add(""B"");
        this.list.add(""C"");

      }

      @Override
      public boolean equals(final Object object) {
        if (object == this) {
          return true;
        }
        if (!(object instanceof Foo)) {
          return false;
        }
        final Foo rhs = (Foo) object;
        
        final EqualsBuilder eb = new EqualsBuilder();
        eb.append(this.list, rhs.getList());
        return eb.isEquals();
      }

      private Collection<String> getList() {

         return Collections.unmodifiableCollection(this.list);
       }

    }

    final Foo x = new Foo();

    assertTrue(x.equals(x));
   
    // FAILURE list [A,B,C] is not equal to list [A,B,C], when using
    // unmodifiableCollection?
    assertTrue(x.equals(new Foo()));

  }","Win XP SP2, JRE 1.5.0_12",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2008-01-03 15:15:24.247,,,false,,,,,,,,,,,,,,147290,,,Sat Jan 05 06:25:05 UTC 2008,,,,,,0|i0d63j:,74764,,,,,,,,"03/Jan/08 15:15;julien.ayme@gmail.com;Hi, this is not an EqualsBuilder bug, but rather a misuse of the Collection interface:

The general contract for Collection#equals(Object) is the same as Object#equals(Object), ie a Collection is only equals to itself.
(see http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collection.html#equals(java.lang.Object))

Whereas the contract for List#equals(Object) is that a List is equals to any List of the same size which contains the same objects in the same order.
(see http://java.sun.com/j2se/1.5.0/docs/api/java/util/List.html#equals(java.lang.Object))

That's why your current test fails; instead of returning an unmodifiableCollection, try returning an unmodifiableList (which compares to other lists by value and not by reference).

Hope this help,
Julien","05/Jan/08 06:25;bayard;Many thanks for that explanation Julien, the javadoc definitely backs up what you're saying and so I'm closing this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
EqualsBuilder don't compare BigDecimals correctly ,LANG-393,12385492,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,luishenriques,luishenriques,03/Jan/08 13:46,27/Apr/15 20:23,07/Apr/19 20:37,13/Jan/08 07:00,2.3,,,,2.4,,,,,0,,,,,,,,"When comparing a BigDecimal, the comparing is made using equals, not compareTo, which is more appropriate in the case of BigDecimal.  ",,,,,,,,,,,,,,,,LANG-1113,,,,,,,,,,11/Jan/08 06:15;bayard;LANG-393.patch;https://issues.apache.org/jira/secure/attachment/12372959/LANG-393.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2008-01-09 09:28:26.002,,,false,,,,,,,,,,,,,,34059,,,Sat Nov 14 10:11:40 UTC 2009,,,,,,0|i0d63r:,74765,,,,,,,,"09/Jan/08 09:28;bayard;From the BigDecimal javadoc:

    ""Compares this BigDecimal with the specified Object for equality. Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method). ""

So I can definitely see that in BigDecimal's case, most users would want compareTo to be used.",09/Jan/08 09:28;bayard;Need to create unit test/fix.,"09/Jan/08 18:06;ggregory@seagullsw.com;Hm... is there a way to refactor our code so that the Equals and CompareTo be mixed and matched? At least, it sounds we need some kind of configurable map to tell us which class should use compareTo.","10/Jan/08 04:16;bayard;Do we need it? 

This is our first compareTo instance. Looks like we need an if instanceof BigDecimal inside the if(!lhsClass.isArray()) block of append(Object, Object).","10/Jan/08 07:59;ggregory@seagullsw.com;Strictly XP-speaking, no. You are correct, we should start with the required case and refactor and generalize only if needed.",11/Jan/08 06:15;bayard;Suggested fix attached.  How does it look?,"13/Jan/08 07:00;bayard;svn ci -m ""Applying my patch from LANG-393; EqualsBuilder uses compareTo for BigDecimal and not equals"" src

Sending        src/java/org/apache/commons/lang/builder/EqualsBuilder.java
Sending        src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java
Transmitting file data ..
Committed revision 611543.","01/Oct/08 13:22;dfuse;The following simple test case shows that the applied patch throws a ClassCastException:
public static void main(String[] args) {
		class Test {
			public Object o;
		}

		BigDecimal d = new BigDecimal(1000);
		Long l = new Long(1000);

		Test t1 = new Test();
		Test t2 = new Test();

		t1.o = d;
		t2.o = l;

		System.out.println(EqualsBuilder.reflectionEquals(t1, t2));
	}
","01/Oct/08 21:41;scolebourne;I hadn't spotted this one. While I understand the motivation, I do think that EqualsBuilder should use .equals(). There are people who will consider that to be the only valid equals comparison (all the state of the object being equal).","01/Oct/08 21:48;mbenson;@Stephen:  Might be late now; @Nicolas:  The compilation error only happens with Java 5, so yes, when [lang] moves to Java 5 it must be corrected.","02/Oct/08 05:57;dfuse;@Matt: You are right, I should have mentioned that (java5). But don't  you think it should be fixed now? It is not a compilation error but a runtime error, and it occurs for everyone using Java 5 in their project while using this library.",07/Nov/08 00:04;bayard;Btw - this is fixed in trunk now. Separate issue is whether this change needs to be reverted or not.,"14/Nov/09 10:11;bayard;Note that due to inconsistency with HashCodeBuilder and hashCode in general, this fix has been reverted and will go back to its old behaviour of using equals() in Lang 3.0.",,,,,,,,,,,,,,,,,,
org.apache.commons.lang.enum,LANG-388,12385195,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Blocker,Won't Fix,,hdiwan,hdiwan,26/Dec/07 11:39,11/Jan/08 04:56,07/Apr/19 20:37,11/Jan/08 04:56,,,,,,,,,,0,,,,,,,,"In src/test/org/apache/commons/lang/AllLangTestSuite.java, the package won't compile unless the line ""suite.addTest(org.apache.commons.lang.enum.EnumTestSuite.suite());"" is commented out.","Java 1.5, possibly earlier",,,,,,,,,,,,,,,,,,,,,,,,,26/Dec/07 11:40;hdiwan;langtests.pat;https://issues.apache.org/jira/secure/attachment/12372213/langtests.pat,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-12-26 16:43:06.796,,,false,,,,,,,,,,,,,,147285,,,Fri Jan 11 04:56:02 UTC 2008,,,,,,0|i0d63z:,74766,,,,,,,,26/Dec/07 11:40;hdiwan;Patch comments out the relevant suite.addTest line indicated in the bug description,26/Dec/07 16:43;ggregory@seagullsw.com;Works fine for me on Sun Java 1.4.2_16 and 1.5.0_13 on Windows XP SP2. I get the expected compiler warnings on Java 5. Please include your errors.,09/Jan/08 09:43;bayard;Any details on your errors Hasan?,"09/Jan/08 17:05;hdiwan;I have warnings-as-errors set and that was the problem. In any case, commenting this out might be a good idea with a version test.","09/Jan/08 17:25;sebb@apache.org;The entire enum directory is deprecated for the same reason and will be removed at some point.
No point in just removing the test case.

The workround is to leave such warnings as warnings.","11/Jan/08 04:56;bayard;Yup - closing as wontfix.

All the deprecated bits will vanish in 3.0.",,,,,,,,,,,,,,,,,,,,,,,,,
"http://commons.apache.org/lang/developerguide.html ""Building"" section is incorrect and incomplete",LANG-385,12384826,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,sebb@apache.org,sebb@apache.org,18/Dec/07 01:28,24/Dec/07 07:08,07/Apr/19 20:37,24/Dec/07 07:08,2.3,,,,2.4,,,,,0,,,,,,,,"http://commons.apache.org/lang/developerguide.html - the Building section  says that the Ant target dist-build can be used to build the distribution.
However, there is no such target. Should presumably read ""ant dist"".

The section mentions that Maven can be used to build the project but fails to provide any details.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-12-24 07:08:03.175,,,false,,,,,,,,,,,,,,147283,,,Mon Dec 24 07:08:03 UTC 2007,,,,,,0|i0d647:,74767,,,,,,,,"24/Dec/07 07:08;bayard;svn ci -m ""Updating the build instructions to fix Sebb's reported problems in LANG-385"" xdocs 

Sending        xdocs/developerguide.xml
Transmitting file data .
Committed revision 606676.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils.min(floatArray) returns wrong value if floatArray[0] happens to be Float.NaN,LANG-381,12383623,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tv,tv,30/Nov/07 13:17,06/Jan/08 23:59,07/Apr/19 20:37,06/Jan/08 23:59,2.3,,,,2.4,,,,,0,,,,,,,,"The min() method of NumberUtils returns the wrong result if  the first value of the array happens to be Float.NaN. The following code snippet shows the behaviour:

        float a[] = new float[] {(float) 1.2, Float.NaN, (float) 3.7, (float) 27.0, (float) 42.0, Float.NaN};
        float b[] = new float[] {Float.NaN, (float) 1.2, Float.NaN, (float) 3.7, (float) 27.0, (float) 42.0, Float.NaN};
        
        float min = NumberUtils.min(a);
        System.out.println(""min(a): "" + min); // output: 1.2
        min = NumberUtils.min(b);
        System.out.println(""min(b): "" + min); // output: NaN

This problem may exist for double-arrays as well. 

Proposal: Use Float.compare(float, float) or NumberUtils.compare(float, float) to achieve a consistent result.
",,,,,,,,,,,,,,,,,,,,,,,,,,05/Jan/08 07:47;bayard;LANG-381-IEEE-754r.patch;https://issues.apache.org/jira/secure/attachment/12372554/LANG-381-IEEE-754r.patch,05/Jan/08 07:33;bayard;LANG-381-JDK.patch;https://issues.apache.org/jira/secure/attachment/12372553/LANG-381-JDK.patch,05/Jan/08 08:31;bayard;LANG-381-both.patch;https://issues.apache.org/jira/secure/attachment/12372559/LANG-381-both.patch,,,,,,,,3.0,,,,,,,,,,,,,,,,,,,2007-12-02 03:51:31.81,,,false,,,,,,,,,,,,,,34123,,,Sun Jan 06 23:59:19 UTC 2008,,,,,,0|i0d64f:,74768,,,,,,,,02/Dec/07 03:51;bayard;Confirmed; and same problem exists for doubles.,"02/Dec/07 03:58;bayard;Float.compare(float, float) is 1.4 specific, however we have our own implementation in NumberUtils so should be able to use that.",02/Dec/07 04:26;bayard;Also a bug on the max() methods.,"02/Dec/07 04:33;bayard;Looks like the min(double, double, double) (and probably others) have the same problem. Interesting given that they use Math.min.

The bug on the max() methods is the inverse. They don't consider NaN to be > than all others as Float.compareTo does.","02/Dec/07 04:40;bayard;Last spammy comment on this I promise....

This seems like a confusing bit. If we look at the JDK, we get:

Math.min(Double.NaN, 1.0) => NaN
Math.max(Double.NaN, 1.0) => NaN

However:

Double.compare(Double.NaN, 1.0) => 1
Double.compare(1.0, Double.NaN) => -1

That is, the JDK is not without its problems. It seems to me that the min/max methods need to take their leads from the JDK ones. So the (double, double, double) ones are implicitly correct as they are nothing more than wrappers for a couple of Math.min calls.

This bug is not that NaN is returned, but that 1.2 is returned.

ie) If NaN is found in min(double[]), then the min is NaN.
The same holds for max - it should never return 42.0 in the above example.

Thoughts?","02/Dec/07 20:32;tv;I see your point. I think the JavaDoc comment in Float.compareTo(Float) (since 1.2) says what was intended:

""There are two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators (<, <=, ==, >= >) when applied to primitive floats:
- Float.NaN is considered by this method to be equal to itself and greater than all other float values (including Float.POSITIVE_INFINITY).
- 0.0f is considered by this method to be greater than -0.0f.""

So assuming this is the correct way to do things, I guess the min-method should return 1.2 and the max-method should return NaN. In any case the result should not depend on the value of the first element of the array.","02/Dec/07 20:43;psteitz;The comparator has to impose a total ordering, so it has to put NaN somewhere.  The min/max functions do not have to do this - i.e., we could define the contract of min/max to be to return NaN iff there are no non-NaN values in the array, so NaNs are effectively excluded.  This is what we did in [math].  See, e.g., 
http://commons.apache.org/math/api-1.1/org/apache/commons/math/stat/StatUtils.html#min(double[],%20int,%20int)","03/Dec/07 06:53;bayard;The JDK already implies that the contract is that if a NaN appears in the min or max, then the min or max is NaN.

Why not just go with that? Any idea if that is defined by IEEE?","04/Dec/07 03:31;psteitz;The orignial IEEE 754 spec prescribes behavior like the JDK, i.e. min(x, NaN) = max(x, NaN) = NaN.  This is under discussion for change in IEEE 745r.  See [1] for a summary of the issues.   The rationale for returning NaN in these cases is to propagate the signal that something has gone awry in computation somewhere - *not* to pretend that the comparison actually makes sense.   A better approach for most applications, IMO, is to treat NaNs as missing data, especially in cases like the present where they appear as elements in a set.  In any case, the important thing is to document clearly what the API contract is.  I will adapt the [math] code and test cases if this is what we want to do for lang.

[1] http://en.wikipedia.org/wiki/NaN","06/Dec/07 07:33;bayard;So, from http://en.wikipedia.org/wiki/IEEE_754r we get:

*********************
min and max

The min and max operations are defined but leave some leeway for the case where the inputs are equal in value but differ in representation. In particular:

    * min(+0,-0) or min(-0,+0) must produce something with a value of zero but may always return the first argument.

In order to support operations such as windowing in which a NaN input should be quietly replaced with one of the end points, min and max are defined to select a number, x, in preference to a quiet NaN:

    * min(x,NaN) = min(NaN,x) = x
    * max(x,NaN) = max(NaN,x) = x

In the current draft, these functions are called minnum and maxnum to indicate their preference for a number over a NaN.
*********************

Regardless of the various options, we need to make sure our pairs of min functions are equivalent; the (double, double, double) and the (double[]) variants.

Our options for 'correct' seem to be:

1) JDK functionality; current IEEE. NaN is always the answer to min and max if an argument.
2) IEEE-754r. NaN is only the answer to min and max functions if there is no non NaN element.
3) Keep JDK functionality as is and add minnum/maxnum variants for IEEE-754r.

I'm surprised by the IEEE-754r change, it feels to me that I would prefer to have a clear sign that something went wrong and not have the other number be the minimum and no awareness of the problem having happened. I'm tending towards 1) or 3).",06/Dec/07 19:59;tv;My vote goes for 2) or perhaps 3) if it must be. At least I'd strongly suggest to add a word of explanation to the docs. The behavior should be consistent across all float comparisons in any case.,"05/Jan/08 07:33;bayard;Patch attached that makes minimum and maximum obey the JDK rule of ""if it has NaN, then return NaN"".","05/Jan/08 07:47;bayard;Attaching patch that makes min/max use the IEEE-754r approach. Turned out to be nice and easy.

Javadoc improvement needed if this is used.","05/Jan/08 08:31;bayard;Attaching a patch with the JDK approach applied to NumberUtils methods, and a new IEEE754rUtils class added with those variants of the methods. Javadoc'd etc.

This is the one I plan to apply.","06/Jan/08 23:59;bayard;svn ci -m ""Applying third patch from LANG-381. Fixes the minimum(float[]) type methods to correctly return NaN when it is in the array, and adds an IEEE754rUtils class that obeys the IEEE 754r update in which NaN in min/max methods should be ignored unless all values are NaN. "" src

Adding         src/java/org/apache/commons/lang/math/IEEE754rUtils.java
Sending        src/java/org/apache/commons/lang/math/NumberUtils.java
Adding         src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java
Sending        src/test/org/apache/commons/lang/math/NumberUtilsTest.java
Transmitting file data ....
Committed revision 609475.",,,,,,,,,,,,,,,,
infinite loop in Fraction.reduce when numerator == 0,LANG-380,12383536,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,niallp,niallp,29/Nov/07 16:24,03/Dec/07 06:51,07/Apr/19 20:37,29/Nov/07 16:34,2.3,,,,2.4,,,,,0,,,,,,,,Summary pretty much says it all.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,34130,,,2007-11-29 16:24:43.0,,,,,,0|i0d64n:,74769,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
MultiFormatTest testWTF() does nothing useful,LANG-376,12382661,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,sebb@apache.org,sebb@apache.org,16/Nov/07 13:30,11/May/08 06:35,07/Apr/19 20:37,11/Mar/08 14:38,,,,,2.4,,,,,0,,,,,,,,"The testWTF() method in MultiFormatTest does not appear to do anything useful - it merely prints out a DateFormat instance.

This results in spurious output during unit tests.

The test should be removed or made to do something useful.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-11-16 19:03:01.037,,,false,,,,,,,,,,,,,,147277,,,Tue Mar 11 14:38:41 UTC 2008,,,,,,0|i0d64v:,74770,,,,,,,,16/Nov/07 19:03;bayard;Removed,16/Nov/07 21:25;mbenson;collided with me!,11/Mar/08 14:38;mbenson;Re-resolving as invalid since we removed MultiFormat; this way hopefully any generated release notes won't contain this.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToStringBuilder: MULTI_LINE_STYLE does not print anything from appendToString methods.,LANG-372,12382081,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,prophecy,prophecy,08/Nov/07 09:53,13/Nov/07 01:25,07/Apr/19 20:37,13/Nov/07 01:25,2.3,,,,2.4,,,,,0,,,,,,,,"To reproduce, just use the following sample on an object:

return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
                .appendToString(ob1.toString())
                .appendToString(ob2.toString())
                .append(""something"", something)
                .toString();

You won't see the ob1.toString or the ob2.toString

And this works correctly:

return new ToStringBuilder(this)
                .appendToString(ob1.toString())
                .appendToString(ob2.toString())
                .append(""something"", something)
                .toString();",,,,,,,,,,,,,,,,,,,,,,,,,,12/Nov/07 23:43;bjorn;LANG-327-test.patch;https://issues.apache.org/jira/secure/attachment/12369403/LANG-327-test.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-11-12 23:43:15.852,,,false,,,,,,,,,,,,,,34119,,,Tue Nov 13 01:25:50 UTC 2007,,,,,,0|i0d653:,74771,,,,,,,,"12/Nov/07 23:43;bjorn;Looks like ToStringBuilder doesn't like appending toStrings built with different style types. The multiline style calls setContentEnd to change the content end string from ] to \n]. It fails to append toStrings built with the plain style because it can't find this string.  So the workaround is to use a single style in every object.

I'm attaching a JUnit test patch that reproduces this issue.","13/Nov/07 01:22;bayard;Yep - it even says so in ToStringBuilder (doh):

     * <p>This method assumes that the other object uses the same <code>ToStringStyle</code>
     * as this one.</p>

Just not in ToStringStyle where it's obvious when digging into the code.

I've added Javadoc in ToStringStyle to that effect (r594386). ","13/Nov/07 01:25;bayard;Marking this as WONTFIX. It's a design bug rather than a code bug, and I don't see any obvious ways to surgically fix it.

I've also added Bjorn's unit test as a proof of this so if it does change in the future we can notice (r594387).",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionUtils not thread-safe,LANG-369,12381468,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,30/Oct/07 17:36,16/Oct/13 08:59,07/Apr/19 20:37,17/Mar/09 20:55,,,,,2.7,3.0,lang.exception.*,,,0,,,,,,,,"The ExceptionUtils class does not appear to be thread-safe:
- CAUSE_METHOD_NAMES is not final, so may not be visible to all threads
- addCauseMethodName() and removeCauseMethodName() can update CAUSE_METHOD_NAMES but are not synch.
- all accesses to CAUSE_METHOD_NAMES probably need to be synchronised

The documentation does not state whether or not the class is thread-safe, but given that it only has static methods it does not make any sense unless it is thread-safe.",,,,,,,,,,,,,,,,LANG-584,,,,,,,,,,14/Mar/09 14:39;sebb@apache.org;LANG-369-2.patch;https://issues.apache.org/jira/secure/attachment/12402204/LANG-369-2.patch,09/Nov/07 08:20;bayard;LANG-369.patch;https://issues.apache.org/jira/secure/attachment/12369216/LANG-369.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2007-11-03 08:06:11.394,,,false,,,,,,,,,,,,,,147272,,,Tue Mar 17 20:55:48 UTC 2009,,,,,,0|i0d65b:,74772,,,,,,,,03/Nov/07 08:06;bayard;Agreed - synchronizing the variable seems the best thing to do.,09/Nov/07 08:20;bayard;Patch that liberally splashes synchronized around the variable.,12/Nov/07 19:46;bens;Patch looks safe.,"12/Nov/07 19:58;bayard;svn ci -m ""Applying the synchronization from LANG-369"" src/java/org/apache/commons/lang/exception/ExceptionUtils.java

Sending        src/java/org/apache/commons/lang/exception/ExceptionUtils.java
Transmitting file data .
Committed revision 594278.","14/Mar/09 14:33;sebb@apache.org;I think the wrong lock object is used in the synchronization.

The code uses the CAUSE_METHOD_NAMES object as the lock and then changes it in the synchronized block, i.e. the lock object is changed.

This occurs in removeCauseMethodName() and addCauseMethodName().

Either lock on the class, or use a dummy static final Object as the lock.

This applies to 2.4 branch and trunk
",14/Mar/09 14:39;sebb@apache.org;Patch which adds static final Object as a lock.,"17/Mar/09 20:55;sebb@apache.org;Applied patch:

URL: http://svn.apache.org/viewvc?rev=755391&view=rev
Log:
LANG-369 - must use fixed object as lock target
",,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat getDateInstance() and getDateTimeInstance() assume Locale.getDefault() won't change,LANG-368,12381446,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,30/Oct/07 13:52,31/Oct/07 03:59,07/Apr/19 20:37,31/Oct/07 03:59,,,,,2.4,,,,,0,,,,,,,,"The FastDateFormat getDateInstance() and getDateTimeInstance()  methods create the HashMap key from various items including the locale.

If the locale is null, then it is not made part of the key, but the stored object is created using the current default locale.

If the Locale is changed subsequently, then the wrong locale is applied.

Patch for test case to follow.
",,,,,,,,,,,,,,,,,,,,,,,,,,30/Oct/07 13:58;sebb@apache.org;FastDateFormat.patch;https://issues.apache.org/jira/secure/attachment/12368675/FastDateFormat.patch,30/Oct/07 13:53;sebb@apache.org;FastDateFormatTest.patch;https://issues.apache.org/jira/secure/attachment/12368674/FastDateFormatTest.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2007-10-31 03:59:27.624,,,false,,,,,,,,,,,,,,34109,,,Wed Oct 31 03:59:27 UTC 2007,,,,,,0|i0d65j:,74773,,,,,,,,30/Oct/07 13:53;sebb@apache.org;Patch to add failing unit tests of getDateInstance() and getDateTimeInstance(),30/Oct/07 13:58;sebb@apache.org;Fixes problem by using current locale as part of the key,"31/Oct/07 03:59;bayard;Thanks Sebb, applied.

svn ci -m ""Applying Sebb's test and fix from LANG-368 - fixing it so that FastDateFormat getDateInstance and getDateTimeInstance continue to work if Locale.getDefault() changes"" 

src/test/org/apache/commons/lang/time/FastDateFormatTest.java 
src/java/org/apache/commons/lang/time/FastDateFormat.java
Sending        src/java/org/apache/commons/lang/time/FastDateFormat.java
Sending        src/test/org/apache/commons/lang/time/FastDateFormatTest.java
Transmitting file data ..
Committed revision 590551.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat thread safety,LANG-367,12381445,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,30/Oct/07 13:25,24/Apr/08 13:35,07/Apr/19 20:37,05/Nov/07 09:55,,,,,2.4,,,,,0,,,,,,,,"FastDateFormat has several static HashMaps. These are currently not final, so there is no guarantee that they will be visible to all threads.

Patch to follow.

Also, as far as I can make out, the class shares SimpleDateFormat instances between threads.

It does not document why this is OK.

I'm guessing that it assumes that instances of the SimpleDateFormat class are thread-safe provided that they have the same attributes, but this is not documented. If this is the case, it's not clear that it is a valid assumption.




",,,,,,,,,,,,,,,,,,,,,,,,,,30/Oct/07 13:25;sebb@apache.org;FastDateFormat.patch;https://issues.apache.org/jira/secure/attachment/12368672/FastDateFormat.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-10-31 04:04:39.825,,,false,,,,,,,,,,,,,,147271,,,Mon Nov 05 09:55:33 UTC 2007,,,,,,0|i0d65r:,74774,,,,,,,,30/Oct/07 13:25;sebb@apache.org;Make HashMaps final,"31/Oct/07 04:04;bayard;Patch applied (r590552).

Keeping open until the SimpleDateFormat question is answered.","31/Oct/07 04:38;pbenedict;Based on this link:
http://www.ibm.com/developerworks/java/library/j-jtp09263.html

""In any case, it's better to be clear in the documentation about how a class behaves when an instance is shared across threads. As an example of this pitfall, the class java.text.SimpleDateFormat is not thread-safe, but it wasn't until the 1.4 JDK that this was documented in the Javadoc. How many developers mistakenly created a static instance of SimpleDateFormat and used it from multiple threads, unaware that their programs were not going to behave correctly under heavy load? Don't do this to your customers or colleagues!""

","03/Nov/07 07:18;bayard;I don't think the SimpleDateFormat sharing is a problem.  While it's shared between threads, only one method touches each instance of SimpleDateFormat (there are three separate pools), and each of those methods are synchronized. ","03/Nov/07 16:04;sebb@apache.org;The getInstance() methods are synchronised, but the format() methods are not.

As far as I can tell, the instances that are obtained from getInstance() may be shared between threads, and the format() methods are those of the SimpleDateFormat class.

It may be true that the SimpleDateFormat format() methods are thread-safe under the conditions of this class.

However this assumption is neither documented nor justified.
",03/Nov/07 21:30;bayard;The format methods don't hit SimpleDateFormat though - they're the ones getting replaced.,"05/Nov/07 09:55;sebb@apache.org;Sorry, was misreading the usage of SimpleDataFormat.

The class is only instantiated to obtain its pattern as a String - so there is no sharing of SDF instances.

The remarks about sharing SDF instances are wrong.",,,,,,,,,,,,,,,,,,,,,,,,
BooleanUtils.toBoolean() - invalid drop-thru in case statement causes StringIndexOutOfBoundsException,LANG-365,12381269,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebb@apache.org,sebb@apache.org,26/Oct/07 18:58,27/Oct/07 05:07,07/Apr/19 20:37,27/Oct/07 05:07,,,,,2.4,,,,,0,,,,,,,,"The method BooleanUtils.toBoolean() has a case statement; case 3 drops through to case 4; this can cause StringIndexOutOfBoundsException, for example with the test:

assertEquals(false, BooleanUtils.toBoolean(""tru""));

The end of case 3 should return false.

Patch to follow for source and unit test.",,,,,,,,,,,,,,,,,,,,,,,,,,26/Oct/07 19:02;sebb@apache.org;BooleanUtils.patch;https://issues.apache.org/jira/secure/attachment/12368510/BooleanUtils.patch,26/Oct/07 19:02;sebb@apache.org;BooleanUtilsTest.patch;https://issues.apache.org/jira/secure/attachment/12368509/BooleanUtilsTest.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2007-10-27 05:07:54.242,,,false,,,,,,,,,,,,,,34049,,,Sat Oct 27 05:07:54 UTC 2007,,,,,,0|i0d65z:,74775,,,,,,,,26/Oct/07 19:02;sebb@apache.org;Update Unit test to expose bug,26/Oct/07 19:02;sebb@apache.org;Patch to fix bug,"27/Oct/07 05:07;bayard;svn ci -m ""Applying Sebb's test and fix for LANG-365"" src
Sending        src/java/org/apache/commons/lang/BooleanUtils.java
Sending        src/test/org/apache/commons/lang/BooleanUtilsTest.java
Transmitting file data ..
Committed revision 589050.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Documentation bug for ignoreEmptyTokens accessors in StrTokenizer,LANG-364,12381087,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,sbassin,sbassin,24/Oct/07 18:32,25/Oct/07 06:25,07/Apr/19 20:37,25/Oct/07 06:25,2.3,,,,2.4,,,,,0,,,,,,,,"The javadoc for the accessors of the ignoreEmptyTokens property currently states that the default value is false, when it is actually true.",N/A,,,,,,,,,,,,,,,,,,,,,,,,,24/Oct/07 18:33;sbassin;patch.txt;https://issues.apache.org/jira/secure/attachment/12368313/patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-10-25 06:25:23.746,,,false,,,,,,,,,,,,,,147269,,,Thu Oct 25 06:25:23 UTC 2007,,,,,,0|i0d667:,74776,,,,,,,,24/Oct/07 18:33;sbassin;Patch file containing the fix.,"25/Oct/07 06:25;bayard;Applied:

svn ci -m ""Applying Scott Bassin's javadoc fix from LANG-364"" src/java/org/apache/commons/lang/text/StrTokenizer.java

Sending        src/java/org/apache/commons/lang/text/StrTokenizer.java
Transmitting file data .
Committed revision 588151.

Thanks Scott.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringEscapeUtils.escapeJavaScript() method did not escape '/' into '\/', it will make IE render page uncorrectly",LANG-363,12380963,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,situch,situch,23/Oct/07 07:12,11/May/08 05:02,07/Apr/19 20:37,26/Oct/07 06:09,2.3,,,,2.4,,,,,0,,,,,,,,"If Javascripts including'/', IE will parse the scripts uncorrectly, actually '/' should be escaped to '\/'.
For example, document.getElementById(""test"").value = '<script>alert(\'aaa\');</script>';this expression will make IE render page uncorrect, it should be document.getElementById(""test"").value = '<script>alert(\'aaa\');<\/script>';

Btw, Spring's JavascriptEscape behavor is correct.
Try  to run below codes, you will find the difference:
  String s = ""<script>alert('aaa');</script>"";
  String str = org.springframework.web.util.JavaScriptUtils.javaScriptEscape(s);
  System.out.println(""Spring JS Escape : ""+str);
  str = org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(s);
  System.out.println(""Apache Common Lang JS Escape : ""+ str);",JDK1.5 + commons-lang-2.3.jar + IE 6.0,,,,,,,,,,,,,,,LANG-437,,,,,,,,,,25/Oct/07 16:48;sbassin;patch.txt;https://issues.apache.org/jira/secure/attachment/12368391/patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-10-25 16:48:27.995,,,false,,,,,,,,,,,,,,34108,,,Sun May 11 05:02:46 UTC 2008,,,,,,0|i0d66f:,74777,,,,,,,,25/Oct/07 16:48;sbassin;Here's a patch that should fix the issue described.  Also included is an extra assertion in testEscapeJavaScript of StringEscapeUtilsTest.,"26/Oct/07 06:07;bayard;Heh - I even had a play with this when looking at the Spring one: http://opensource.atlassian.com/projects/spring/browse/SPR-1754

Not sure why I didn't submit a fix, probably too green with Spring at the time. ","26/Oct/07 06:09;bayard;Thanks again Scott (and Situ for reporting it), patch applied:

svn ci -m ""Applying Scott Bassin's fix and test from LANG-363"" src/test/org/apache/commons/lang/StringEscapeUtilsTest.java src/java/org/apache/commons/lang/StringEscapeUtils.java

Sending        src/java/org/apache/commons/lang/StringEscapeUtils.java
Sending        src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
Transmitting file data ..
Committed revision 588534.",03/Apr/08 13:22;ggregory@seagullsw.com;fix typo in summary field,11/May/08 05:02;bayard;See LANG-437 for conversation about rolling this fix back. There are user complaints on the list that the change is causing problems.,,,,,,,,,,,,,,,,,,,,,,,,,,
BooleanUtils toBooleanObject javadoc does not match implementation,LANG-361,12380916,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,trippcr,trippcr,22/Oct/07 15:24,23/Oct/07 05:32,07/Apr/19 20:37,23/Oct/07 05:32,2.3,,,,2.4,,,,,0,,,,,,,,"The javadoc description for the BooleanUtils method toBooleanObject(String, String, String, String) states that it returns null if the input string does not match the true, false, or null string values.  However, the implementation throws and IllegalArgumentException when the input string does not match the other string values.",,,,,,,,,,,,,,,,,,,,,,,,,,22/Oct/07 15:27;trippcr;BooleanUtils-toBooleanObject-javadoc.patch;https://issues.apache.org/jira/secure/attachment/12368149/BooleanUtils-toBooleanObject-javadoc.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-10-23 05:32:22.982,,,false,,,,,,,,,,,,,,147267,,,Tue Oct 23 05:32:22 UTC 2007,,,,,,0|i0d66n:,74778,,,,,,,,"22/Oct/07 15:27;trippcr;Here's a patch to the change the javadoc description for the BooleanUtils method toBooleanObject(String, String, String, String) so that it better describes the behavior of the method.  The patch is against the current trunk version of BooleanUtils (r587117).","23/Oct/07 05:32;bayard;Thanks Corey, I've applied the change to trunk:

svn ci -m ""Applying Corey Tripp's javadoc fix from LANG-361"" BooleanUtils.java 
Sending        BooleanUtils.java
Transmitting file data .
Committed revision 587395.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Why does appendIdentityToString return null?,LANG-360,12380853,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,jogi,jogi,21/Oct/07 12:22,12/Nov/07 22:54,07/Apr/19 20:37,12/Nov/07 22:54,,,,,2.4,,,,,0,,,,,,,,"ObjectUtils is designed to handle null imputs gracefully. But ObjectUtils.appendIdentityToString does not. It returns null unnessecary if you pass null als second parameter (the object to get the identity from). For example appendIdentityToString(new StringBuffer(), null) will return null! Which is an uncommen behaviour. Think about code like this:

ObjectUtils.appendIdentityToString(buffer, param1)
                    .appendIdentityToString(buffer, param2)
                    .appendIdentityToString(buffer, param3);

This will cause an NPE if param1 or param2 ist null. There may be other code where a NPE will not happen, but the code is used for debugging and there will be an unexpected or wrong output.

So you shoul return the StringBuffer which is passed in or a new one if null. The harder question is what to do with the object. I think we should append ""null"" to the StringBuffer, because this is what I would expect and what the passed reference is.
",,,,,,,,,,,,,,,,,,,,,,,,,,12/Nov/07 20:23;bayard;LANG-360.patch;https://issues.apache.org/jira/secure/attachment/12369392/LANG-360.patch,03/Nov/07 08:01;bayard;LANG-360.patch;https://issues.apache.org/jira/secure/attachment/12368920/LANG-360.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2007-10-30 04:25:31.707,,,false,,,,,,,,,,,,,,34122,,,Mon Nov 12 22:54:23 UTC 2007,,,,,,0|i0d66v:,74779,,,,,,,,"30/Oct/07 04:25;bayard;Definitely agreed that I wouldn't expect the chained style to fail just because null was passed into it.

A StringBuffer with ""null"" in seems to make more sense than an empty StringBuffer. 

So +1 to both suggestions, and we just need to decide if we're happy making this change in 2.4.","30/Oct/07 05:06;pbenedict;What's ironic is that the current behavior is in perfect line with the javadoc:

""Appends the toString that would be produced by Object  if a class did not override toString itself. null  will return null. ObjectUtils.appendIdentityToString(*, null) = null""

Based on that, it's difficult to argue that the current behavior is incorrect. Almost all of Commons Lang behavior returns null where possible for a null source parameter.

I recommend keeping the current behavior, but adding a second method that combines appendIdentityToString and defaultIfNull: 

appendIdentityToString(StringBuffer buffer, Object object, Object defaultValue)","30/Oct/07 06:53;jogi;Yes, this behavior is in sync with the javadoc. That's where I found it first. But that did not mean that it is a good behavior.

I like to vote against a second method with a default value. Who needs a default value, when debugging an object? (If this bean is null, log another one?) A method appendIdentityToStringNullSave would be better, but a little ugly.

>> Almost all of Commons Lang behavior returns null where possible for a null source parameter.  <<

Hm, I don't think so. And evan if it would be: Returning null, if the StringBuffer is null could be argued, but returning null if the second value is null is definitly a bad behavior. Remember this:
   appendIdentityToString(new StringBuffer(), null)  
Would you expect this to return null? But this does not return null:
   appendIdentityToString(null, new Object())
Really confusing.","30/Oct/07 07:35;bens;It's unfortunate that the API here forces the user to null-protect his parameters to it. I think it's clear that the better choice would have been to simply append ""null"", since that is the toString() value of the null reference according to the JLS. That said, it is documented to work the way it does, and that makes it not wrong but simply annoying.

+1 to Paul's idea and having a similarly named method with another parameter with a default value. Maybe we should also deprecate the current one for 2.4 with a warning explaining this problem.","30/Oct/07 14:44;pbenedict;After some further ruminations, I favor deprecating the current method (Ben's comment) but also coming up with a new name that corrects the behavior. Throwing in a third parameter is quite ugly and not necessary. Perhaps we can call it simply ""appendIdentity"" ? Funny that the current method is ""ToString"" when it really appends to a StringBuffer, not a String ;-)","30/Oct/07 15:11;bayard;+1 on 'appendIdentity'.

I also don't like the first parameter being nullable. There should be a version without that. 

appendIdentity(Object obj);StringBuffer
appendIdentity(Object obj, StringBuffer buffer);StringBuffer

The downside is that that means making it the second parameter. It's a clash between the API rules that 'the target should come first' and 'optional parameters should be on the end'. An optional target is just odd :)

Maybe:

appendIdentityToNewBuffer(Object obj);StringBuffer
appendIdentity(StringBuffer buffer, Object obj);StringBuffer

","30/Oct/07 16:42;jogi;>> Perhaps we can call it simply ""appendIdentity"" ? Funny that the current method is ""ToString"" when it really appends to a StringBuffer, not a String ;-) <<

:-)   +1 on that!","30/Oct/07 16:53;bens;I like Henri's second suggestion better. Between that and deprecating the old method, I think everybody's happy :)","03/Nov/07 07:21;bayard;Prodding it more - it's ""identityToString"", meaning the identity toString() method; not the appending of the identity to java.lang.String. So the name makes syntactic sense - it's just confusing. ","03/Nov/07 07:50;bayard;Brain kicks in.... Also, I wouldn't expect:

ObjectUtils.appendIdentityToString(buffer, param1)
                    .appendIdentityToString(buffer, param2)
                    .appendIdentityToString(buffer, param3); 

to even compile. A StringBuffer is returned, not an ObjectUtils. 

Chaining isn't allowed here, the actual code would have been the very ugly and nested:

            ObjectUtils.appendIdentityToString(
                ObjectUtils.appendIdentityToString(
                    ObjectUtils.appendIdentityToString(buffer, param1)
                    , param2)
                , param3);

However that doesn't end up with a NullPointerException. Instead you get a very nasty bug whereby if param2 is null, then you'll end up with a  StringBuffer just containing the text of param1 - no param3. If you had 'buffer =' on the front, then you just get param3 and no param1. 

Ideally the code should be:

* public static String identityToString(Object)
* public static void appendIdentityToString(StringBuffer, Object)

Sod the StringBuffer creation - bet that was only there so the first method could reuse the second. The problem with that is that we don't have overloaded return types. So an alternative would be to deprecate both methods and have:

* public static String identity(Object)
* public static void appendIdentity(StringBuffer, Object)

That would allow us to decide if we think a null Object passed in should return the String ""null"" or null in the first case; and result in ""null"" or """" in the second. 

Alternatively, we could go with an overload of the original name:

* public static String identityToString(Object)
* public static void identityToString(StringBuffer, Object)

but that would make the ""null"" bit bad if we do it.

Thoughts?","03/Nov/07 08:01;bayard;Attaching a patch with the solution originally suggested. It should be pretty close to some of the other options. 

A bit more testing should be done on the new methods.","03/Nov/07 10:48;scolebourne;Are we not over-thinking this? The method does what it says it does, and is perfectly usable as such.

This method is meant to simulate the identity toString, which can naturally only be called on a non-null object. If anything, it probably should have thrown an exception for a non-null second argument.

If you do decide to add a new method, could I suggest considering creating a StringBufferUtils class, with methods similar to StringUtils. appendIdentityToString(StringBuffer, Object) would naturally fit there, and could be defined to append ""null"" if the object is null.

","05/Nov/07 15:56;bayard;The problem with the method lies with the automagical creation. Passing in null should not lead to a StringBuffer being created and then returned - the user should be responsible for their parameters. StringBuffer methods should have void return types. 

The best way to solve that is to deprecate the old StringBuffer method and add a new method of:

* public static void identityToString(StringBuffer, Object) 

One that throws an NPE if the first param is null.

The second question is what to do in the case of Object being null. Currently the String variant returns null. The new StringBuffer variant could either append ""null"", """", or throw an NPE. The old library was effectively appending """", so that's the current behaviour. I can see value in all three options, so suggest we stick with the empty String option - ie) nothing happens to the buffer. ","05/Nov/07 17:30;pbenedict;Stephen says: ""This method is meant to simulate the identity toString"". Based on his words, I concur that passing a null object should throw an exception. 

Thus I recommend:
(1) return void to get rid of method chaining 
(2) throw an exception is StringBuffer is null
(3) throw an exception if Object is null

#3 makes most sense. There is no identity to a null object.
","12/Nov/07 20:23;bayard;Attaching another attempt at this - matches consensus atm.

New method.
Old method deprecated.
Throws NPEs for null input.",12/Nov/07 20:31;bens;Looks good. +1.,"12/Nov/07 22:54;bayard;svn ci -m ""Applying my second patch from LANG-360 - it seems to do what Stephane/Paul and I are consensing on"" src

Sending        src/java/org/apache/commons/lang/ObjectUtils.java
Sending        src/test/org/apache/commons/lang/ObjectUtilsTest.java
Transmitting file data ..
Committed revision 594336.",,,,,,,,,,,,,,
5 unit test failures in ClassUtilsTest on Sun Java 1.3.1,LANG-357,12380127,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,,garydgregory,,11/Oct/07 01:25,16/Oct/13 08:54,07/Apr/19 20:37,12/Nov/07 19:06,,,,,,,,,,0,,,,,,,,"5 unit test failures in ClassUtilsTest on Sun Java 1.3.1.

All is well on: 
   Sun Java 1.4.2_15
   Sun Java 1.5.0_12
   Sun Java 1.6.0_02

Failure list:

ClassUtils Tests
testConstructor(org.apache.commons.lang.ClassUtilsTest)
java.lang.NoSuchMethodError
	at junit.framework.Assert.assertEquals(Assert.java:146)
	at junit.framework.Assert.assertEquals(Assert.java:152)
	at org.apache.commons.lang.ClassUtilsTest.testConstructor(ClassUtilsTest.java:73)
	at java.lang.reflect.Method.invoke(Native Method)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

test_isInnerClass_Class(org.apache.commons.lang.ClassUtilsTest)
java.lang.NoSuchMethodError
	at junit.framework.Assert.assertEquals(Assert.java:146)
	at junit.framework.Assert.assertEquals(Assert.java:152)
	at org.apache.commons.lang.ClassUtilsTest.test_isInnerClass_Class(ClassUtilsTest.java:206)
	at java.lang.reflect.Method.invoke(Native Method)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

test_isAssignable_ClassArray_ClassArray(org.apache.commons.lang.ClassUtilsTest)
java.lang.NoSuchMethodError
	at junit.framework.Assert.assertEquals(Assert.java:146)
	at junit.framework.Assert.assertEquals(Assert.java:152)
	at org.apache.commons.lang.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray(ClassUtilsTest.java:222)
	at java.lang.reflect.Method.invoke(Native Method)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

test_isAssignable(org.apache.commons.lang.ClassUtilsTest)
java.lang.NoSuchMethodError
	at junit.framework.Assert.assertEquals(Assert.java:146)
	at junit.framework.Assert.assertEquals(Assert.java:152)
	at org.apache.commons.lang.ClassUtilsTest.test_isAssignable(ClassUtilsTest.java:235)
	at java.lang.reflect.Method.invoke(Native Method)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

test_isAssignable_Widening(org.apache.commons.lang.ClassUtilsTest)
java.lang.NoSuchMethodError
	at junit.framework.Assert.assertEquals(Assert.java:146)
	at org.apache.commons.lang.ClassUtilsTest.test_isAssignable_Widening(ClassUtilsTest.java:252)
	at java.lang.reflect.Method.invoke(Native Method)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)

","java version ""1.3.1_15""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.3.1_15-b01)
Java HotSpot(TM) Client VM (build 1.3.1_15-b01, mixed mode)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-10-16 04:21:58.568,,,false,,,,,,,,,,,,,,147264,,,Mon Nov 12 19:15:22 UTC 2007,,,,,,0|i0d673:,74780,,,,,,,,"16/Oct/07 04:21;bayard;How about outside of Eclipse?

It works fine for me on OS X with 1.3.",17/Oct/07 20:01;joehni;Works fine for my with Sun JDK 1.3.1_21 / Linux from within Eclipse.,"26/Oct/07 06:26;bayard;What do you think Gary, do we keep this open, or decide that we don't care? :)

Looking at your first error, it's coming from inside JUnit, but there's nothing on those line that to me should be happening inside JUnit. 

        assertEquals(1, cons.length);
        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));
        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));
        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));

I think the answer might have been that the junit jar you were using (maybe the one in Eclipse by default?) was not happy with 1.3.
",12/Nov/07 19:06;bayard;Resolving as WONTFIX - I think this was just a wonky environment.,"12/Nov/07 19:15;pbenedict;I think we have a policy against the word ""wonky"" around here.",,,,,,,,,,,,,,,,,,,,,,,,,,
Javadoc Example for EqualsBuilder is questionable,LANG-353,12376510,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,kutzi@gmx.de,kutzi@gmx.de,21/Aug/07 15:46,12/Nov/07 19:56,07/Apr/19 20:37,12/Nov/07 19:56,,,,,2.4,,,,,0,,,,,,,,"The Javadoc example for the class EqualsBuilder ist questionable:

 public boolean equals(Object obj) {
   if (obj instanceof MyClass == false) {
     return false;
   }
  ...

The implementation with instanceof lacks guarantees like equals-symmetry  (see e.g. http://www.agiledeveloper.com/articles/equals062002.htm  for a discussion of the issue)
The example should be changed to use getClass(). Attention: the solution in the link above is incomplete as it doesn't check for null",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-09-20 05:07:54.431,,,false,,,,,,,,,,,,,,147260,,,Mon Nov 12 19:56:45 UTC 2007,,,,,,0|i0d67b:,74781,,,,,,,,"20/Sep/07 05:07;bayard;Sounds like you're suggesting:

 * public boolean equals(Object obj) {
 *   if (obj == null) { return false; }
 *   if (obj == this) { return true; }
 *   if (obj.getClass() != getClass()) {
 *     return false;
 *   }
 *   MyClass rhs = (MyClass) obj;
 *   return new EqualsBuilder()
 *                 .appendSuper(super.equals(obj))
 *                 .append(field1, rhs.field1)
 *                 .append(field2, rhs.field2)
 *                 .append(field3, rhs.field3)
 *                 .isEquals();
 *  }

Though an issue that we've come across with the builders is what to do with classloaders. So you end up with:

 * public boolean equals(Object obj) {
 *   if (obj == null) { return false; }
 *   if (obj == this) { return true; }
 *   if (!obj.getClass().getName().equals(getClass().getName()) {
 *     return false;
 *   }
 * ...

Or maybe that doesn't matter because the rest of EqualsBuilder will be unhappy anyway.","20/Sep/07 07:46;kutzi@gmx.de;Yes, that's what I'm suggesting.

And if I understood your second point right - you are suggesting to compare the class names, because the two objects could be loaded in different classloaders:
No, if two classes are loaded by different classloaders, they (and their instances) are never ""equal"". Even if they are loaded from the same source, i.e. the same .class file.","20/Sep/07 16:51;bayard;Yeah, scratch the classloader bit. I dug around a bit and it was with the Enum code and not the Builder code where we were doing such things. With Enums we did want things to be equal across classloaders, but the builders won't care.

I'll update the javadoc with the first example, and a reference to Effective Java.","21/Sep/07 09:55;kutzi@gmx.de;Ok.

Do you have an issue id for the Enum thing? My opinion on that - without knowing the details - is that Enums are not much different from classes and therefore enums from different classloaders shouldn't be considered equals. So, I would like to comment on that issue.","11/Oct/07 00:44;ggregory@seagullsw.com;Not to get stuck on the details here, but Enums /are/ different from Classes, and have been made such in Jaav 5. I think of the [lang] enums useful if you cannot use Java 5 enums. I would say that enum elements must be equal across class loaders, otherwise, many an application will have some very odd results. Just imagine, as a simple example, the following (I use the Java 5 notation for brevity):

public enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES }

CLUBS from one class loader is not the same as... CLUBS from another class loader? Havok in poker-land! ;-)
","11/Oct/07 07:43;kutzi@gmx.de;Without knowing the details again (I don't know which kind of applications you are thinking of): I think if you trying to compare enums from different classloader, that's already the problem you have. I.e. you shouldn't try this as it usually indicates that you have mixed up your classloader hierarchy. So it's better for the enum's equal to fail fast instead of allowing something which shouldn't be done.

But this discussion doesn't really belong here. If you would like to continue it, you can contact me via e-mail: kutzi@gmx.de","26/Oct/07 06:14;bayard;Oops, this has sat on my machine for a while. Now committed:

svn ci -m ""Applying the javadoc sample usage change from LANG-353 as reported by Christoph Kutzinski"" src/java/org/apache/commons/lang/builder/EqualsBuilder.java

Sending        src/java/org/apache/commons/lang/builder/EqualsBuilder.java
Transmitting file data .
Committed revision 588536.

Prior to closing this, I'm pondering if the EqualsBuilderTest should change to test this pattern too.",12/Nov/07 19:56;bayard;I updated the tests to use this style in r594276.,,,,,,,,,,,,,,,,,,,,,,,
Deadlock using ReflectionToStringBuilder,LANG-349,12374094,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Won't Fix,,dapperdanman,dapperdanman,18/Jul/07 18:21,16/Oct/07 04:26,07/Apr/19 20:37,16/Oct/07 04:26,2.0,,,,2.4,,,,,0,,,,,,,,"I used the ReflectionToStringBuilder on an object to output debugging messages to Log4j. If this object was picked up by two different threads and the toString() method was called at the same time in two different threads, a deadlock occurrs.

Here is a stack trace from using jstack:

Thread 1172: (state = BLOCKED)
 - java.util.Vector.hashCode() @bci=0, line=938 (Interpreted frame)
 - java.util.HashMap.containsKey(java.lang.Object) @bci=6, line=377 (Compiled frame)
 - org.apache.commons.lang.builder.ReflectionToStringBuilder.toString() @bci=50, line=522 (Compiled frame)
 - org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle, boolean, java.lang.Class) @bci=12, line=265 (Interpreted frame)
 - org.apache.commons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle) @bci=4, line=197 (Interpreted frame)
 - org.apache.commons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.apache.commons.lang.builder.ToStringStyle) @bci=2, line=170 (Interpreted frame)
[...]

Thread 1191: (state = BLOCKED)
 - java.util.Vector.hashCode() @bci=0, line=938 (Interpreted frame)
 - java.util.HashMap.containsKey(java.lang.Object) @bci=6, line=377 (Compiled frame)
 - org.apache.commons.lang.builder.ReflectionToStringBuilder.toString() @bci=50, line=522 (Compiled frame)
 [...]

","java version ""1.5.0_10""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_10-b03)
Java HotSpot(TM) Server VM (build 1.5.0_10-b03, mixed mode)

>uname -a
Linux fwjsfimat04 2.4.21-32.EL #1 SMP Fri Apr 15 21:02:58 EDT 2005 x86_64 x86_64 x86_64 GNU/Linux
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-07-18 22:14:01.578,,,false,,,,,,,,,,,,,,147257,,,Tue Oct 16 04:26:17 UTC 2007,,,,,,0|i0d67j:,74782,,,,,,,,"18/Jul/07 22:14;bayard;First step - attempt a reproduction. If that fails, then dig into the code and see if it's obvious.","21/Aug/07 17:48;bayard;I'm a little confused by the thread dump - ReflectionToStringBuilder.toString does not call HashMap.containsKey. Seems like a bunch of method calls are missing. Presumably this is because things are being compiled in and so that part of the trace vanishes.

This leaves me wondering where the HashMap.containsKey is coming from. Presumably it's from the object that is being reflected upon, and I'm not sure I see us having many options beyond either a) ignoring this bug as not fixable, or b) making the builders totally synchronized. 

Any thoughts?","21/Aug/07 17:59;dapperdanman;It does make sense that the reflection code isn't synchronized (since toString() isn't?). That might be the core issue. 

It helps to know that you aren't using a HashMap internally. 

I could wrap the builder code in a synchronized block to prevent this. Does that sound like a good solution? If so, it would be nice to update the documentation to point out how toString and the reflection code isn't thread safe. 

Would it be possible to have add a ""thread-safe"" version that synchronizes on each variable (or the whole class) before reading it during the reflection process? ","20/Sep/07 05:35;bayard;Without being very deep into the code - wrapping the builder usage does seem like a good solution. Did you give that a try?

That's something that the documentation could suggest users do. 

I imagine a synchronized version of the ToStringBuilders could definitely be done - just a question of putting together the patch etc :) I'm not sure if it would get you much that putting a lock around the ToStringBuilder usage wouldn't have given you.","20/Sep/07 13:30;dapperdanman;I have not given it a try yet, but it makes sense and sounds like it would work.","16/Oct/07 04:26;bayard;I'm going to mark this as a wontfix; please reopen if you think there's more to do David, but it sounds like things are good.",,,,,,,,,,,,,,,,,,,,,,,,,
Dates.round() behaves incorrectly for minutes and seconds,LANG-346,12373204,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,bayard,kdombeck,kdombeck,06/Jul/07 20:06,16/Dec/09 08:51,07/Apr/19 20:37,09/Aug/07 00:25,2.2,2.3,,,2.4,,lang.time.*,,,0,,,,,,,,"Get unexpected output for rounding by minutes or seconds.

public void testRound()
{
    Calendar testCalendar = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));
    testCalendar.set(2007, 6, 2, 8, 9, 50);
    Date date = testCalendar.getTime();
    System.out.println(""Before round() "" + date);
    System.out.println(""After round()  "" + DateUtils.round(date, Calendar.MINUTE));
}

--2.1 produces
Before round() Mon Jul 02 03:09:50 CDT 2007
After round()  Mon Jul 02 03:10:00 CDT 2007 -- this is what I would expect

--2.2 and 2.3 produces
Before round() Mon Jul 02 03:09:50 CDT 2007
After round()  Mon Jul 02 03:01:00 CDT 2007 -- this appears to be wrong
",,,,,,,,,,,,,,,,,,,,,,,,,,08/Aug/07 21:37;bayard;LANG-346-fix.patch;https://issues.apache.org/jira/secure/attachment/12363448/LANG-346-fix.patch,07/Aug/07 07:04;davemeikle;LANG-346.patch;https://issues.apache.org/jira/secure/attachment/12363303/LANG-346.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2007-07-14 08:40:00.564,,,false,,,,,,,,,,,,,,34037,,,Thu Aug 09 00:25:20 UTC 2007,,,,,,0|i0d67r:,74783,,,,,,,,"14/Jul/07 08:40;bayard;Digging into this - I can definitely reproduce the error with the test case you include - many thanks for that.

Looking at the source code history, the error presumably came in during changes to the modify(Calendar, int, boolean) method for LANG-59. ",02/Aug/07 07:06;davemeikle;Unit Test to follow as I need to shoot away to work ;-),03/Aug/07 08:59;davemeikle;New Patch with Unit Tests,"07/Aug/07 03:29;bayard;The patch fails for me. I'm on PDT rather than GMT and the time is off by 8 hours.

Testcase: testRoundLang346(org.apache.commons.lang.time.DateUtilsTest): FAILED
Minute Round Up Failed expected:<Mon Jul 02 09:09:00 PDT 2007> but was:<Mon Jul 02 01:09:00 PDT 2007>
junit.framework.AssertionFailedError: Minute Round Up Failed expected:<Mon Jul 02 09:09:00 PDT 2007> but was:<Mon Jul 02 01:09:00 PDT 2007>
    at org.apache.commons.lang.time.DateUtilsTest.testRoundLang346(DateUtilsTest.java:704)",07/Aug/07 07:04;davemeikle;Sorry about that - This patch should remove the unit test's dependency on GMT.,"08/Aug/07 15:50;bayard;That works better. Fails with the test, passes with the fix.

I'll dig through it a bit more before committing - thanks for finding/fixing this.","08/Aug/07 21:37;bayard;Here's a slightly different fix patch, what do you think Dave?

Doing the < Calendar.SECOND felt a bit weird to me, and I think the bit needed is to pull the 'done = true's outside of their blocks.","09/Aug/07 00:18;davemeikle;Yeah, that looks good - I totally agree with the < Calendar.SECOND bit. Now I see it, I am wondering why I didn't too that ;-)

Cheers,
Dave","09/Aug/07 00:25;bayard;Patches applied. Thanks Dave, and thanks to Ken for originally reporting this.",,,,,,,,,,,,,,,,,,,,,,
HashCodeBuilder.append(long) is incorrect,LANG-342,12372191,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,,bmanes,bmanes,22/Jun/07 07:42,20/Sep/07 17:55,07/Apr/19 20:37,20/Sep/07 17:55,,,,,,,,,,0,,,,,,,,"I was looking at using HashCodeBuilder rather than always writing out the strategy by hand, and I noticed one potential mistake:
    /**
     * Append a hashCode for a long.
     *
     * @param value  the long to add to the hashCode
     * @return this
     */
    public HashCodeBuilder append(long value)
    {
        iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32))); 
        return this;
    }
 
whereas Effective Java and Long.hashCode() use:
    /**
     * Returns a hash code for this <code>Long</code>. The result is
     * the exclusive OR of the two halves of the primitive
     * <code>long</code> value held by this <code>Long</code> 
     * object. That is, the hashcode is the value of the expression:
     * <blockquote><pre>
     * (int)(this.longValue()^(this.longValue()&gt;&gt;&gt;32))
     * </pre></blockquote> 
     *
     * @return  a hash code value for this object.
     */
    public int hashCode() {
      return (int)(value ^ (value >>> 32));
    }

So the author accidentally used a signed right-shift rather than an unsigned.

----

Stephen Colebourne noted that while this is a bug, it is minor and could have backward compatability issues.  I would simply recommend that a non-JavaDoc comment be added noting this method doesn't follow ""Effective Java"" correctly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-07-06 20:27:04.864,,,false,,,,,,,,,,,,,,147253,,,Thu Sep 20 17:55:09 UTC 2007,,,,,,0|i0d67z:,74784,,,,,,,,06/Jul/07 20:27;bayard;Setting fix version to 2.3.1 so the javadoc can be added. Then it should be reversioned to 3.0 for consideration there.,09/Aug/07 00:29;bayard;Non-javadoc note added to HashCodeBuilder.append.,"19/Sep/07 21:29;jcsahnwaldt;It doesn't matter if >>> or >> is used. We shift down the upper half of the long and XOR with the lower half. Of course, we also XOR the unshifted upper half with the shifted upper half (which consists of zeros or ones), but then we cast to int, which simply throws away the upper half. It doesn't matter at all if there were zeros or ones in the shifted upper half.

Here's a little test. Looping through all longs takes too long, let's just use random numbers.

java.util.Random rnd = new java.util.Random();
for (;;)
{
  long value = rnd.nextLong();
  int signed = (int)(value ^ (value >> 32));
  int unsigned = (int)(value ^ (value >>> 32));
  if (signed != unsigned) System.out.println(value+"" ""+signed+"" ""+unsigned);
}
","20/Sep/07 17:55;scolebourne;Thanks for the analysis. I'll close the issue as 'Won't fix', as a comment has already been added to the sourcebase.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"StringEscapeUtils.escapeHtml() escapes multibyte characters like Chinese, Japanese, etc.",LANG-339,12371341,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,wolfg,wolfg,10/Jun/07 15:30,24/Oct/12 00:49,07/Apr/19 20:37,19/Jul/09 18:41,2.3,,,,3.0,,lang.*,,,0,,,,,,,,"StringEscapeUtils.escapeHtml() escapes multibyte characters like Chinese, Japanes, etc.","Operating System: All
Platform: All",,,,,,,,,,,,,,,LANG-515,LANG-505,LANG-66,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-06-12 00:15:02.339,,,false,,,,,,,,,,,,,,34083,,,Sun Jul 19 18:41:12 UTC 2009,,,,,,0|i0b01b:,62116,,,,,,,,"12/Jun/07 00:15;bayard;Probably the same code as LANG-66, but leaving open so a separate unit test can be written.","19/Jul/09 18:41;bayard;Unit test added with current (bad) behaviour). LANG-515 and its subtasks to deal with how we want to do this in the future, and the unit test will ensure this issue is confirmed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enum is not thread-safe,LANG-334,12369325,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sclafani,sclafani,14/May/07 22:30,05/Sep/07 10:14,07/Apr/19 20:37,05/Sep/07 10:14,,,,,2.4,,,,,0,,,,,,,,"Enum uses no synchronization. Even if you assume that instances are only declared statically, the cEnumClasses map is global and can be written to when a thread triggers static initialization of B.class while some other thread is doing getEnumList(A.class). Unsynchronized access of a map undergoing mutation is not thread-safe.

This isn't theoretical. We're seeing ValuedEnum.getEnum(X.class, 0) return null after returning the correct value over 100,000 times, and then return the correct value again on the next invocation.
",,,,,,,,,,,,,,,,,,,,,,,,,,28/Jul/07 04:14;jason.madden@riskmetrics.com;334.patch;https://issues.apache.org/jira/secure/attachment/12362719/334.patch,06/Jun/07 15:24;bayard;EnumPlay.java;https://issues.apache.org/jira/secure/attachment/12359088/EnumPlay.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2007-05-27 06:43:18.639,,,false,,,,,,,,,,,,,,147247,,,Wed Sep 05 10:14:06 UTC 2007,,,,,,0|i0d687:,74785,,,,,,,,"27/May/07 06:43;bayard;Fix for 2.3.1. First step, write a test.","06/Jun/07 15:24;bayard;I made an attempt at a test, but it couldn't replicate the issue. ","06/Jun/07 20:56;sclafani;Well, the bug description refers to two enum classes, but your test only uses one enum class, so I'm completely unsurprised you didn't replicate the problem.

The bug is caused by one thread calling getEnum(A.class, 0) while another thread is initializing B.class, and those two threads are excuting in such a way that the first thread is reading the cEnumClasses map while the second thread is modifying the same map by registering the mapping for B.class. If you use only one enum class, the bug won't be seen. If you use two enum classes, but statically reference them so that both classes are initialized before getEnum() is called, no bug. If you use two classes, or ten classes, or 10000 classes, but fail to overlap the threads reading the map and writing the map in just the right (or wrong) way, no bug.

Unit testing isn't a great approach for testing synchronization problems since it's impossible for the test to control the execution order, especially when the bug requires actual concurrency. This bug cropped up when we started using new multi-core hardware. I could write a unit test for you, but I wouldn't expect it to fail unless you had identical hardware and software.
","06/Jun/07 21:14;bayard;Sorry for missing the two class bit.  I'm not looking for a unit test, just a way to replicate the issue so that a fix can be created. 

Failing that, find time to sit and think hard :)","06/Jun/07 21:30;sclafani;I think it will be sufficient to simply use Collections.synchronizedMap() to wrap the map instance that is assigned to cEnumClasses.
","07/Jun/07 18:40;bayard;I agree - but I really hate solving things without being able to show there was a problem and then confirming that the problem no longer appears. 

Did this change fix the symptoms you were seeing in your system?","07/Jun/07 19:14;sclafani;Sadly, it was much easier for us to use a common subclass that provided synchronization between the constructor and all the static accessors than it was get set up to build our own version of the package, then distribute and install it. So a different form a serialization did fix it.

I understand your discomfort in dealing with race conditions since I've had to deal with solving them myself many, many times, but I don't know of any practical solution other than reasoning about the temporal logic of the code.
","28/Jul/07 04:13;jason.madden@riskmetrics.com;We have also encountered the issue of thread safety in the Enum  
class. In our case, it shows up when running in a application server  
where there are many threads and other applications are loading  
classes at arbitrary times.

I've attached the patch that we are using which seems to correct this  
issue for us. Rather than synchronize all access to the cEnumClasses  
map (which seems like it would be rather expensive and highly  
contended), we adopted a copy-on-write approach that only involves  
synchronization when new classes are loaded.","09/Aug/07 07:03;bayard;It's great that you've got a fix working in production Jason, the patch seems good to me.

Any thoughts Michael? I like the simplicity of using synchronizedMap, but the copy-on-write optimization seems attractive.

And yeah... I've given up trying to replicate this :) I'd need to be using something like cglib so I could generate new enum subclasses by the thousand and see if it hits the race condition that way.",05/Sep/07 10:14;bayard;I've applied Jason's patch to enums.Enum and enum.Enum. Many thanks to both of you for working on this issue.,,,,,,,,,,,,,,,,,,,,,
Fix for LANG-259 broke ValuedEnum.compareTo() on subclassed enumerations,LANG-331,12368854,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,sclafani,sclafani,08/May/07 18:16,15/Oct/13 02:32,07/Apr/19 20:37,20/Apr/13 15:27,,,,,,,lang.enums.*,,,0,,,,,,,,"I have a ValuedEnum abstract subclass that I further subclass to attach useful implementation behaviors. The base class overrides getEnumClass(). The fix for LANG-259 broke compareTo() since it compares getClass(), not getEnumClass().
",,,,,,,,,,,,,,,,,,,,,,,,,,09/Aug/07 07:32;bayard;LANG-331-test.patch;https://issues.apache.org/jira/secure/attachment/12363473/LANG-331-test.patch,09/Aug/07 07:21;bayard;LANG-331.patch;https://issues.apache.org/jira/secure/attachment/12363472/LANG-331.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2007-05-27 06:45:06.394,,,false,,,,,,,,,,,,,,3047,,,Sat Apr 20 15:27:43 UTC 2013,,,,,,0|i0b5yf:,63077,,,,,,,,27/May/07 06:45;bayard;Discuss what to do for this as a part of a 2.3.1.,"09/Aug/07 07:20;bayard;I wonder if the solution is simply to state the 'if different classloader' better.

ie) Rather than doing:

        if (other.getClass() != this.getClass()) {

Instead do:

        if (other.getClass().getClassLoader() != this.getClass().getClassLoader()) {

That wouldn't help if your two separate grandchildren enums are in different classloaders and you still want them viewed equal, but I'm not sure what would (without turning into lots of code).

That allows RandomEnum.RED to equal MyEnum.RED, so you also need to check for inheritence:

Attaching patch.","09/Aug/07 07:32;bayard;Not sure that last patch has the right idea or not. equals() would also have to change. 

I've also made a unit test for this. Attaching that now.",26/Oct/07 09:18;scolebourne;The whole cross ClassLoader thing for enums was a Bad Idea :-(,03/Nov/07 08:04;bayard;Does 'Bad Idea' imply any suggestions? :),"07/Nov/07 06:38;pbenedict;>> That allows RandomEnum.RED to equal MyEnum.RED, so you also need to check for inheritence: 

The JDK has the strict policy that enums cannot be inherited. That is to say, that you can't subclass one Enum with another Enum. In JDK 7, there is a possibility of an abstract Enum may exist, but that only defines methods and no enumerated constants.","07/Nov/07 15:37;pbenedict;I do not believe that you should be able to inherit enum constants. Only the final concrete class should be able to have them. That seems to be the direction of the JDK, and I recommend the fix be comparable. 

There's a whole discussion on this topic here:
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6570766","12/Nov/07 20:56;bens;It's just ugly in there... :(

I agree with Stephen that it was a Bad Idea; that aside, I don't see any easy way to address this. Henri's fix will take care of compareTo(), but it also breaks equals(). My first thought was to replace the enum classname Map with an ordinal assigned at creation time, but that'll break serialization for 2.2/2.3 users. Argh.

It's not ideal now, but I don't know how to fix this without breaking something else. Maybe we should push this back to 3.0 where we can have a more general discussion about the purpose of Enum.",12/Nov/07 22:55;bayard;Moving back to 3.0 - though I suspect the 'solution' will happen when we remove the enum packages.,"11/Nov/12 11:53;tn;lang.enum package has been removed in the 3.0 release. Unless there are plans for a 2.7 release, we could close this one as Won't Fix.","20/Apr/13 15:27;tn;Close this as Won't Fix after more than 5 years, as there are no plans for another 2.x release.",,,,,,,,,,,,,,,,,,,,
LocaleUtils.toLocale() rejects strings with only language+variant,LANG-328,12367331,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,ebourg,ebourg,16/Apr/07 23:11,08/Aug/07 15:54,07/Apr/19 20:37,01/May/07 23:50,2.3,,,,2.4,,,,,0,,,,,,,,"LocaleUtils.toLocale() throws an exception on strings containing a language and a variant but no country code. For example : fr__POSIX

This string can be produced with the JDK by instanciating a Locale with an empty string for the country : new Locale(""fr"", """", ""POSIX"").toString(). According to the javadoc for the Locale class a variant is allowed with just a language code or just a country code.

Commons Configuration handles this case in its PropertyConverter.toLocale() method. I'd like to replace our implementation by the one provided by LocaleUtils, but our tests fail due to this case.",,,,,,,,,,,,,,,,,,,,,,,,,,01/May/07 23:49;bayard;LANG-328.patch;https://issues.apache.org/jira/secure/attachment/12356589/LANG-328.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-05-01 19:07:51.824,,,false,,,,,,,,,,,,,,34091,,,Tue May 01 23:50:11 UTC 2007,,,,,,0|i0d68f:,74786,,,,,,,,01/May/07 19:07;bayard;Fix asap issue; so marking for 2.3.1.,01/May/07 23:49;bayard;Attaching a unit test/fix patch for this.,"01/May/07 23:50;bayard; svn ci -m ""Applying unit test/fix for LANG-328""
Sending        src/java/org/apache/commons/lang/LocaleUtils.java
Sending        src/test/org/apache/commons/lang/LocaleUtilsTest.java
Transmitting file data ..
Committed revision 534277.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Overview doc for version 2.3 still specifies version 2.2,LANG-327,12366814,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,heuermh@acm.org,heuermh@acm.org,09/Apr/07 15:20,09/Apr/07 15:35,07/Apr/19 20:37,09/Apr/07 15:35,2.3,,,,,,,,,0,,,,,,,,"The link to the current release javadocs

http://jakarta.apache.org/commons/lang/api-release/index.html

reads

Lang 2.3 API
This document is the API specification for the Apache Jakarta Commons Lang Library, version 2.2.

Appears as if src/java/org/apache/commons/lang/overview.html was not updated for the 2.3 release.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-04-09 15:35:47.654,,,false,,,,,,,,,,,,,,147243,,,Mon Apr 09 15:35:47 UTC 2007,,,,,,0|i0d68n:,74787,,,,,,,,09/Apr/07 15:35;bayard;Fixed (in an hour when the webpages update). Thanks for noticing that.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
DateUtilsTest error on IBM 1.5,LANG-325,12363075,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,bayard,bayard,17/Feb/07 08:51,16/Oct/13 08:55,07/Apr/19 20:37,17/Feb/07 08:59,,,,,Known Issue,,,,,0,,,,,,,,"Testcase: testTruncateLang59(org.apache.commons.lang.time.DateUtilsTest):   FAILED
Check 00:00:00.000 expected:<...0:00:00.000 MD...> but was:<...6:00:00.000 GM...>
junit.framework.ComparisonFailure: Check 00:00:00.000 expected:<...0:00:00.000 MD...> but was:<...6:00:00.000 GM...>
    at org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59(DateUtilsTest.java:910)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
","Ubuntu Linux, IBM 1.5.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,147241,,,Sat Feb 17 08:57:47 UTC 2007,,,,,,0|i0d68v:,74788,,,,,,,,17/Feb/07 08:56;bayard;Looks like timezones are broken on the IBM Linux 1.5.0 DateFormat class. Unable to test this on 1.4.2 on Linux as that errors out when trying to compile in either Ant or Maven.,"17/Feb/07 08:57;bayard;JDK bug, so not a lot we can do about it. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
LocaleUtilsTest fails with IBM JDK 1.5.0 because of false assuptions,LANG-320,12362465,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,joehni,joehni,09/Feb/07 21:13,17/Feb/07 08:59,07/Apr/19 20:37,17/Feb/07 08:59,2.2,,,,Known Issue,,,,,0,,,,,,,,"LocaleUtilsTest.testLanguagesByCountry makes the assumption, that within the JDK there is only one language defined for GB: en. This is not true for the IBM JDK 1.5.0 that also knows about cy_GB i.e. Welsh.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-02-09 21:56:31.366,,,false,,,,,,,,,,,,,,147236,,,Sat Feb 17 08:41:33 UTC 2007,,,,,,0|i0d693:,74789,,,,,,,,"09/Feb/07 21:56;rahul@apache.org;Might want to consider guarding such tests where expected results are vendor-specific (potentially LANG-318 as well, though haven't looked at that closely) based on the vendor information. [lang] itself provides SystemUtils.JAVA_VENDOR etc. to make the information trivially accessible.
",09/Feb/07 22:20;joehni;This test in special has not to do much with the vendor. Sun might deliver the cy_GB local with every new patch and then the test will fails also. LANG-318 is different though.,14/Feb/07 20:48;bayard;Should be fixed. We had the same problem with US_en when US_es turned up (or something like that). The solution then was to change the test to not use one with a dupe. Maybe we need a better test instead. Investigate for 3.0.,"17/Feb/07 08:41;bayard;I've fixed this by changing both of the assertions to only assert that the results contain, rather than that the results equal. This should allow things to be less problematic when a JVM adds a language, and it seems a lot less likely that the JVM would remove a language.

Fixed in r508733.",,,,,,,,,,,,,,,,,,,,,,,,,,,
CharEncodingTest fails in IBM JDK 1.4.2,LANG-319,12362464,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,joehni,joehni,joehni,09/Feb/07 21:07,17/Feb/07 09:01,07/Apr/19 20:37,17/Feb/07 09:01,2.2,,,,Known Issue,,,,,0,,,,,,,,"The test CharEncodingTest.testNotSupported tests with invalid character encodings. According the JDK docu of String(byte[], String) the JDK should throw in this case an java.lang.UnsupportedCharacterEncoding exception, but the IBM JDK 1.4.2 throws java.nio.charset.IllegalCharsetNameException. This is not an issue with IBM JDK 1.5.0_3 anymore.","Gentoo Linux, IBM JDK 1.4.2_5",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,147235,,,Fri Feb 09 21:09:18 UTC 2007,,,,,,0|i0d69b:,74790,,,,,,,,"09/Feb/07 21:09;joehni;This is a JDK bug and we cannot catch the thrown exception, since it is only available in JDK 1.4+.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
HashCodeBuilderTest and ToStringBuilderTest fail with IBM JDK 1.4.2,LANG-318,12362463,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,,joehni,joehni,09/Feb/07 21:03,17/Feb/07 09:01,07/Apr/19 20:37,17/Feb/07 09:01,2.2,,,,Known Issue,,,,,0,,,,,,,,"The IBM JDK 1.4.2 reports the declared fields of a class in reverse declaration order. The tests are affected by this:

{noformat}
Testsuite: org.apache.commons.lang.builder.BuilderTestSuite
Tests run: 263, Failures: 8, Errors: 0, Time elapsed: 0,451 sec

Testcase:
testReflectionHierarchyHashCode(org.apache.commons.lang.builder.HashCodeBuilderTest):
FAILED
expected:<11785967> but was:<1276487>
junit.framework.AssertionFailedError: expected:<11785967> but was:<1276487>
        at
org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode(HashCodeBuilderTest.java:166)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)


Testcase:
testReflectionHashCodeExcludeFields(org.apache.commons.lang.builder.HashCodeBuilderTest):
FAILED
expected:<862547> but was:<865283>
junit.framework.AssertionFailedError: expected:<862547> but was:<865283>
        at
org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields(HashCodeBuilderTest.java:480)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)


Testcase:
testReflectionHierarchyArrayList(org.apache.commons.lang.builder.ToStringBuilderTest):
FAILED
expected:<...elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0...>
but
was:<...size=0,elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>}...>
junit.framework.ComparisonFailure:
expected:<...elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0...>
but
was:<...size=0,elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>}...>
        at
org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionHierarchyArrayList(ToStringBuilderTest.java:327)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)


Testcase:
testReflectionHierarchy(org.apache.commons.lang.builder.ToStringBuilderTest):
FAILED
expected:<...a=a,transientA=t...> but was:<...transientA=t,a=a...>
junit.framework.ComparisonFailure: expected:<...a=a,transientA=t...> but
was:<...transientA=t,a=a...>
        at
org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionHierarchy(ToStringBuilderTest.java:338)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)


Testcase:
testSelfInstanceTwoVarsReflectionObjectCycle(org.apache.commons.lang.builder.ToStringBuilderTest):
FAILED
expected:<...typeIsSelf=org.apache.commons.lang.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture@5b6022ad,otherType=The
Other Type...> but was:<...otherType=The Other
Type,typeIsSelf=org.apache.commons.lang.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture@5b6022ad...>
junit.framework.ComparisonFailure:
expected:<...typeIsSelf=org.apache.commons.lang.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture@5b6022ad,otherType=The
Other Type...> but was:<...otherType=The Other
Type,typeIsSelf=org.apache.commons.lang.builder.ToStringBuilderTest$SelfInstanceTwoVarsReflectionTestFixture@5b6022ad...>
        at
org.apache.commons.lang.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle(ToStringBuilderTest.java:543)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)


Testcase:
testSimpleReflectionStatics(org.apache.commons.lang.builder.ToStringBuilderTest):
FAILED
expected:<...String=staticString,staticInt=12345...> but
was:<...Int=12345,staticString=staticString...>
junit.framework.ComparisonFailure:
expected:<...String=staticString,staticInt=12345...> but
was:<...Int=12345,staticString=staticString...>
        at
org.apache.commons.lang.builder.ToStringBuilderTest.testSimpleReflectionStatics(ToStringBuilderTest.java:859)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)


Testcase:
testReflectionStatics(org.apache.commons.lang.builder.ToStringBuilderTest):
FAILED
expected:<...staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890...>
but
was:<...instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString...>
junit.framework.ComparisonFailure:
expected:<...staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890...>
but
was:<...instanceInt=67890,instanceString=instanceString,staticInt=12345,staticString=staticString...>
        at
org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionStatics(ToStringBuilderTest.java:878)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)


Testcase:
testInheritedReflectionStatics(org.apache.commons.lang.builder.ToStringBuilderTest):
FAILED
expected:<...String2=staticString2,staticInt2=67890...> but
was:<...Int2=67890,staticString2=staticString2...>
junit.framework.ComparisonFailure:
expected:<...String2=staticString2,staticInt2=67890...> but
was:<...Int2=67890,staticString2=staticString2...>
        at
org.apache.commons.lang.builder.ToStringBuilderTest.testInheritedReflectionStatics(ToStringBuilderTest.java:897)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)
        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)
        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)
{noformat}","Gentoo Linux, IBM JDK 1.4.2_5",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-02-14 20:49:57.914,,,false,,,,,,,,,,,,,,147234,,,Sat Feb 17 09:01:48 UTC 2007,,,,,,0|i0d69j:,74791,,,,,,,,09/Feb/07 21:10;joehni;This is not an issue with IBM JDK 1.5.0_3 anymore.,14/Feb/07 20:49;bayard;I think we have to view the reverse order as a JVM bug. We should add code to ignore these tests when on the IBM 1.4 JVM for 3.0.,17/Feb/07 09:01;bayard;I don't see any reason to have the unit tests not run for this - makes them more honest and we don't need the IBM 1.4.2 JVM to develop with. Marking as WONTFIX as it's a JVM bug (they fixed in 1.5 so presuming it's considered so).,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enum Serialization - not backwards compatible,LANG-317,12362428,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Invalid,,ukkmfra,ukkmfra,09/Feb/07 13:03,14/Feb/07 20:41,07/Apr/19 20:37,14/Feb/07 20:41,2.2,,,,,,,,,0,,,,,,,,"In our distributed application we have to deal with different environments. The server runs in a JDK 1.5 environment while some clients runs with JDK 1.4. In this scenario we get an error when we try to transfer the result object via RMI. The error message is:

Exception:BusinessDelegatorComp.login() - connection error ocurred during loginCORBA MARSHAL 0x4942f89a No; nested exception is: 
	org.omg.CORBA.MARSHAL: Unable to read value from underlying bridge : Mismatched serialization UIDs : Source (Rep. IDRMI:de.fraport.biaf.apm.user.UserRoleEnum:CBEF51ADA936FFFE:D100D6F29BD50386) = D100D6F29BD50386 whereas Target (Rep. ID RMI:de.fraport.biaf.apm.user.UserRoleEnum:CBEF51ADA936FFFE:D041682DA5693C42) = D041682DA5693C42  vmcid: IBM  minor code: 89A  completed: No

The class causing this problem is derived from org.apache.commons.lang.enums.ValuedEnum. Aftre some recherches we found on http://people.apache.org/~bayard/ that there is a upcoming new release 2.3 of Commons-Lang. We saw that in this release a bug [LANG-286] has been fixed which seemed to be exactly our problem. We downloaded this version hopening that we can forget this problem. But unfortunately the problem still exists.

",JDK 1.5 -> JDK 1.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2007-02-09 21:05:34.878,,,false,,,,,,,,,,,,,,147233,,,Wed Feb 14 20:41:41 UTC 2007,,,,,,0|i0d69r:,74792,,,,,,,,09/Feb/07 21:05;bayard;I believe the solution you need here is that you'll need to define serialVersionUID in your de.fraport.biaf.apm.user.UserRoleEnum class. The one in the ValuedEnum is private.,12/Feb/07 08:40;ukkmfra;Till now we didn't try this because if a JDK 1.5 client communicates with the server (1.5 <-> 1.5) the problem does not arise. It is not known to me that in serialisation JDK 1.5 has a different behavior than JDK 1.4.,"12/Feb/07 08:58;joehni;This has less to do with the JDK, but more with the compiler you're using. E.g. if you have compiled the class with Eclipse (it uses *always* the internal compiler and not the selected JDK's one) it will have a different serialVersionUID generated that the same class from the Sun compiler from the identical JDK. The only way to get them compatible is to define an own serialVersionUID.","14/Feb/07 20:41;bayard;Closing this issue - Jörg's reply seems good to me. 

Please reopen if that didn't help.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"StopWatch: suspend() acts as split(), if followed by stop()",LANG-315,12362095,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,hotte,hotte,06/Feb/07 13:52,06/Feb/07 22:49,07/Apr/19 20:37,06/Feb/07 22:49,2.0,2.1,2.2,,2.3,,,,,0,,,,,,,,"In my opinion, it is a bug that suspend() acts as split(), if followed by stop(); see below:

        StopWatch sw = new StopWatch();

        sw.start();
        Thread.sleep(1000);
        sw.suspend();
        // Time 1 (ok)
        System.out.println(sw.getTime());

        Thread.sleep(2000);
        // Time 1 (again, ok)
        System.out.println(sw.getTime());

        sw.resume();
        Thread.sleep(3000);
        sw.suspend();
        // Time 2 (ok)
        System.out.println(sw.getTime());

        Thread.sleep(4000);
        // Time 2 (again, ok)
        System.out.println(sw.getTime());

        Thread.sleep(5000);
        sw.stop();
        // Time 2 (should be, but is Time 3 => NOT ok)
        System.out.println(sw.getTime());


suspend/resume is like a pause, where time counter doesn't continue. So a following stop()-call shouldn't increase the time counter, should it?
",,,,,,,,,,,,,,,,,,,,,,,,,,06/Feb/07 22:48;bayard;LANG-315.patch;https://issues.apache.org/jira/secure/attachment/12350501/LANG-315.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-02-06 22:48:48.737,,,false,,,,,,,,,,,,,,34088,,,Tue Feb 06 22:49:59 UTC 2007,,,,,,0|i0d69z:,74793,,,,,,,,"06/Feb/07 22:48;bayard;Easy to test for and easy to fix.

Question being - do we want to fix this...","06/Feb/07 22:49;bayard;I think this is definitely a bug, and I don't see fixing it being a negative thing for existing users. 

svn ci -m ""Applying test and fix for LANG-315"" src/
Sending        src/java/org/apache/commons/lang/time/StopWatch.java
Sending        src/test/org/apache/commons/lang/time/StopWatchTest.java
Transmitting file data ..
Committed revision 504351.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Tests fail to pass when building with Maven 2,LANG-314,12361594,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,30/Jan/07 22:24,16/Oct/13 08:55,07/Apr/19 20:37,30/Jan/07 22:28,,,,,2.3,,,,,0,,,,,,,,"Tests run: 75, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.211 sec <<< FAILURE!
testColorEnumEqualsWithDifferentClassLoaders(org.apache.commons.lang.enums.EnumTest)  Time elapsed: 0.001 sec  <<< FAILURE!
junit.framework.AssertionFailedError: ClassUtilsTest= org.apache.maven.surefire.booter.IsolatedClassLoader@32e13d System=sun.misc.Launcher$AppClassLoader@a9c85c
    at junit.framework.Assert.fail(Assert.java:47)
    at org.apache.commons.lang.ClassUtilsTest.newSystemClassLoader(ClassUtilsTest.java:522)
    at org.apache.commons.lang.enums.EnumTest.testWithDifferentClassLoaders(EnumTest.java:457)
    at org.apache.commons.lang.enums.EnumTest.testColorEnumEqualsWithDifferentClassLoaders(EnumTest.java:446)",,,,,,,,,,,,,,,,,,,,,,,,,,30/Jan/07 22:26;bayard;Lang314-fix.patch;https://issues.apache.org/jira/secure/attachment/12349965/Lang314-fix.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,147231,,,Tue Jan 30 22:28:07 UTC 2007,,,,,,0|i0d6a7:,74794,,,,,,,,"30/Jan/07 22:26;bayard;Fix for the two broken tests. No one else uses the public method in ClassUtilsTest, so it was deleted and a simpler method of creating a second classloader created.","30/Jan/07 22:28;bayard;Fixed:

r501606 | bayard | 2007-01-30 14:26:38 -0800 (Tue, 30 Jan 2007) | 1 line
Changed paths:
   M /jakarta/commons/proper/lang/trunk/src/test/org/apache/commons/lang/ClassUtilsTest.java
   M /jakarta/commons/proper/lang/trunk/src/test/org/apache/commons/lang/enum/EnumTest.java
   M /jakarta/commons/proper/lang/trunk/src/test/org/apache/commons/lang/enums/EnumTest.java

Applying my fix from LANG-314",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Wrong behavior of Entities.unescape,LANG-313,12360576,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tsouza,tsouza,16/Jan/07 07:26,18/Jan/07 02:19,07/Apr/19 20:37,17/Jan/07 03:58,2.1,2.2,,,2.3,,,,,0,,,,,,,,"Hi,

    There's seems to be a bug at Entities.unescape. Try for example StringEscapeUtils.unescapeHtml(""& &amp;""). It outputs ""& &amp;"" instead of ""& &"". The problem is at this piece of code:

                if (entityValue == -1) {
                    buf.append('&');
                    buf.append(entityName);
                    buf.append(';');
                } else {
                    buf.append((char) (entityValue));
                }
                i = semi;

     The method always skips to the next "";"", even if it doesn't finds the entity value and then disregarding any entity that may be actually be referred inside.

Regards,
Thiago Souza",,,,,,,,,,,,,,,,,,,,,,,,,,17/Jan/07 03:55;bayard;LANG-313-test.patch;https://issues.apache.org/jira/secure/attachment/12349054/LANG-313-test.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2007-01-17 03:58:45.159,,,false,,,,,,,,,,,,,,147230,,,Thu Jan 18 02:19:40 UTC 2007,,,,,,0|i0d6af:,74795,,,,,,,,"17/Jan/07 03:58;bayard;Unit test committed showing that this issue doesn't occur with the current Lang trunk (and so won't be in the forthcoming 2.3).

svn ci -m ""Adding a unit test to show that LANG-313 is not a problem in the current trunk""

Sending        src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
Transmitting file data .
Committed revision 496931.","18/Jan/07 02:19;tsouza;Hi,

   You're right, it looks like it's fixed in 2.3-SNAPSHOT.

Regards,
Thiago Souza",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in isAvailableLocale(Locale),LANG-304,12359315,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,22/Dec/06 20:32,22/Dec/06 20:35,07/Apr/19 20:37,22/Dec/06 20:35,2.2,,,,2.3,,,,,0,,,,,,,,"FindBugs pointed out:

   UwF: Field not initialized in constructor: org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet

cAvailableSet is used directly once in the source - and if availableLocaleSet() hasn't been called it will cause a NullPointerException.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,34081,,,Fri Dec 22 20:35:16 UTC 2006,,,,,,0|i0d6an:,74796,,,,,,,,"22/Dec/06 20:35;bayard;svn ci -m ""Applying test for LANG-304 and fix to LocaleUtils"" src/

Sending        src/java/org/apache/commons/lang/LocaleUtils.java
Sending        src/test/org/apache/commons/lang/LocaleUtilsTest.java
Transmitting file data ..
Committed revision 489749.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat.mRules is not transient or serializable,LANG-303,12359312,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,22/Dec/06 19:55,26/Dec/06 22:10,07/Apr/19 20:37,26/Dec/06 22:08,2.2,,,,2.3,,,,,0,,,,,,,,"Reported by FindBugs.

Either we need to make the Rule interface Serializable, or make mRules transient and add deserializing code to kick off init().",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,34050,,,Tue Dec 26 22:10:56 UTC 2006,,,,,,0|i0d6av:,74797,,,,,,,,"26/Dec/06 18:31;bayard;The latter seems to make the most sense - the Rule objects are a tokenized version of the mPattern String, and that is going to be happily serialized.

(I've no clue why java.text.Format is Serializable anyway)","26/Dec/06 22:08;bayard;svn ci -m ""Applying test for #LANG-303, and a fix. "" src/
Sending        src/java/org/apache/commons/lang/time/FastDateFormat.java
Sending        src/test/org/apache/commons/lang/time/FastDateFormatTest.java
Transmitting file data ..
Committed revision 490387.

mRules and mMaxLengthEstimate have been made transient as the init() method sets both of them up.

The deserialize method is:

+    // Serializing
+    //-----------------------------------------------------------------------
+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        init();
+    }

","26/Dec/06 22:10;bayard;svn ci -m ""Improved #LANG-303 test to prove the formatting works on each side of the serializing"" src/

Sending        src/test/org/apache/commons/lang/time/FastDateFormatTest.java
Transmitting file data .
Committed revision 490388.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrBuilder does not implement clone(),LANG-302,12359311,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,22/Dec/06 19:47,10/Jan/11 20:42,07/Apr/19 20:37,11/May/08 05:58,2.2,,,,2.6,3.0,lang.text.*,,,0,,,,,,,,"As reported by FindBugs.

Does StrBuilder need to be Cloneable?",,,,,,,,,,,,,,,,,,,,,,,,,,10/Jan/11 02:30;niallp;LANG-302-clone-v3.patch;https://issues.apache.org/jira/secure/attachment/12467859/LANG-302-clone-v3.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2006-12-27 18:34:06.0,,,false,,,,,,,,,,,,,,147223,,,Mon Jan 10 20:42:34 UTC 2011,,,,,,0|i0d6b3:,74798,,,,,,,,"26/Dec/06 18:19;bayard;Neither StringBuffer, StringBuilder or String itself is cloneable, so we're not doing this because it's needed. ","26/Dec/06 18:57;bayard;As we don't have the public clone(), this is only of value to subclasses. The state of this class is currently in 4 attributes. Two are protected, two are private. Both of the private attributes have public get/set methods.

So no reason for subclasses to need a clone.","26/Dec/06 18:59;bayard;svn ci -m ""StrBuilder no longer implements Cloneable. #LANG-302"" src/java/
Sending        src/java/org/apache/commons/lang/text/StrBuilder.java
Transmitting file data .
Committed revision 490355.","27/Dec/06 18:34;scolebourne;I disagree with this. It was probably an error to be Clonable, but now its there its doing no harm. Removing it breaks binary compatability, and thats a big deal in [lang]. -1 to the change.","27/Dec/06 18:39;bayard;Reopening due to Stephen's -1.

I'll roll the commit back and move this fix to 3.0.","29/Dec/06 18:42;bayard;svn ci -m ""Rolling back r490355 - StrBuilder implements Cloneable again"" src/java/org/apache/commons/lang/text/StrBuilder.java 

Sending        src/java/org/apache/commons/lang/text/StrBuilder.java
Transmitting file data .
Committed revision 491073.",03/Nov/07 08:09;bayard;Moving up to 2.4 - we should look into writing a clone method. ,"09/Nov/07 08:26;pbenedict;If StringBuilder or StringBuffer implemented Cloneable, then I'd say do it here too. But Henri already confirmed it does not, so do remove the interface since its implementation was never complete.","09/Nov/07 08:27;bayard;Pondered again for 2.4; but we shouldn't fix clone(). The less people who are able to get it to work, the less people are affected when it's removed in 3.0. Moving back to 3.0.","11/May/08 05:58;bayard;We're on 3.0 now, so removing the interface implementation. 

svn ci -m ""Removing the Cloneable interface from StrBuilder as per LANG-302""

Sending        src/java/org/apache/commons/lang/text/StrBuilder.java
Transmitting file data .
Committed revision 655251.","11/May/08 05:59;bayard;Question - is this okay for 3.0, or does it need to be LangTwo?","10/Jan/11 00:16;niallp;I know this is resolved for 3.0 - but Sebb raised this again concerning a 2.6 release (also LANG-603):
    * http://markmail.org/message/qa42zi27j4svsuna

I agree with Stephen that we can't remove Cloneable in the 2.x branch because of compatibility issues. IMO the best solution is to implement clone(). As it stands this implementation is breaking the contract of Cloneable and I think that is worse than any difference with StringBuilder or StringBuffer. Its also very trivial to implement.

Attaching a patch to implement clone",10/Jan/11 02:27;niallp;v2 of patch attached,10/Jan/11 02:30;niallp;v2 of patch attached,"10/Jan/11 20:42;niallp;Implemented clone() method in LANG 2.x branch:
    http://svn.apache.org/viewvc?view=revision&revision=1057349",,,,,,,,,,,,,,,,
Unnecessary code in StrTokenizer,LANG-301,12359310,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Invalid,,bayard,bayard,22/Dec/06 19:42,06/Feb/07 23:47,07/Apr/19 20:37,29/Dec/06 18:00,2.2,,,,,,,,,0,,,,,,,,"In StrTokenizer, we have the following:

1086     public Object clone() {
1087         try {
1088             return cloneReset();
1089         } catch (CloneNotSupportedException ex) {
1090             return null;
1091         }
1092     }
...
1101     Object cloneReset() throws CloneNotSupportedException {
1102         StrTokenizer cloned = (StrTokenizer) super.clone();
1103         if (cloned.chars != null) {
1104             cloned.chars = (char[]) cloned.chars.clone();
1105         }
1106         cloned.reset();
1107         return cloned;
1108     }

FindBugs just reported it because the clone() method doesn't call super.clone(). While that's not a worry (because the method it calls does), I don't understand why we're not just doing:

    public Object clone() {
         StrTokenizer cloned = (StrTokenizer) super.clone();
         if (cloned.chars != null) {
             cloned.chars = (char[]) cloned.chars.clone();
         }
         cloned.reset();
         return cloned;
    }

and why we return null and not a runtime CloneNotSupportedException.

Also, is there any value in StrTokenizer being Cloneable? Or is it just done for the sake of the getXxxInstance methods?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-12-29 18:00:21.0,,,false,,,,,,,,,,,,,,147222,,,Fri Dec 29 18:00:21 UTC 2006,,,,,,0|i0d6bb:,74799,,,,,,,,"26/Dec/06 21:28;bayard;Moving this back to 3.0. 

There are three things to do here, if reasons for the current code don't show up:

1) Refactor the cloneReset method away. It's possible that it's setup this way to be more useful for subclasses. 
2) Switch from returning null to throwing CloneNotSupported.
3) Stop supporting clone() and Cloneable.

The latter 2 definitely need to wait for 3.0, the former is not very critical.","29/Dec/06 18:00;scolebourne;The cloneReset() method exists to enable testing.

The return null should never happen, as super.clone() should succeed. Its really just a way around the JDK flaw of the exception not being a runtime exception.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberUtils.createNumber throws NumberFormatException for one digit long,LANG-300,12359052,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,jeremy.lemaire,jeremy.lemaire,19/Dec/06 17:47,05/Nov/08 16:00,07/Apr/19 20:37,19/Dec/06 21:50,2.2,,,,2.3,,,,,0,,,,,,,,"NumberUtils.createNumber throws a NumberFormatException when parsing ""1l"", ""2l"" .. etc...

It works fine if you try to parse ""01l"" or ""02l"".  The condition isDigits(numeric.substring(1)), line 455 return false as numeric.substring(1) is an empty string for ""1l""",,,,,,,,,,,,,,,,,,,,,,,,,,19/Dec/06 21:44;bayard;LANG-300.patch;https://issues.apache.org/jira/secure/attachment/12347520/LANG-300.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2006-12-19 21:44:23.0,,,false,,,,,,,,,,,,,,34100,,,Tue Dec 19 21:50:46 UTC 2006,,,,,,0|i0d6bj:,74800,,,,,,,,"19/Dec/06 21:44;bayard;Merging the third and fourth parts of that if statement together seems to solve the problem.

Unit test and patch attached.","19/Dec/06 21:50;bayard;svn ci -m ""Fixing LANG-300 (reported by Jeremy Lemaire) - 1L to 9L incorrectly throw exceptions when passed into NumberUtils.createNumber. Fixed in both the math.NumbersUtils and the deprecated NumberUtils classes. ""

Sending        src/java/org/apache/commons/lang/NumberUtils.java
Sending        src/java/org/apache/commons/lang/math/NumberUtils.java
Sending        src/test/org/apache/commons/lang/math/NumberUtilsTest.java
Transmitting file data ...
Committed revision 488819.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in method appendFixedWidthPadRight of class StrBuilder causes an ArrayIndexOutOfBoundsException,LANG-299,12358279,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,fbenavent,fbenavent,11/Dec/06 11:58,06/Feb/07 23:47,07/Apr/19 20:37,12/Dec/06 22:35,2.2,,,,2.3,,,,,0,,,,,,,,"There's a bug in method appendFixedWidthPadRight of class StrBuilder:

public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
        if (width > 0) {
            ensureCapacity(size + width);
            String str = (obj == null ? getNullText() : obj.toString());
            int strLen = str.length();
            if (strLen >= width) {
 ==>            str.getChars(0, strLen, buffer, size);   <==== BUG: it should be str.getChars(0, width, buffer, size);
            } else {
                int padLen = width - strLen;
                str.getChars(0, strLen, buffer, size);
                for (int i = 0; i < padLen; i++) {
                    buffer[size + strLen + i] = padChar;
                }
            }
            size += width;
        }
        return this;
    }

This is causing an ArrayIndexOutOfBoundsException, so this method is unusable when strLen > width.

It's counterpart method appendFixedWidthPadLeft seems to be ok.",,,,,,,,,,,,,,,,,,,,,,,,,,12/Dec/06 22:33;bayard;LANG-299.patch;https://issues.apache.org/jira/secure/attachment/12347047/LANG-299.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2006-12-12 22:33:41.0,,,false,,,,,,,,,,,,,,34094,,,Tue Dec 12 22:35:58 UTC 2006,,,,,,0|i0d6br:,74801,,,,,,,,12/Dec/06 22:33;bayard;Unit test created and fix applied.,"12/Dec/06 22:35;bayard;Applying my patch. Took a bit to find out the actual failing test as you either have to make the StrBuilder smaller than 32 by default, or have big strings.

svn ci -m ""Applying a unit test for LANG-299 and the fix that Francisco Benavent suggests. ""

Sending        src/java/org/apache/commons/lang/text/StrBuilder.java
Sending        src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java
Transmitting file data ..
Committed revision 486377.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrBuilder contains usages of thisBuf.length when they should use size,LANG-295,12354403,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,31/Oct/06 22:16,06/Feb/07 23:47,07/Apr/19 20:37,31/Oct/06 23:01,,,,,2.3,,,,,0,,,,,,,,While fixing LANG-294 I noticed that there are two other places in StrBuilder that reference thisBuf.length and unless I'm mistaken they shouldn't.,,,,,,,,,,,,,,,,,,,,,,,,,,31/Oct/06 22:59;bayard;LANG-295.patch;https://issues.apache.org/jira/secure/attachment/12344047/LANG-295.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,34054,,,Tue Oct 31 23:01:13 UTC 2006,,,,,,0|i0d6bz:,74802,,,,,,,,31/Oct/06 22:59;bayard;Patch with unit tests and fixes for both of the thisBuf.length calls.,"31/Oct/06 23:01;bayard;svn ci -m ""Fixng LANG-295 - thisBuf.length calls. There were two of the calls, so I've committed a unit test showing things are broken and a fix in both cases. ""

Sending        src/java/org/apache/commons/lang/text/StrBuilder.java
Sending        src/test/org/apache/commons/lang/text/StrBuilderTest.java
Transmitting file data ..
Committed revision 469696.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StrBuilder.replaceAll and StrBuilder.deleteAll can throw ArrayIndexOutOfBoundsException.,LANG-294,12354353,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,andylehane,andylehane,31/Oct/06 11:07,06/Feb/07 23:47,07/Apr/19 20:37,31/Oct/06 22:15,2.2,,,,2.3,,,,,0,,,,,,,,"StrBuilder.replaceAll and StrBuilder.deleteAll can thrown ArrayIndexOutOfBoundsException's. Here are a couple of additions to the StrBuilderTest class that demonstrate this problem:

StrBuilder.deleteAll() - added to testDeleteAll_String():

        sb = new StrBuilder(""\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"");
        sb.deleteAll(""\n%BLAH%"");
        assertEquals(""\nDo more stuff\neven more stuff\n"", sb.toString());

this causes the following error:
java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.commons.lang.text.StrBuilder.deleteImpl(StrBuilder.java:1114)
	at org.apache.commons.lang.text.StrBuilder.deleteAll(StrBuilder.java:1188)
	at org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String(StrBuilderTest.java:606)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)


StrBuilder.replaceAll() - added to testReplaceAll_String_String():

        sb = new StrBuilder(""\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"");
        sb.replaceAll(""\n%BLAH%"", """");
        assertEquals(""\nDo more stuff\neven more stuff\n"", sb.toString());

this causes the exception:

java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.commons.lang.text.StrBuilder.replaceImpl(StrBuilder.java:1256)
	at org.apache.commons.lang.text.StrBuilder.replaceAll(StrBuilder.java:1339)
	at org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String(StrBuilderTest.java:763)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)","Java 1.5.0_09, win XP Pro.",,,,,,,,,,,,,,,,,,,,,,,,,31/Oct/06 22:14;bayard;LANG-294.patch;https://issues.apache.org/jira/secure/attachment/12344044/LANG-294.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2006-10-31 18:20:02.0,,,false,,,,,,,,,,,,,,34103,,,Tue Oct 31 22:15:27 UTC 2006,,,,,,0|i0d6c7:,74803,,,,,,,,31/Oct/06 18:20;bayard;Confirmed. Adding to 3.0 (though that may mostly end up being 2.3).,"31/Oct/06 22:08;bayard;The bug is actually in indexOf. Here's a test for it:

    public void testIndexOfLang294() {
    	StrBuilder sb = new StrBuilder(""onetwothree"");
    	sb.deleteFirst(""three"");
    	assertEquals(-1, sb.indexOf(""three""));  // fails as the indexOf is 6
    }

The problem being that IndexOf does not look at whether it has gone over the actual size of the String being built and into the flotsam that is floating at the end of the buffer array beyond the length of the size variable.",31/Oct/06 22:14;bayard;Unit test and fix for this bug. The indexOf method needed to understand that the buffer did not represent the entire underlying String but had more junk data at the end for performance reasons.,"31/Oct/06 22:15;bayard;svn ci -m ""Fixing #LANG-294. The indexOf method did not take into account the size variable that limited the amount of the buffer that should be looked at. ""

Sending        src/java/org/apache/commons/lang/text/StrBuilder.java
Sending        src/test/org/apache/commons/lang/text/StrBuilderTest.java
Transmitting file data ..
Committed revision 469677.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"unescapeXml(""&12345678;"") should be ""&12345678;""",LANG-292,12354333,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,yozh,yozh,31/Oct/06 01:45,16/Oct/13 08:55,07/Apr/19 20:37,31/Oct/06 21:34,,,,,2.3,,,,,0,,,,,,,,"Following test (in EntitiesTest.java) fails:

    public void testNumberOverflow() throws Exception {
        doTestUnescapeEntity(""&#12345678;"", ""&#12345678;"");
        doTestUnescapeEntity(""x&#12345678;y"", ""x&#12345678;y"");
        doTestUnescapeEntity(""&#x12345678;"", ""&#x12345678;"");
        doTestUnescapeEntity(""x&#x12345678;y"", ""x&#x12345678;y"");
    }

Maximim value for char is 0xFFFF, so &#12345678; is invalid entity reference, and so should be left as is.",,,,,,,,,,,,,,,,,,,,,,,,,,31/Oct/06 21:31;bayard;LANG-292.patch;https://issues.apache.org/jira/secure/attachment/12344036/LANG-292.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2006-10-31 08:12:17.0,,,false,,,,,,,,,,,,,,34076,,,Tue Oct 31 21:34:31 UTC 2006,,,,,,0|i0d6cf:,74804,,,,,,,,"31/Oct/06 08:12;bayard;Test confirmed:

Testcase: testNumberOverflow(org.apache.commons.lang.EntitiesTest): FAILED
expected:<&#12345678;> but was:<?>
junit.framework.ComparisonFailure: expected:<&#12345678;> but was:<?>
    at org.apache.commons.lang.EntitiesTest.doTestUnescapeEntity(EntitiesTest.java:101)
    at org.apache.commons.lang.EntitiesTest.testNumberOverflow(EntitiesTest.java:201)","31/Oct/06 21:31;bayard;Unit test patch with fix. 

Also includes a break; statement in the unescape(Writer) method that was missing (GAH!). It's terrible how these methods have ended up not being coded in the same way.","31/Oct/06 21:34;bayard; svn ci -m ""Applying unit test and fix for #LANG-292. Also fixes a couple of problems with the unescape(Writer..) overload that came up"" src/test/org/apache/commons/lang/EntitiesTest.java src/java/org/apache/commons/lang/Entities.java 

Sending        src/java/org/apache/commons/lang/Entities.java
Sending        src/test/org/apache/commons/lang/EntitiesTest.java
Transmitting file data ..
Committed revision 469661.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Serialization - not backwards compatible,LANG-286,12353405,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,david@davidkarlsen.com,david@davidkarlsen.com,17/Oct/06 13:45,30/Jan/07 23:21,07/Apr/19 20:37,30/Jan/07 23:21,2.2,,,,2.2,,,,,0,,,,,,,,"Release report states that commons-lang 2.2 is binary backwards compatible, this does not seem to be correct between commons-lang 2.1 and 2.2

Running 2.2 at the server and 2.1 on client will result in an exception:

org.omg.CORBA.MARSHAL: Unable to read value from underlying bridge : Mismatched serialization UIDs : Source (Rep. IDRMI:org.apache.commons.lang.exception.NestableDelegate:4F998DA78EFC2530:F68F1455DDEE96BB) = F68F1455DDEE96BB whereas Target (Rep. ID RMI:org.apache.commons.lang.exception.NestableDelegate:4F998DA78EFC2530:0000000000000001) = 0000000000000001  minor code: 4942F89A  completed: No
",N/A,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-10-19 19:18:58.0,,,false,,,,,,,,,,,,,,147213,,,Tue Jan 30 23:21:50 UTC 2007,,,,,,0|i0d6cn:,74805,,,,,,,,"19/Oct/06 19:18;bayard;
The error is in my use of the phrase 'binary backwards compatible' - I meant that the API has not changed so you should be able to drop it in place without a recompile. Not that you could serialize objects between 2.1 and 2.2.

We have applied serialVersionIDs in 2.2; so between 2.2 and 2.3 serialization should work. ","24/Oct/06 19:59;bayard;Keeping this open to remind me to check this when 2.3 is released (though it may not be released and instead go straight to 3.0).

I've requested that jardiff support diffs on serialVersionId for Serializable classes.",29/Dec/06 18:17;scolebourne;Changed issue title,"26/Jan/07 14:45;david@davidkarlsen.com;Any news on this?

I'm extending NestableRuntimeException and NestableException - and expiriencing serialization errors between a WebSphere 5.0.2 server and a WebSphere 6.1 server - probably due to changed serializationUIDs on some of the classes that are used within NestableDelegate:

org.omg.CORBA.MARSHAL: Unable to read value from underlying bridge : Mismatched serialization UIDs : Source (RepId RMI:org.apache.commons.lang.exception.NestableDelegate:4F998DA78EFC2530:EAEF728564560A6A) = EAEF728564560A6A whereas Target (RepId RMI:org.apache.commons.lang.exception.NestableDelegate:4F998DA78EFC2530:F68F1455DDEE96BB) = F68F1455DDEE96BB  vmcid: IBM  minor code: 89A  completed: No
        at com.ibm.rmi.iiop.CDRInputStream.read_value(CDRInputStream.java:2105)

explicitly setting an serializationUID on NestableDelegate would probably solve the case.

Using commons-lang 2.1 in both JVM/servers.","26/Jan/07 15:57;bayard;The following had serialVersionUID set for the 2.2 release. There have been no new ones added for 2.3. So when 2.3 is released, you shouldn't get the problems you've had from 2.1 to 2.2 for these files.

./src/java/org/apache/commons/lang/builder/StandardToStringStyle.java
./src/java/org/apache/commons/lang/builder/ToStringStyle.java
./src/java/org/apache/commons/lang/CharRange.java
./src/java/org/apache/commons/lang/CharSet.java
./src/java/org/apache/commons/lang/enum/Enum.java
./src/java/org/apache/commons/lang/enum/ValuedEnum.java
./src/java/org/apache/commons/lang/enums/Enum.java
./src/java/org/apache/commons/lang/enums/ValuedEnum.java
./src/java/org/apache/commons/lang/exception/NestableDelegate.java
./src/java/org/apache/commons/lang/exception/NestableError.java
./src/java/org/apache/commons/lang/exception/NestableException.java
./src/java/org/apache/commons/lang/exception/NestableRuntimeException.java
./src/java/org/apache/commons/lang/IllegalClassException.java
./src/java/org/apache/commons/lang/IncompleteArgumentException.java
./src/java/org/apache/commons/lang/math/DoubleRange.java
./src/java/org/apache/commons/lang/math/FloatRange.java
./src/java/org/apache/commons/lang/math/Fraction.java
./src/java/org/apache/commons/lang/math/IntRange.java
./src/java/org/apache/commons/lang/math/JVMRandom.java
./src/java/org/apache/commons/lang/math/LongRange.java
./src/java/org/apache/commons/lang/math/NumberRange.java
./src/java/org/apache/commons/lang/mutable/MutableBoolean.java
./src/java/org/apache/commons/lang/mutable/MutableByte.java
./src/java/org/apache/commons/lang/mutable/MutableDouble.java
./src/java/org/apache/commons/lang/mutable/MutableFloat.java
./src/java/org/apache/commons/lang/mutable/MutableInt.java
./src/java/org/apache/commons/lang/mutable/MutableLong.java
./src/java/org/apache/commons/lang/mutable/MutableObject.java
./src/java/org/apache/commons/lang/mutable/MutableShort.java
./src/java/org/apache/commons/lang/NotImplementedException.java
./src/java/org/apache/commons/lang/NullArgumentException.java
./src/java/org/apache/commons/lang/ObjectUtils.java
./src/java/org/apache/commons/lang/SerializationException.java
./src/java/org/apache/commons/lang/text/CompositeFormat.java
./src/java/org/apache/commons/lang/text/StrBuilder.java
./src/java/org/apache/commons/lang/time/FastDateFormat.java
./src/java/org/apache/commons/lang/UnhandledException.java",30/Jan/07 23:21;bayard;This was effectively fixed in 2.2 (no new serialUIDs in 2.3)- however it's not until you go from 2.2 to a new version that you notice.,,,,,,,,,,,,,,,,,,,,,,,,,
DurationFormatUtils returns wrong result,LANG-281,12352519,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,stlum9495,stlum9495,05/Oct/06 16:51,06/Feb/07 23:47,07/Apr/19 20:37,07/Oct/06 00:23,2.1,2.2,,,2.3,,,,,0,,,,,,,,"DurationFormatUtils returns wrong result.  oddly, it is only when Date is set to Dec 31, 2005

The following code will result in a String of -2 which is way off.

I've tested against 2.1 and 2.2.

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.MONTH, Calendar.DECEMBER);
        cal.set(Calendar.DAY_OF_MONTH, 31);
        cal.set(Calendar.YEAR, 2005);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);

        String result = DurationFormatUtils.formatPeriod(cal.getTimeInMillis(), System.currentTimeMillis(), ""MM"");
        System.out.println(result);
",Win xp pro,,,,,,,,,,,,,,,,,,,,,,,,,07/Oct/06 00:20;bayard;LANG-281-fix.patch;https://issues.apache.org/jira/secure/attachment/12342488/LANG-281-fix.patch,06/Oct/06 23:26;bayard;LANG-281-test.patch;https://issues.apache.org/jira/secure/attachment/12342487/LANG-281-test.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2006-10-05 21:35:47.0,,,false,,,,,,,,,,,,,,34082,,,Sat Oct 07 00:23:28 UTC 2006,,,,,,0|i0d6cv:,74806,,,,,,,,"05/Oct/06 21:35;bayard;Setting for a 2.3 fix version (ie the version being worked on now). I'm starting to hate this class, yet another edge case.

Thanks for finding it though :)",06/Oct/06 23:06;bayard;Attached unit test.,06/Oct/06 23:26;bayard;Unit test attached.,"07/Oct/06 00:20;bayard;Attaching a fix. It's not a very good sign that I'm fixing this by deleting a block of code and discovering that no unit tests are suddenly failling. So I need to add more unit tests, and rethink things.

The block of code removed was meant to fix an overshooting when blindly adding 31 days instead of a known month number and I've also changed that to add the number of days in the previous month (with a big TODO to review it).

First step, make some unit tests to identify this case as apparantly I've not got them currently.","07/Oct/06 00:23;bayard;svn ci -m ""Adding a unit test for #LANG-281 and a fix. The fix involves removing the reduceAndCorrect method. It appears that this method was doing sod all - which is worrying as it used to be important. I'm guessing that it was a bad fix for a bug that was then subsequently fixed with other code. I'll create a JIRA issue to create more tests to test out the +31 block of code. "" 

Sending        src/java/org/apache/commons/lang/time/DurationFormatUtils.java
Sending        src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java
Transmitting file data ..
Committed revision 453818.",,,,,,,,,,,,,,,,,,,,,,,,,,
HashCodeBuilder throws java.lang.StackOverflowError when an object contains a cycle.,LANG-279,12350282,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,garydgregory,garydgregory,,19/Sep/06 20:16,16/Oct/13 08:55,07/Apr/19 20:37,29/Sep/06 20:47,,,,,2.3,,,,,0,,,,,,,,"See HashCodeBuilderTest#testReflectionObjectCycle()

The method is partially commented out.

java.lang.StackOverflowError
	at java.lang.ClassLoader.getCallerClassLoader(Native Method)
	at java.lang.Class.getDeclaredFields(Class.java:992)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
	at org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
	at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
	at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuild",Sun Java 1.3.1_15. Window XP SP2 + patches.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-09-29 20:47:35.0,,,false,,,,,,,,,,,,,,34033,,,Wed Aug 27 14:28:26 UTC 2008,,,,,,0|i0d6d3:,74807,,,,,,,,"29/Sep/06 20:47;ggregory@seagullsw.com;Fix already in CVS.
Please see HashCodeBuilderTest#testReflectionObjectCycle().","29/Sep/06 20:47;ggregory@seagullsw.com;Fix already in CVS.
Please see HashCodeBuilderTest#testReflectionObjectCycle().",27/Aug/08 14:28;bob fields;See related issue https://issues.apache.org/jira/browse/LANG-456. The registerObject method now causes a recursion in the non-reflection methods.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc for StringUtils.removeEnd is incorrect,LANG-278,12349705,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,skaffman,skaffman,12/Sep/06 12:09,16/Dec/09 08:50,07/Apr/19 20:37,12/Sep/06 15:26,2.1,,,,2.2,,lang.*,,,0,,,,,,,,"The javadoc for StringUtils.removeEnd(String, String) lists a number of examples, one of which is wrong:

StringUtils.removeEnd(""www.domain.com"", "".com."")  = ""www,domain""

The actual result of this is just ""www.domain.com""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-09-12 15:26:19.0,,,false,,,,,,,,,,,,,,147208,,,Tue Sep 12 15:26:19 UTC 2006,,,,,,0|i0d6db:,74808,,,,,,,,"12/Sep/06 15:26;bayard; svn ci -m ""Fixing javadoc example and adding a unit test to prove the example; as 
reported in #LANG-278"" src/test/org/apache/commons/lang/StringUtilsTest.java src/java/org/apache/commons/lang/StringUtils.java 
Sending        src/java/org/apache/commons/lang/StringUtils.java
Sending        src/test/org/apache/commons/lang/StringUtilsTest.java
Transmitting file data ..
Committed revision 442618.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Javadoc errors on StringUtils.splitPreserveAllTokens(String, char)",LANG-277,12348902,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,kgeis,kgeis,30/Aug/06 06:22,16/Dec/09 08:50,07/Apr/19 20:37,30/Aug/06 18:19,2.1,,,,2.2,,lang.*,,,0,,,,,,,,"In the Javadoc for StringUtils.splitPreserveAllTokens(String, char) there are a couple of mistakes.  I didn't check for similar mistakes in the similar functions with different signatures.


StringUtils.splitPreserveAllTokens(""a..b.c"", '.')   = [""a"", ""b"", ""c""]

should read

StringUtils.splitPreserveAllTokens(""a..b.c"", '.')   = [""a"", """", ""b"", ""c""]


These two lines have the same input giving different outputs.  I think that the input string on the second call should be ""a b c  "".

StringUtils.splitPreserveAllTokens(""a b c "", ' ')   = [""a"", ""b"", ""c"", """"]
StringUtils.splitPreserveAllTokens(""a b c "", ' ')   = [""a"", ""b"", ""c"", """", """"]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-08-30 18:19:36.0,,,false,,,,,,,,,,,,,,147207,,,Wed Aug 30 18:19:36 UTC 2006,,,,,,0|i0d6dj:,74809,,,,,,,,"30/Aug/06 18:19;bayard;Thanks for the report Ken.

The first issue has already been caught and fixed in SVN.

Second one now fixed (by adding another space to the end of the example).

svn ci -m ""Fixed 2nd javadoc bug mentioned in #LANG-277 and added more unit tests to match the javadoc examples""
Sending        src/java/org/apache/commons/lang/StringUtils.java
Sending        src/test/org/apache/commons/lang/StringUtilsTest.java
Transmitting file data ..
Committed revision 438574.   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Minor build and checkstyle changes,LANG-272,12345656,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,niallp,niallp,10/Jul/06 09:43,16/Oct/13 08:54,07/Apr/19 20:37,16/Jul/06 01:13,,,,,2.2,,,,,0,,,,,,,,"Attaching a patch for minor changes to the build:

1) Change project.properties so that the source distro unpacks to a different directory
2) Include checkstyle.properties and all the RELEASE-NOTES files in the source distro
3) Remove the exclusion of the ""text"" package from the source distro
4) Include the NOTICE.txt in the maven generated binary distro (and jar)

Althought the ant build is used to create the binary distro in the release process - I still think the maven generated binary distro should include the NOTICE.txt

Also attaching a patch to clean up the few minor checkstyle issues.",,,,,,,,,,,,,,,,,,,,,,,,,,10/Jul/06 09:48;niallp;commons-lang-2.2-build.txt;https://issues.apache.org/jira/secure/attachment/12336552/commons-lang-2.2-build.txt,10/Jul/06 09:48;niallp;commons-lang-2.2-checkstyle.txt;https://issues.apache.org/jira/secure/attachment/12336553/commons-lang-2.2-checkstyle.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2006-07-10 12:25:57.0,,,false,,,,,,,,,,,,,,147202,,,Sun Jul 16 01:13:18 UTC 2006,,,,,,0|i0d6dr:,74810,,,,,,,,"10/Jul/06 12:25;bayard;1, 2 and 4 look good. As do the checkstyle changes. Feel free to commit if you want, otherwise I'll hit them at some point.

3 is changing a target called 'dist-build-2.1'. Either we shoud leave it as it is, or remove the target itself.","10/Jul/06 19:01;niallp;I've committed the JavaDoc/Checkstyle changes and 1, 2 and 4.

Wrt to 3 (""Remove the exclusion of the ""text"" package from the source distro"") - looks like the target 'dist-build-2.1' should be removed. If we don't remove the exclusion in maven.xml and the ""dist-build"" target is used to build lang 2.2 then it will mean that the binary distro includes classes which are missing from the source distro.

  http://svn.apache.org/viewvc?view=rev&revision=209004

Anyway I'll leave it up to you as I'm not a lang dev - just trying to be pro-active and get my nitpicks in before a RC was done, rather than after :-)
","11/Jul/06 05:37;scolebourne;I'm not sure why we have the old release notes files hanging around. IMHO they should be deleted from svn not included in the release.

On the text package issue, we should be including it in the release, both bin and src","11/Jul/06 12:40;niallp;Old release notes can be useful if you're thinking of upgrading or need to upgrade because of a bug - anyway I'll leave it up to you lang devs to decide.

I've removed the remaining bits that were put in to exclude the ""org.apache.commons.lang.text"" package from version 2.1",16/Jul/06 01:13;bayard;Release notes removed.,,,,,,,,,,,,,,,,,,,,,,,,,,
LocaleUtils test fails under Mustang,LANG-271,12345620,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,scolebourne,bayard,bayard,08/Jul/06 23:51,10/Aug/06 21:25,07/Apr/19 20:37,10/Aug/06 21:25,2.1,,,,2.2,,,,,0,,,,,,,,"Testsuite: org.apache.commons.lang.LangTestSuite
Tests run: 635, Failures: 1, Errors: 0, Time elapsed: 4.467 sec

------------- Standard Output ---------------

------------- ---------------- ---------------
Testcase: testLanguagesByCountry(org.apache.commons.lang.LocaleUtilsTest):      FAILED
expected:<1> but was:<2>
junit.framework.AssertionFailedError: expected:<1> but was:<2>
        at org.apache.commons.lang.LocaleUtilsTest.assertLanguageByCountry(LocaleUtilsTest.java:396)
        at org.apache.commons.lang.LocaleUtilsTest.testLanguagesByCountry(LocaleUtilsTest.java:426)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",JDK 1.6 - http://www.java.net/download/jdk6/binaries/jdk-6-beta2-bin-b77-linux-i586-24_mar_2006.bin,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-07-21 08:41:28.0,,,false,,,,,,,,,,,,,,147201,,,Thu Aug 10 21:25:47 UTC 2006,,,,,,0|i0d6dz:,74811,,,,,,,,"21/Jul/06 05:28;bayard;In Java 1.6, the US languages go from ""en_US"" to ""en_US, es_US"".

This is a problem once we need to compile on 1.6, but it doesn't cause a problem I think for the usage of a Lang 2.2 jar under the 1.6 JVM.

So punting this to 2.3.",21/Jul/06 08:41;scolebourne;We should just change the test to a country which is truly single language.,10/Aug/06 21:25;scolebourne;Change from US to GB to get one language,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[patch] Cannot build tests from latest SVN,LANG-265,12345294,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,yozh,yozh,02/Jul/06 03:14,06/Feb/07 23:47,07/Apr/19 20:37,03/Jul/06 23:36,,,,,2.2,,,,,0,,,,,,,,"Invoking ant test results in error message:

===
    [javac] /Users/yozh/devel/left/commons-lang/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java:969: reference to reflectionEquals is ambiguous, both method reflectionEquals(java.lang.Object,java.lang.Object,java.util.Collection) in org.apache.commons.lang.builder.EqualsBuilder and method reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[]) in org.apache.commons.lang.builder.EqualsBuilder match
    [javac]         assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, null));
    [javac]                                  ^
    [javac] /Users/yozh/devel/left/commons-lang/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java:445: reference to reflectionHashCode is ambiguous, both method reflectionHashCode(java.lang.Object,java.util.Collection) in org.apache.commons.lang.builder.HashCodeBuilder and method reflectionHashCode(java.lang.Object,java.lang.String[]) in org.apache.commons.lang.builder.HashCodeBuilder match
    [javac]         assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, null));
===",,,,,,,,,,,,,,,,,,,,,,,,,,02/Jul/06 03:16;yozh;commons-lang-ambiguous-reference-stepancheg.diff;https://issues.apache.org/jira/secure/attachment/12336237/commons-lang-ambiguous-reference-stepancheg.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2006-07-03 23:36:50.0,,,false,,,,,,,,,,,,,,147195,,,Mon Jul 03 23:36:50 UTC 2006,,,,,,0|i0d6e7:,74812,,,,,,,,02/Jul/06 03:16;yozh;The patch.,"03/Jul/06 23:36;bayard;Looks like this has been applied/fixed separately. Thanks Stepan.

r418568 | scolebourne | 2006-07-02 03:46:52 -0700 (Sun, 02 Jul 2006) | 1 line
Changed paths:
   M /jakarta/commons/proper/lang/trunk/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java
   M /jakarta/commons/proper/lang/trunk/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ToStringBuilder/HashCodeBuilder javadoc code examples,LANG-264,12344816,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,trippcr,trippcr,23/Jun/06 04:47,06/Feb/07 23:47,07/Apr/19 20:37,23/Jun/06 06:02,,,,,2.2,,,,,0,,,,,,,,"The example code illistrating the use of ToStringBuidler and HashCodeBuilder reference a 'smoker' field of the example Person class, however the field is actually named 'isSmoker'.  They propably should match each other.
",,,,,,,,,,,,,,,,,,,,,,,,,,23/Jun/06 04:52;trippcr;HashCodeBuilderComment.patch;https://issues.apache.org/jira/secure/attachment/12335799/HashCodeBuilderComment.patch,23/Jun/06 04:49;trippcr;ToStringBuilderComment.patch;https://issues.apache.org/jira/secure/attachment/12335798/ToStringBuilderComment.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,,,,2006-06-23 06:02:30.0,,,false,,,,,,,,,,,,,,147194,,,Fri Jun 23 06:02:30 UTC 2006,,,,,,0|i0d6ef:,74813,,,,,,,,23/Jun/06 04:49;trippcr;Here's a patch to change the definitions to 'smoker' instead of 'isSmoker' from the trunk.,"23/Jun/06 06:02;bayard;Done, thanks Corey.

svn ci -m ""Fixing isSmoker attribute name to smoker to match the co
de example in both of these files - spotted by Corey Tripp in LANG-264""
Sending        builder/HashCodeBuilder.java
Sending        builder/ToStringBuilder.java
Transmitting file data ..
Committed revision 416495.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Use of enum prevents a classloader from being garbage collected resuling in out of memory exceptions.,LANG-262,12343931,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,,neilredway,neilredway,05/Jun/06 15:40,06/Feb/07 23:47,07/Apr/19 20:37,07/Dec/06 21:43,,,,,2.3,,,,,0,,,,,,,,"When an enum is created it is placed in the static hashmap - cEnumClasses.  If the enum is created from a classloader which has a limited lifetime then due to the strong reference the classloader is never garbage collected resulting in a memory leak.  

I believe that making the cEnumClasses a WeakHashMap should resolve the problem.
",All,,,,,,,,,,,,,,,,,,,,,,,,,07/Dec/06 20:33;bayard;ClassMapping.java;https://issues.apache.org/jira/secure/attachment/12346708/ClassMapping.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,2006-06-08 15:42:52.0,,,false,,,,,,,,,,,,,,34078,,,Thu Dec 07 21:43:22 UTC 2006,,,,,,0|i0d6en:,74814,,,,,,,,"08/Jun/06 15:42;bayard;In an effort to get 2.2 out sooner rather than later, I'm assiging all the Enum issues to 2.3. There's been no work on them currently and might be best to focus on them in a 2.3 release instead of trying to squeeze them into the 2.2 release.

Hopefully this will keep the 2.3 release scope pretty tight.","19/Sep/06 21:17;bayard;svn ci -m ""Applying requested fix from Neil Redway in #LANG-262"" src/java/
Sending        src/java/org/apache/commons/lang/enum/Enum.java
Sending        src/java/org/apache/commons/lang/enums/Enum.java
Transmitting file data ..
Committed revision 447975.","19/Sep/06 21:22;bayard;Thanks Neil, I've applied that to the trunk (which is now for 2.3). It sounds like a completely plausible fix to me, though Stephen suggested on the mailing list that :

""I don't know whether a WeakHashMap works when the keys are Class objects
(as Class objects aren't exactly run-of the-mill). ""

Which is also pretty believable.

Could you try out the nightly build from tonight? The 0920 build in:

http://people.apache.org/builds/jakarta-commons/nightly/commons-lang/","06/Dec/06 09:01;bayard;Not heard from Neil as to whether it fixed his problem. Understandable given that it took a couple of months to get passed 2.2 and apply the fix to SVN.

This is a research class that I _think_ shows that WeakHashMaps are okay with Classes as keys provided the ClassLoader is available for garbage collection. 

I'm a bit unsure of it though because I don't understand why accessing the class through the HashMap API is giving me null as the classes ClassLoader, yet when it was loaded it was the correct FooClassLoader.

Any thoughts? Is this proof or just crap?","07/Dec/06 20:33;bayard;Took another look at this. I was being dumb and calling getClass() on the key when it came back from the map; and as it was the Class object itself that meant it returned java.lang.Class from the bootstrap loader.

Have deleted the original and reattached a version with the correct debug statement. This class shows that the patch should work:

1) Load a class from a different classloader.
2) Make it the key in a WeakHashMap.
3) Remove references to the original classloader.
4) Let System.gc occur.
5) The WeakHashMap is empty.","07/Dec/06 21:43;bayard;I think my research class shows that things should work. Making it a unit test seems a lot more painful, which I'm finding very hard to have the energy for. Resolving this as fixed.",,,,,,,,,,,,,,,,,,,,,,,,,
Error in an example in the javadoc of the StringUtils.splitPreserveAllTokens() method,LANG-261,12343737,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,cimballi,cimballi,01/Jun/06 00:10,16/Dec/09 08:50,07/Apr/19 20:37,06/Jun/06 02:37,2.1,,,,2.2,,lang.*,,,0,,,,,,,,"There is an error in the javadoc of the org.apache.commons.lang.StringUtils.splitPreserveAllTokens(String str,char separatorChar) method.

Here the original line :
StringUtils.splitPreserveAllTokens(""a..b.c"", '.')   = [""a"", ""b"", ""c""]

But it should be :
StringUtils.splitPreserveAllTokens(""a..b.c"", '.')   = [""a"", """", ""b"", ""c""]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-06-06 02:37:22.0,,,false,,,,,,,,,,,,,,147192,,,Tue Jun 06 02:37:22 UTC 2006,,,,,,0|i0d6ev:,74815,,,,,,,,"06/Jun/06 02:37;bayard;Taken care of. Threw a unit test in because it's a Monday and they're half price:

svn ci -m ""Fixing Javadoc and adding Unit Test for the example for #LANG-261. "" src/test/org/apache/comm
ons/lang/StringUtilsTest.java src/java/org/apache/commons/lang/StringUtils.java
Sending        src/java/org/apache/commons/lang/StringUtils.java
Sending        src/test/org/apache/commons/lang/StringUtilsTest.java
Transmitting file data ..
Committed revision 411898.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ValuedEnum.compareTo(Object other) not typesafe - it easily could be...,LANG-259,12343351,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,ralfhauser,ralfhauser,22/May/06 21:10,21/Oct/06 11:26,07/Apr/19 20:37,18/Aug/06 22:21,2.1,,,,2.2,,,,,0,,,,,,,,"int org.apache.commons.lang.enums.ValuedEnum.compareTo(Object other)
 is not typesafe - if the int-values are the same, it will return ""0"" even for two totally different sub-classes of ValuedEnum",all,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,2006-06-08 15:42:51.0,,,false,,,,,,,,,,,,,,147190,,,Fri Aug 18 22:21:34 UTC 2006,,,,,,0|i0d6f3:,74816,,,,,,,,"22/May/06 23:00;ralfhauser;Before just comparing the 
   iValue - ((ValuedEnum) other).iValue
it should be checked that the classes are the same!

		Enum otherEnum = (Enum) other;
		String thisClassName = this.getClass().getName();
		String otherClassName = otherEnum.getClass().getName();
		if (!otherClassName.equals(thisClassName)) {
			log.warn(""enum classes are not equal \"""" + thisClassName + ""\"" <> \"""" + otherClassName + ""\"""");
			throw new ClassCastException(""enum classes are not equal \"""" + thisClassName + ""\"" <> \"""" + otherClassName
					+ ""\"""");
		}

Furthermore, it might be recommendable to make some methods of org.apache.commons.lang.enums.Enum at least ""protected"" such that ValuedEnum can use them too:

If available, I would love to also have the more sophisticated checks, Enum.compareTo(Object other) does also used in ValuedEnum.compareTo(Object other):

if (res == 0) {
			String otherName = otherEnum.getName();
			if (other.getClass() != this.getClass()) {
				if (other.getClass().getName().equals(this.getClass().getName())) {
					return iName.compareTo(getNameInOtherClassLoader(other));
				}
			}
			res = iName.compareTo(otherName);
			if (res != 0) {
				log.warn(""enum names are not equal \"""" + otherName + ""\"" <> \"""" + this.getName() + ""\"""");
				throw new ClassCastException(""enum names are not equal \"""" + otherName + ""\"" <> \"""" + this.getName()
						+ ""\"""");
                       }
}","22/May/06 23:45;ralfhauser;furthermore, it would be great if the classe's init would also detect if multiple int values are the same:

e.g.

 public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( ""Java 1.0"", JAVA1_0_VALUE );
 public static final JavaVersionEnum  JAVA1_0_=  = new JavaVersionEnum( ""Java 1.0.0"", JAVA1_0_VALUE );","22/May/06 23:47;ralfhauser;similarly, it should detect double entries of this kind...

public static final int  JAVA1_0_VALUE  = 100;
public static final int  JAVA1_0_0VALUE  = 100;
...

 public static final JavaVersionEnum JAVA1_0 = new JavaVersionEnum( ""Java 1.0"", JAVA1_0_VALUE );
 public static final JavaVersionEnum JAVA1_0_0 = new JavaVersionEnum( ""Java 1.0.0"", JAVA1_0_0VALUE );

------
ps, the last line in the previous comment should have been

public static final JavaVersionEnum JAVA1_0_0 = new JavaVersionEnum( ""Java 1.0.0"", JAVA1_0_VALUE );",23/May/06 18:03;ralfhauser;see also http://issues.apache.org/struts/browse/SB-20 SB-20 and LANG-258,"08/Jun/06 15:42;bayard;In an effort to get 2.2 out sooner rather than later, I'm assiging all the Enum issues to 2.3. There's been no work on them currently and might be best to focus on them in a 2.3 release instead of trying to squeeze them into the 2.2 release.

Hopefully this will keep the 2.3 release scope pretty tight.","10/Aug/06 22:43;scolebourne;Does anyone believe that the classloader tricks in Enum are useful? They seem like a Bad Idea now, and are broken, even for equals.

Is it  too backwards incompatible to remove the classloader code?","18/Aug/06 22:21;scolebourne;Fix compareTo to check type
rv 432748",,,,,,,,,,,,,,,,,,,,,,,,
new StringUtils.split methods that split on the whole separator string,LANG-158,12341110,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,hotfusionman@yahoo.com,hotfusionman@yahoo.com,22/Nov/03 14:33,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,,,,,2.1,,lang.*,,,0,,,,,,,,"In other languages, the string split method can split a string using a whole
string as the delimiter rather than using the separator string as a list of
characters at which to split the string-to-be-split.  I've implemented these
methods a few times, and I've given them the signature split( String, String,
boolean[, int] ) so that they can delegate to the existing lang split( String,
String[, int] ) methods where appropriate.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,23/Nov/03 06:51;hotfusionman@yahoo.com;ASF.LICENSE.NOT.GRANTED--StringUtils.java.diff.txt;https://issues.apache.org/jira/secure/attachment/12332628/ASF.LICENSE.NOT.GRANTED--StringUtils.java.diff.txt,22/Nov/03 14:34;hotfusionman@yahoo.com;ASF.LICENSE.NOT.GRANTED--StringUtils.java.diff.zip;https://issues.apache.org/jira/secure/attachment/12332626/ASF.LICENSE.NOT.GRANTED--StringUtils.java.diff.zip,23/Nov/03 06:51;hotfusionman@yahoo.com;ASF.LICENSE.NOT.GRANTED--StringUtilsTest.java.diff.txt;https://issues.apache.org/jira/secure/attachment/12332627/ASF.LICENSE.NOT.GRANTED--StringUtilsTest.java.diff.txt,,,,,,,,3.0,,,,,,,,,,,,,,,,24910.0,,,2003-11-23 05:59:47.0,,,false,,,,,,,,,,,,,,147089,,,Wed Apr 26 13:10:49 UTC 2006,,,,,,0|i0d6fb:,74817,,,,,,,,"22/Nov/03 14:34;hotfusionman@yahoo.com;Created an attachment (id=9237)
tests and patch to implement new methods
","23/Nov/03 05:59;phil@steitz.com;I can't read the patch.  Can you resubmit it as plain text, please?","23/Nov/03 06:51;hotfusionman@yahoo.com;Created an attachment (id=9245)
Resubmitting test case patch in plain text format.
","23/Nov/03 06:51;hotfusionman@yahoo.com;Created an attachment (id=9246)
Resubmitting implementation patch in plain text format.
","29/Nov/03 07:26;hotfusionman@yahoo.com;Given the changes made in response to COM-960, should I submit new patches based on the 
state of CVS now?  The old patches did not change the contract of this family of methods, and 
neither would new ones.","29/Nov/03 21:30;scolebourne@joda.org;There is an informal rule in StringUtils that we don't use a boolean flag to 
distinguish between two method variants. Instead we use an alternate 
descriptive name. splitByString() may be a possible name.

Also, any patches should use the style of the surrounding code - brackets at 
end on line in this case.","30/Nov/03 01:47;hotfusionman@yahoo.com;Darn, I was hoping this would be a generalization of the existing split() family, and the way I came 
up with to delegate existing behavior to the existing methods was to change the method 
signature.

I'm happy to change the method name if that's what's needed (and reformat opening brace 
placement).","22/Aug/04 10:42;bayard;Methods committed as splitByWholeSeparator method. Opinions and a better name
are both desired.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,
Removed compile warning in ObjectUtils,LANG-157,12340535,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,05/Feb/03 06:47,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:42,2.0,,,,2.0,,,,,0,,,,,,,,"In Eclipse 2.1.M4, you get the following warning compiling 
java/org/apache/commons/lang/ObjectUtils.java:

Access to enclosing constructor ObjectUtils.Null() is emulated by a synthetic 
accessor method. Increasing its visibility will improve your performance
	ObjectUtils.java	Jakarta Commons 
Lang/src/java/org/apache/commons/lang	line 85

Attaching patch.

FYI, there are currently no other such warnings in the ""src/java"" tree. There 
are plenty of warnings in the ""src/test"" tree, which I am not as much 
concerned with.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,05/Feb/03 06:50;ASF.LICENSE.NOT.GRANTED--patchfile.txt;https://issues.apache.org/jira/secure/attachment/12332130/ASF.LICENSE.NOT.GRANTED--patchfile.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,16787.0,,,2003-02-05 06:50:42.0,,,false,,,,,,,,,,,,,,147088,,,Sun Feb 23 04:21:21 UTC 2003,,,,,,0|i0d6fj:,74818,,,,,,,,"05/Feb/03 06:50;ggregory@seagullsw.com;Created an attachment (id=4731)
Patch for ObjectUtils.java v.1.7
","23/Feb/03 04:21;scolebourne@joda.org;Patch applied, thanks
Stephen",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[LANG] - o.a.c.lang.enum.ValuedEnum: 'enum'is a keyword in JDK1.5.0,LANG-156,12341787,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,agallardo@agsoftware.dnsalias.com,agallardo@agsoftware.dnsalias.com,07/Oct/04 05:24,16/May/06 12:19,07/Apr/19 20:37,16/May/06 12:19,2.0,,,,2.1,,,,,0,,,,,,,,"I meet this error while trying to compile cocoon code using JDK1.5.0:
 /cocoon-2.1/src/blocks/forms/java/org/apache/cocoon/forms/event/ProcessingPhase.java:22:
as of release 1.5, 'enum' is a keyword, and may not be used as an identifier
(try -source 1.4 or lower to use 'enum' as an identifier)
import org.apache.commons.lang.enum.ValuedEnum;

Seems like JDK1.5.0 don't like the enum keyword inside the import statement.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31572.0,,,2004-10-07 05:35:01.0,,,false,,,,,,,,,,,,,,147087,,,Wed Apr 26 13:10:49 UTC 2006,,,,,,0|i0d6fr:,74819,,,,,,,,"07/Oct/04 05:35;scolebourne@joda.org;Try using the CVS version where the enum package is renamed to enums.
(duplicate report)","07/Oct/04 05:42;agallardo@agsoftware.dnsalias.com;When is planned a new ""commons-lang"" release? We (Cocoon) are planning a new
release and we try to avoid CVS versions libraries.....","07/Oct/04 09:13;bayard;It's ASAP, tying the loose ends and getting close to calling for a release.
However, that translates as probably around the end of the year if I had to make
a solid bet.",08/Oct/04 05:40;scolebourne@joda.org;We need to do better than xmas. Does Cocoon have a date/timescale in mind?,"08/Oct/04 06:05;agallardo@agsoftware.dnsalias.com;I already committed a CVS version of commons-lang into cocoon:

http://svn.apache.org/viewcvs.cgi/cocoon/branches/BRANCH_2_1_X/lib/core/commons-lang-2.0-20041007T2305.jar?root=Apache-SVN

I guess we will release in the next 15-30 days. Of course will be better if we
have a released version. Can you release before us? :-D","08/Oct/04 06:14;scolebourne@joda.org;15 days, probably not. 30 should be possible.
Frankly, having someone needing a release will help the process ;-)","08/Oct/04 08:30;bayard;The very least, we should have an RC1 out quickly.

My first child is due to be born in 2 weeks time and my personal goal is to have
Lang 2.1 RC1 released before hand.","08/Oct/04 15:12;agallardo@agsoftware.dnsalias.com;Congratulations! That is great!

I think a RC1 is better for projects than just a CVS version. Unfortunately, I
guess I cannot be much useful in jakarta-commons, since I am not committer.
Anyway, if you need help for the release, let me know!. I will be very glad to
help. :-D","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,
[lang] maven-beta10 checkstyle problem,LANG-155,12340867,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mhawthorne@alumni.pitt.edu,mhawthorne@alumni.pitt.edu,23/Jul/03 02:11,16/May/06 12:37,07/Apr/19 20:37,16/May/06 12:37,2.0,,,,2.0,,,,,0,,,,,,,,"maven beta 10 uses the newest version of checkstyle, which no longer supports
the property configuration format.  It expects an xml file.  So, the line in
lang's project.properties which points to checkstyle.properties is causing the
plugin to fail.","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,23/Jul/03 02:12;mhawthorne@alumni.pitt.edu;ASF.LICENSE.NOT.GRANTED--project.properties.patch;https://issues.apache.org/jira/secure/attachment/12332431/ASF.LICENSE.NOT.GRANTED--project.properties.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,21809.0,,,2003-07-24 11:55:19.0,,,false,,,,,,,,,,,,,,147086,,,Sat Jul 26 20:24:54 UTC 2003,,,,,,0|i0d6fz:,74820,,,,,,,,"23/Jul/03 02:12;mhawthorne@alumni.pitt.edu;Created an attachment (id=7459)
a tiny patch which comments out the checkstyle.properties line
","24/Jul/03 11:55;phil@steitz.com;Another way to deal with this problem is to create 

1. an xml config file, checkstyle.xml containing the properties in
checkstyle.properties

2. add a line to your local build.properties file (create one if you aren't
using one) that sets maven.checkstyle.properties = checkstyle.xml. This will
override the setting in project.properties.  

That way, the maven checkstyle plugin will still work for people using the old
version.

I am no maven expert, but the above is working for me.  It would probably be a
good idea for someone to add a good checkstyle.xml to cvs.","24/Jul/03 12:21;mhawthorne@alumni.pitt.edu;Your suggestion is without a doubt the correct long term solution.  A week or so
ago when maven-b10 was released, I looked into the new checkstyle configuration
format, but didn't have to time to learn the new syntax.  My solution was meant
to be a quick fix until a proper checkstyle.xml could be constructed.","26/Jul/03 20:24;scolebourne@joda.org;Applied.
<sarcasm>Nice to see maven makes life easier for project management.</sarcasm>",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang][patch] Remove redundant check for null separator in StringUtils#join,LANG-154,12341276,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,janekdb@yahoo.co.uk,janekdb@yahoo.co.uk,16/Feb/04 05:17,16/Oct/13 08:55,07/Apr/19 20:37,16/Dec/09 08:50,,,,,2.1,,lang.*,,,0,,,,,,,,"The method guards against a null separator so the later check for null is not
required.

(Thanks to findbugs 0.7.1)

patch attached.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,16/Feb/04 05:18;janekdb@yahoo.co.uk;ASF.LICENSE.NOT.GRANTED--StringUtils.java-patch-remove-redundant-nulllity-check;https://issues.apache.org/jira/secure/attachment/12332746/ASF.LICENSE.NOT.GRANTED--StringUtils.java-patch-remove-redundant-nulllity-check,,,,,,,,,,1.0,,,,,,,,,,,,,,,,26961.0,,,2004-02-17 07:48:48.0,,,false,,,,,,,,,,,,,,147085,,,Wed Apr 26 13:10:42 UTC 2006,,,,,,0|i0d6g7:,74821,,,,,,,,"16/Feb/04 05:18;janekdb@yahoo.co.uk;Created an attachment (id=10369)
Removes redundant null check in StringUtls#jion
",17/Feb/04 07:48;ggregory@seagullsw.com;Patch applied and then some. Thanks!,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Can't XMLDecode an Enum,LANG-153,12342108,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,kevin.gilpin@alum.mit.edu,kevin.gilpin@alum.mit.edu,12/Mar/05 00:26,06/Feb/07 23:47,07/Apr/19 20:37,19/Sep/06 21:43,2.0,,,,2.3,,,,,0,,,,,,,,"I am encoding and decoding Enums using java.beans.XMLEncoder/Decoder.

When an Enum is decoded, I am using the following to get the instance. The
enumClass name and the enum name are stored in the serialized XML file, then
used to restore the bean at read time
        return EnumUtils.getEnum(enumClass, name);

The problem is that the Enum.cEnumClasses map may not contain an entry for the
Enum class yet, despite the fact that the Class for the enum has been loaded.

If I loop through the Class.fields using reflection and get(null) the value for
each one, then the cEnumClasses is populated and getEnum works.","Operating System: Windows 2000
Platform: PC",,,,,,,,,,,,,LANG-76,,,,,,,,,,,,16/Mar/06 03:31;cveilleux;ASF.LICENSE.NOT.GRANTED--CommonsLangBug33965Test.java;https://issues.apache.org/jira/secure/attachment/12333413/ASF.LICENSE.NOT.GRANTED--CommonsLangBug33965Test.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,33965.0,,,2005-03-16 08:00:27.0,,,false,,,,,,,,,,,,,,34111,,,Tue Sep 19 21:43:45 UTC 2006,,,,,,0|i0d6gf:,74822,,,,,,,,"16/Mar/05 08:00;scolebourne@joda.org;Can you write a test case to clarify the issue for us, thanks.","16/Mar/06 03:31;cveilleux;Created an attachment (id=17904)
Test case

A test case showing this bug.

You need to compile it using ""target 1.5"". When using ""target 1.4"", everything
works as expected.","16/Mar/06 15:08;bayard;Sounds like it might be linked to:

http://issues.apache.org/bugzilla/show_bug.cgi?id=36666",26/Apr/06 11:00;bayard;Removing from NEEDINFO - which means moving to ASSIGNED in Bugzilla.,"08/Jun/06 15:42;bayard;In an effort to get 2.2 out sooner rather than later, I'm assiging all the Enum issues to 2.3. There's been no work on them currently and might be best to focus on them in a 2.3 release instead of trying to squeeze them into the 2.2 release.

Hopefully this will keep the 2.3 release scope pretty tight.",19/Sep/06 21:36;bayard;LANG-76 seems to be the right place for Cedric's attached test; not this issue.,"19/Sep/06 21:43;bayard;The XMLDecoder part of this is not important as far as I can tell, the underlying problem is the class loading issue described in LANG-76.",19/Sep/06 21:43;bayard;Resolving this as a duplicate of the LANG-76 class loading issue for Enums.,,,,,,,,,,,,,,,,,,,,,,,
"[lang] DurationFormatUtils.formatDurationWords ""11 <unit>s"" gets converted to ""11 <unit>""",LANG-152,12342730,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,23/Nov/05 09:17,16/Oct/13 08:55,07/Apr/19 20:37,06/Feb/07 23:47,,,,,2.2,,,,,0,,,,,,,,"The method DurationFormatUtils.formatDurationWords incorrectly outputs numbers
ending in ""1"" without a plural ""s"" postfix for the time unit.

Added a fix and tests that ""1 <unit>s"" gets converted to ""1 <unit>"" but that ""11
<unit>s"" is left alone.","Operating System: Windows XP
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37596.0,,,2005-11-23 09:20:40.0,,,false,,,,,,,,,,,,,,34087,,,Mon Mar 06 15:46:24 UTC 2006,,,,,,0|i0d6gn:,74823,,,,,,,,23/Nov/05 09:20;ggregory@seagullsw.com;Target Milestone: 2.2.,06/Mar/06 15:46;bayard;*** COM-2382 has been marked as a duplicate of this bug. ***,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] General case: infinite loop: ToStringBuilder.reflectionToString,LANG-151,12340677,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bugzilla@jackwasey.com,bugzilla@jackwasey.com,26/Apr/03 01:29,16/May/06 12:40,07/Apr/19 20:37,16/May/06 12:40,2.0,,,,2.0,,,,,0,,,,,,,,"Something like the following structure results in an infinite loop:

cClass Alpha {
Beta beta;
public toString() {
return ToStringBuilder.reflectionToString
}
}

class Beta {
Alpha alpha;
public toString() {
return ToStringBuilder.reflectionToString
}

}

Something like the following structure results in an infinite loop:

cClass Alpha {
Beta beta;
public toString() {
return ToStringBuilder.reflectionToString
}
}

class Beta {
Alpha alpha;
public toString() {
return ToStringBuilder.reflectionToString
}

}

Bug 15976 refers to inner classes - in fact any mutually referential classes
will spin out into an infinite loop. (Discovered this using two Hibernate
persistent beans.) refers to inner classes - in fact any mutually referential classes
will spin out into an infinite loop. (Discovered this using two Hibernate
persistent beans.)","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,19331.0,,,2003-04-26 08:35:09.0,,,false,,,,,,,,,,,,,,147084,,,Wed Apr 26 13:08:06 UTC 2006,,,,,,0|i0d6gv:,74824,,,,,,,,"26/Apr/03 08:35;mohankishore@yahoo.com;Bug 15976 seems to be incorrect. 

And what is proposed resolution? I mean, the same situation would arise, even 
if the ToStringBuilder was not used and the classes used each others toString() 
method recursively... seems to be incorrect. 

And what is proposed resolution? I mean, the same situation would arise, even 
if the ToStringBuilder was not used and the classes used each others toString() 
method recursively...","26/Apr/03 08:36;mohankishore@yahoo.com;I meant, that the bug# provided in the original comment seems to be incorrect. 
It does not refer to inner classes etc.","23/Jun/03 23:21;ggregory@seagullsw.com;This has been fixed in the nightly build for quite some time as I notice that
this report is marked for version 1.0Alpha. Can you please check your case
against a current build? Thanks.","24/Jun/03 00:27;ggregory@seagullsw.com;For an example test, see the method
ToStringBuilderTest.testReflectionObjectCycle() v 1.8. 

I would like to close thie PR if the reporter (Jack Wasey) could confirm that
the current build solves the issue in his code.","21/Aug/03 20:22;eiichiro.takahashi@ulsystems.co.jp;Hello. I found similar bug.
I'm not good at English.
So, if you found ""syntax error"", please ignore it. ;-)

---------------------------------------------------------------
private static class Alpha{
  private Alpha alpha;
  public Alpha(){
    this.alpha = this;
  }

  public String toString(){
    return ToStringBuilder.reflectionToString(this);
  }
}
---------------------------------------------------------------

This code ends with StackOverflowError. My environment is ...

System.out.println("""" + ToStringBuilder.class.getPackage
().getImplementationVersion()); returns ""1.0.1"".

Thanks.
",27/Jul/04 04:48;ggregory@seagullsw.com;Closing. This was fixed a long time ago.,"26/Apr/06 13:08;bayard;Not entirely sure, but going with 2.0 as the fix version for this.",,,,,,,,,,,,,,,,,,,,,,,,
[lang] StringEscapeUtils.unescapeHtml skips first entity after standalone ampersand,LANG-150,12342894,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,duy.dao@azonline.ch,duy.dao@azonline.ch,08/Feb/06 23:03,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.1,,,,2.2,,,,,0,,,,,,,,"StringEscapeUtils.unescapeHtml skips the first entity after a standalone ampersand.

Code:
System.out.println(
StringEscapeUtils.unescapeHtml(""test & &auml; &ouml;"")
);

Output:
test & &auml; ö

Expected output:
test & ä ö","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,06/Mar/06 09:14;trejkaz;ASF.LICENSE.NOT.GRANTED--commons-lang-entity-spaces.patch;https://issues.apache.org/jira/secure/attachment/12334019/ASF.LICENSE.NOT.GRANTED--commons-lang-entity-spaces.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,38569.0,,,2006-03-06 09:14:54.0,,,false,,,,,,,,,,,,,,34030,,,Tue Apr 18 14:24:56 UTC 2006,,,,,,0|i0d6h3:,74825,,,,,,,,"06/Mar/06 09:14;trejkaz;Created an attachment (id=17838)
Patch to work around this issue

This patch works around spaces being between the '&' and the ';'.  To be more
correct, it should probably ensure that all characters between the '&' and ';'
are valid entity characters, but in most cases the offending character is a
space.","18/Apr/06 13:41;bayard;Recreated issue with unit test. The proposed solution is too simple - we need to
be able to handle all situations, not just times when there is a space after the &. ","18/Apr/06 14:24;bayard;Fixed by checking whether an & is closer than the subsequent ;. If so, then skip
onwards. Also a problem in unescapeXml.

svn ci -m ""Fixing issue #38569""
Sending        src/java/org/apache/commons/lang/Entities.java
Sending        src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
Transmitting file data ..
Committed revision 394875.   ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Nestable.indexOfThrowable(Class) uses Class.equals() to match,LANG-149,12341669,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,shorn.tolley@nrm.qld.gov.au,shorn.tolley@nrm.qld.gov.au,30/Aug/04 07:35,16/May/06 12:21,07/Apr/19 20:37,16/May/06 12:21,2.0,,,,2.1,,,,,0,,,,,,,,"The indexOfThrowable() method should use Class.isAssignableFrom() to find the
nested esception so that it can find subclasses of the given exception.

Or alternatively, the javadoc should state the usage of Class.equals()
explicitly so that people that go looking for SQLExceptions know that the method
is useless to them and that they'll need to write their own.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,30929.0,,,2004-09-30 13:23:49.0,,,false,,,,,,,,,,,,,,147083,,,Wed Apr 26 13:11:04 UTC 2006,,,,,,0|i0d6hb:,74826,,,,,,,,"30/Sep/04 13:23;bayard;This seems logical to me.

throwables[i].getClass().equals(type)   changed to
type.isAssignableFrom(throwables[i].getClass()) in ExceptionUtils and NestableDelegate.","30/Sep/04 13:51;bayard;Reopening for the moment. It breaks tests (I foolishly had only the Time tests running from previous 
dev work) and I want to get community opinion.","17/Oct/04 00:49;scolebourne@joda.org;I changed the behaviour of Nestable, but left ExceptionUtils alone. Instead, in 
ExceptionUtils I added a parallel method, indexOfType. This should cover the 
use cases and some measure of backwards compatability.","26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Performance modifications on StringUtils.replace,LANG-148,12342547,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mchyzer@yahoo.com,mchyzer@yahoo.com,10/Sep/05 05:46,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,,,,,2.2,,lang.*,,,0,,,,,,,,"I dont know how picky you are about performance, but I think it would be nice 
for methods like this not to create new objects (StringBuffers) and copy over, 
if it doesnt need to (e.g. if what you are searching for is not in the ""text"" 
String).  Also, if the text is empty, we can return it right away.  And, my 
profiler gets two StringBuffers and an arrayCopy here sometimes since we only 
allocate enough for the original String.  I think overall it is better to 
allocate a little more (+20%) for the StringBuffer to reduce this possibility 
and only have 1 StringBuffer to be garbage collected.  Feel free to pick and 
choose from any of these ideas.  :)

public static String replace(String text, String repl, String with, int max) {


could be written as:

  public static String replace(String text, String repl, String with, int max) 
{
    if (isEmpty(text) || isEmpty(repl) || with == null || max == 0) {
      return text;
    }
    int start = 0, end = text.indexOf(repl, start);
    if (end == -1) {
      return text;
    }
    //add a bit of padding so we reduce the StringBuffer extend capacity
    StringBuffer buf = new StringBuffer(text.length() 
        + (text.length() < 20 ? 4 : text.length()/5));
    while (end != -1) {
      buf.append(text.substring(start, end)).append(with);
      start = end + repl.length();

      if (--max == 0) {
        break;
      }
      end = text.indexOf(repl, start);
    }
    buf.append(text.substring(start));
    return buf.toString();
  }


I tested it on the test cases in the javadoc and it worked fine.

Thanks!
Chris","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36583.0,,,2005-09-10 18:37:30.0,,,false,,,,,,,,,,,,,,34067,,,Sat Sep 10 18:37:30 UTC 2005,,,,,,0|i0d6hj:,74827,,,,,,,,"10/Sep/05 18:37;scolebourne@joda.org;Code changed, based on code below, but with different algorithm for sizing.
Please test this algorithm to see if it still helps with your performance issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.chopNewLine - StringIndexOutOfBoundsException,LANG-147,12340777,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,six4three@hotmail.com,six4three@hotmail.com,10/Jun/03 23:07,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.0,,lang.*,,,0,,,,,,,,"StringUtils.chopNewLine doesn't handle a single char string of ""\n"". It looks
for the previous char to see if it's ""\r"" which causes it to throw exception.","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,19/Jun/03 01:58;fredrik.westermarck@mdh.se;ASF.LICENSE.NOT.GRANTED--StringUtils.diff;https://issues.apache.org/jira/secure/attachment/12332338/ASF.LICENSE.NOT.GRANTED--StringUtils.diff,19/Jun/03 01:58;fredrik.westermarck@mdh.se;ASF.LICENSE.NOT.GRANTED--StringUtilsTest.diff;https://issues.apache.org/jira/secure/attachment/12332339/ASF.LICENSE.NOT.GRANTED--StringUtilsTest.diff,,,,,,,,,2.0,,,,,,,,,,,,,,,,20652.0,,,2003-06-19 01:58:13.0,,,false,,,,,,,,,,,,,,34042,,,Mon Jun 23 10:54:00 UTC 2003,,,,,,0|i0d6hr:,74828,,,,,,,,"19/Jun/03 01:58;fredrik.westermarck@mdh.se;Created an attachment (id=6881)
Patch in StringUtils.chopNewLine(String)
","19/Jun/03 01:58;fredrik.westermarck@mdh.se;Created an attachment (id=6882)
Test case of the method
","22/Jun/03 05:27;bayard;Test applied, confirmed, fix applied and confirmed.

Thanks Mark and Fredrik.","23/Jun/03 06:17;six4three@hotmail.com;patch and test case should handle empty string. 

change from:

if (lastIdx == 0)

to

if (lastIdx <= 0)","23/Jun/03 10:54;bayard;Both test and code changed.

Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,
Enum does not support inner sub-classes,LANG-146,12340462,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,chris.webb@voxsurf.com,chris.webb@voxsurf.com,17/Dec/02 20:38,16/May/06 12:44,07/Apr/19 20:37,16/May/06 12:44,2.0,,,,2.0,,,,,0,,,,,,,,"The org.apache.commons.lang.enum.Enum class does not support the following
construct of static inner anonymous sub-classed constants:

public abstract class MyEnum extends Enum {
	public static final MyEnum ENUM1 = new MyEnum(""enum1"") {
		public String getValue() {
			return ""X"";
		}
	};

	public static final MyEnum ENUM2 = new MyEnum(""enum2"") {
		public String getValue() {
			return ""Y"";
		}
	};

	/**
	 * Constructor.
	 */
	protected MyEnum(String name) {
		super(name);
	}

	/**
	 * Returns a value.
	 * Creation date: (16/12/2002 13:25:35)
	 */
	public abstract String getValue();
}

ENUM1 and ENUM2 are assigned anonymous inner class names 'MyEnum$0' and
'MyEnum$1' respectively instead of the super class 'MyEnum' when added to the
list of enumerations kept in the Enum super class via the Enum constructor.

A simple work around is to strip the inner class descriminator off the class
name  in the Enum constructor, i.e.

    protected Enum(String name) {
        super();
        if (name == null || name.length() == 0) {
            throw new IllegalArgumentException(""The Enum name must not be empty"");
        }
        iName = name;

        // Retrieve class name.
        String className = getClass().getName();

        // Search for inner class.
        int index = className.lastIndexOf('$');
        if (index > -1) {
                // Strip off inner class reference.
                className = className.substring(0, index);
        }
        
        Entry entry = (Entry) cEnumClasses.get(className);
        
        if (entry == null) {
            entry = new Entry();
            cEnumClasses.put(className, entry);
        }
        if (entry.map.containsKey(name)) {
            throw new IllegalArgumentException(""The Enum name must be unique, '""
+ name + ""' has already been added"");
        }
        entry.map.put(name, this);
        entry.list.add(this);
    }","Operating System: other
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,30/Jan/03 00:10;chris.webb@voxsurf.com;ASF.LICENSE.NOT.GRANTED--Enum.java;https://issues.apache.org/jira/secure/attachment/12332093/ASF.LICENSE.NOT.GRANTED--Enum.java,30/Jan/03 00:11;chris.webb@voxsurf.com;ASF.LICENSE.NOT.GRANTED--VxsTestEnum.java;https://issues.apache.org/jira/secure/attachment/12332094/ASF.LICENSE.NOT.GRANTED--VxsTestEnum.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,15439.0,,,2002-12-19 07:21:47.0,,,false,,,,,,,,,,,,,,34070,,,Mon Mar 24 00:26:51 UTC 2003,,,,,,0|i0d6hz:,74829,,,,,,,,"19/Dec/02 07:21;scolebourne@joda.org;In the example given, it would seem appropriate to add an extra parameter to 
the constructor:

public static final MyEnum ENUM1 = new MyEnum(""enum1"", ""X"");

Does this solve the problem?","19/Dec/02 22:07;chris.webb@voxsurf.com;Yes I agree if the inner sub-class method was just returning a value then
modifying the constructor to take in the value would work because no
sub-classing would be required. My example was probably not the best because I
was thinking more along the lines where the static enum definition contained a
method that encapsulated logic other than merely returning a value which would
require sub-classing.","01/Jan/03 06:46;scolebourne@joda.org;Change made to support functional enums along the lines proposed here. Check 
the CVS.","30/Jan/03 00:10;chris.webb@voxsurf.com;Created an attachment (id=4621)
Patch Enum class
","30/Jan/03 00:11;chris.webb@voxsurf.com;Created an attachment (id=4622)
Enum test class
","30/Jan/03 00:12;chris.webb@voxsurf.com;I found a bug with my original very simplisting solution. The follwing is the
correct algorythm to determine the actual enumeration class for a given
enumeration object which may be defined by an inner class. I've attached the
patched class and a test class.

// Search for actual enumerated type. This is necessary as enumerated types might
// be defined by inner classes. The actual enumerated type is defined as the top
container or
// declaring class that can be assigned to the actual class of enumeration being
added.
Class clazz = this.getClass();
while (clazz.getDeclaringClass() != null &&     
clazz.getDeclaringClass().isAssignableFrom(this.getClass())) {
	clazz = clazz.getSuperclass();
}","05/Feb/03 02:33;scolebourne@joda.org;Regrettably, getDeclaringClass() doesn't function correctly on my JDK141. I 
have got a version and test code on the CVS for your problem, and also to 
support hierarchical Enums now. Perhaps you could test that?
Stephen",24/Mar/03 00:26;scolebourne@joda.org;Closing as I believe fixed in CVS,,,,,,,,,,,,,,,,,,,,,,,
[lang][PATCH] Unused field 'startFinal' in DateIterator,LANG-145,12340821,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,janekdb@yahoo.co.uk,janekdb@yahoo.co.uk,26/Jun/03 06:59,16/May/06 12:38,07/Apr/19 20:37,16/May/06 12:38,2.0,,,,2.0,,,,,0,,,,,,,,"The field 'startFinal' in o.a.c.lang.time.DateUtils$DateIterator is unused. The
attached patch removes this field. The unit tests run okay after this change.

(Unrelated to this (except by locality), is there any reason why 'endFinal' is
final and 'spot' is not?)","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,26/Jun/03 07:00;janekdb@yahoo.co.uk;ASF.LICENSE.NOT.GRANTED--unused-startFinal.txt;https://issues.apache.org/jira/secure/attachment/12332398/ASF.LICENSE.NOT.GRANTED--unused-startFinal.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,21099.0,,,2003-06-27 02:20:18.0,,,false,,,,,,,,,,,,,,147082,,,Sun Jun 29 00:52:32 UTC 2003,,,,,,0|i0d6i7:,74830,,,,,,,,"26/Jun/03 07:00;janekdb@yahoo.co.uk;Created an attachment (id=6982)
This patch removes an unused variable from o.a.c.lang.time.DateUtils$DateIterator
","27/Jun/03 02:20;ggregory@seagullsw.com;Should the constructor DateIterator(Calendar startFinal, Calendar endFinal) be
abbreviated to DateIterator(Calendar endFinal)?

Perhaps the author could shed some light on this. Thanks.","27/Jun/03 03:10;janekdb@yahoo.co.uk;The constructor needs to keep the two arg version so it can know the date range
to iterate over.",27/Jun/03 04:00;ggregory@seagullsw.com;But one of the args is not used in the class. Is that a bug?,"27/Jun/03 05:01;janekdb@yahoo.co.uk;The parameter 'startFinal' is used twice, once to assign to the field
'this.startFinal' and then to assign to the field 'this.spot'. It's the field
which is unused not the parameter. Sorry for the confusion. The patch file
explained it better than I did!


   /**
     * Date iterator.
     */
    static class DateIterator implements Iterator {
        private final Calendar startFinal;
        private final Calendar endFinal;
        private Calendar spot = null;

        DateIterator(Calendar startFinal, Calendar endFinal) {
            super();
            this.startFinal = startFinal;
            this.endFinal = endFinal;
            spot = startFinal;
            spot.add(Calendar.DATE, -1);
        }

        public boolean hasNext() {
            return spot.before(endFinal);
        }

        public Object next() {
            if (spot.equals(endFinal)) {
                throw new NoSuchElementException();
            }
            spot.add(Calendar.DATE, 1);
            return spot.clone();
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }
    }
","29/Jun/03 00:52;scolebourne@joda.org;Patch applied, thanks",,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] [patch] EqualsBuilder.append(Object[], Object[]) throws NPE",LANG-144,12340969,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,maartenc,maartenc,15/Sep/03 19:48,16/May/06 12:35,07/Apr/19 20:37,16/May/06 12:35,2.0,,,,2.1,,,,,0,,,,,,,,"Hi,

if you append array's which contains null values to an EqualsBuilder instance, 
a NPE is thrown. This causes troubles in the ArrayUtils.isEquals(Object[], 
Object[]) method as well because it uses the EqualsBuilder class.

To duplicate: execute this code:

Object[] array1 = new Object[] {""1"", null, ""2""};
Object[] array2 = new Object[] {""1"", null, ""2""};
new EqualsBuilder().append(array1, array2).isEquals();

and you'll get this Exception:

java.lang.NullPointerException
at org.apache.commons.lang.builder.EqualsBuilder.append(EqualsBuilder.java:513)

kind regards,
Maarten Coene","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,15/Sep/03 23:34;amamment;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12332523/ASF.LICENSE.NOT.GRANTED--patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,23174.0,,,2003-09-15 23:33:35.0,,,false,,,,,,,,,,,,,,34066,,,Wed Apr 26 13:10:59 UTC 2006,,,,,,0|i0d6if:,74831,,,,,,,,"15/Sep/03 23:33;amamment;Attachment to follow: 
1) Updated EqualsBuilderTest to generate the exception - modified with 
Maarten's test + a little bit more.
2) Updated EqualsBuilder to fix this problem - append(Object[], Object[]) was 
doing a little bit more than it had to....  ","15/Sep/03 23:34;amamment;Created an attachment (id=8230)
Modifies test case and add resolution
",10/Feb/04 06:54;brentworden;*** COM-1096 has been marked as a duplicate of this bug. ***,12/Feb/04 04:09;ggregory@seagullsw.com;Patch applied. Thank you.,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Improve util.Validate tests,LANG-143,12340885,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,04/Aug/03 10:40,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:36,,,,,2.0,,,,,0,,,,,,,,"The attached patch fixes some small errors in ValidateTest suggested by clover.
 It also inserts fail() statements to ensure that expected
IllegalArgumentExceptions are thrown.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,04/Aug/03 10:42;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--ValidateTestPatch.txt;https://issues.apache.org/jira/secure/attachment/12332447/ASF.LICENSE.NOT.GRANTED--ValidateTestPatch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,22098.0,,,2003-08-05 02:53:54.0,,,false,,,,,,,,,,,,,,147081,,,Tue Aug 05 02:53:54 UTC 2003,,,,,,0|i0d6in:,74832,,,,,,,,"04/Aug/03 10:42;phil@steitz.com;Created an attachment (id=7635)
Patch to ValidateTest
","05/Aug/03 02:53;scolebourne@joda.org;Patch applied, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"A small, but important javadoc fix for Fraction proper whole and numerator",LANG-142,12340883,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tobrien@discursive.com,tobrien@discursive.com,03/Aug/03 23:47,16/May/06 12:36,07/Apr/19 20:37,16/May/06 12:36,,,,,2.0,,,,,0,,,,,,,,"A small fix, for the javadoc on getProperWhole and getProperNumerator.  Doc said
that -7/8 was improper and could be resolved to -1 3/4.  The original fraction
should have been -7/4.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,03/Aug/03 23:48;tobrien@discursive.com;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12332445/ASF.LICENSE.NOT.GRANTED--patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,22094.0,,,2003-08-04 05:45:56.0,,,false,,,,,,,,,,,,,,147080,,,Mon Aug 04 05:45:56 UTC 2003,,,,,,0|i0d6iv:,74833,,,,,,,,"03/Aug/03 23:48;tobrien@discursive.com;Created an attachment (id=7632)
Simple javadoc patch for Fraction
",04/Aug/03 05:45;scolebourne@joda.org;Patch applied. Good catch. Thanks,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Fraction.toProperString() returns -1/1 for -1,LANG-141,12342748,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,katalis@indosat.net.id,katalis@indosat.net.id,28/Nov/05 17:46,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.1,,,,2.2,,,,,0,,,,,,,,"Test case:

assertEquals(""-1"", Fraction.getFraction(-1).toProperString());","Operating System: Linux
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37661.0,,,2006-03-06 15:30:26.0,,,false,,,,,,,,,,,,,,34127,,,Mon Mar 06 15:30:26 UTC 2006,,,,,,0|i0d6j3:,74834,,,,,,,,06/Mar/06 15:30;bayard;Test applied; and fix made via another hard-coded if statement. Thanks.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] DurationFormatUtils.formatPeriod() returns the wrong result,LANG-140,12342874,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,bayard,yuhere@gmail.com,yuhere@gmail.com,26/Jan/06 22:41,06/Feb/07 23:47,07/Apr/19 20:37,19/Jun/06 19:49,,,,,2.2,,,,,0,,,,,,,,"/**
 * lib: commons-lang-2.1.jar
 * 
 * this class run result.
 * Result:
 *    Date1->Date2=2006/01/26 18:47:34 000->2006/02/26 10:47:34 000===0000N01
-1ú 16:00:00 000
 *    Date1->Date2=2006/01/26 18:47:34 000->2006/02/26 10:47:34 000===0000/01/-
1 16:00:00 000
 * want result:
 *    Date1->Date2=2006/01/26 18:47:34 000->2006/02/26 10:47:34 000===0000N00
30ú 16:00:00
 *    Date1->Date2=2006/01/26 18:47:34 000->2006/02/26 10:47:34 
000===0000/00/30 16:00:00
 * 
 * 
 * the results are wrong.
 * 
 */

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.apache.commons.lang.time.DurationFormatUtils;

public class Test {
    
    static SimpleDateFormat formatter = new SimpleDateFormat(""yyyy/MM/dd 
HH:mm:ss SSS"");


    public static void main(String[] args) {
        Date date1 = newDate(2006, 1, 26, 18, 47, 34);
        Date date2 = newDate(2006, 2, 26, 10, 47, 34);
        System.out.println(""Date1->Date2="" + 
                formatter.format(date1) + ""->"" + formatter.format(date2) 
+ ""==="" +  
                DurationFormatUtils.formatPeriod(date1.getTime(), date2.getTime
(), ""yyyyNMMddú HH:mm:ss SSS"") );

        System.out.println(""Date1->Date2="" + 
                formatter.format(date1) + ""->"" + formatter.format(date2) 
+ ""==="" +  
                DurationFormatUtils.formatPeriod(date1.getTime(), date2.getTime
(), ""yyyy/MM/dd HH:mm:ss SSS"") );
    
    }

    public static Date newDate(int y, int m, int d, int h, int mi, int s) {
        Calendar calendar1 = Calendar.getInstance();
        calendar1.clear();
        calendar1.set(y, m - 1, d, h, mi, s);
        Date date1 = calendar1.getTime();
        return date1;
    }

}","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,17/Apr/06 13:22;bayard;ASF.LICENSE.NOT.GRANTED--38401.patch;https://issues.apache.org/jira/secure/attachment/12334005/ASF.LICENSE.NOT.GRANTED--38401.patch,10/Mar/06 17:28;yuhere@gmail.com;ASF.LICENSE.NOT.GRANTED--Period.java;https://issues.apache.org/jira/secure/attachment/12334004/ASF.LICENSE.NOT.GRANTED--Period.java,17/May/06 13:06;bayard;LANG-140.patch;https://issues.apache.org/jira/secure/attachment/12334216/LANG-140.patch,,,,,,,,3.0,,,,,,,,,,,,,,,,38401.0,,,2006-03-09 16:18:53.0,,,false,,,,,,,,,,,,,,34115,,,Mon Jun 19 19:49:40 UTC 2006,,,,,,0|i0d6jb:,74835,,,,,,,,"09/Mar/06 16:18;bayard;So it's claiming it's 1 month minus 1 day and not 30 days. Ugh.

Looking into it, the issue is that when the code rolls back in hours, it rolls
the days back - even if 0. It needs to roll months back if days are 0 (and so on
back up to years).","09/Mar/06 16:21;bayard;Not that easy though. Needs to be, for this particular case:


If days = 0, then roll month back (from 1 to 0) and set days to the maximum
number of days in the preceding month (which is January and thus 30). 

It gets ugly when you get down to the seconds, as their rollback effect becomes
an increasingly nested loop.","10/Mar/06 02:34;ggregory@seagullsw.com;In the context of Ticket 33825
(http://issues.apache.org/bugzilla/show_bug.cgi?id=33825), one can consider
Joda-Time.","10/Mar/06 17:28;yuhere@gmail.com;Created an attachment (id=17861)
period 

there is a ""period"" method in this file , that method can return the period
String , can't format it , because the some format methods are use 'package'
defined. I hope the ""period"" method can add into the common_lang lib,and
provides the format function.","17/Apr/06 13:22;bayard;Created an attachment (id=18111)
Unit test for this bug.
","17/May/06 13:04;bayard;Hooking Period.java up, it gives a couple of errors:

Testsuite: org.apache.commons.lang.time.TimeTestSuite
Tests run: 54, Failures: 2, Errors: 0, Time elapsed: 5.777 sec

Testcase: testFormatPeriodISO(org.apache.commons.lang.time.DurationFormatUtilsTest):    FAILED
expected:<......> but was:<...3...>
junit.framework.ComparisonFailure: expected:<......> but was:<...3...>
        at org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatPeriodISO(DurationFormatUtilsTest.java:285)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)


Testcase: testFormatPeriod(org.apache.commons.lang.time.DurationFormatUtilsTest):       FAILED
expected:<6...> but was:<...>
junit.framework.ComparisonFailure: expected:<6...> but was:<...>
        at org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatPeriod(DurationFormatUtilsTest.java:319)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",17/May/06 13:06;bayard;Period.java put into the source. Other tests unfortunately error.,22/May/06 07:52;yuhere@gmail.com;How can I get the DurationFormatUtilsTest.java and fixed DurationFormatUtils.java.,"19/Jun/06 19:49;bayard;
Fix committed. Played with it while on holiday and found that there was a nice simple fix (least all the unit tests pass with this fix and it seems to make sense). The nightly build appears to be down currently, so the way to get to the code would be to svn co https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk and build a jar using ant or maven.

svn ci -m ""Added unit test for LANG-140 - thanks to Yu Peng for the test case"" src/t
est/org/apache/commons/lang/time/DurationFormatUtilsTest.java 
Sending        src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java
Transmitting file data .
Committed revision 415316.

 svn ci -m ""Committing fix for LANG-140. By reversing the order of field calculation,
 Yu Peng's bug goes away"" src/java/org/apache/commons/lang/time/DurationFormatUtils.java 
Sending        src/java/org/apache/commons/lang/time/DurationFormatUtils.java
Transmitting file data .
Committed revision 415317.",,,,,,,,,,,,,,,,,,,,,,
[lang] EnumTest fails on Linux Sun JDK 1.3.0,LANG-139,12340664,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,bayard,bayard,15/Apr/03 21:21,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:41,,,,,2.0,,,,,0,,,,,,,,"both tests in EnumTest.testOperationSerialization() fail with the following 
exception:

1) testOperationSerialization(org.apache.commons.lang.enum.EnumTest)
java.lang.NoClassDefFoundError: org/apache/commons/lang/enum/OperationEnum$1

where OperationEnum$1 is OperationEnum.PLUS, the static anonymous class in 
OperationEnum. 

I plan to comment these tests out for any releases.","Operating System: Linux
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,19030.0,,,2003-08-03 01:41:46.0,,,false,,,,,,,,,,,,,,147079,,,Thu Aug 07 10:06:49 UTC 2003,,,,,,0|i0d6jj:,74836,,,,,,,,"30/Jul/03 10:01;bayard;Also breaks on JDK 1.2.2 on Linux. 

One possible way to get around it is the rather dubious use of an explicitly named 
OperationEnum$1 class. [ie) not an anonymous inner class, but pretending to be].","03/Aug/03 01:41;scolebourne@joda.org;Change made to OperationEnum. Can someone try it on Linux to see if it fixes 
it??","03/Aug/03 02:54;phil@steitz.com;The tests and all sources now compile and run fine for me under Sun Linux JDK
1.3.1_8

Using Sun Linux JDK 1.2.2_016, however, I am still getting the following compile
error for OperationEnum:

compile.tests:
    [javac] Compiling 98 source files to
/home/phil/jakarta-commons/lang/target/tests
    [javac]
/home/phil/jakarta-commons/lang/src/test/org/apache/commons/lang/enum/OperationEnum.java:71:
class org.apache.commons.lang.enum.OperationEnum is an abstract class. It can't
be instantiated.
    [javac]         PLUS = new OperationEnum(""Plus"") {
    [javac]                ^
    [javac]
/home/phil/jakarta-commons/lang/src/test/org/apache/commons/lang/enum/OperationEnum.java:76:
class org.apache.commons.lang.enum.OperationEnum is an abstract class. It can't
be instantiated.
    [javac]         MINUS = new OperationEnum(""Minus"") {
    [javac]                 ^
    [javac] Note: 7 files use or override a deprecated API.  Recompile with
""-deprecation"" for details.
    [javac] 2 errors, 1 warning

I also had to add 

encoding=""ISO-8859-1""

to the build.xml javac targets to get Entities, MethodUtils and
DurationFormatUtils to compile under 1.2.2_016.
","04/Aug/03 09:32;phil@steitz.com;To clarify the comment above, all that is failing is compile.tests under Sun
Linux  JDK 1.2.2.  The compile target succeeds (i.e. src/java builds fine) and
the tests run clean using this JRE when compiled using 1.4.","05/Aug/03 00:41;bayard;Stephen's change still fails to compile on my Linux JDK 1.2.2.

    [javac] /home/hen/jakarta/src/jakarta-
commons/lang/src/test/org/apache/commons/lang/enum/OperationEnum.java:71: 
class org.apache.commons.lang.enum.OperationEnum is an abstract class. It 
can't be instantiated.
    [javac]         PLUS = new OperationEnum(""Plus"") {

I haven't needed to use Phil's encoding attribute however to make the others 
compile.","05/Aug/03 03:24;scolebourne@joda.org;OK, I finally understand the problem.

static final OperationEnum PLUS = new OperationEnum(""Plus"") {
};
is defining a new anonymous class. However, because it is assigned to a static 
field and declared in a static context, the class must be a static nested class 
instead of an inner class. (inner classes reference their owning object, nested 
classes don't)

Obviously Sun improved the spec between 1.2 and 1.3 to allow for this unusual 
case by generating a nested class instead of an inner. 1.2 just objects that it 
can't create an inner class here.

So...we either find a way around the problem, or declare this particular piece 
of functionality broken if compiled using 1.2.

","05/Aug/03 06:57;scolebourne@joda.org;Change made. It should work now on JDK1.2.
",07/Aug/03 10:06;bayard;Now works on JDK 1.2 on Linux. 1.3 had the same problem.,,,,,,,,,,,,,,,,,,,,,,,
ValuedEnum,LANG-138,12341751,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,itzik.levin@verint.com,itzik.levin@verint.com,26/Sep/04 16:52,16/May/06 12:20,07/Apr/19 20:37,16/May/06 12:20,,,,,2.1,,,,,0,,,,,,,,"When values of ValuedEnum are defined as final (as the JavaDoc suggests),
then all classes that use this enum will hold the value itself and not reference
after compilation. Compiler substitutes references to final with the value of
final variable itself. Then if you change the value in you enum and recompile 
it, you must recompile also all the classes that use the enum. Otherwise they 
continue to use old value.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31422.0,,,2004-09-27 13:13:18.0,,,false,,,,,,,,,,,,,,147078,,,Wed Apr 26 13:11:04 UTC 2006,,,,,,0|i0d6jr:,74837,,,,,,,,"27/Sep/04 13:13;bayard;Which all seems fine. Adding a note to the javadoc that mentions this is
probably in order as it can't hurt.","30/Sep/04 13:37;bayard;Added a javadoc. Largely this is something developers just learn, do a clean then build if making lots of 
changes.","26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Improve javadoc and overflow behavior of Fraction,LANG-137,12340904,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,13/Aug/03 23:43,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:36,,,,,2.0,,,,,0,,,,,,,,"The attached patch documents the undeclared parameters of the continued fraction
implementation in getFraction(double) and modifies methods subject to integer
overflows to throw ArithmeticExceptions when this occurs.  Also includes some
improvements to the unit tests.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,13/Aug/03 23:44;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--fractionPatch.txt;https://issues.apache.org/jira/secure/attachment/12332459/ASF.LICENSE.NOT.GRANTED--fractionPatch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,22386.0,,,2003-08-14 06:45:54.0,,,false,,,,,,,,,,,,,,147077,,,Thu Aug 14 06:45:54 UTC 2003,,,,,,0|i0d6jz:,74838,,,,,,,,"13/Aug/03 23:44;phil@steitz.com;Created an attachment (id=7805)
Patch to Fraction, FractionTest
","14/Aug/03 06:45;scolebourne@joda.org;Patch applied, looks like a good improvement. Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Make StopWatch validate state transitions,LANG-136,12341470,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tobrien@discursive.com,tobrien@discursive.com,24/May/04 04:20,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:25,,,,,2.1,,,,,0,,,,,,,,"Per Henri's email to commons-dev on 5/23/2004, StopWatch currently let's you 
call split() or stop() multiple times.  StopWatch could benefit from some 
validation, to make sure the following validation occurs:

1. split(), suspend(), or stop() cannot be invoked twice.
2. unsplit() may only be called if the watch has been split()
3. resume() may only be called if the watch has been suspend()
4. start() cannot be called twice.

Whomever takes on this burden should take some time to draw a simple state 
transition diagram and put it in the JavaDoc.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,29163.0,,,2004-06-02 10:58:06.0,,,false,,,,,,,,,,,,,,147076,,,Wed Apr 26 13:10:55 UTC 2006,,,,,,0|i0d6k7:,74839,,,,,,,,"02/Jun/04 10:58;bayard;There should also be a getLastSplitTime() or some such. For a StopWatch, I
should have available the last split time and the current time at the same time.
If not split, the last split time should be 0.","18/Jul/04 11:23;bayard;Attempt at a crude state table.


                  STATE_UNSTARTED STATE_RUNNING STATE_SPLIT STATE_STOPPED
STATE_SUSPENDED
=================|===============|=============|===========|=============|===============
start()          |      X        |      -      |     -     |      -      |       -
stop()           |      -        |      X      |     X     |      -      |       -
reset()          |      -        |      ?      |     ?     |      X      |       -
split()          |      -        |      X      |     X     |      -      |       -
unsplit()        |      -        |      -      |     X     |      -      |       -
suspend()        |      -        |      X      |     X     |      -      |       -
resume()         |      -        |      -      |     -     |      -      |       X
getTime()        |      X        |      X      |     X     |      X      |       X
getSplitTime()   |      -        |      -      |     X     |      -      |       -","18/Jul/04 11:27;bayard;The table above represents my thoughts on how Stopwatch should work. Bit crappy
as it means a change in the features of the API. Perhaps stupidly, X means yes,
- means no and ? is unsure.

In addition, getTime would always return the time to now (unless suspended),
while getSplitTime would be used to do splits.

I can see one immediate problem. If in SUSPEND, should still be able to call
stop(). The two ? marks are because I'm not sure if reset() should stop() if the
stopwatch is not stopped yet. If so, then the only state that can't have reset
is UNSTARTED.","02/Feb/05 13:24;bayard;Tis all implemented. The state table is slightly different for reset, anything
may be reset so X's all the way across.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,
[lang][patch] Javadoc fixes for CharSetUtils,LANG-135,12341293,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,janekdb@yahoo.co.uk,janekdb@yahoo.co.uk,28/Feb/04 06:33,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:28,,,,,2.1,,,,,0,,,,,,,,"The attached patch fixes the Javadoc for three methods in CharSetUtils.

Incidentally the @deprecated tag for translate(String, String, String) suggests
StringUtils#replaceChars(String, String, String) as a replacement but
StringUtils#replaceChars behaves differently when 'searchChars' is longer than
'replaceChars'. CharUtils#translate will use the last char of the replacement
string whereas StringUtils#replaceChars will delete. Is this difference worth
noting?
 

     * @deprecated Use {@link StringUtils#replaceChars(String, String, String)}.
     *             Method will be removed in Commons Lang 3.0.
     */
    public static String translate(String str, String searchChars, String
replaceChars) {","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,28/Feb/04 06:34;janekdb@yahoo.co.uk;ASF.LICENSE.NOT.GRANTED--CharSetUtils.java-javadoc-patch;https://issues.apache.org/jira/secure/attachment/12332763/ASF.LICENSE.NOT.GRANTED--CharSetUtils.java-javadoc-patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,27306.0,,,2004-03-11 07:32:46.0,,,false,,,,,,,,,,,,,,147075,,,Wed Apr 26 13:11:00 UTC 2006,,,,,,0|i0d6kf:,74840,,,,,,,,"28/Feb/04 06:34;janekdb@yahoo.co.uk;Created an attachment (id=10602)
javadoc patch (examples and parameter names)
","11/Mar/04 07:32;scolebourne@joda.org;Patch applied, with extra comments in translate, thanks.","26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
javadoc - 'four basic XML entities' should be 5 (apos is missing),LANG-134,12341782,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,knuti@at.ibm.com,knuti@at.ibm.com,06/Oct/04 19:11,16/May/06 12:19,07/Apr/19 20:37,16/May/06 12:19,,,,,2.1,,,,,0,,,,,,,,"in class <code>StringEscapeUtils</code>, the javadoc of the methods
<code>public static String escapeXml(String str)</code>
and
<code>public static String unescapeXml(String str)</code>
says:
'Supports only the four basic XML entities (gt, lt, quot, amp).'
It should say 
'Supports only the five basic XML entities (gt, lt, quot, amp, apos).'","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31561.0,,,2004-10-08 05:47:45.0,,,false,,,,,,,,,,,,,,147074,,,Wed Apr 26 13:10:51 UTC 2006,,,,,,0|i0d6kn:,74841,,,,,,,,08/Oct/04 05:47;scolebourne@joda.org;Thanks for the spot.,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] parseDate class from HttpClient's DateParser class,LANG-133,12341640,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,15/Aug/04 09:43,16/May/06 12:22,07/Apr/19 20:37,16/May/06 12:22,2.0,,,,2.1,,,,,0,,,,,,,,"Spawned from <a
href=""http://issues.apache.org/bugzilla/show_bug.cgi?id=21333"">21333</a>, the
addition of a parseDate(String input, String[] dateFormats) to DateFormatUtils.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,15/Aug/04 09:43;bayard;ASF.LICENSE.NOT.GRANTED--parseDate.method;https://issues.apache.org/jira/secure/attachment/12333054/ASF.LICENSE.NOT.GRANTED--parseDate.method,,,,,,,,,,1.0,,,,,,,,,,,,,,,,30674.0,,,2004-10-17 04:08:57.0,,,false,,,,,,,,,,,,,,147073,,,Wed Apr 26 13:10:59 UTC 2006,,,,,,0|i0d6kv:,74842,,,,,,,,"15/Aug/04 09:43;bayard;Created an attachment (id=12431)
New method for DateFormatUtils
","17/Oct/04 04:08;scolebourne@joda.org;Method added based on code below, but optimised to avoid exceptions and work 
more reliably.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] SystemUtils.IS_OS_*, IS_JAVA_* are always false.",LANG-132,12340862,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tetsuyak@ka2.so-net.ne.jp,tetsuyak@ka2.so-net.ne.jp,21/Jul/03 19:29,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:37,,,,,2.0,,,,,0,,,,,,,,"SystemUtils.IS_OS_*, IS_JAVA_* always returns false.

This case is on Mac OS X.

----
% java -version
java version ""1.4.1_01""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.1_01-39)
Java HotSpot(TM) Client VM (build 1.4.1_01-14, mixed mode)
----

The test code is:
---

import org.apache.commons.lang.*;

public class OSNameTest {

    static public void main(String[] arg) {
        System.out.println(System.getProperty(""os.name""));
        System.out.println(SystemUtils.IS_OS_MAC_OSX);
        System.out.println(SystemUtils.IS_OS_WINDOWS);
        System.out.println(SystemUtils.IS_JAVA_1_4);
    }
}

--
The result is:
---
Mac OS X
false
false
false
---

It should be:
--
Mac OS X
true
false
true
--

The cause:  IS_JAVA_*, IS_OS_* values are based on
JAVA_VERSOIN, OS_NAME, OS_VERSION. But JAVA_VERSION, OS_NAME,
OS_VERSION are initialized after IS_JAVA_*, IS_OS_* values.
When IS_OS_* are initialized, OS_NAME == null.

They should be declared considering the initialization order.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,21/Jul/03 19:33;tetsuyak@ka2.so-net.ne.jp;ASF.LICENSE.NOT.GRANTED--fix_sysutil_constants.txt;https://issues.apache.org/jira/secure/attachment/12332419/ASF.LICENSE.NOT.GRANTED--fix_sysutil_constants.txt,21/Jul/03 19:37;tetsuyak@ka2.so-net.ne.jp;ASF.LICENSE.NOT.GRANTED--jjj.txt;https://issues.apache.org/jira/secure/attachment/12332420/ASF.LICENSE.NOT.GRANTED--jjj.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,21761.0,,,2003-07-22 06:06:55.0,,,false,,,,,,,,,,,,,,34068,,,Tue Jul 22 06:06:55 UTC 2003,,,,,,0|i0d6l3:,74843,,,,,,,,"21/Jul/03 19:33;tetsuyak@ka2.so-net.ne.jp;Created an attachment (id=7421)
patch to o.a.c.l.SystemUtils.java. Modified declaration order.
","21/Jul/03 19:37;tetsuyak@ka2.so-net.ne.jp;Created an attachment (id=7422)
patch to o.a.c.l.SystemUtilsTest.java. Proposal of the test for this bug.
","22/Jul/03 06:06;scolebourne@joda.org;Very good catch. This would have been very embarrasing...
Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] StringEscapeUtils.unescapeHtml() doesn't handle an empty entity,LANG-131,12341468,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,dan.goldberg@fetch.com,dan.goldberg@fetch.com,22/May/04 05:40,16/May/06 12:25,07/Apr/19 20:37,16/May/06 12:25,2.0,,,,2.1,,,,,0,,,,,,,,"Pass the a string containing ""&;"" (without double quotes) to 
StringEscapeUtils.unescapeHtml().  

This will result in an ArrayIndexOutOfBounds error.","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,29149.0,,,2004-05-26 05:15:39.0,,,false,,,,,,,,,,,,,,34060,,,Wed Apr 26 13:10:45 UTC 2006,,,,,,0|i0d6lb:,74844,,,,,,,,"22/May/04 05:53;dan.goldberg@fetch.com;Sorry, the error it throws is a StringIndexOutOfBoundsException not an 
ArrayIndexOutOfBounds","26/May/04 05:15;janekdb@yahoo.co.uk;&#; also causes a problem

     [java] java.lang.StringIndexOutOfBoundsException: String index out of range: 1
     [java]     at java.lang.String.charAt(String.java:460)
     [java]     at org.apache.commons.lang.Entities.unescape(Entities.java:652)
     [java]     at
org.apache.commons.lang.StringEscapeUtils.unescapeHtml(StringEscapeUtils.java:447)

Is this really a bug though? How robust should this method be in the face of
malformed entities? For example all these malformed entities also cause
problems. Maybe these exceptions should be converted to an
IllegalArgumentException and rethrown.

     [java] &# ; java.lang.NumberFormatException: For input string: "" ""
     [java] &#!; java.lang.NumberFormatException: For input string: ""!""
     [java] &#""; java.lang.NumberFormatException: For input string: """"""
     [java] &##; java.lang.NumberFormatException: For input string: ""#""
     [java] &#$; java.lang.NumberFormatException: For input string: ""$""
     [java] &#%; java.lang.NumberFormatException: For input string: ""%""
     [java] &#'; java.lang.NumberFormatException: For input string: ""'""
     [java] &#(; java.lang.NumberFormatException: For input string: ""(""
     [java] &#); java.lang.NumberFormatException: For input string: "")""
     [java] &#*; java.lang.NumberFormatException: For input string: ""*""
     [java] &#+; java.lang.NumberFormatException: For input string: ""+""
     [java] &#,; java.lang.NumberFormatException: For input string: "",""
     [java] &#-; java.lang.NumberFormatException: For input string: ""-""
     [java] &#.; java.lang.NumberFormatException: For input string: "".""
     [java] &#/; java.lang.NumberFormatException: For input string: ""/""
     [java] &#:; java.lang.NumberFormatException: For input string: "":""
     [java] &#<; java.lang.NumberFormatException: For input string: ""<""
     [java] &#=; java.lang.NumberFormatException: For input string: ""=""
     [java] &#>; java.lang.NumberFormatException: For input string: "">""
     [java] &#?; java.lang.NumberFormatException: For input string: ""?""
     [java] &#@; java.lang.NumberFormatException: For input string: ""@""
     [java] &#A; java.lang.NumberFormatException: For input string: ""A""
     [java] &#B; java.lang.NumberFormatException: For input string: ""B""
     [java] &#C; java.lang.NumberFormatException: For input string: ""C""
     [java] &#D; java.lang.NumberFormatException: For input string: ""D""
     [java] &#E; java.lang.NumberFormatException: For input string: ""E""
     [java] &#F; java.lang.NumberFormatException: For input string: ""F""
     [java] &#G; java.lang.NumberFormatException: For input string: ""G""
     [java] &#H; java.lang.NumberFormatException: For input string: ""H""
     [java] &#I; java.lang.NumberFormatException: For input string: ""I""
     [java] &#J; java.lang.NumberFormatException: For input string: ""J""
     [java] &#K; java.lang.NumberFormatException: For input string: ""K""
     [java] &#L; java.lang.NumberFormatException: For input string: ""L""
     [java] &#M; java.lang.NumberFormatException: For input string: ""M""
     [java] &#N; java.lang.NumberFormatException: For input string: ""N""
     [java] &#O; java.lang.NumberFormatException: For input string: ""O""
     [java] &#P; java.lang.NumberFormatException: For input string: ""P""
     [java] &#Q; java.lang.NumberFormatException: For input string: ""Q""
     [java] &#R; java.lang.NumberFormatException: For input string: ""R""
     [java] &#S; java.lang.NumberFormatException: For input string: ""S""
     [java] &#T; java.lang.NumberFormatException: For input string: ""T""
     [java] &#U; java.lang.NumberFormatException: For input string: ""U""
     [java] &#V; java.lang.NumberFormatException: For input string: ""V""
     [java] &#W; java.lang.NumberFormatException: For input string: ""W""
     [java] &#X; java.lang.NumberFormatException: For input string: """"
     [java] &#Y; java.lang.NumberFormatException: For input string: ""Y""
     [java] &#Z; java.lang.NumberFormatException: For input string: ""Z""
     [java] &#[; java.lang.NumberFormatException: For input string: ""[""
     [java] &#\; java.lang.NumberFormatException: For input string: ""\""
     [java] &#]; java.lang.NumberFormatException: For input string: ""]""
     [java] &#^; java.lang.NumberFormatException: For input string: ""^""
     [java] &#_; java.lang.NumberFormatException: For input string: ""_""
     [java] &#`; java.lang.NumberFormatException: For input string: ""`""
     [java] &#a; java.lang.NumberFormatException: For input string: ""a""
     [java] &#b; java.lang.NumberFormatException: For input string: ""b""
     [java] &#c; java.lang.NumberFormatException: For input string: ""c""
     [java] &#d; java.lang.NumberFormatException: For input string: ""d""
     [java] &#e; java.lang.NumberFormatException: For input string: ""e""
     [java] &#f; java.lang.NumberFormatException: For input string: ""f""
     [java] &#g; java.lang.NumberFormatException: For input string: ""g""
     [java] &#h; java.lang.NumberFormatException: For input string: ""h""
     [java] &#i; java.lang.NumberFormatException: For input string: ""i""
     [java] &#j; java.lang.NumberFormatException: For input string: ""j""
     [java] &#k; java.lang.NumberFormatException: For input string: ""k""
     [java] &#l; java.lang.NumberFormatException: For input string: ""l""
     [java] &#m; java.lang.NumberFormatException: For input string: ""m""
     [java] &#n; java.lang.NumberFormatException: For input string: ""n""
     [java] &#o; java.lang.NumberFormatException: For input string: ""o""
     [java] &#p; java.lang.NumberFormatException: For input string: ""p""
     [java] &#q; java.lang.NumberFormatException: For input string: ""q""
     [java] &#r; java.lang.NumberFormatException: For input string: ""r""
     [java] &#s; java.lang.NumberFormatException: For input string: ""s""
     [java] &#t; java.lang.NumberFormatException: For input string: ""t""
     [java] &#u; java.lang.NumberFormatException: For input string: ""u""
     [java] &#v; java.lang.NumberFormatException: For input string: ""v""
     [java] &#w; java.lang.NumberFormatException: For input string: ""w""
     [java] &#x; java.lang.NumberFormatException: For input string: """"
     [java] &#y; java.lang.NumberFormatException: For input string: ""y""
     [java] &#z; java.lang.NumberFormatException: For input string: ""z""
     [java] &#{; java.lang.NumberFormatException: For input string: ""{""
     [java] &#|; java.lang.NumberFormatException: For input string: ""|""
     [java] &#}; java.lang.NumberFormatException: For input string: ""}""
     [java] &#~; java.lang.NumberFormatException: For input string: ""~""
",02/Jun/04 04:31;scolebourne@joda.org;If these can be easily trapped without a major performance overhead then they should be.,"17/Oct/04 01:54;scolebourne@joda.org;Fixes added to handle invalid entities, and treat them as non-entities.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] Memory ""leak"" in StringUtils",LANG-130,12342941,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sebastian.kirsch@paybox.net,sebastian.kirsch@paybox.net,27/Feb/06 22:59,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.1,,,,2.2,,lang.*,,,0,,,,,,,,"The static field PADDING allocates 262152 bytes for nothing.

private static final String[] PADDING = new String[Character.MAX_VALUE];

At least use lazy creation, better completely remove it (move to method) to save
memory (Having 20 apps on one tomcat --> 5MB allocated for nothing).","Operating System: other
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,38792.0,,,2006-03-06 15:34:23.0,,,false,,,,,,,,,,,,,,147072,,,Wed Mar 08 05:22:03 UTC 2006,,,,,,0|i0d6lj:,74845,,,,,,,,06/Mar/06 15:34;bayard;I favour switching to lazy loading; have asked on the mailng list how others feel.,"07/Mar/06 03:18;ggregory@seagullsw.com;Seems like a good idea. Since PADDING is private, the change will not create an
incompatibility.","07/Mar/06 04:05;sandymac@apache.org;Has it been shown that the PADDING caching actually benefits anything? I think
it should be removed as it's just going to consume more and more memory until
the StringUtils class is unloaded.

Either way the StringUtils.padding(int,char) should be changed to use a
StringBuffer. I'd change the method to:

private static String padding(int repeat, char padChar) {
  StringBuffer sb = new StringBuffer(repeat); 
  while (sb.length() < repeat) {
    pad = pad.concat(pad);
  }
  return sb.toString();
}

and remove the PADDING static field.","07/Mar/06 04:13;sandymac@apache.org;One more thing, if it is desirable to keep the number of equal string instances
low then the return could be changed to:

  return sb.toString().intern();

But if Java 1.1 is a target for lang then that shouldn't be used as it will leak
memory. It wasn't until Java 1.2 that the intered string pool would allow unused
intered strings to be garbage collected.","07/Mar/06 15:52;sebastian.kirsch@paybox.net;(In reply to comment #3)
I agree to this proposal, would be my preferred solution.",08/Mar/06 04:47;ggregory@seagullsw.com;I think we should let call sites decide whether or not Strings should be interned.,"08/Mar/06 05:22;sandymac@apache.org;Fix commited. I choose to use a char[] array instead of a StringBuffer but
otherwise it's just like what comment #3 describes.
http://svn.apache.org/viewcvs?rev=384017&view=rev",,,,,,,,,,,,,,,,,,,,,,,,
[lang] test.time fails in Japanese (non-us) locale.,LANG-129,12340895,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tetsuyak@ka2.so-net.ne.jp,tetsuyak@ka2.so-net.ne.jp,08/Aug/03 18:59,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:36,,,,,2.0,,,,,0,,,,,,,,"test.time fails in Japanese locale.

The tests are DateUtilsTest.testParseCVS() and
DateFormatUtilsTest.testSMTP().

The cause is that these tests depend on US locale but use
default locale.

By the way, does parseCVS() needs Locale arg?
I think ""CVS format"" means that the language is English.

ant test.time log:

test.time:
     [echo] Running time package tests ...
     [java] .E.E.E.E.E.E.E......F..............
     [java] Time: 5.126
     [java] There were 7 errors:
     [java] 1)
testConstructor(org.apache.commons.lang.time.DateUtilsTest)java.text.ParseException:
Unparseable date: ""February 12, 2002 12:34:56.789""
     [java]     at java.text.DateFormat.parse(DateFormat.java:334)
     [java]     at
org.apache.commons.lang.time.DateUtilsTest.setUp(DateUtilsTest.java:105)
     [java] 2)
testRound(org.apache.commons.lang.time.DateUtilsTest)java.text.ParseException:
Unparseable date: ""February 12, 2002 12:34:56.789""
     [java]     at java.text.DateFormat.parse(DateFormat.java:334)
     [java]     at
org.apache.commons.lang.time.DateUtilsTest.setUp(DateUtilsTest.java:105)
     [java] 3)
testTruncate(org.apache.commons.lang.time.DateUtilsTest)java.text.ParseException:
Unparseable date: ""February 12, 2002 12:34:56.789""
     [java]     at java.text.DateFormat.parse(DateFormat.java:334)
     [java]     at
org.apache.commons.lang.time.DateUtilsTest.setUp(DateUtilsTest.java:105)
     [java] 4)
testParseCVS(org.apache.commons.lang.time.DateUtilsTest)java.text.ParseException:
Unparseable date: ""February 12, 2002 12:34:56.789""
     [java]     at java.text.DateFormat.parse(DateFormat.java:334)
     [java]     at
org.apache.commons.lang.time.DateUtilsTest.setUp(DateUtilsTest.java:105)
     [java] 5)
testIteratorEx(org.apache.commons.lang.time.DateUtilsTest)java.text.ParseException:
Unparseable date: ""February 12, 2002 12:34:56.789""
     [java]     at java.text.DateFormat.parse(DateFormat.java:334)
     [java]     at
org.apache.commons.lang.time.DateUtilsTest.setUp(DateUtilsTest.java:105)
     [java] 6)
testWeekIterator(org.apache.commons.lang.time.DateUtilsTest)java.text.ParseException:
Unparseable date: ""February 12, 2002 12:34:56.789""
     [java]     at java.text.DateFormat.parse(DateFormat.java:334)
     [java]     at
org.apache.commons.lang.time.DateUtilsTest.setUp(DateUtilsTest.java:105)
     [java] 7)
testMonthIterator(org.apache.commons.lang.time.DateUtilsTest)java.text.ParseException:
Unparseable date: ""February 12, 2002 12:34:56.789""
     [java]     at java.text.DateFormat.parse(DateFormat.java:334)
     [java]     at
org.apache.commons.lang.time.DateUtilsTest.setUp(DateUtilsTest.java:105)
     [java] There was 1 failure:
     [java] 1)
testSMTP(org.apache.commons.lang.time.DateFormatUtilsTest)junit.framework.ComparisonFailure:
expected:<Sun, 08 Jun...> but was:<&#26085;, 08 6...>
     [java]     at
org.apache.commons.lang.time.DateFormatUtilsTest.testSMTP(DateFormatUtilsTest.java:200)
     [java]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     [java]     at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
     [java]     at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)

     [java] FAILURES!!!
     [java] Tests run: 27,  Failures: 1,  Errors: 7","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,08/Aug/03 19:02;tetsuyak@ka2.so-net.ne.jp;ASF.LICENSE.NOT.GRANTED--patch.diff;https://issues.apache.org/jira/secure/attachment/12332450/ASF.LICENSE.NOT.GRANTED--patch.diff,,,,,,,,,,1.0,,,,,,,,,,,,,,,,22245.0,,,2003-08-10 20:21:24.0,,,false,,,,,,,,,,,,,,147071,,,Sun Aug 10 20:21:24 UTC 2003,,,,,,0|i0d6lr:,74846,,,,,,,,"08/Aug/03 19:02;tetsuyak@ka2.so-net.ne.jp;Created an attachment (id=7692)
patch for pass test.time in Japanese locale.
","08/Aug/03 19:21;tetsuyak@ka2.so-net.ne.jp;This patch makes sure use correct locale.
So, I removed partsCVS(String, Locale) and always use Locale.ENGLISH
because, as I said, the ""CVS format"" means that the language is English.
",10/Aug/03 20:21;stevencaswell@apache.org;applied patch,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] WordUtils capitalizeFully() throws a null pointer exception,LANG-128,12342088,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,cbohnert@eriscience.com,cbohnert@eriscience.com,04/Mar/05 05:43,16/May/06 12:16,07/Apr/19 20:37,16/May/06 12:16,2.0,,,,2.1,,,,,0,,,,,,,,"When submitting a null value I get a null pointer exception, it would be 
preferable for a function such as this to simply return the null value instead 
of blow up.  Otherwise I have to add unnecessary logic in front of what should 
be a simple function call.","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,33834.0,,,2005-03-06 00:44:41.0,,,false,,,,,,,,,,,,,,34098,,,Wed Apr 26 13:11:03 UTC 2006,,,,,,0|i0d6lz:,74847,,,,,,,,06/Mar/05 00:44;scolebourne@joda.org;I think the version in SVN already has this fixed.,"26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Minor tweak to fix of bug # 26616,LANG-127,12341927,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Fixed,,kathyvs,kathyvs,10/Dec/04 08:14,16/Oct/13 08:55,07/Apr/19 20:37,06/Feb/07 23:47,,,,,2.2,,,,,0,,,,,,,,"Looking at the code, the comments in Enum.build still seem to assume that the
parameter will always be an enumeration.  The code, however, is correct (at
least for the enums version -- the other version looks correct with a worse
performance)","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,32619.0,,,2004-12-29 08:19:36.0,,,false,,,,,,,,,,,,,,147070,,,Tue May 02 12:21:12 UTC 2006,,,,,,0|i0d6m7:,74848,,,,,,,,"29/Dec/04 08:19;scolebourne@joda.org;I don't follow your bug report. There is no Enum.build method or variable.

Can you identify the problem more clearly, perhaps with a test case?","25/May/05 01:30;kathyvs;I don't quite remember anymore, but I suspect it was enum.equals.

I do note that enum.compare does not work for enums in different class loaders.
Should it?",26/Apr/06 11:00;bayard;Removing from NEEDINFO - which means moving to ASSIGNED in Bugzilla.,"29/Apr/06 07:46;bayard;Tasks being:

Check javadoc for Enum.equals to ensure it matches the code - especially
concerning enumerations.

Examine source of Enum.compare for multiple classloader problems. I'm not
stunned there might be problems in such a thing, anything we can do about it?",02/May/06 11:35;bayard;Javadoc looks fine to me. Classloader problem does look like it exists in compareTo.,"02/May/06 12:21;bayard;""Fixing the lack of ClassLoader consideration in the compareTo methods of
enum.Enum and enums.Enum, along with unit tests, as mentioned on Bugzilla entry
#32619 by Kathy Van Stone. "" 
Sending        src/java/org/apache/commons/lang/enum/Enum.java
Sending        src/java/org/apache/commons/lang/enums/Enum.java
Sending        src/test/org/apache/commons/lang/enum/EnumTest.java
Sending        src/test/org/apache/commons/lang/enums/EnumTest.java
Transmitting file data ....
Committed revision 398812.         ",,,,,,,,,,,,,,,,,,,,,,,,,
[lang][patch] Make ClassUtils methods null-safe and not throw an IAE.,LANG-126,12341363,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,24/Mar/04 02:16,02/May/13 02:28,07/Apr/19 20:37,16/May/06 12:27,2.0,,,,2.1,,,,,0,,,,,,,,"A number of ClassUtils methods that a designed to return Strings throw a new
IllegalArgumentException when the input arg is null. I would like to change
these methods to return """" (or null). The methods are:

String getShortClassName(Class cls)
String getShortClassName(String className)
String getPackageName(Class cls)
String getPackageName(String className)

Thoughts for or against?","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,LANG-79,,02/Apr/04 02:33;ASF.LICENSE.NOT.GRANTED--ClassUtils-v1.28.patch;https://issues.apache.org/jira/secure/attachment/12332840/ASF.LICENSE.NOT.GRANTED--ClassUtils-v1.28.patch,02/Apr/04 02:32;ASF.LICENSE.NOT.GRANTED--ClassUtilsTest-v1.11.patch;https://issues.apache.org/jira/secure/attachment/12332839/ASF.LICENSE.NOT.GRANTED--ClassUtilsTest-v1.11.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,27877.0,,,2004-04-02 02:32:49.0,,,false,,,,,,,,,,,,,,147069,,,Wed Apr 26 13:10:54 UTC 2006,,,,,,0|i0d6mf:,74849,,,,,,,,"02/Apr/04 02:32;ggregory@seagullsw.com;Created an attachment (id=11091)
ClassUtilsTest v1.11 patch
","02/Apr/04 02:33;ggregory@seagullsw.com;Created an attachment (id=11092)
ClassUtils v1.28 patch
","02/Apr/04 02:34;ggregory@seagullsw.com;I am supplying a patch here if a discussion is needed. Otherwise, I plan on
applying the patch on Monday (not sooner, a couple of days off).","02/Apr/04 03:22;scolebourne@joda.org;Changes like this need to be noted in the release notes, otherwise +1",01/Jul/04 01:35;ggregory@seagullsw.com;In CVS.,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,
[lang] DateUtils constants should be long,LANG-125,12341166,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,n.metchev@teamphone.com,n.metchev@teamphone.com,18/Dec/03 23:09,16/May/06 12:31,07/Apr/19 20:37,16/May/06 12:31,2.0,,,,2.1,,,,,0,,,,,,,,"The fields
    MILLIS_IN_SECOND ,MILLIS_IN_MINUTE ,MILLIS_IN_HOUR,MILLIS_IN_DAY 
should be of type long so that if you have an expression:
System.out.println(new Date(30 * 365 * DateUtils.MILLIS_IN_DAY));
it doesn't print out as
Wed Jan 14 18:46:34 GMT 1970
due to overflow of integer!","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,25627.0,,,2003-12-19 00:12:35.0,,,false,,,,,,,,,,,,,,147068,,,Wed Apr 26 13:11:02 UTC 2006,,,,,,0|i0d6mn:,74850,,,,,,,,"19/Dec/03 00:12;amamment;IMHO, bad reason to make the constants long.  All it takes is using any of:

System.out.println(new Date(30L * 365 * DateUtils.MILLIS_IN_DAY));
System.out.println(new Date(30 * 365L * DateUtils.MILLIS_IN_DAY));
System.out.println(new Date(30L * 365L * DateUtils.MILLIS_IN_DAY));
  or, best of all, 
System.out.println(new Date((long) 30 * 365 * DateUtils.MILLIS_IN_DAY));

-AMT
","19/Dec/03 00:21;n.metchev@teamphone.com;IMHO, its a good reason to change because it introduces very subtle bugs which 
are tremendously difficult to track down. The fact that to fix the bug is an 
easy thing doesn't mean that finding the bug is easy. This will eliminate the 
bug altogether.

If you can think of a reason why it SHOULDN'T be long then let me know but if 
there are not good reasons for keeping it an int then I guess it wont hurt!",19/Dec/03 03:51;scolebourne@joda.org;This should definitely be changed,"19/Dec/03 04:52;ggregory@seagullsw.com;Indeed, since these values express milliseconds and APIs which take or return
millisconds usually do so a longs.","23/Dec/03 11:58;phil@steitz.com;New long constants MILLIS_PER_SECOND ,MILLIS_PER_MINUTE
,MILLIS_PER_HOUR,MILLIS_PER_DAY have been added and the integer versions have
been deprecated.  

The new constants should appear in [lang] nightly builds starting 1/23/03.

The deprecated constants will be removed in Lang 3.0.","26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,
[lang] enum package is not compatible with 1.5 jdk,LANG-124,12342092,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,igor@fedulov.com,igor@fedulov.com,06/Mar/05 13:19,02/May/13 02:28,07/Apr/19 20:37,16/May/06 12:15,2.0,,,,2.1,,,,,0,,,,,,,,"Classes that are located in org.apache.commons.lang.enum package can't be used 
with 1.5 jdk (aka the 5.0) because the ""enum"" is a reserved keyword. Compiler 
error looks like this: ""as of release 1.5, 'enum' is a keyword, and may not be 
used as an identifier (try -source 1.4 or lower to use 'enum' as an 
identifier)""

There probably should be a separate jar for 1.5+ jdk","Operating System: Linux
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,LANG-108,COLLECTIONS-63,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,33866.0,,,2006-04-26 13:10:53.0,,,false,,,,,,,,,,,,,,147067,,,Wed Apr 26 13:10:53 UTC 2006,,,,,,0|i0d6mv:,74851,,,,,,,,"06/Mar/05 13:38;igor@fedulov.com;It appears that this issue is already addressed according to nightly build by 
renaming the enum package into ""enums"" and deprecating the enum package.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Unclear javadoc for DateUtils.iterator(),LANG-123,12342065,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,hack,hack,17/Feb/05 00:41,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,2.2,,,,,0,,,,,,,,"The javadoc for DateUtils.iterator() seems to say that the iterator returned
will only have two dates: the start date and the end date. If it iterates over
more dates, which interval is use: hour, day, week or something else?

""For instance, passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will
return an Iterator that starting with Sunday, June 30, 2002 iterates over every
day (at midnight) until with Saturday, August 3, 2002.""

Also the Date version of the method does not say that the iterator returns
Calendar and not Date as I would have expected given the method signature.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,33609.0,,,2005-03-03 14:15:38.0,,,false,,,,,,,,,,,,,,147066,,,Mon Apr 17 03:55:48 UTC 2006,,,,,,0|i0d6n3:,74852,,,,,,,,"03/Mar/05 14:15;bayard;Definitely unclear. Reading the comment, I'm not sure I know what the code does :)","17/Apr/06 03:55;scolebourne@joda.org;Javadoc enhanced in svn 394555

We might want to consider deprecating these iterator methods as being a bit
rubbish though.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] EscapeUtil.escapeHtml() should clarify that it does not escape ' chars to &apos;,LANG-122,12342684,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,dov@wass.ws,dov@wass.ws,08/Nov/05 01:29,19/Dec/09 15:28,07/Apr/19 20:37,19/Dec/09 15:28,2.1,,,,2.2,,,,,0,,,,,,,,"The official HTML character entity spec does not include the popular ""&amp;apos;""
entity name for the single quote character '. the StringUtils class correctly
follows this behavior, leaving single quotes alone. However, many developers
incorrectly assume that ' will get escaped into &amp;apos; (I was one!) and we can
help them by clarifying this in the Javadoc.

The following could be appended to the method Javadoc:

Note: Not all common HTML entity names are formally included in the standard
specification (http://www.w3.org/TR/REC-html40/sgml/entities.html, as listed
below). This method follows the standard, and thus does not escape the
single-quote ' character into &apos.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37385.0,,,2006-04-17 13:27:54.0,,,false,,,,,,,,,,,,,,147065,,,Sat Dec 19 15:27:56 UTC 2009,,,,,,0|i0d6nb:,74853,,,,,,,,"17/Apr/06 13:27;bayard;svn ci -m ""Added note on lack of &apos; support as detailed in issue #37385
(http://issues.apache.org/bugzilla/show_bug.cgi?id=37385)""
src/java/org/apache/commons/lang/StringEscapeUtils.java 
Sending        src/java/org/apache/commons/lang/StringEscapeUtils.java
Transmitting file data .
Committed revision 394616.                       ",19/Dec/09 15:27;sebb@apache.org;Fix source so displayed version looks correct,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"split using null and max less than actual token count adds ""null""",LANG-121,12340390,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mcdoma@ncs.com,mcdoma@ncs.com,30/Oct/02 03:43,16/May/06 12:45,07/Apr/19 20:37,16/May/06 12:45,1.0,,,,1.0.1,,,,,0,,,,,,,,"/*

This bug is using Commons Lang 1.0 with JDK 1.4.0_01.
The problem only occurs when using null as the separator and using a
max value which is less than the number of actual tokens and making 
use of the last token which consists of what is left of the string
being tokenized. Because null is passed, the existing code loops through
the rest of the tokens, appending null to each of them, expecting that
the result will be the remaining string, except the string ""null"" is 
appended rather than a real token...

*/

import org.apache.commons.lang.StringUtils;
import java.util.StringTokenizer;

/**
 * If you replace the
 *   String[] split(String str, String separator, int max) code with the
 *   fixedSplit code below, it will fix the problem.  The code below 
demonstrates the problem
 *   and the solution.
 *
 * NOTE: I have not run any JUnit tests for this - don't know how.  But - this 
demonstrates the
 * but and supplies the solution.
 *
 */

public class DemoSplitBug {
    public static final String strToSplit = ""This is a test of the emergency 
broadcast system."";

    public static void main(String[] args) {
        DemoSplitBug.demoSplitBug(strToSplit);
        DemoSplitBug.demoSplitBugFix(strToSplit);
    }

    public static void demoSplitBug(String theString) {
        String[] theSplits = StringUtils.split(theString, null, 4);
        for (int i = 0; i < theSplits.length; i++) {
            String theSplit = theSplits[i];
            System.out.println(""theSplit:"" + theSplit);
        }
    }

    public static void demoSplitBugFix(String theString) {
        String[] theSplits = fixedSplit(theString, null, 4);
        for (int i = 0; i < theSplits.length; i++) {
            String theSplit = theSplits[i];
            System.out.println(""theSplit:"" + theSplit);
        }
    }

    public static String[] fixedSplit(String str, String separator, int max) {
        StringTokenizer tok = null;
        if (separator == null) {
            // Null separator means we're using StringTokenizer's default
            // delimiter, which comprises all whitespace characters.
            tok = new StringTokenizer(str);
        } else {
            tok = new StringTokenizer(str, separator);
        }

        int listSize = tok.countTokens();
        if (max > 0 && listSize > max) {
            listSize = max;
        }

        String[] list = new String[listSize];
        int i = 0;
        int lastTokenBegin = 0;
        int lastTokenEnd = 0;
        while (tok.hasMoreTokens()) {
            if (max > 0 && i == listSize - 1) {
                // In the situation where we hit the max yet have
                // tokens left over in our input, the last list
                // element gets all remaining text.
                String endToken = tok.nextToken();
                lastTokenBegin = str.indexOf(endToken, lastTokenEnd);
                list[i] = str.substring(lastTokenBegin);
                break;
            } else {
                list[i] = tok.nextToken();
                lastTokenBegin = str.indexOf(list[i], lastTokenBegin);
                lastTokenEnd = lastTokenBegin + list[i].length();
            }
            i++;
        }
        return list;
    }
}","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14062.0,,,2002-11-23 09:08:12.0,,,false,,,,,,,,,,,,,,34121,,,Sat Jul 12 10:12:56 UTC 2003,,,,,,0|i0d6nj:,74854,,,,,,,,"30/Oct/02 04:24;mcdoma@ncs.com;Slightly embarassing, but what follows is code that works better than the 
originally submitted code...

    public static String[] split(String str, String separator, int max) {
        StringTokenizer tok = null;
        if (separator == null) {
            // Null separator means we're using StringTokenizer's default
            // delimiter, which comprises all whitespace characters.
            tok = new StringTokenizer(str);
        } else {
            tok = new StringTokenizer(str, separator);
        }

        int listSize = tok.countTokens();
        if (max > 0 && listSize > max) {
            listSize = max;
        }

        String[] list = new String[listSize];
        int i = 0;
        int lastTokenBegin = 0;
        int lastTokenEnd = 0;
        while (tok.hasMoreTokens()) {
            if (max > 0 && i == listSize - 1) {
                // In the situation where we hit the max yet have
                // tokens left over in our input, the last list
                // element gets all remaining text.
                String endToken = tok.nextToken();
                lastTokenBegin = str.indexOf(endToken, lastTokenEnd);
                list[i] = str.substring(lastTokenBegin);
                break;
            } else {
                list[i] = tok.nextToken();
                lastTokenBegin = str.indexOf(list[i], lastTokenEnd);
                lastTokenEnd = lastTokenBegin + list[i].length();
            }
            i++;
        }
        return list;
    }
",23/Nov/02 09:08;bayard;2nd code change committed as is to 1.0.1 and 1.1.,12/Jul/03 10:12;bayard;Fixed in 1.0.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] public static boolean DateUtils.equals(Date dt1, Date dt2) ?",LANG-120,12341266,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mpatron@influe.com,mpatron@influe.com,14/Feb/04 01:20,16/Dec/09 08:51,07/Apr/19 20:37,20/May/06 00:57,2.0,,,,2.1,,lang.time.*,,,1,,,,,,,,"Hello,

In org.apache.commons.lang.StringUtils, we can find StringUtils.equals(?,?). 
org.apache.commons.lang.time.DateUtils should have the same. Like this :

    /**
     * <p>Compares two Dates, returning <code>true</code> if they are equal.</p>
     *
     * <p><code>null</code>s are handled without exceptions. Two 
<code>null</code>
     * references are considered to be equal.</p>
     *
     * <pre>
     * DateUtils.equals(null, null)   = true
     * DateUtils.equals(null, ""abc"")  = false
     * DateUtils.equals(""abc"", null)  = false
     * DateUtils.equals(""abc"", ""abc"") = true
     * DateUtils.equals(""abc"", ""ABC"") = false
     * </pre>
     *
     * @see java.util.Date#equals(Object)
     * @param dt1  the first Date, may be null
     * @param dt2  the second Date, may be null
     * @return <code>true</code> if the Dates are equal or both 
<code>null</code>
     */
	  public static boolean equals(Date dt1, Date dt2) {
	      return (dt1 == null ? dt2 == null : dt1.equals(dt2));
	  }","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,26922.0,,,2004-02-14 02:55:42.0,,,false,,,,,,,,,,,,,,147064,,,Sat May 20 00:57:13 UTC 2006,,,,,,0|i0d6nr:,74855,,,,,,,,"14/Feb/04 02:55;brentworden;Other than the stronger typed method signature, how is what you propose any 
different than the equals method in ObjectUtils?","14/Feb/04 03:22;serge;I was going to comment on this, but this actually answers the comment by Brent.
 I suggest DateUtils.equals would test the getTime() method.

long now = System.currentTimeMillis();
java.util.Date date = new java.util.Date(now);
java.util.Date timestamp = new java.sql.Timestamp(now);

DateUtils.equals(date, timestamp) = true
however
ObjectUtils.equals(date, timestamp) = false","16/Feb/04 17:31;mpatron@influe.com;Yes, I agree with you. And I propose the code to do this :

    /**
     * <p>Compares two Dates, returning <code>true</code> if they are equal.</p>
     *
     * <p><code>null</code>s are handled without exceptions. Two 
<code>null</code>
     * references are considered to be equal.</p>
     *
     * <pre>
     * long now = System.currentTimeMillis();
     * java.util.Date date = new java.util.Date(now);
     * java.sql.Timestamp timestamp = new java.sql.Timestamp(now);
     * DateUtils.equals(null, null)   = true
     * DateUtils.equals(null, date)  = false
     * DateUtils.equals(date, null)  = false
     * DateUtils.equals(date, date) = true
     * DateUtils.equals(date, timestamp) = true
     * </pre>
     *
     * @see java.util.Date#equals(Object)
     * @param dt1  the first Date, may be null
     * @param dt2  the second Date, may be null
     * @return <code>true</code> if the Dates are equal or both 
<code>null</code>
     */
	  public static boolean equals(Date dt1, Date dt2) {
	      return (dt1 == null ? dt2 == null : dt1.getTime() == dt2.getTime
());
	  }","17/Feb/04 02:57;ggregory@seagullsw.com;The assumption that time values are equal for Date and Timestamp is incorrect as
the basic test below shows. Writting unit tests first avoids this kind of
misunderstandings ;-) Also, supplying unit tests with your code greatly
increases the patching process and confidence in submissions compared to ""blind""
submissions. :-)

Index: ObjectUtilsTest.java
===================================================================
retrieving revision 1.9
diff -u -r1.9 ObjectUtilsTest.java
--- ObjectUtilsTest.java	18 Aug 2003 02:22:25 -0000	1.9
+++ ObjectUtilsTest.java	16 Feb 2004 18:50:39 -0000
@@ -1,7 +1,6 @@
-/* ====================================================================
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
+/*
+ * 
+ * Copyright (c)  2002-2003 The Apache Software Foundation.  All rights
  * reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -122,6 +121,15 @@
         assertTrue(""ObjectUtils.equals(\""foo\"", \""foo\"") returned false"",
ObjectUtils.equals(FOO, FOO));
     }
 
+    public void testDateEquals() {
+        long now = 1076957313284L; // Feb 16, 2004 10:49 PST
+        java.util.Date date = new java.util.Date(now);
+        java.util.Date timestamp = new java.sql.Timestamp(now);
+        assertEquals(date.getTime(), timestamp.getTime());
+        assertEquals(timestamp, date);
+        assertTrue(ObjectUtils.equals(date, timestamp));
+    }
+    
     public void testIdentityToString() {
         assertEquals(null, ObjectUtils.identityToString(null));
         assertEquals(
","17/Feb/04 03:17;ggregory@seagullsw.com;BTW, the 1st assert blows up.","17/Feb/04 17:16;mpatron@influe.com;Yes, in fact. ObjectUtils can do the job to compare two dates.
    
long now= System.currentTimeMillis();
java.util.Date date= new java.util.Date(now);
java.sql.Timestamp timestamp= new java.sql.Timestamp(now);
assertTrue(ObjectUtils.equals(null, null));
assertFalse(ObjectUtils.equals(null, date));
assertFalse(ObjectUtils.equals(date, null));
assertTrue(ObjectUtils.equals(date, date));
assertTrue(ObjectUtils.equals(date, timestamp));

Then, DateUtils doesn't need a specific 'equals' methode.

Thanks for all.","18/Feb/04 02:43;ggregory@seagullsw.com;Reopening, this issue is still under discussion on commons-dev.","17/Oct/04 00:11;scolebourne@joda.org;In total, five date comparison methods have been added to DateUtils. Hopefully 
we can close this call for 2.1 now.","26/Apr/06 13:11;bayard;2.1 released, closing.",20/May/06 00:57;bayard;Reopening then closing to deal with migration bug.,20/May/06 00:57;bayard;Reopening then closing to deal with migration bug.,,,,,,,,,,,,,,,,,,,,
[lang] Can't subclass EqualsBuilder because isEquals is private,LANG-119,12341929,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,matthew.sgarlata@verizon.net,matthew.sgarlata@verizon.net,10/Dec/04 14:12,16/May/06 12:17,07/Apr/19 20:37,16/May/06 12:17,2.0,,,,2.1,,,,,0,,,,,,,,"I want to create my own version of EqualsBuilder that not only goes through
arrays and checks if array contents are equal, but also goes through Maps,
Lists, Sets, etc.  I can't because isEquals is private and there is no setEquals
method.  Please make isEquals protected or add a setEquals method.  Thanks!

Matt","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,32625.0,,,2004-12-11 03:32:12.0,,,false,,,,,,,,,,,,,,147063,,,Wed Apr 26 13:10:58 UTC 2006,,,,,,0|i0d6nz:,74856,,,,,,,,11/Dec/04 03:32;ggregory@seagullsw.com;In CVS and nightly-builds you will find isEquals() public and setEquals() protected.,"17/Dec/04 03:19;mblum42@yahoo.com;I created a subclass of EqualsBuilder without a problem.  You only need to
change isEquals if you've found an inequality, right?  So instead of setting it
directly, just call append(true, false) and put in a comment explaining why
you're doing that.

","18/Dec/04 12:45;bayard;In CVS, so fixed.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] StringEscapeUtils.unescapeHtml() doesn't handle hex entities,LANG-118,12341138,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mgiles@visionstudio.com,mgiles@visionstudio.com,05/Dec/03 04:53,16/May/06 12:31,07/Apr/19 20:37,16/May/06 12:31,2.0,,,,2.1,,,,,0,,,,,,,,"Pass a string into the unescapeHtml() method that contains a hex entity (i.e. 
&#xB7; instead of &#183;) and you will get a NumberFormatException.  The 
offending code is in Entity.java, line 690.  It should check whether the 
character after the # is 'x' and if so, prefix it with '0' and call 
Integer.decode().intValue() (or some other hex converting function).

Hex entities are valid HTML 
(http://www.htmlhelp.com/reference/html40/entities/latin1.html) so this should 
be supported.","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,10/Jan/04 07:32;petebyhre@yahoo.com;ASF.LICENSE.NOT.GRANTED--Entities.java;https://issues.apache.org/jira/secure/attachment/12332639/ASF.LICENSE.NOT.GRANTED--Entities.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,25227.0,,,2004-01-10 04:27:52.0,,,false,,,,,,,,,,,,,,34032,,,Wed Apr 26 13:10:43 UTC 2006,,,,,,0|i0d6o7:,74857,,,,,,,,10/Jan/04 04:27;petebyhre@yahoo.com;Shouldn't the unescape also handle percent sign prefixed hex values like %20 ?,"10/Jan/04 07:32;petebyhre@yahoo.com;Created an attachment (id=9887)
added handling for '%xx' escapes and fixed bug for '&#x' escapes
","10/Jan/04 09:04;ggregory@seagullsw.com;Is the %nn format part of the HTML spec? 

I know &#x and &#X are: http://www.w3.org/TR/html401/charset.html#h-5.3.1
","10/Jan/04 09:09;ggregory@seagullsw.com;In the future, please use the patch format so we can see what the changes are:
http://jakarta.apache.org/commons/patches.html. Thanks.",10/Jan/04 09:40;fredrik.westermarck@mdh.se;The '%nn' encoding is for encoding URLs/URIs and not for encoding HTML.,"10/Jan/04 11:00;ggregory@seagullsw.com;I've fixed ""&#xN;"" and ""&#XN;"" in CVS. The ""%nn"" format is out of the scope of
this API. A unit tests has been added. Please check it out and confirm that this
addresses your issue. Thanks!","13/Jun/04 11:43;bayard;According to the comments in this, this is done. Considering it fixed.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,
"[lang] FastDateFormat: wrong format for date ""01.01.1000""",LANG-117,12343050,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,abinet@gmail.com,abinet@gmail.com,26/Apr/06 21:48,16/Dec/09 08:51,07/Apr/19 20:37,16/Dec/09 08:51,2.1,,,,2.2,,lang.time.*,,,0,,,,,,,,"FastDateFromat.getInstance(""dd.MM.yyyy"").format(date) returns ""01.01.01000"",
when date is 1 Januar 1000 (01.01.1000)","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,01/May/06 11:49;bayard;ASF.LICENSE.NOT.GRANTED--39410.patch;https://issues.apache.org/jira/secure/attachment/12334124/ASF.LICENSE.NOT.GRANTED--39410.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,39410.0,,,2006-05-01 11:49:00.0,,,false,,,,,,,,,,,,,,34116,,,Mon May 01 12:32:53 UTC 2006,,,,,,0|i0d6of:,74858,,,,,,,,26/Apr/06 21:49;abinet@gmail.com;for version 2.0 all is OK.,26/Apr/06 21:50;abinet@gmail.com;*** COM-2897 has been marked as a duplicate of this bug. ***,"01/May/06 11:49;bayard;Created an attachment (id=18210)
Unit test
","01/May/06 12:30;bayard;Running through the source, the problem is that:

log(1000) / log(10)  is 2.9999999999999996 and not 3.0 as it should.

Solving this by simplifying the method of finding out how many digits there are
in a number - Integer.toString(value).length(). I've added an assert for value
being negative (using Validate). Just in case. ","01/May/06 12:32;bayard;Adding unit test for #39410. Implementing fix by switching from using Math.log
to Integer.toString to figure out the number of digits.

Sending        src/java/org/apache/commons/lang/time/FastDateFormat.java
Sending        src/test/org/apache/commons/lang/time/FastDateFormatTest.java
Transmitting file data ..
Committed revision 398530.         ",,,,,,,,,,,,,,,,,,,,,,,,,,
Enum's outer class may not be loaded for EnumUtils,LANG-116,12340999,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,david@leppik.net,david@leppik.net,24/Sep/03 05:27,16/May/06 12:34,07/Apr/19 20:37,16/May/06 12:34,2.0,,,,2.1,,,,,0,,,,,,,,"I have a class with an Enum inner class, and I call MyClass.MyEnum.getEnumList()
in a JSP page (with Tomcat 3.3.1).  I'm using enums pretty much exactly as
described in Enum's javadoc.  It returns an empty Collection, even though I have
defined several enums.  At any point in the JSP page after I reference a
specific Enum, the list shows up properly populated.

What's happening is presumably a classloader issue, where
MyClass.MyEnum.getEnumList() can be called without loading this class.  Perhaps
Tomcat's multiple classloaders make this possible.  In any case, the workaround
is easy.  I changed:

        public static List getEnumList() {
            return getEnumList(MyEnum.class);
        }

to:

        public static List getEnumList() {
            new MyParentClass();
            return getEnumList(MyEnum.class);
        }

for all the methods that need to access the enums.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,23374.0,,,2003-11-29 23:05:01.0,,,false,,,,,,,,,,,,,,147062,,,Wed Apr 26 13:10:57 UTC 2006,,,,,,0|i0d6on:,74859,,,,,,,,"29/Nov/03 23:05;scolebourne@joda.org;The CVS now contains tests and description about this case. For this problem, 
the solution is to reference the outer class in a static{} block of the staic 
nested class. See CVS for more details.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Javadoc typo in reflect package.html,LANG-115,12340916,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,,pgieser@tampabay.rr.com,pgieser@tampabay.rr.com,18/Aug/03 04:32,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:36,,,,,,,,,,0,,,,,,,,"@since tag says 3.0, changed to 2.0","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,18/Aug/03 04:33;pgieser@tampabay.rr.com;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12332470/ASF.LICENSE.NOT.GRANTED--patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,22492.0,,,2003-08-18 04:47:59.0,,,false,,,,,,,,,,,,,,147061,,,Mon Aug 18 04:47:59 UTC 2003,,,,,,0|i0d6ov:,74860,,,,,,,,"18/Aug/03 04:33;pgieser@tampabay.rr.com;Created an attachment (id=7860)
Changes reflect package.html @since tag from 3.0 to 2.0
","18/Aug/03 04:47;scolebourne@joda.org;The reflect subpackage will not be released in 2.0, and will probably be kicked 
out of [lang] into [reflect]. Hence 3.0 is accurate(ish).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] Wrong format for date ""01.01.1000""",LANG-114,12343049,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,abinet@gmail.com,abinet@gmail.com,26/Apr/06 20:41,16/Dec/09 08:51,07/Apr/19 20:37,16/Dec/09 08:51,2.1,,,,,,lang.time.*,,,0,,,,,,,,"FastDateFormat.getInstance(""dd.MM.yyyy"").format() returns ""01.01.01000"" instead
of""01.01.1000"" 


   public void testFastDateFormatter() throws ParseException
   {
      final String dateString = ""01.01.1000"";
      final SimpleDateFormat simpleDateFormatter = new
SimpleDateFormat(""dd.MM.yyyy"");
      final FastDateFormat fastDateFormatter =
FastDateFormat.getInstance(""dd.MM.yyyy"");
      final Date date = simpleDateFormatter.parse( dateString );
      assertEquals(simpleDateFormatter.format( date ),  dateString,
simpleDateFormatter.format( date ));
      assertEquals(fastDateFormatter.format( date ),  dateString,
fastDateFormatter.format( date ));
   }","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,39408.0,,,,,,false,,,,,,,,,,,,,,34051,,,Wed Apr 26 21:50:42 UTC 2006,,,,,,0|i0d6p3:,74861,,,,,,,,"26/Apr/06 21:50;abinet@gmail.com;

*** This bug has been marked as a duplicate of 39410 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[LANG] SystemUtils does not play nice in an Applet,LANG-113,12340722,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,becke@u.washington.edu,becke@u.washington.edu,23/May/03 00:52,16/May/06 12:39,07/Apr/19 20:37,16/May/06 12:39,2.0,,,,2.0,,,,,0,,,,,,,,"SystemUtils accesses a number of System properties statically.  Most of them are
default readable in an unsigned Applet, except for java.class.path.  So, any
access to SystemUtils from an unsigned Applet causes problems.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,23/May/03 21:47;becke@u.washington.edu;ASF.LICENSE.NOT.GRANTED--systemProperty.patch;https://issues.apache.org/jira/secure/attachment/12332283/ASF.LICENSE.NOT.GRANTED--systemProperty.patch,23/May/03 00:53;becke@u.washington.edu;ASF.LICENSE.NOT.GRANTED--systemProperty.patch;https://issues.apache.org/jira/secure/attachment/12332282/ASF.LICENSE.NOT.GRANTED--systemProperty.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,20165.0,,,2003-05-23 04:54:36.0,,,false,,,,,,,,,,,,,,147060,,,Sat May 24 20:44:09 UTC 2003,,,,,,0|i0d6pb:,74862,,,,,,,,"23/May/03 00:53;becke@u.washington.edu;Created an attachment (id=6460)
possible fix
","23/May/03 00:55;becke@u.washington.edu;Attached is a patch that fixes this problem by using a default value when
java.class.path cannot be read.  This could also be applied to the other
properties, if necessary.","23/May/03 04:54;scolebourne@joda.org;Patch applied, with change made to all properties.
Thanks","23/May/03 07:11;ggregory@seagullsw.com;Should a notification be printed on System.err when the SecurityException is 
detected? 

I am wondering if not printing anything will cause people to have to dig deep 
in their debugger just to find out that they need to tweak their security if 
that is appropriate for their configuration. ","23/May/03 10:06;becke@u.washington.edu;Agreed, burying exceptions like this could be annoying.  Is System.err used in other places in 
Lang?","23/May/03 10:41;ggregory@seagullsw.com;FYI, the references to System.err are:

Apache Jakarta Commons/lang/src/java - 
org.apache.commons.lang.exception.ExceptionUtils.printRootCauseStackTrace
(Throwable) : void
Apache Jakarta Commons/lang/src/java - 
org.apache.commons.lang.exception.NestableDelegate.printStackTrace() : void
Apache Jakarta Commons/lang/src/java - 
org.apache.commons.lang.reflect.MethodUtils.log(Object) : void
Apache Jakarta Commons/lang/src/java - 
org.apache.commons.lang.reflect.MethodUtils.log(Object, Throwable) : void (2 
matches)","23/May/03 21:47;becke@u.washington.edu;Created an attachment (id=6470)
fix 2
","23/May/03 21:49;becke@u.washington.edu;Attached above is a new patch for this problem.  This patch adds an error
message and changes the default property to """".  I think defaulting to null is a
bad idea as it has the potential to cause NPEs.  In particular if java.version
cannot be read there will be gauranteed NPEs with the IS_JAVA_1_1_* variables.","24/May/03 20:44;scolebourne@joda.org;I have added the error message.

I have left the return type as null. This is consistent with the use of this 
class on early JVMs where a property is not available.

I have added code to handle all cases (in SystemUtils) where a field may be 
null.
",,,,,,,,,,,,,,,,,,,,,,
[lang] Wrong length check in StrTokenizer.StringMatcher,LANG-112,12342440,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,oliver.heger@t-online.de,oliver.heger@t-online.de,07/Aug/05 01:04,16/Oct/13 08:55,07/Apr/19 20:37,06/Feb/07 23:47,,,,,2.2,,,,,0,,,,,,,,"The length check in StringMatcher's isMatch() method causes the matcher to stop
one character too early. So a match at the very end of the source data won't be
detected.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,07/Aug/05 01:06;oliver.heger@t-online.de;ASF.LICENSE.NOT.GRANTED--StrTokenizer.diff;https://issues.apache.org/jira/secure/attachment/12333689/ASF.LICENSE.NOT.GRANTED--StrTokenizer.diff,07/Aug/05 01:07;oliver.heger@t-online.de;ASF.LICENSE.NOT.GRANTED--StrTokenizerTest.diff;https://issues.apache.org/jira/secure/attachment/12333690/ASF.LICENSE.NOT.GRANTED--StrTokenizerTest.diff,,,,,,,,,2.0,,,,,,,,,,,,,,,,36059.0,,,2005-08-07 03:55:04.0,,,false,,,,,,,,,,,,,,34113,,,Sun Aug 07 03:55:04 UTC 2005,,,,,,0|i0d6pj:,74863,,,,,,,,"07/Aug/05 01:06;oliver.heger@t-online.de;Created an attachment (id=15931)
Trivial patch to solve the problem
","07/Aug/05 01:07;oliver.heger@t-online.de;Created an attachment (id=15932)
New test case demonstrating the bug
","07/Aug/05 03:55;ggregory@seagullsw.com;Thank you Oliver.
Patches applied and slightly tweaked. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lang] time unit tests fail on Sundays,LANG-111,12340679,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,27/Apr/03 21:49,16/May/06 12:40,07/Apr/19 20:37,16/May/06 12:40,2.0,,,,2.0,,,,,0,,,,,,,,"The time unit tests fail when run on a Sunday:

test.time:
     [echo] Running time package tests ...
     [java] ...F.F................
     [java] Time: 4.394
     [java] There were 2 failures:
     [java] 1)
testParse(org.apache.commons.lang.time.CalendarUtilsTest)junit.framework.AssertionFailedError:
parse last Sunday expected Sun Apr 27 06:39:17 MST 2003 but got Sun Apr 20
06:39:17 MST 2003
     [java] 	at
org.apache.commons.lang.time.CalendarUtilsTest.assertEquals(CalendarUtilsTest.java:373)
     [java] 	at
org.apache.commons.lang.time.CalendarUtilsTest.testParse(CalendarUtilsTest.java:243)
     [java] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     [java] 	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
     [java] 	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
     [java] 2)
testWeekIterator(org.apache.commons.lang.time.CalendarUtilsTest)junit.framework.AssertionFailedError:
 expected Mon Apr 28 00:00:00 MST 2003 but got Mon Apr 21 00:00:00 MST 2003
     [java] 	at
org.apache.commons.lang.time.CalendarUtilsTest.assertEquals(CalendarUtilsTest.java:373)
     [java] 	at
org.apache.commons.lang.time.CalendarUtilsTest.assertWeekIterator(CalendarUtilsTest.java:346)
     [java] 	at
org.apache.commons.lang.time.CalendarUtilsTest.assertWeekIterator(CalendarUtilsTest.java:324)
     [java] 	at
org.apache.commons.lang.time.CalendarUtilsTest.testWeekIterator(CalendarUtilsTest.java:284)
     [java] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     [java] 	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
     [java] 	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)

Looks to me like the unit test code is checking the value of Calendar.DATE, when
it should be looking at Calendar.DAY_OF_WEEK (at line 237 and below) to decide
whether to make adjustments for today==Sunday.

When I fix this, testParse succeeds but testWeekIterator hangs at the statement
it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_RELATIVE);","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,24/May/03 11:04;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--CalendarUtilsTestPatch.txt;https://issues.apache.org/jira/secure/attachment/12332241/ASF.LICENSE.NOT.GRANTED--CalendarUtilsTestPatch.txt,30/Apr/03 03:30;mohankishore@yahoo.com;ASF.LICENSE.NOT.GRANTED--Patch.txt;https://issues.apache.org/jira/secure/attachment/12332240/ASF.LICENSE.NOT.GRANTED--Patch.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,19364.0,,,2003-04-30 02:52:33.0,,,false,,,,,,,,,,,,,,147059,,,Mon Jun 09 06:18:52 UTC 2003,,,,,,0|i0d6pr:,74864,,,,,,,,"30/Apr/03 02:52;mohankishore@yahoo.com;Just a note, the CalendarUtils.getCalendarIterator(now, 
CalendarUtils.RANGE_WEEK_RELATIVE) hangs irrespective of the changes to the 
test-case. i.e. it will always hang if run on a sunday.

It is just getting highlighted as currently, the assert just ahead of it fails 
on sundays. Hence, either everything runs fine, or the (unrelated) assert in 
front of it fails.

As suggested, there are 2 places currently which need to be 
Calendar.DAY_OF_WEEK and not DATE. The RANGE_WEEK_RELATIVE logic needs to be 
investigated.","30/Apr/03 03:30;mohankishore@yahoo.com;Created an attachment (id=6081)
DATE to DAY_OF_WEEK, in test-case and minor fix in CalendarUtils
","24/May/03 11:02;phil@steitz.com;I am attaching another patch to CalendarUtilsTest.java that runs
testWeekIterator() in a loop, incrementing the reference date in a loop to hit
all days of the week.

This patch also fixes the error in the test identified above (Calendar.DATE
should be Calendar.DAY_OF_WEEK) in two places.  

Applying this patch will cause the test to hang, since it exposes the
CalendarUtils bug identified (and patched) by Mohan above.  This bug causes
getCalendarIterator(Calendar focus, int rangeStyle) to go into an infinite loop
when focus is a Sunday and rangeStyle is RANGE_WEEK_RELATIVE.  Mohan's patch to
CalendarUtils handles the boundary cases.  When it is applied, all tests,
(including the loop addition) succeed.","24/May/03 11:04;phil@steitz.com;Created an attachment (id=6476)
patch to run testWeekIterator in a loop over start days
","09/Jun/03 06:18;scolebourne@joda.org;All patches applied, plus many other changes in time package.
Thanks for the patches.",,,,,,,,,,,,,,,,,,,,,,,,,,
Added class hierachy support to HashCodeBuilder.reflectionHashCode(),LANG-110,12340498,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,18/Jan/03 06:41,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:43,2.0,,,,2.0,,,,,0,,,,,,,,"Added class hierachy support to HashCodeBuilder.reflectionHashCode() with the 
following patches.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,18/Jan/03 06:46;ASF.LICENSE.NOT.GRANTED--HashCodeBuilder.patch-1.8.java;https://issues.apache.org/jira/secure/attachment/12332107/ASF.LICENSE.NOT.GRANTED--HashCodeBuilder.patch-1.8.java,18/Jan/03 06:47;ASF.LICENSE.NOT.GRANTED--HashCodeBuilderTest.patch-1.2.java;https://issues.apache.org/jira/secure/attachment/12332108/ASF.LICENSE.NOT.GRANTED--HashCodeBuilderTest.patch-1.2.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,16228.0,,,2003-01-18 06:46:31.0,,,false,,,,,,,,,,,,,,147058,,,Mon Jan 20 01:49:23 UTC 2003,,,,,,0|i0d6pz:,74865,,,,,,,,"18/Jan/03 06:46;ggregory@seagullsw.com;Created an attachment (id=4485)
Patch for HashCodeBuilder v.1.8
","18/Jan/03 06:47;ggregory@seagullsw.com;Created an attachment (id=4486)
Patch for HashCodeBuilderTest v.1.2
","20/Jan/03 01:49;scolebourne@joda.org;Patches applied, thank you ;-)
Stephen",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] HashCodeBuilder failed to generate unique hashcode,LANG-109,12341890,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Incomplete,,bsun@ball.com,bsun@ball.com,24/Nov/04 03:25,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,,,,,,0,,,,,,,,"HashCodeBuilder class failed to generate unique hashcode for objects.

Here are codes to reproduce the problem:

import org.apache.commons.lang.builder.HashCodeBuilder;

public class Person
{
    public int id;
    public String name;

    public Person(int id, String name)
    {
        this.id=id;
        this.name = name;
    }

    public int hashCode()
    {
        return new HashCodeBuilder(17,37).
                append(id).
                append(name).
                toHashCode();
    }
}

package com.ball.edi.prototype;

public class TestHashCode
{
    static public void main(String args[])
    {
        Person p1=new Person(214686, ""03065"");
        Person p2=new Person(214691, ""03006"");

        System.out.println(""The hashcode for p1 is "" + p1.hashCode());
        System.out.println(""The hashcode for p2 is "" + p2.hashCode());
    }
}

When you ran TestHashCode class, you will get 

The hashcode for p1 is 53862859
The hashcode for p2 is 53862859

I found this problem when I am using OJB.

Thanks.","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,32364.0,,,2004-11-24 04:25:37.0,,,false,,,,,,,,,,,,,,34095,,,Sat Dec 18 11:51:28 UTC 2004,,,,,,0|i0d6q7:,74866,,,,,,,,"24/Nov/04 04:25;ggregory@seagullsw.com;This might be a case where the pattern:

        return new HashCodeBuilder(17,37).
                append(id).
                append(name).
                toHashCode();

is not a fit the domain object. If the ""id"" is unique you can just return the id
for the hash code. The general case where the id AND the name need to be used as
a  primary key is going to be a problem for hash codes in general I think since
we only have the int range.

Anyone else care to comment please?","24/Nov/04 05:21;bsun@ball.com;I just created the simple code so that the problem can be easily reproduced.
The problem actually happened in using OJB to query data from AS400/DB2
database where usually several columns are together used as primary keys.

Thanks.

Bruce
(In reply to comment #1)
> This might be a case where the pattern:
> 
>         return new HashCodeBuilder(17,37).
>                 append(id).
>                 append(name).
>                 toHashCode();
> 
> is not a fit the domain object. If the ""id"" is unique you can just return the id
> for the hash code. The general case where the id AND the name need to be used as
> a  primary key is going to be a problem for hash codes in general I think since
> we only have the int range.
> 
> Anyone else care to comment please?

","24/Nov/04 07:21;ggregory@seagullsw.com;Hi,

If you want to use and int and a String together as a primary key/hash code,
then I think you will run into issues unless the value range of id and name can
be reduced. 

Hash codes are ints, so you can have as many unique hash codes for a set of
objects as you can have ints, which is Integer.MIN_VALUE to Integer.MAX_VALUE. A
simplification would be to say that you can have Integer.MAX_VALUE * 2 hash codes.

If your int id can have all int legal values AND you can have any String to
create your primary keys then you'll run out of int hash codes to cover all the
cases.

So, defining the legal range of values for id and name is where to start. From
there, a proper hashCode() method can be coded. We can then see how the
HashCodeBuilder class be improved to help you.

","25/Nov/04 08:12;scolebourne@joda.org;The problem with this bug report is the initial statement.

""HashCodeBuilder class failed to generate unique hashcode for objects.""

HashCodes are not unique.
I suggest reading the Javadoc of Object.hashCode() to clarify this point.","25/Nov/04 08:50;ggregory@seagullsw.com;Indeed I should have been more careful in my comment. Thanks for clarifying.

For reference from the Sun Javadoc: 

""As much as is reasonably practical, the hashCode method defined by class Object
does return distinct integers for distinct objects. (This is typically
implemented by converting the internal address of the object into an integer,
but this implementation technique is not required by the JavaTM programming
language.)""","30/Nov/04 03:06;bsun@ball.com;I appended the string first and then integer and seem to get different
hashcode back. But the problem may come back for some other combinations.

Many thanks for comments posted.

Bruce","18/Dec/04 11:51;bayard;Stephen's point seems to nullify this as being a bug. Marking as INVALID (sorry
it's such a cold term Bruce).",,,,,,,,,,,,,,,,,,,,,,,,
"[lang] Compile error with JDK 5 ""enum"" is a keyword",LANG-108,12341762,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,m.menner@stream-line.de,m.menner@stream-line.de,30/Sep/04 12:55,02/May/13 02:28,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,,,,,,0,,,,,,,,"As ""enum"" is a keyword in JDK 5 this gives trouble with the
org.apache.commons.lang.enum package","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31478.0,,,2004-09-30 13:25:31.0,,,false,,,,,,,,,,,,,,147057,,,Thu Sep 30 13:25:31 UTC 2004,,,,,,0|i0d6qf:,74867,,,,,,,,"30/Sep/04 13:25;bayard;Lang 2.1 will deprecate the enum package in favour of enums, while Lang 3.0 will remove the enum 
package all together.

So, it's in the works :) Thanks.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FastDateFormat year bug,LANG-107,12341716,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,12/Sep/04 12:10,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:20,,,,,2.1,,,,,0,,,,,,,,"Jerson Chua reports in an email entitled: ""FastDateFormat year bug ""

I used FastDateFormat to convert a date object to string using this pattern yyyy-MM-dd.
No zeros are padded if I my year is 0001. Iâm getting 1-01-01.

After looking through the code, I replaced line 498

rule = UnpaddedNumberField.INSTANCE_YEAR;

to

rule = selectNumberRule(Calendar.YEAR, tokenLen);

And it fixed the problem.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31181.0,,,,,,false,,,,,,,,,,,,,,147056,,,Wed Apr 26 13:11:04 UTC 2006,,,,,,0|i0d6qn:,74868,,,,,,,,12/Sep/04 12:12;bayard;Test added and source fixed with Jerson's suggestion.,"26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] StringUtils#getLevenshteinDistance() performance is sub-optimal,LANG-106,12342963,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,cedrik.lime@gmail.com,cedrik.lime@gmail.com,10/Mar/06 02:20,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,,,,,2.2,,lang.*,,,0,,,,,,,,"The implementation of Commons Lang StringUtils#getLevenshteinDistance(String,
String) is based on work from <http://www.merriampark.com/ld.htm>. While this
implementation works, it is *very* memory hungry and can thus slow down heavy
computations (GC has much more to collect in memory-constrained environment).
Actual implementation needs x*y byte of memory.

An improved implementation can be found at
<http://www.merriampark.com/ldjava.htm>, which can lead to performance
improvements of up to 3 times (my own internal benchmarks in low-memory
situation). This new implementation needs x+y bytes of memory.

Please change the getLevenshteinDistance() implementation to use the one at
<http://www.merriampark.com/ldjava.htm>.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,10/Mar/06 05:02;cedrik.lime@gmail.com;ASF.LICENSE.NOT.GRANTED--LevenshteinDistance.java;https://issues.apache.org/jira/secure/attachment/12334062/ASF.LICENSE.NOT.GRANTED--LevenshteinDistance.java,10/Mar/06 05:01;cedrik.lime@gmail.com;ASF.LICENSE.NOT.GRANTED--StringUtils.diff;https://issues.apache.org/jira/secure/attachment/12334061/ASF.LICENSE.NOT.GRANTED--StringUtils.diff,,,,,,,,,2.0,,,,,,,,,,,,,,,,38911.0,,,2006-03-10 02:32:58.0,,,false,,,,,,,,,,,,,,147055,,,Tue Mar 14 14:24:31 UTC 2006,,,,,,0|i0d6qv:,74869,,,,,,,,10/Mar/06 02:32;ggregory@seagullsw.com;Cédrik: Please feel free to provide a diff patch.,"10/Mar/06 05:01;cedrik.lime@gmail.com;Created an attachment (id=17858)
patch file

Diff between original StringUtils.java and my patched one.","10/Mar/06 05:02;cedrik.lime@gmail.com;Created an attachment (id=17859)
Source code for new implementation

In case I didn't get the pach file right... :)","14/Mar/06 13:59;bayard;
Here's the history:
http://mail-archives.apache.org/mod_mbox/jakarta-commons-dev/200310.mbox/%3CA34BA4886ADBBD4A804452178366659B160B14@solidus-fs1.solidusnetworks.com%3E

Not sure why it didn't get applied - either I dropped the ball, or I was waiting
for a second reply.","14/Mar/06 14:08;bayard;Code applied. Unit tests pass. 

I'll drop an email to both Chas Emerick and Michael Gilleland to let them know
the code has finally gone in - my fault two and a half years ago.","14/Mar/06 14:24;bayard;Sending        src/java/org/apache/commons/lang/StringUtils.java
Transmitting file data .
Committed revision 385745. ",,,,,,,,,,,,,,,,,,,,,,,,,
[lang] ExceptionUtils goes into infinite loop in getThrowables is throwable.getCause() == throwable,LANG-105,12342623,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,andylehane@hotmail.com,andylehane@hotmail.com,12/Oct/05 17:01,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.1,,,,2.2,,,,,0,,,,,,,,"The ExceptionUtils.getThrowables(throwable) can loop for ever if
throwable.getCause() == throwable.


The following code should fix this:

    public static Throwable[] getThrowables(final Throwable throwable) {
        List list = new ArrayList();
        
        if (throwable != null) {
            Throwable cause = throwable.getCause();
            list.add(throwable);
            while (cause != null && cause != throwable) {
                list.add(cause);
                cause = ExceptionUtils.getCause(cause);
            }
        }
        
        return (Throwable[]) list.toArray(new Throwable[list.size()]);
    }

Also, the getCauseUsingWellKnownTypes(throwable) should be enhanced to avoid the
same problems:

    private static Throwable getCauseUsingWellKnownTypes(Throwable throwable) {
        if (throwable instanceof Nestable && throwable.getCause() != throwable) {
            return ((Nestable) throwable).getCause();
        } else if (throwable instanceof SQLException) {
            return ((SQLException) throwable).getNextException();
        } else if (throwable instanceof InvocationTargetException) {
            return ((InvocationTargetException) throwable).getTargetException();
        } else {
            return null;
        }
    }


Cheers

Andy","Operating System: Windows 2000
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37038.0,,,2005-10-20 05:08:00.0,,,false,,,,,,,,,,,,,,147054,,,Thu Mar 30 07:08:30 UTC 2006,,,,,,0|i0d6r3:,74870,,,,,,,,20/Oct/05 05:08;ggregory@seagullsw.com;Could you provide a unit test patch that reproduces the problem? Thank you.,30/Mar/06 07:08;scolebourne@joda.org;Fixed in SVN,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NestableException API DOC not accurate,LANG-104,12340905,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Cannot Reproduce,,gehl_p@hotmail.com,gehl_p@hotmail.com,14/Aug/03 02:11,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,1.0.1,,,,,,,,,0,,,,,,,,"Context :
I use a sub class of NestableException which needs to be serializable because 
thrown in a session EJB.

Problem :
Each time i throw my exception i get 
a ""org.apache.commons.lang.exception.NestableException is not serializable"" 
exception.

Bug :
When I look at the following API documentation 
http://jakarta.apache.org/commons/lang/api/org/apache/commons/lang/exception/Ne
stableException.html i see that NestableException implements Serializable but 
when I look at the code in the commons-lang-src-20030813.zip archive I see 
that NestableException declaration is only
""public class NestableException extends Exception implements Nestable"".

Thanks","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,22393.0,,,2003-08-15 07:42:25.0,,,false,,,,,,,,,,,,,,147053,,,Sat Nov 29 23:08:13 UTC 2003,,,,,,0|i0d6rb:,74871,,,,,,,,"15/Aug/03 07:42;bayard;Going back to at least JDK 1.2.2, java.lang.Throwable implemented Serializable. Anyone 
with ideas on what could be going wrong here?

I thought maybe that Nestable was declaring itself to be Serializable at one point, but 
looking at the CVS history it never has been such. The only class in the lang.exception 
package to mess with Serializable has been NestableDelegate.
","15/Aug/03 08:37;ggregory@seagullsw.com;FWIW, Sun's Java 1.1.8 defines Throwable as:
public class Throwable extends Object implements Serializable ","15/Aug/03 13:44;phil@steitz.com;Looks to me like serialization of NestableException is tested in
NestableExceptionTestCase.testSerialization()

It would help to see some sample code showing the failure.",29/Nov/03 23:08;scolebourne@joda.org;Closing as WORKSFORME (unreproducable),,,,,,,,,,,,,,,,,,,,,,,,,,,
make optional parameters in FastDateFormat really optional,LANG-103,12341014,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,n.metchev@teamphone.com,n.metchev@teamphone.com,03/Oct/03 18:14,16/May/06 12:34,07/Apr/19 20:37,16/May/06 12:34,2.0,,,,2.1,,,,,0,,,,,,,,"I have a patch which overloads the getTimeInstance and getDateInstance and 
getDateTimeInstance so that their parameters are trully optional!","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,03/Oct/03 18:15;n.metchev@teamphone.com;ASF.LICENSE.NOT.GRANTED--optionalparams.txt;https://issues.apache.org/jira/secure/attachment/12332557/ASF.LICENSE.NOT.GRANTED--optionalparams.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,23590.0,,,2003-11-29 21:53:06.0,,,false,,,,,,,,,,,,,,147052,,,Wed Apr 26 13:10:43 UTC 2006,,,,,,0|i0d6rj:,74872,,,,,,,,"03/Oct/03 18:15;n.metchev@teamphone.com;Created an attachment (id=8439)
optinal parameters patch
","29/Nov/03 21:53;scolebourne@joda.org;Patch applied, thanks","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Refactor Entities methods,LANG-102,12343042,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,24/Apr/06 13:19,06/Feb/07 23:47,07/Apr/19 20:37,01/Jan/07 23:29,2.2,,,,2.3,,,,,0,,,,,,,,"The pairs of escape and unescape methods in Entities need to be modified so that
they call each other (one escape to the other escape etc). Otherwise there's a
large chunk of repeated code that gives us a high chance of errors.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,01/Dec/06 00:13;tblachowicz;Entities.java.patch;https://issues.apache.org/jira/secure/attachment/12346173/Entities.java.patch,30/Nov/06 16:15;tblachowicz;Entries.java.patch;https://issues.apache.org/jira/secure/attachment/12346139/Entries.java.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,39387.0,,,2006-11-30 16:15:50.0,,,false,,,,,,,,,,,,,,147051,,,Mon Jan 01 23:29:28 UTC 2007,,,,,,0|i0d6rr:,74873,,,,,,,,30/Nov/06 16:15;tblachowicz;Patch for class org.apache.commons.lang.Entities (src/java/org/apache/commons/lang/Entities.java),"30/Nov/06 16:21;tblachowicz;I have one comment regarding the patch I've contibuted.

There is a minor issue with IOException that could be thown by Entities.*escape(Writer, String) methods. Methods Entities.*escape(String) don't declare IOException so I decided to catch it and wrap within bare RuntimeException. Although the exception can't occur since I pass java.io.StringWriter instance into Entities.*escape(Writer, String) methods.

If you don't like this approach pleas let me know.","01/Dec/06 00:13;tblachowicz;Patch for class org.apache.commons.lang.Entities (src/java/org/apache/commons/lang/Entities.java)

/ignore previously submitted patch, it's a wrong file/",01/Jan/07 23:25;ggregory@seagullsw.com;Refactored escape and unescape methods to remove code duplication.,"01/Jan/07 23:27;ggregory@seagullsw.com;FWIW, I could not use the attached patch files. They appear to be too old to match against what was in SVN. So I refactored from scratch, no biggie.",01/Jan/07 23:29;ggregory@seagullsw.com;committed.,,,,,,,,,,,,,,,,,,,,,,,,,
make DurationFormatUtils public!,LANG-101,12340992,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,n.metchev@teamphone.com,n.metchev@teamphone.com,23/Sep/03 23:58,02/May/13 02:28,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,,,,,,0,,,,,,,,"I think the summary says it all! Any Idea when this will happen is it on the 
plan for the next release?","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,LANG-224,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,23356.0,,,2003-09-24 04:00:04.0,,,false,,,,,,,,,,,,,,147050,,,Sun Jun 27 11:11:20 UTC 2004,,,,,,0|i0d6rz:,74874,,,,,,,,"24/Sep/03 04:00;scolebourne@joda.org;It requires test cases, and better methods that allow the format to be 
controlled. All help will be welcomed ;-)","24/Sep/03 15:32;n.metchev@teamphone.com;making it public shouldn't require test cases and any other functionality than 
it already has. If you make it public it will lead to more help because more 
people will use it. As it is now it shouldn't even be shipped with the jar.","27/Jun/04 11:11;bayard;Having high test coverage is an important target for Lang, so things do not get
released (read made public) without being covered somewhat.

However, is planned for this to be on the next release, and marking this as a
dupe of #15082.

*** This bug has been marked as a duplicate of 15082 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] RandomStringUtils.random() family of methods create invalid unicode sequences,LANG-100,12342756,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,stefanhoehne@fastmail.fm,stefanhoehne@fastmail.fm,29/Nov/05 21:57,06/Feb/07 23:47,07/Apr/19 20:37,27/Jun/06 07:28,2.1,,,,2.2,,,,,0,,,,,,,,"Problem are surrogate pairs: 
E.g. RandomStringUtils.random(int) may create strings with a high surrogate not
followed by a low surrogate character.

When processing them, we get errors in string-conversion-functions later on.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37690.0,,,2005-12-01 13:19:10.0,,,false,,,,,,,,,,,,,,34056,,,Tue Jun 27 07:28:09 UTC 2006,,,,,,0|i0d6s7:,74875,,,,,,,,"01/Dec/05 13:19;ggregory@seagullsw.com;Can you please provide a unit test case patch to demonstrate the issue? Thanks,
Gary.","06/Dec/05 05:35;stefanhoehne@fastmail.fm;Sorry, have never added a unit test patch. 

Here is a junit test case showing the problem. 

	/**
	 * Creates a human readable representation of any unicode character.
	 * @param c - a unicode character
	 * @return human readable representation for c
	 */
	static public String makeStringFromChar(char c)
	{
		// dirty for getting the char code from a character
		return Integer.toHexString((new Character(c)).hashCode());
	}

	/**
	 * Checks if the string got by {@link RandomStringUtils#random(int)} 
	 * can be converted to UTF-8 and back without loss.
	 * 
	 * @author stefanhoehne@fastmail.fm
	 * @throws Exception
	 */
	public void testRandom() throws Exception
	{
		final int size = 5000;
		final String encoding = ""UTF-8"";
		final String orig = RandomStringUtils.random(size);
		final byte[] bytes = orig.getBytes(encoding);
		final String copy = new String(bytes, encoding);

		// for a verbose compare:
		for (int i=0; i<orig.length() && i<copy.length(); ++i)
		{
			char o = orig.charAt(i);
			char c = copy.charAt(i);
			assertEquals(""differs at "" + i + ""("" + makeStringFromChar(o) + "","" +
makeStringFromChar(c) + "")"", o, c);
		}
		// compare length also
		assertEquals(orig.length(), copy.length());
		// just to be complete
		assertEquals(orig, copy);
	}","24/Apr/06 13:45;bayard;Test indeed fails. 

Codewise, the a start of 0 and an end of Integer.MAX_VALUE are used. Each time
around the loop a random number is created and the following test is applied:

            if ((letters && Character.isLetter(ch))
                || (numbers && Character.isDigit(ch))
                || (!letters && !numbers)) { 

In this case, letters and numbers are false, so it passes quite happily (as it's
not a random restricted to letters or digits). 

So we need to be adding another test here, whether the character is correct
unicode for the high/low surrogate bit. Googling, it looks like high surrogates
are on the range 55296 (D800) to 56191 (DB7F); and there are 'private use high
surrogates' from 56192 (DB80) to 56319 (DBFF). So if a random character exists
within that range, the following character must be a low surrogate. 

Low surrogates are 56320 (DC00) to 57343 (DFFF). 

So, dumb pseudo-code:

if(char > 55296 && char < 56191)
    count--
    char[count] = 56320 + random(128)

But I don't get what the private high surrogates are, I can't find the 'low'
alternative (not that I understand much of this). Was looking at this site: 
http://www.alanwood.net/unicode/private_use_high_surrogates.html

Any thoughts?","27/Jun/06 07:28;bayard;Fixed for high/low I believe, but private high get skipped currently.

svn ci -m ""Adding a test and a fix for LANG-100. This is a bug in which the randomly created String can some
times be illegal unicode; because the code does not consider when relationships exist between characters. High and low surrogates are now dealt with, but I'm skipping private high surrogates because I can't find out what to do. Need to go plod very slowly through the spec. This site was very useful: http://www.alanwood.net/unicode/private_use_high_surrogates.html"" src/*/org/apache/commons/lang/Random*

Sending        src/java/org/apache/commons/lang/RandomStringUtils.java
Sending        src/test/org/apache/commons/lang/RandomStringUtilsTest.java
Transmitting file data ..
Committed revision 417319.",,,,,,,,,,,,,,,,,,,,,,,,,,,
new StringUtils.replaceChars behaves differently from old CharSetUtils.translate,LANG-99,12341147,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,loren@siebert.org,loren@siebert.org,12/Dec/03 03:15,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.1,,lang.*,,,0,,,,,,,,"The CharSetUtils.translate(String str, String searchChars, String replaceChars) 
method from Lang 1.0.1 is marked deprecated, pointing me at 
StringUtils.replaceChars(String str, String searchChars, String replaceChars) 
from Lang 2.0. The routines are coded quite differently, and in fact yield 
different outputs at times. StringUtils.replaceChars() does not translate some 
strings properly.

String original=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789"";
String trans=""nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234"";
System.out.println(CharSetUtils.translate(""d216.102oren"", original, trans));
System.out.println(StringUtils.replaceChars(""d216.102oren"", original, trans));

Running this fragment gets me this:
q651.506bera
d141.401beea

The first one is correct.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,25454.0,,,2003-12-12 06:23:30.0,,,false,,,,,,,,,,,,,,34075,,,Wed Apr 26 13:10:55 UTC 2006,,,,,,0|i0d6sf:,74876,,,,,,,,"12/Dec/03 06:23;ggregory@seagullsw.com;Well, this is a tricky one. I feel the basic problem is that the Javadoc
underspecifies the behavior of both methods, so perhaps we could discuss first
what the behavior /should be/. 

The heart of the problem is that the CharSetUtils method is a one pass map-style
of method, while the StringUtils method is not, it uses a nested loop, which is
somewhat contradictory to the Javadoc comment of doing the work ""in one go"".","12/Dec/03 07:17;loren@siebert.org;This sort of translate functionality exists in other languages, too. Perl and 
PHP both have them, and they work the way that translate() worked in 1.0.1. 
Regardless of what the new replaceChars() method is trying to do, it would be 
nice to have something backwards compatible with translate() that shares common 
behavior with similar methods in other languages.","11/Mar/04 07:56;scolebourne@joda.org;CVS implementation now works for the supplied test case.
ReplaceChars() differs from Translate() in the deletion behaviour when 
replaceChars is shorter than searchChars. This is documented in CharSetUtils.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] DurationFormatUtils.formatDurationWords() incorrectly formats values ending in 1 but greater than 1,LANG-98,12342534,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,asf.robmoore@xoxy.net,asf.robmoore@xoxy.net,07/Sep/05 00:45,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.1,,,,,,,,,0,,,,,,,,"Currently, values ending in 1 but greater than 1 (41, for example) return a
non-plural response (second, hour, day, etc). The culprit code appears to be at
the end of the method:

// handle plurals
duration = StringUtils.replaceOnce(duration, ""1 seconds"", ""1 second"");
duration = StringUtils.replaceOnce(duration, ""1 minutes"", ""1 minute"");
duration = StringUtils.replaceOnce(duration, ""1 hours"", ""1 hour"");
duration = StringUtils.replaceOnce(duration, ""1 days"", ""1 day"");

One approach to fix this might be to use a regular expression to replace only if
 1 appears as a single digit rather than with another digit. 

I'm thinking of something like: (duration.replaceFirst(""([^\\d])(\\d) seconds"",
""$1$2 second"")","Operating System: Linux
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36522.0,,,2006-03-06 15:46:24.0,,,false,,,,,,,,,,,,,,34031,,,Mon Mar 06 15:46:24 UTC 2006,,,,,,0|i0d6sn:,74877,,,,,,,,"06/Mar/06 15:46;bayard;Already fixed in SVN - thanks for taking the time to report it though.

*** This bug has been marked as a duplicate of 37596 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
typo in the javadoc example code,LANG-97,12340492,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,michael.schulze@t-systems.com,michael.schulze@t-systems.com,17/Jan/03 21:57,16/May/06 12:44,07/Apr/19 20:37,16/May/06 12:44,2.0,,,,2.0,,,,,0,,,,,,,,"in the example code for the CompareToBuilder included in the JavaDoc class
comment, the method is incorrectly called comapareTo instead of compareTo.

public int comapareTo(Object o)","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16202.0,,,2003-01-20 01:53:30.0,,,false,,,,,,,,,,,,,,147049,,,Mon Jan 20 01:53:30 UTC 2003,,,,,,0|i0d6sv:,74878,,,,,,,,"20/Jan/03 01:53;scolebourne@joda.org;Change made, thanks.
Stephen",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
SystemUtils.IS_JAVA_1_5 Javadoc is wrong,LANG-96,12340452,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,07/Dec/02 07:57,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:44,2.0,,,,2.0,,,,,0,,,,,,,,"http://jakarta.apache.org/commons/lang/api/org/apache/commons/lang/SystemUtils.h
tml#IS_JAVA_1_5

Should talk about 1.5 not 1.3.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,15154.0,,,2002-12-09 00:20:39.0,,,false,,,,,,,,,,,,,,147048,,,Mon Dec 09 00:20:39 UTC 2002,,,,,,0|i0d6t3:,74879,,,,,,,,"09/Dec/02 00:20;scolebourne@joda.org;Fixed, thanks. The website will be updated with the next release.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] StringUtils.defaultString: Documentation error,LANG-95,12341409,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,chdh@inventec.ch,chdh@inventec.ch,19/Apr/04 20:53,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.1,,lang.*,,,0,,,,,,,,"There is an error in the JavaDoc description of the second version of 
StringUtils.defaultString.

The current version is:
defaultString(String str, String defaultStr)
Returns either the passed in String, or if the String is null, an empty String 
("""").

The correct version should be, e.g.:
Returns either the passed in String, or if the String is null, the value of 
<code>defaultStr</code>.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,28468.0,,,2004-05-25 03:17:39.0,,,false,,,,,,,,,,,,,,147047,,,Wed Apr 26 13:11:00 UTC 2006,,,,,,0|i0d6tb:,74880,,,,,,,,25/May/04 03:17;fredrik.westermarck@mdh.se;Patch applied.,"26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] NumberUtils.isNumber allows illegal trailing characters,LANG-94,12340764,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,06/Jun/03 11:14,16/May/06 12:39,07/Apr/19 20:37,16/May/06 12:39,2.0,,,,2.0,,,,,0,,,,,,,,"This bug report is based on a post to commons-dev from Eric Pugh.

I am attaching a patch that includes the test case that Eric posted and two
others that confirm that the current code will accept strings with trailing
characters that are not type qualifiers.

The patch also adds a check to NumberUtils.isNumber() that causes these strings
to be rejected. Assuming that my understanding of the code is correct, this
patch should fix the problem without changing behavior on other strings. All
other tests succeed with the patch applied.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,06/Jun/03 11:15;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--NumberUtilsPatches.txt;https://issues.apache.org/jira/secure/attachment/12332328/ASF.LICENSE.NOT.GRANTED--NumberUtilsPatches.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,20538.0,,,2003-06-06 11:18:15.0,,,false,,,,,,,,,,,,,,34096,,,Fri Oct 24 12:40:44 UTC 2003,,,,,,0|i0d6tj:,74881,,,,,,,,"06/Jun/03 11:15;phil@steitz.com;Created an attachment (id=6665)
patches to NumberUtils, NumberUtilsTest
","06/Jun/03 11:18;dep4b;I discovered one more thing...
It turns out strings like 1a1 or fine, it only affects things like 1a, 1b,1c -> 
1f.  1g according to isNumber is false.  So, I believe the issue is that it 
sees a number like 3b, and thinks it is hex!
Eric","06/Jun/03 12:52;phil@steitz.com;Interesting. Are you sure about 1g, 2b, etc.?  These return true for me.  Looks
to me like anything will be accepted as the last character as long as all
charactres before it are numeric.

","06/Jun/03 13:03;dep4b;Interesting..  I don't know why I thought that.. I thought I had a testcase 
that proved that a-f failed, g-z worked!

At any rate, I added this testcase:
 val = ""1z"";
        assertTrue(""isNumber(String) 15 Neg failed"", !NumberUtils.isNumber
(val));
        assertTrue(""isNumber(String)/createNumber(String) 15 Neg failed"", !
checkCreateNumber(val));

and it tanked...  1z apparently is a number according to NumberUtils.isNumber!
","08/Jun/03 21:22;scolebourne@joda.org;Patch applied (minor changes)
Thanks for spotting this one!","24/Oct/03 12:40;kochi@moon.hanya-n.org;How do you do. I also found such a thing.
The return value was true when ""1.."" was passed to NumberUtils.isNumber().
I think that I want ""1.."" to be false since it is not a numerical value.
",,,,,,,,,,,,,,,,,,,,,,,,,
StackOverflow due to ToStringBuilder,LANG-93,12340527,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,keeskuip@technologist.com,keeskuip@technologist.com,02/Feb/03 22:20,20/May/06 00:58,07/Apr/19 20:37,20/May/06 00:58,2.0,,,,2.0,,,,,1,,,,,,,,"The ToStringBuilder doesn't handle relations to other objects
very well. It's very easy to get into an never-ending-loop.
The following code will crash the JVM with a StackOverflowError :

import org.apache.commons.lang.builder.ToStringBuilder;

public class Test1
{
  Test1 test;

  public Test1() {}

  public void setTest(Test1 test)
  {
    this.test = test;
  }

  public String toString()
  {
    return ToStringBuilder.reflectionToString(this);
  }

  public static void main(String[] args)
  {
    Test1 test1;
    Test1 test2;

    test1 = new Test1();
    test2 = new Test1();
    test1.setTest(test2);
    test2.setTest(test1);

    System.out.println(test1.toString());
  }
}","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,14/Mar/03 11:58;ASF.LICENSE.NOT.GRANTED--ToStringBuilderRTest.java;https://issues.apache.org/jira/secure/attachment/12332129/ASF.LICENSE.NOT.GRANTED--ToStringBuilderRTest.java,,,,,,,,,,1.0,,,,,,,,,,,,,,,,16676.0,,,2003-02-04 07:36:18.0,,,false,,,,,,,,,,,,,,34105,,,Sat May 20 00:58:26 UTC 2006,,,,,,0|i0d6tr:,74882,,,,,,,,"04/Feb/03 07:36;ggregory@seagullsw.com;This example demonstrates that circular references in values, in this case, an 
object pointing to itself, causes an infinite loop. Detecting a cycle in an 
object graph is certainly possible but is it in the scope of the functionality 
of this method? And if so, how should it be represented? ","19/Feb/03 20:54;subterfusion@hotmail.com;Maybe a safeReflectionToString(Object) method would be a good idea, which caches
the toString-ed objects and refuses to process any Object more than once.","28/Feb/03 22:47;mparaz@mparaz.com;ToStringBuilder.reflectionToString() is static and creates a new
ToStringBuilder() on each call, with no knowledge of the previous calls. Thus
there's no way to maintain an object graph, keep state and ""remember"" what
objects have been appended to the StringBuffer. There's no way for us to know
that the toString() method will call reflectionToString() again. Am I right?","14/Mar/03 10:19;ggregory@seagullsw.com;I think you are correct since there is no object connection between 
ToStringBuilder and an arbitrary object's toString method which may or may not 
use ToStringBuilder. Would something like the nasty experiment below work in 
all cases?

package test;

import java.util.HashMap;
import java.util.Map;

import junit.framework.TestCase;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * @author ggregory
 */
public class ToStringBuilderRTest extends TestCase {

    public void testMe() {
        System.out.println(new NodeFixture());
        System.out.println(new NodeFixture(new NodeFixture(new NodeFixture
())));
        NodeFixture n = new NodeFixture();
        n.node = n;
        System.out.println(n);
        System.out.println(new NodeFixture(new NodeFixture(n)));
        assertEquals(""RefectionToStringBuilder.registry.size() > 0"", 
RefectionToStringBuilder.registry.size(), 0);
    }
}

class NodeFixture {
    public NodeFixture node;
    public NodeFixture() {
    }
    public NodeFixture(NodeFixture node) {
        this.node = node;
    }
    public String toString() {
        return new RefectionToStringBuilder(this).toString();
    }
}

class RefectionToStringBuilder {
    
    static Map registry = new HashMap();
    Object o;
    
    public RefectionToStringBuilder(Object o) {
        this.o = o;
    }
    
    public String toString() {
        String s;
        try {
            if (registry.containsKey(o)) {
                return ""<cycle detected: "" + o.getClass().getName() + ""@"" + 
System.identityHashCode(o) + "">"";
            }
            registry.put(o, null);
            s = ToStringBuilder.reflectionToString(o);
        } finally {
            registry.remove(o);
        }
        return s;
    }
    
}","14/Mar/03 11:17;alex@apache.org;It might be better to use a ThreadLocal rather than a static to hold the         registry... In fact, it wouldn't need to be a Map, but a Set (maybe a HashSet) containing all objects currently being toStringed on this thread.   Also, why bother saying ""cycle detected"" -- why not just return the identity       code?  Like, for a foo that points to a bar and back again:             Foo@123[bar=Bar@456[foo=Foo@123]]            That's reasonably legible.              ","14/Mar/03 11:57;ggregory@seagullsw.com;Thank you for your comments.

>It might be better to use a ThreadLocal rather than a static to hold the 
registry... 

Sure, we could do that. This was just a quick experiment, I did not give much 
thought as to where the registry should live.

>In fact, it wouldn't need to be a Map, but a Set (maybe a HashSet) containing 
all objects currently being toStringed on this thread.

Absolutely, a Set makes sense.

>Also, why bother saying ""cycle detected"" -- why not just return the 
identitycode?  

It is indeed to verbose, the point of toString is not to detect cycles anyway.

I just updated the experiment with your sugestions. Since I have patched the 
reflection code in the past, I'll take a stab at integrating this idea in 
ToStringBuilder.

Since the ThreadLocal will only be used by the reflection methods, it is a bit 
wasteful to have it in ToStringBuilder instead of a subclass but creating a 
ReflectionToStringBuilder subclass might be over the top. I would like to 
avoid further bloating the static side of ToStringBuilder...","14/Mar/03 11:58;ggregory@seagullsw.com;Created an attachment (id=5333)
The above experiment, cleaned up.
","14/Mar/03 12:00;ggregory@seagullsw.com;Well, not ""clean"" cleaned-up, just including Alex's suggestions.","14/Mar/03 12:04;alex@apache.org;Here's a failing unit test that I Wrote inside the existing 
ToStringBuilderTest.  I wrote it as a->b->a instead of a->a.
Maybe there's a need for both types of tests in the suite.

    static class ReflectionTestCycleA {
        ReflectionTestCycleB b;

        public String toString() {
           return ToStringBuilder.reflectionToString(this);
        }
    }

    static class ReflectionTestCycleB {
        ReflectionTestCycleA a;

        public String toString() {
           return ToStringBuilder.reflectionToString(this);
        }
    }

    public void testReflectionCycle() throws Exception
    {
        ReflectionTestCycleA a = new ReflectionTestCycleA();
        ReflectionTestCycleB b = new ReflectionTestCycleB();
        a.b = b;
        b.a = a;
        assertEquals( toBaseString(a) + ""[b="" + toBaseString(b) + ""[a="" + 
toBaseString(a) + ""]]"",
                a.toString());
    }

","27/Mar/03 17:09;ggregory@seagullsw.com;This has been fixed with:

ToStringBuilder.java 1.17
ToStringStyle.java 1.11
ToStringBuilderTest.java 1.7

A code review would be appreciated. Alex perhaps?",20/May/06 00:58;bayard;Reopening then closing to deal with migration bug.,20/May/06 00:58;bayard;Reopening then closing to deal with migration bug.,,,,,,,,,,,,,,,,,,,
"[lang] DateUtils.parseCVS behavior parsing ""h:mm z""",LANG-92,12340890,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,stevencaswell@apache.org,stevencaswell@apache.org,06/Aug/03 18:48,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,,,,,,,,,,0,,,,,,,,"When DateUtils.parseCVS parses a time in ""h:mm z"" format, the resulting date is
1/1/1970. Is this appropriate, or would it be more appropriate for the resulting
date to be the current system date?

I don't know what the CVS behavior is.","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,22172.0,,,2004-07-04 12:04:20.0,,,false,,,,,,,,,,,,,,147046,,,Mon Jul 12 01:44:43 UTC 2004,,,,,,0|i0d6tz:,74883,,,,,,,,"04/Jul/04 12:04;bayard;cvs log -d '23:50 EST' NOTICE.txt
cvs [log aborted]: Can't parse date/time: 23:50 EST

However, if parseCVS can handle it, current System date seems to make the most
sense. 

Nice comment for parseCVS:

    // TODO: Decide whether this code is removed or goes into 2.1

If it used current System date, it would have to make sure it didn't get 24
hours off due to timezone confusion.","04/Jul/04 23:14;stevencaswell@apache.org;Since cvs doesn't parse just a time, maybe parseCVS should behave the same way.","12/Jul/04 01:44;stevencaswell@apache.org;The method needs further development. It has been moved into the DateFormatter
class in the lang sandbox. Accompanying test (testParseCVS) has been moved to
DateformatterTest.java in the lang sandbox.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
JavaDoc Errata,LANG-91,12340526,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,kenfitzpatrick@yahoo.com,kenfitzpatrick@yahoo.com,02/Feb/03 05:36,16/May/06 12:43,07/Apr/19 20:37,16/May/06 12:43,2.0,,,,2.0,,,,,0,,,,,,,,"Please note these (perhaps trivial) JavaDoc errors:

1 - org.apache.commons.lang.builder.ToStringBuilder:
""To use this class write code as follows:
 public class Person {
   ...
   public String toString() {
     return new ToStringBuilder(this).
       append(name, ""name"").     <--- wrong order of parameters ***
       append(age, ""age"").       <--- wrong order of parameters ***
       append(smoker, ""smoker""). <--- wrong order of parameters ***
       toString();
 
2 - org.apache.commons.lang.builder.CompareToBuilder 
""Typical use for the code is as follows:
  public int ***comapareTo***(Object o) { <--- spelling of ""compareTo""

3 - org.apache.commons.lang.ObjectUtils
""public static final ObjectUtils.Null NULL
    Singleton ...
    Another example is ***HashTable*** <--- spelling of ""Hashtable""

(same thing in org.apache.commons.lang.ObjectUtils.Null)

Thanks for the great work!","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16669.0,,,2003-02-02 12:17:01.0,,,false,,,,,,,,,,,,,,147045,,,Sun Feb 02 12:17:01 UTC 2003,,,,,,0|i0d6u7:,74884,,,,,,,,"02/Feb/03 12:17;bayard;First 2 already fixed.
Last one now fixed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] java.lang.ExceptionInInitializerError thrown by JVMRandom constructor,LANG-90,12340700,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,08/May/03 13:47,16/May/06 12:40,07/Apr/19 20:37,16/May/06 12:40,2.0,,,,2.0,,,,,0,,,,,,,,"Somehow setSeed is getting called during construction, causing an
UnsupportedOperationException.

Attached patch fixes this as well as errors in nextInt() and nextLong() which
cause them to always return 0 values.

I am also attaching unit tests that show these errors and also cover the other
methods in the RandomUtils class.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,08/May/03 13:48;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--JVMRandomPatch;https://issues.apache.org/jira/secure/attachment/12332259/ASF.LICENSE.NOT.GRANTED--JVMRandomPatch,08/May/03 13:51;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--MathTestSuitePatch.txt;https://issues.apache.org/jira/secure/attachment/12332261/ASF.LICENSE.NOT.GRANTED--MathTestSuitePatch.txt,08/May/03 13:50;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--RandomUtilsTest.java;https://issues.apache.org/jira/secure/attachment/12332260/ASF.LICENSE.NOT.GRANTED--RandomUtilsTest.java,,,,,,,,3.0,,,,,,,,,,,,,,,,19756.0,,,2003-05-14 09:44:25.0,,,false,,,,,,,,,,,,,,34055,,,Wed May 14 09:45:26 UTC 2003,,,,,,0|i0d6uf:,74885,,,,,,,,"08/May/03 13:48;phil@steitz.com;Created an attachment (id=6262)
Patch for JVMRandom
","08/May/03 13:50;phil@steitz.com;Created an attachment (id=6263)
Test  suite for RandomUtils
","08/May/03 13:51;phil@steitz.com;Created an attachment (id=6264)
Patch to add RandomUtilsTest to MathTestSuite
",14/May/03 09:44;bayard;Committed.,14/May/03 09:45;bayard;*** COM-529 has been marked as a duplicate of this bug. ***,,,,,,,,,,,,,,,,,,,,,,,,,,
NestableException/Delegate is not serializable,LANG-89,12340403,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,max@eos.dk,max@eos.dk,07/Nov/02 17:47,20/May/06 00:58,07/Apr/19 20:37,20/May/06 00:58,1.0,,,,1.0.1,,,,,1,,,,,,,,"Summary saids it all :)

It means that server side exceptions cannot be 
transfered/serialized to clients, which is a must have to inform users on errors and be able to do a 
decent bughunt :)","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14334.0,,,2002-11-08 08:24:44.0,,,false,,,,,,,,,,,,,,147044,,,Sat May 20 00:58:41 UTC 2006,,,,,,0|i0d6un:,74886,,,,,,,,08/Nov/02 08:24;glens@apache.org;I also encountered this problem...,"11/Nov/02 11:51;bayard;'sullis' fixed this in NestableDelegate. 
NestableException was already Serializable as Throwable extends Serializable.",12/Jul/03 10:14;bayard;Fixed in 1.0.1,20/May/06 00:58;bayard;Reopening then closing to deal with migration bug.,20/May/06 00:58;bayard;Reopening then closing to deal with migration bug.,,,,,,,,,,,,,,,,,,,,,,,,,,
[PATCH] AdaptorRegistry,LANG-88,12340592,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,hlship,hlship,07/Mar/03 21:48,16/Oct/13 08:55,07/Apr/19 20:37,06/Feb/07 23:47,,,,,,,,,,0,,,,,,,,"A while back, I discussed the AdaptorRegistry used throughout Tapestry.

Think of it as a ""smart Map"", that connects arbitrary objects to a ""best-fit"" 
adaptor by doing a search based on inheritance and implemented interfaces.

I've created a patch from the jakarta-commons/lang/src.

This patch adds the org.apache.commons.lang.util.AdaptorRegistry (torn out of 
Tapestry), plus a test suite.  

I've run the entire commons-lang test suite succesfully.

Please get back to me if you decide to add this to commons-lang.  I think it 
is a good fit.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,17/Mar/03 09:09;hlship;ASF.LICENSE.NOT.GRANTED--AdaptorRegistry.java;https://issues.apache.org/jira/secure/attachment/12332172/ASF.LICENSE.NOT.GRANTED--AdaptorRegistry.java,17/Mar/03 09:09;hlship;ASF.LICENSE.NOT.GRANTED--AdaptorRegistryTest.java;https://issues.apache.org/jira/secure/attachment/12332173/ASF.LICENSE.NOT.GRANTED--AdaptorRegistryTest.java,07/Mar/03 21:49;hlship;ASF.LICENSE.NOT.GRANTED--src.patch;https://issues.apache.org/jira/secure/attachment/12332171/ASF.LICENSE.NOT.GRANTED--src.patch,,,,,,,,3.0,,,,,,,,,,,,,,,,17770.0,,,2003-03-14 03:39:04.0,,,false,,,,,,,,,,,,,,147043,,,Sat Nov 29 21:38:19 UTC 2003,,,,,,0|i0d6uv:,74887,,,,,,,,"07/Mar/03 21:49;hlship;Created an attachment (id=5206)
Patch from src directory
","14/Mar/03 03:39;amamment;The patch doesn't include the Adaptor Registry, but only provides a patch for 
the LangTestSuite.  I think this is probably because the CVS Diff didn't find 
the Adaptor Registry in the repository (as might be expected since it is a 
proposed addition) and therefore did not provide patch information - nothing 
to patch.  

I think the new files need to be attached separately, and the patch provided 
be applicable only to the LangTestSuite.  ","17/Mar/03 09:09;hlship;Created an attachment (id=5361)
Java source code for AdaptorRegistry
","17/Mar/03 09:09;hlship;Created an attachment (id=5362)
JUnit test for AdaptorRegistry
","17/Mar/03 09:14;hlship;Just added the missing files.  I should have checked the patch before 
uploading it (just trying to do too, too much at once).  Looks like something 
munged the eols (Eclipse? CVS? The Fates?), so the patch isn't very useful 
anyway.",18/Mar/03 06:49;bayard;*** COM-379 has been marked as a duplicate of this bug. ***,23/Mar/03 14:03;bayard;This is a post 2.0 release.,"29/Nov/03 21:38;scolebourne@joda.org;I'm closing this on grounds of WONTFIX. The code definitely seems useful, 
however in my mind it is at a slightly higher level than [lang] targets 
(especially as [lang] has now stabilised with slightly fewer packages than it 
might have had)

It would seem to sit better with the [convert] project, or maybe [hivemind]. It 
just adds a little element of 'religion' that I would have to -1 in [lang].",,,,,,,,,,,,,,,,,,,,,,,
NullPointerException in CompareToBuilder,LANG-87,12340402,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,schloss@visi.com,schloss@visi.com,07/Nov/02 02:21,16/May/06 12:45,07/Apr/19 20:37,16/May/06 12:45,2.0,,,,2.0,,,,,0,,,,,,,,"CompareToBuilder does not seem to handle nulls well at all.

In the methods:

public CompareToBuilder append(Object lhs, Object rhs)
public CompareToBuilder append(Object[] lhs, Object[] rhs)

If either the lhs or rhs parameters are null, the code is set up to throw a 
NullPointerException instead of evaulating on the basis of null.  This requires 
that all object be vetted before they be placed in a sorting collection, not 
using the CompareToBuilder class, modifying the source code, or subclassing 
CompareToBuilder.  We worked around this by subclassing CompareToBuilder and 
overriding the methods in question.

The following lines of code (in both methods) are the cause of the exception:

        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null || rhs == null) {
            throw new NullPointerException();
        }

The 'if' statement should be replaced with (?) :

        if (lhs == null && rhs != null) {
            comparison = -1;
            return this;
        }
        if (lhs != null && rhs == null) {
            comparison = 1;
            return this;
        }","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14306.0,,,2002-11-21 17:30:14.0,,,false,,,,,,,,,,,,,,147042,,,Mon Dec 09 05:48:27 UTC 2002,,,,,,0|i0d6v3:,74888,,,,,,,,"21/Nov/02 17:30;yuri;I came accross this bug as well, it really stops the CompareToBuilder being
useful and easy to use.  If there is a compelling reason why it shouldn't
support nulls (althogh it does when both null), then maybe a strict flag could
be added to another constructor, defaulting to strict in the no-args constructor.

Note, it aso affects the primitive array methods when they are called directly.","09/Dec/02 05:48;scolebourne@joda.org;I have recoded the class to handle nulls (nulls are low). Please retry the 
class from the CVS and reopen the bug if you still have problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] FastDateFormat.getDateInstance(int, Locale)  always uses the pattern from the first invocation",LANG-86,12341240,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,fredrik.westermarck@mdh.se,fredrik.westermarck@mdh.se,04/Feb/04 05:49,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:29,,,,,2.1,,,,,0,,,,,,,,"The first time calling FastDateFormat.getDateInstance(int style, Locale locale)
results in a correct stylepattern. Subsequent calls to the method with a
different locale does not return the stylepattern for the Locale - but the one
from the first invocation.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,04/Feb/04 06:03;fredrik.westermarck@mdh.se;ASF.LICENSE.NOT.GRANTED--solution.patch;https://issues.apache.org/jira/secure/attachment/12332729/ASF.LICENSE.NOT.GRANTED--solution.patch,04/Feb/04 05:52;fredrik.westermarck@mdh.se;ASF.LICENSE.NOT.GRANTED--test.patch;https://issues.apache.org/jira/secure/attachment/12332728/ASF.LICENSE.NOT.GRANTED--test.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,26646.0,,,2006-04-26 13:10:58.0,,,false,,,,,,,,,,,,,,147041,,,Wed Apr 26 13:10:58 UTC 2006,,,,,,0|i0d6vb:,74889,,,,,,,,"04/Feb/04 05:52;fredrik.westermarck@mdh.se;Created an attachment (id=10208)
Testcase to confirm the bug
","04/Feb/04 06:03;fredrik.westermarck@mdh.se;Created an attachment (id=10209)
Fix for the bug
","04/Feb/04 18:32;fredrik.westermarck@mdh.se;Unless someone objects the patch I'll go ahead and apply it and the test case
later on today.",05/Feb/04 02:54;fredrik.westermarck@mdh.se;Patches committed.,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] [PATCH] fixes 75 typos,LANG-85,12340942,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,janekdb@yahoo.co.uk,janekdb@yahoo.co.uk,03/Sep/03 18:55,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:35,,,,,2.1,,,,,0,,,,,,,,The attached patch fixes 75 typos in the version of lang from 03-September-3.,"Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,03/Sep/03 18:56;janekdb@yahoo.co.uk;ASF.LICENSE.NOT.GRANTED--lang-fixes-75-typos.patch;https://issues.apache.org/jira/secure/attachment/12332501/ASF.LICENSE.NOT.GRANTED--lang-fixes-75-typos.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,22908.0,,,2003-09-07 21:36:23.0,,,false,,,,,,,,,,,,,,147040,,,Wed Apr 26 13:10:52 UTC 2006,,,,,,0|i0d6vj:,74890,,,,,,,,"03/Sep/03 18:56;janekdb@yahoo.co.uk;Created an attachment (id=8049)
patch file to fix 75 typos in lang
","07/Sep/03 21:36;phil@steitz.com;Patch applied, thanks","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] RandomStringUtils.randomAlpha methods omit 'z',LANG-84,12340770,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,09/Jun/03 05:49,16/May/06 12:39,07/Apr/19 20:37,16/May/06 12:39,2.0,,,,2.0,,,,,0,,,,,,,,"RandomStringUtils.randomAlphabetic and randomAlphanumeric will never include the
letter 'z' in a generated string. Similarly, randomAscii omits 127.  The
attached patch fixes this problem and also does the following:

1. Fixes an error in the javadoc description of random(int count, int start, int
end, boolean letters, boolean numbers, char[] set)

2. Adds test cases to make sure that boundary characters ('0', 'a', 'Z', etc.)
are included in generated strings.  The test cases will fail with the current
code, complaining that 'z' and 127 are never generated.

3. Changes the significance levels of the chi-square tests added earlier to
RandomUtilsTest.  The patch changes all significance levels to .001, which will
reduce the incidence of random failure to 1 in 1000.  They are currently all set
at .01.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,09/Jun/03 05:51;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--langPatches.txt;https://issues.apache.org/jira/secure/attachment/12332331/ASF.LICENSE.NOT.GRANTED--langPatches.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,20592.0,,,2003-06-09 13:11:00.0,,,false,,,,,,,,,,,,,,34038,,,Tue Jun 10 04:38:48 UTC 2003,,,,,,0|i0d6vr:,74891,,,,,,,,"09/Jun/03 05:51;phil@steitz.com;Created an attachment (id=6701)
patches to RandomStringUtils, RandomStringUtilsTest, RandomUtilsTest
","09/Jun/03 13:11;tagunov@motor.ru;As a note from ousider ( not even familiear with the codebase and requirements)

127, I beleive 
is not ASCII, it has some special dreadfull meaning, like
erasing the prev character, but 
anyway, I beleive it's not ASCII.

I beleive ASCII are 32-126
(If I recall ISO-2022 
correctly)
","09/Jun/03 13:55;phil@steitz.com;That is a good point -- 127 should probably be excluded, since it is in any case
not printable. My mistake. The bound for this should be left as is in the code,
but it should be made clear in the javadoc that returned characters will be
between 32 and 126 inclusive. ","10/Jun/03 04:38;scolebourne@joda.org;Fixes applied as discussed below.
Thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,
EnumUtils nit: The import java.io.Serializable is never used,LANG-83,12340584,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,05/Mar/03 10:41,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:42,2.0,,,,2.0,,,,,0,,,,,,,,"Kind	Status	Priority	Description	Resource	In Folder
	Location
Warning			The import java.io.Serializable is never used
	EnumUtils.java	Jakarta Commons 
Lang/src/java/org/apache/commons/lang/enum	line 56","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,17654.0,,,2003-03-07 06:52:31.0,,,false,,,,,,,,,,,,,,147039,,,Fri Mar 07 06:52:31 UTC 2003,,,,,,0|i0d6vz:,74892,,,,,,,,"07/Mar/03 06:52;scolebourne@joda.org;Change made, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] Minor javadoc fixes for StringUtils.contains(String, String)",LANG-82,12341002,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,heuermh@acm.org,heuermh@acm.org,26/Sep/03 09:18,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.1,,lang.*,,,0,,,,,,,,"Minor javadoc fixes for StringUtils.contains(String, String) method, see
attached diff.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,26/Sep/03 09:19;heuermh@acm.org;ASF.LICENSE.NOT.GRANTED--StringUtils-contains-javadoc-fixes.txt;https://issues.apache.org/jira/secure/attachment/12332549/ASF.LICENSE.NOT.GRANTED--StringUtils-contains-javadoc-fixes.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,23430.0,,,2003-10-24 03:52:37.0,,,false,,,,,,,,,,,,,,147038,,,Wed Apr 26 13:10:50 UTC 2006,,,,,,0|i0d6w7:,74893,,,,,,,,"26/Sep/03 09:19;heuermh@acm.org;Created an attachment (id=8357)
Minor javadoc fixes for StringUtils.contains(String, String) method
",24/Oct/03 03:52;scolebourne@joda.org;Change made. Thanks,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Enum.equals does not handle different class loaders.,LANG-81,12341259,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,12/Feb/04 08:33,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:29,,,,,2.1,,,,,0,,,,,,,,"The Enum.equals method does not handle different class loaders even though the
code comments say that it does. Working on a fix and unit test.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,LANG-57,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,26876.0,,,2004-02-12 08:45:42.0,,,false,,,,,,,,,,,,,,147037,,,Wed Apr 26 13:10:53 UTC 2006,,,,,,0|i0d6wf:,74894,,,,,,,,12/Feb/04 08:45;ggregory@seagullsw.com;Fixed and added unit tests.,23/May/05 08:29;scolebourne@joda.org;*** COM-2055 has been marked as a duplicate of this bug. ***,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] New class proposal: CharacterEncoding,LANG-80,12341597,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,27/Jul/04 05:46,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:22,2.0,,,,2.1,,,,,0,,,,,,,,"I propose the following new interface CharacterEncodingNames. I've stored a
proposal in CVS to ""record"" it. Even if we nuke it, it will be in the ""Attic"".

In short:

/**
 * Character encoding names required of every implementation of the Java platform.
 * 
 * According to the Java documentation <a
 *
href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE
character encoding names</a>:
 * <p>
 * <cite>Every implementation of the Java platform is required to support the
following character encodings. Consult the
 * release documentation for your implementation to see if any other encodings
are supported. </cite>
 * </p>
 * 
 * @see <a
href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE
character encoding
 *          names </a>
 * @author Apache Software Foundation
 * @since 2.1
 */","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,28/Jul/04 01:25;ASF.LICENSE.NOT.GRANTED--CharacterEncoding.java;https://issues.apache.org/jira/secure/attachment/12333004/ASF.LICENSE.NOT.GRANTED--CharacterEncoding.java,27/Jul/04 05:47;ASF.LICENSE.NOT.GRANTED--CharacterEncodingNames.java;https://issues.apache.org/jira/secure/attachment/12333003/ASF.LICENSE.NOT.GRANTED--CharacterEncodingNames.java,28/Jul/04 03:54;ASF.LICENSE.NOT.GRANTED--CharacterEncodingTest.java;https://issues.apache.org/jira/secure/attachment/12333006/ASF.LICENSE.NOT.GRANTED--CharacterEncodingTest.java,28/Jul/04 01:25;ASF.LICENSE.NOT.GRANTED--CharacterEncodingTest.java;https://issues.apache.org/jira/secure/attachment/12333005/ASF.LICENSE.NOT.GRANTED--CharacterEncodingTest.java,,,,,,,4.0,,,,,,,,,,,,,,,,30334.0,,,2004-07-27 05:47:09.0,,,false,,,,,,,,,,,,,,147036,,,Wed Apr 26 13:11:03 UTC 2006,,,,,,0|i0d6wn:,74895,,,,,,,,27/Jul/04 05:47;ggregory@seagullsw.com;Assign to me if there is any work to do.,"27/Jul/04 05:47;ggregory@seagullsw.com;Created an attachment (id=12229)
New class.
","27/Jul/04 14:59;scolebourne@joda.org;IMHO:
1) This should be a class, not an interface. Interfaces represent an API to an 
object, not a set of constants. (see SystemUtils)

2) These constants could fit on SystemUtils, eg ENCODING_UTF_8.
OR
The class name should be changed (it doesn't scan well due to the plural, 
CharacterEncodingNames.UTF_8 kindof implies UTF8 is multiple names.

3) I believe that there is a problem with encoding names in some earlier  JDKs, 
where you must use ""UTF8"" not ""UTF-8"". I believe all accept the short form.

4) Maybe a new class here does make sense if we add methods to it.

public class CharacterEncodingUtils {
// constants
 public static final UTF_8 = ""UTF8""

 // methods
 public static String changeEncoding(str, from, to);
 }
...
}","28/Jul/04 01:24;ggregory@seagullsw.com;""1) This should be a class, not an interface. Interfaces represent an API to an 
object, not a set of constants. (see SystemUtils)""

Agreed.

""The class name should be changed (it doesn't scan well due to the plural, 
CharacterEncodingNames.UTF_8 kindof implies UTF8 is multiple names.""

This second pass calls the class CharacterEncoding and adds one method
isSupported(String). You now read: CharacterEncoding.UTF_8 which is a little better.

""3) I believe that there is a problem with encoding names in some earlier  JDKs, 
where you must use ""UTF8"" not ""UTF-8"". I believe all accept the short form.""

""UTF-8"" works on 1.1.8_10, 1.2.2_017 and 1.3.1_11. Please see the new unit test.
Obviously, the method testMustBeSupportedJava1_3_1 does not pass on <1.3.1. 

""4) Maybe a new class here does make sense if we add methods to it.""

I am keeping it as a separate class for now with the method noted above. A
method to ""change the encoding"" (toEncoding()?) I am not doing yet as I would
like to consider this possibly in the [codec] realm but maybe not. ;-)","28/Jul/04 01:25;ggregory@seagullsw.com;Created an attachment (id=12242)
Class CharacterEncoding
","28/Jul/04 01:25;ggregory@seagullsw.com;Created an attachment (id=12243)
Class CharacterEncodingTest
","28/Jul/04 01:27;ggregory@seagullsw.com;The attachement:

07/26/04 22:47  New class.   (text/plain)

is now obsolete.","28/Jul/04 03:54;ggregory@seagullsw.com;Created an attachment (id=12245)
CharacterEncodingTest version ""2"".
","28/Jul/04 03:55;ggregory@seagullsw.com;I noted initially, that I commited this to CVS, but I did not to benefit from an
initial review in this ticket. If approriate, it is ready for more tweakage and
I can put it in CVS.",04/Aug/04 00:16;ggregory@seagullsw.com;Comitted to CVS for further comments.,"15/Aug/04 09:28;bayard;My gut is to go with Stephen's SystemUtils suggestion or add more methods to
justify a new class.","17/Aug/04 01:08;ggregory@seagullsw.com;I think I see your POV but it feels to me like SystemUtils then becomes a bit of
dumping ground for this piece of functionality. The char encodings are not
something you'd expect to find in the java.lang.System class. 

A separate class is more precise and also follows in the Java 1.4 direction. 

I did not add extra methods to do this and that on purpose, a la XP, as I did
not need them and did not want to waste time (a la XP ;-) then and in future
maintenance. If someone says ""I need a foo() method there"", I'd be happy to add it.","20/Aug/04 04:10;scolebourne@joda.org;I believe we should add a change method:

changeEncoding(str, fromEncoding, toEncoding)

Then the class seems to fit.","24/Aug/04 03:29;ggregory@seagullsw.com;I could see a:

String toString(string, newEncoding)

but how does a ""from"" encoding work? The String object already is encoded (in
Unicode). Since a String is immutable and a new String object is created
""toString"" would seem to make more sense. ","08/Oct/04 05:42;scolebourne@joda.org;I found a comment about UTF-8 being bad on JDK1.1 prior to 1.1.8 somewhere 
IIRC. Since thats pre [lang] supported JDKs, I am now happy with this.

Closing, so we can move on.","26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,
[lang] ReflectionToStringBuilder.toString(null) throws exception by design,LANG-79,12341362,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,24/Mar/04 02:05,02/May/13 02:28,07/Apr/19 20:37,16/May/06 12:27,2.0,,,,2.1,,,,,0,,,,,,,,"Calling ReflectionToStringBuilder.toString(null) throws an exception by design.
I  think it should just return null. Right now I need to do nasty things like:

    public String toString() {
        // dive into commons http client object as they do not implement toString().
        return new ToStringBuilder(this).append(""url"",
this.url).append(""retryCount"", this.retryCount).append(
                ""multiThreadedHttpConnectionManager"",
                this.multiThreadedHttpConnectionManager == null ? null :
ReflectionToStringBuilder
                        .toString(this.multiThreadedHttpConnectionManager)).append(
                ""secureProtocolSocketFactory"",
                this.secureProtocolSocketFactory == null ? null :
ReflectionToStringBuilder
                        .toString(this.secureProtocolSocketFactory)).toString();
    }

Will attach patch proposal.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,27876.0,,,2004-03-24 02:33:36.0,,,false,,,,,,,,,,,,,,34063,,,Wed Apr 26 13:10:52 UTC 2006,,,,,,0|i0d6wv:,74896,,,,,,,,"24/Mar/04 02:33;ggregory@seagullsw.com;Actually, passing null in should return the ToStringStyle nullText.","01/Jul/04 01:23;ggregory@seagullsw.com;Fixed in CVS.
ReflectionToStringBuilder.toString is now null-safe and returns the style's
nullText.
ToStringBuilder constructors are now null-safe. A new ToStringBuilder on a null
followed by a call to toString returns """".","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.chomp does not match Perl,LANG-78,12340618,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,alex@apache.org,alex@apache.org,18/Mar/03 03:23,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.0,,lang.*,,,0,,,,,,,,"In version 1.0.1, the method chomp(String) returns a value that is inconsistent 
with Perl's function of the same name.  Since Perl invented the function chomp, 
and since many developers will expect this method to behave the same, we should 
bring it in line with expectations. 
 
There are also a cluster of related methods (chopNewline, prechomp, etc.) that 
should be renamed/removed/deprecated to match expectations. 
 
Specifically: 
 
Perl: 
 
chop removes the final character, no matter what it is 
 
chomp removes the final character if and only if it's a newline 
(or, technically, the $INPUT_RECORD_SEPARATOR). 
 
 
Current StringUtils: 
 
chop removes the final character, no matter what it is, and glomming 
\r\n as if it were a single character 
 
chopNewline removes the final character if and only if it's a newline 
(glomming \r\n) -- behaving like Perl chomp 
 
chomp removes the last newline *and all succeeding characters* 
(i.e. the last unterminated line) 
 
chompLast removes the last character if and only if it's a newline 
(glomming \r\n) -- This is redundant with chopNewline, and matches 
Perl chomp 
 
getChomp - since Henri's chomp might delete more than just the 
separator, this returns the portion that got deleted","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,18077.0,,,,,,false,,,,,,,,,,,,,,147035,,,2003-03-18 03:23:05.0,,,,,,0|i0d6x3:,74897,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] unbalanced ReflectionToStringBuilder,LANG-77,12342061,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mrxtravis@yahoo.com,mrxtravis@yahoo.com,15/Feb/05 08:34,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:16,,,,,2.1,,,,,0,,,,,,,,"I think it should be important for calls to ToStringStyle.appendFieldStart() be
balanced with calls to ToStringStyle.appendFieldEnd().  The method
ReflectioinToStringBuilder.appendFieldsIn() has an appendFieldStart call, but
not an appendFieldEnd call.

This is very important in my situation because I am coding an XMLToStringBuilder
and the field does not get closed. 

I will attach a patch.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,15/Feb/05 08:35;mrxtravis@yahoo.com;ASF.LICENSE.NOT.GRANTED--ReflectionToStringBuilder.patch;https://issues.apache.org/jira/secure/attachment/12333388/ASF.LICENSE.NOT.GRANTED--ReflectionToStringBuilder.patch,17/Feb/05 03:50;mrxtravis@yahoo.com;ASF.LICENSE.NOT.GRANTED--ToStringBuilderTest.java;https://issues.apache.org/jira/secure/attachment/12333389/ASF.LICENSE.NOT.GRANTED--ToStringBuilderTest.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,33574.0,,,2005-03-03 14:01:02.0,,,false,,,,,,,,,,,,,,34080,,,Wed Apr 26 13:10:42 UTC 2006,,,,,,0|i0d6xb:,74898,,,,,,,,"15/Feb/05 08:35;mrxtravis@yahoo.com;Created an attachment (id=14285)
Adds one line to method appendFieldsIn().
","17/Feb/05 03:50;mrxtravis@yahoo.com;Created an attachment (id=14299)
Patch to the unit test to show the problem.

Attached is a patch to ToStringBuilderTest.java.  If you patch the
ToStringBuilderTest.java and run the test, you will see that the test failed. 
Apply the patch intended for ReflectionToStringBuilder.java and you will see
that all tests pass.

The gist of the patch is to show that a cyclical object followed by another
object will result in a bad output string in that there is not a comma (the
default field separator) between the two objects.",03/Mar/05 14:01;bayard;Patch applied.,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] EnumUtils.getEnum() doesn't work well in 1.5,LANG-76,12342556,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,niallp,igorl,igorl,15/Sep/05 18:20,03/Mar/10 09:34,07/Apr/19 20:37,21/Feb/10 17:39,2.1,,,,2.5,,lang.enums.*,,,3,,,,,,,,"Hi,
I encountered with problem using EnumUtils.getEnum() in 1.5. It appears that my
Enum class should be accessed first so constructor will be called. In 1.4 it was
enough to have myClass.class, so all static members were initialized. In 1.5 it
doesn't work.

I noticed that static members are not initialized anymore while acessing to
class definition. See the code
public class Test {
    public static final class TT{
        public static final TT one = new TT();

        private TT(){
            System.out.println(""Called TT"" );
        }
    }
    
    public static void main(String[] args) {
     Class cl = TT.class;
   // System.out.println( TT.one);
  //  System.out.println(TT.class.isAssignableFrom(String.class));
    }
}
In 1.4 constructor of TT is called, while in 1.5 is not. 

Actually, according to the spec
(http://java.sun.com/docs/books/jls/second_edition/html/execution.doc.html#57946),
this is right behavior of Java. 
Unfortunately, I didn't succeded to think about good solution..
P.s. I know that in 1.5 we have enum built-in, but it is not the same, and we
try to move to 1.5 without too much changes","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36666.0,,,2006-06-08 15:42:51.0,,,false,,,,,,,,,,,,,,34084,,,Sun Feb 21 02:58:05 UTC 2010,,,,,,0|i0d6xj:,74899,,,,,,,,"15/Sep/05 23:03;igorl;It is possible to load Enum static fields using code below:

           Field[] fields = enumCl.getFields();
            if(fields.length>0){
                try {
                    fields[0].get(null); //get value of first static  - actual
access to this class instance
                } catch (Exception e) {
                    log.trace(""Can't access static field of "" + enumCl);
                } 
            }
","08/Jun/06 15:42;bayard;In an effort to get 2.2 out sooner rather than later, I'm assiging all the Enum issues to 2.3. There's been no work on them currently and might be best to focus on them in a 2.3 release instead of trying to squeeze them into the 2.2 release.

Hopefully this will keep the 2.3 release scope pretty tight.",14/Aug/06 12:13;scolebourne;See also http://bright-green.com/blog/2006_08_14/class_loading_vs_class_initial.html,"14/Aug/06 15:48;mister__m;I've filed a RFE for solving the problem in the correct way: <a href=""http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6459208"">http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6459208</a>","24/Oct/06 19:57;bayard;Apologies for how long it's taken to get around to this issue - largely because it doesn't seem like an issue with much of a solution. Even if the RFE is solved (and it looks like it might be someday), I suspect it's unlikely it would be backported to Java 5.0.

If I'm understanding things correctly, the problem is that in 1.4 Igor had code that just said IgorEnum.class. This initialised all the constant enum declarations within his IgorEnum class - which I presume was necessary for some reason (ie: he couldn't just say 'IgorEnum.ONE' and have it work). 

The work-around would appear to be to create a static enumInitialize() method within the IgorEnum class that looks much like this:

    static void enumInitialize() {
        TT tmp = ONE;    // or whatever kind of setup call is needed
    }

Then change the 'Class tmp = IgorEnum.class' to 'IgorEnum.enumInitialize()'. 

I suspect I'm missing something in the complexity behind why the IgorEnum.class call was desirable in the first place.",06/Dec/06 09:02;bayard;I can't see this being fixed in 2.3 (or ever). Assigning to 3.0 for the moment.,"25/Jan/07 02:58;bayard;Alternative workaround from Peter Knuts (received via email):

I have a work around that can be used to mitigate the problem that was not suggested previously.
The solution is simpler than the previously suggested workarounds.

Define a static method inside the defining enum class to load the enum, ex:

public class TestEnum extends Enum {
  private TestEnum(String name) {
    super(name);
  }
  public static final TestEnum VALUE_ONE = new TestEnum(""Value one"");

  public static TestEnum getEnum(String name) {
    return (TestEnum) EnumUtils.getEnum(TestEnum.class, name);
  }
}

This works fine and the class will be loaded due to the static method call
Java Language Specification:
A class or interface type T will be initialized immediately before the first occurance of any one of the following:
* T is a class and an instance of T is created
* T is a class and a static method declared by T is invoked.
...

The downside of this is that the method can not be implemented in a common super class but needs to be (re)implemented in every enum class that needs this capability (also true for other EnumUtils methods like getEnumList etc).

The upside is that the calling side will be simpler:
  Before: (TestEnum) EnumUtils.getEnum(TestEnum.class, name);
  After: TestEnum.getEnum(name); ","23/Jun/07 10:50;mschulte;I think EnumUtils.getEnum() should force class initialization, e.g. by calling

Class.forName(enumClass.getFullName(), true, enumClass.getClassLoader())

Otherwise it will simply not reliably do what it is advertised to do. Plus it will spare people a hard-to-find bug popping up after migrating their code to 5.0.",26/Jun/07 19:27;cyboc;I like Marcus Schulte's suggestion. EnumUtils.getEnum() should force class initialization.,03/Nov/07 08:09;bayard;Bringing forward into 2.4 for consideration again. ,"09/Nov/07 08:22;pbenedict;Relying on .class to perform class initialization is, to the best of my knowledge, a well-known behavior of past JVMs but also an undocumented feature. Unless someone can show from a JVM spec, that referencing .class *must* perform class initialization, then I strongly believe this issue is based on an undocumented developer assumption. The ""problem"" in JDK 5 is therefore neither right or wrong and I recommend this as a WONTFIX.

If you want to force initialization, create a static initialization block (static { }) and do what needs to be done there.","12/Nov/07 20:13;bens;Gotta agree with Paul. 1.5's behavior is to spec, so it's correct by definition. Since this Enum is for pre-1.5 users, I don't see a benefit to the work involved reconciling it with 1.5. I'd say wontfix.","12/Nov/07 20:30;bayard;Marking as wontfix as I don't see it being likely that anything will be done here.

Joe's suggestion is interesting, and if anyone would like to explore that, prove that it solves the problem and attach as a patch, then please reopen.","14/Aug/09 21:34;lewbloch;It is egregious that the project refuses to fix a bug caused by its own intentional violation of the Java Language Specification (JLS).  It is also strange that the powers that be think this library will never be used in a Java 5+ environment - there are use cases for having a well-thought-out typesafe enumeration that can do things not available to standard 'enum' classes, e.g., inherit from other enumerations or interoperate with legacy pre-1.5 systems.  This shunning of responsibility is a saddening disappointment coming from an Apache project, especially one so fundamental and widely used as commons-lang.  Palming the bug off as ""[r]elying on ... an undocumented feature"" is especially disingenuous.  That classes used to initialize on references to the 'class' literal was a bug, not a feature, and contravened the explicit statement in the JLS second edition, s.12.4.1: ""A class or interface will not be initialized under any other circumstance."" (Statement follows list of class-initialization triggers that does not include reference to the 'class' literal.)  For shame.","16/Aug/09 07:15;bayard;Reopening issue based on Lew's diatribe. Fix version will be set to 2.x. I don't expect to see such a release happen and this code has been removed from 3.0, however if a 2.x release does happen then I want to make sure this is up for consideration along with the other Enum issues.

Plus it will be easier to find the problem if it is in an open issue than a closed issue.","02/Feb/10 23:51;niallp;So whats the solution for this? I've never looked at Lang's enums, anyone care to submit a patch as I'm hoping to do a 2.5 release","19/Feb/10 19:57;niallp;I added a test case for this:

  http://svn.apache.org/viewvc?rev=911954&view=rev

And I tried testing using Sun's JDK 1.5.0_01 and 1.5.0_22 on a Windows XP machine and I cannot reproduce it.

Can anyone see whats wrong with my test case - or provide one that can reproduce the error?","21/Feb/10 02:58;niallp;OK I managed to re-produce it by creating a separate test (EnumUtilsLang76Test) and compiling that test with source/target set to 1.5 in the ant build.

http://svn.apache.org/viewvc?view=revision&revision=912292

I used Marcus Schulte's suggestion to fix it

{code}
     Class.forName(enumClass.getFullName(), true, enumClass.getClassLoader())
{code}
",,,,,,,,,,,,,
"NumberUtils.createBigDecimal("""") NPE in Sun 1.3.1_08",LANG-75,12340874,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,26/Jul/03 10:20,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:36,,,,,2.0,,,,,0,,,,,,,,"Hello,

The NumberUtils.createXXX methods all have the following pattern:

public static XXX createXXX(String str) {
   if (str == null) {
      return null;
   }

In the case of BigDecimal, passing in a """" to new BigDecimal(String) in Sun
1.3.1_08 blows up like this:

java.lang.StringIndexOutOfBoundsException: String index out of range: 0
	at java.lang.String.charAt(String.java:582)
	at java.math.BigDecimal.<init>(BigDecimal.java:124)
	at org.apache.commons.lang.math.NumberUtils.createBigDecimal(NumberUtils.java:4
78)
	at org.apache.commons.lang.math.NumberUtilsTest.testCreateBigDecimal(NumberUtil
sTest.java:209)

Under Sun 1.4.2, you get a NumberFormatException if the length of the string is
0 (no trim()). The unit tests expect a NumberFormatException when you pass in """".

So... to make this all nice on 1.3, should all of the guard clauses become:

(1)

   if (StringUtil.isEmpty(str)) {
      return null;
   }

(2)

   if (StringUtil.isBlank(str)) {
      return null;
   }

(3)

   if (str == null) {
      return null;
   }
   if (StringUtil.isEmpty(str)) {
      return str;
   }
?

I think (2) would be good since it would not blow up on """" AND "" "" but I am not
familiar with the various invocation contexts, so, please opine.

Thanks,
Gary","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,27/Jul/03 06:41;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--numberUtilsPatch.txt;https://issues.apache.org/jira/secure/attachment/12332434/ASF.LICENSE.NOT.GRANTED--numberUtilsPatch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,21904.0,,,2003-07-26 22:30:57.0,,,false,,,,,,,,,,,,,,147034,,,Tue Jul 29 05:04:16 UTC 2003,,,,,,0|i0d6xr:,74900,,,,,,,,"26/Jul/03 22:30;phil@steitz.com;I would favor keeping the current contract in place, patching to make things
work in JDK < 1.4.  My understanding of the current contract is

(i)   null |-> null

(ii)  valid representable numeric string |-> value represented

(iii) invalid string |-> NumberFormatException

"""" and "" "" fall under (iii). (Need to add tests for "" "".)

One way to achieve this would be to change the guard on the createXxx methods to: 

(4)

  if (str == null) {
      return null;
  }
  if (StringUtils.isBlank(str)) {
      throw new NumberFormatException(""A blank string is not a valid Xxx."");
  }  

Or even (following createNumber)

(5)

  if (str == null) {
      return null;
  }
  if (str.length() == 0) {
            throw new NumberFormatException(""\""\"" is not a valid Xxx."");
  }
 
This should work, but we would have to add tests to verify that "" "" throws
NumberformatException in all cases, all JDKs when the conversion is attempted.

Phil","26/Jul/03 22:48;scolebourne@joda.org;I agree with Phil's comments, and option 4","27/Jul/03 01:46;phil@steitz.com;I have added tests for "" "" locally and run against 1.4.2, 1.3.1_08 and 1.2_2_016
and found that all tests (including "" "") give expected results with current code
in all cases with the one exception of createBigDecimal on 1.3.1_08. I see this
as a JDK bug. Therefore I think that my option (4) is overkill, introducing a
needless function call and string search for each activation to handle an
isolated JDK bug. 

I would recommend option (5), possibly applied only to createBigDecimal (i.e.
leave the other methods alone).  
 
","27/Jul/03 02:18;ggregory@seagullsw.com;Fixes commited as suggested but with the guard clause factored in a method. 
The tests pass on:

java version ""1.3.1_08""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.3.1_08-b03)
Java HotSpot(TM) Client VM (build 1.3.1_08-b03, mixed mode)

java version ""1.4.2""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2-b28)
Java HotSpot(TM) Client VM (build 1.4.2-b28, mixed mode)

","27/Jul/03 02:21;ggregory@seagullsw.com;Ah! It looks like we are stepping on each others Bugzilla toes ;-)

Feel free to change the NumberUtils code as you best see fit but do note the
added bullet-proofing I've added to the unit tests, I believe these changes
should stay in.","27/Jul/03 06:38;phil@steitz.com;Sorry to keep going back and forth on this, but I think that just patching
createBigDecimal is sufficient.  I am attaching a patch to do this.  The new
(better!) tests all succeed with this patch under 1.4.2, 1.3.1_08 and 1.2_2_016.

I am OK with either Gary's mods or the more limited patch attached below.  Both
solve the problem.   ","27/Jul/03 06:41;phil@steitz.com;Created an attachment (id=7530)
NumberUtils patch fixing only createBigDecimal
","29/Jul/03 04:41;scolebourne@joda.org;OK, I've had a look at this.

I agree with Phil's last comments that the extra checking is generally not 
required, and that we should treat this as a JDK bug workaround. (Performance 
matters too)

So, I've removed the validate method and retested on JDK1.2.2, 1.3.1 and 1.4.1 
and all is fine.","29/Jul/03 05:04;ggregory@seagullsw.com;Great, thanks for tidying things up.",,,,,,,,,,,,,,,,,,,,,,
[lang] [patch] ArrayUtils.addAll doesn't always return new array,LANG-74,12341333,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,maartenc,maartenc,15/Mar/04 21:03,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:27,,,,,2.1,,,,,0,,,,,,,,"Hi,

according to the javadoc of the ArrayUtils.addAll() method, a new array is
returned. However, if 1 of the 2 given arrays is null, the not-null array is
returned (and not a new array).

attached are a fix and a junit test

Maarten","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,15/Mar/04 21:04;maartenc;ASF.LICENSE.NOT.GRANTED--ArrayUtils.java.patch;https://issues.apache.org/jira/secure/attachment/12332802/ASF.LICENSE.NOT.GRANTED--ArrayUtils.java.patch,15/Mar/04 21:05;maartenc;ASF.LICENSE.NOT.GRANTED--ArrayUtilsAddTest.java.patch;https://issues.apache.org/jira/secure/attachment/12332803/ASF.LICENSE.NOT.GRANTED--ArrayUtilsAddTest.java.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,27661.0,,,2004-03-16 02:09:07.0,,,false,,,,,,,,,,,,,,147033,,,Wed Apr 26 13:10:50 UTC 2006,,,,,,0|i0d6xz:,74901,,,,,,,,"15/Mar/04 21:04;maartenc;Created an attachment (id=10783)
patch for ArrayUtils
","15/Mar/04 21:05;maartenc;Created an attachment (id=10784)
patch for ArrayUtilsAddTest
","16/Mar/04 02:09;ggregory@seagullsw.com;I think we need to discuss this. You are correct that the Javadoc states that a
new array is returned but the Javadoc ALSO states the special cases:

ArrayUtils.addAll(array1, null)   = array1
ArrayUtils.addAll(null, array2)   = array2

Which clearly show the boundary cases. So the code and Javadoc DO match. The
real question for the API is: Should a new array ALWAYS be created?","16/Mar/04 03:43;maartenc;I think the behaviour of the addAll mehod should be the same in all situations.
I use this method in a scenario where I modify the returned array. I thought it
would be safe to modify the array, because I was working on a new array. So
modifying the result wasn't going to change the input arrays in any way ...
wrong ... I spent some time to find the cause of what was going wrong in my
algorithm.

Perhahps it was a bit naive from me and I should have read the javadocs more
carefully, maybe I should have created a clone of the result and modify that
clone (and doing some unnecessary array creations), or maybe I can check myself
if one of the input arrays is null .... but I thought it would be easier if the
addAll method always returned a new array, regardless of whether one of the
arguments is null.","16/Mar/04 07:33;scolebourne@joda.org;IIRC this is a new API method so we can change it at this point. Although a 
little wasteful, I think that this is a valid change to make the API more 
consistent. With arrays, whether it is cloned or not is significant.

So, I'm +1 to the change.","16/Mar/04 09:42;ggregory@seagullsw.com;Yes, it is a post 2.0 method. Patches applied, thank you.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,
ToStringBuilder doesn't work well in subclasses,LANG-73,12340413,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,andy.w.freeman@gmail.com,andy.w.freeman@gmail.com,11/Nov/02 22:59,16/May/06 12:45,07/Apr/19 20:37,16/May/06 12:45,2.0,,,,2.0,,,,,0,,,,,,,,"The only mechanism in place to capture a superclass's toString() values in a 
sublcass is to use .append(super.toString()).  This of course does prefixes and 
suffixes the value with the package and class name.  In order to address this, 
perhaps a new .appendSuper(super.toString()) method is introduced that trims 
off the prefix and suffix of the super.toString() prior to appending.  A new 
constructor that automatically does this trimming could be added too.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14447.0,,,2002-12-09 05:04:35.0,,,false,,,,,,,,,,,,,,147032,,,Mon Dec 09 05:04:35 UTC 2002,,,,,,0|i0d6y7:,74902,,,,,,,,"09/Dec/02 05:04;scolebourne@joda.org;New methods:
appendSuper(super.toString());
appendToString(delegate.toString());

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NullPointerException in EqualsBuilder.append(Object[], Object[])",LANG-72,12341248,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Blocker,Duplicate,,garyn@healthplustech.com,garyn@healthplustech.com,07/Feb/04 01:45,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,,,,,,0,,,,,,,,"I get a NullPointerException when calling EqualsBuilder.append(Object[], Object
[]).  I narrowed the code down to this section:

        for (int i = 0; i < lhs.length && isEquals; ++i) {
            Class lhsClass = lhs[i].getClass();
            if (!lhsClass.isInstance(rhs[i])) {
                isEquals = false; //If the types don't match, not equal
                break;
            }
            append(lhs[i], rhs[i]);
        }

I don't think a lot of this code is necessary.  I think it will work like this:

        for (int i = 0; i < lhs.length && isEquals; ++i) {
            append(lhs[i], rhs[i]);
        }

because append(Object, Object) deals with Class issues.","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,10/Feb/04 06:38;brentworden;ASF.LICENSE.NOT.GRANTED--bug-26734-patch.txt;https://issues.apache.org/jira/secure/attachment/12332735/ASF.LICENSE.NOT.GRANTED--bug-26734-patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,26734.0,,,2004-02-10 06:36:48.0,,,false,,,,,,,,,,,,,,34129,,,Tue Feb 10 06:54:14 UTC 2004,,,,,,0|i0d6yf:,74903,,,,,,,,"10/Feb/04 06:36;brentworden;The NPE is caused by null elements in the lhs array.  The change Gary suggested 
does seem to fix the problem.  I'll attach a patch with the change and the 
supplimental test cases.","10/Feb/04 06:38;brentworden;Created an attachment (id=10287)
source and test patch
","10/Feb/04 06:54;brentworden;

*** This bug has been marked as a duplicate of 23174 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,
ExceptionUtils new methods.,LANG-71,12340528,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,03/Feb/03 15:33,16/May/06 12:43,07/Apr/19 20:37,16/May/06 12:43,2.0,,,,2.0,,,,,0,,,,,,,,"Extra methods added to ExceptionUtils. getFullStackTrace and isNestedException. 
http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=104364453716964&w=2","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16689.0,,,,,,false,,,,,,,,,,,,,,147031,,,2003-02-03 15:33:08.0,,,,,,0|i0d6yn:,74904,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Adding tolerance to double[] search methods in ArrayUtils,LANG-70,12340882,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tobrien@discursive.com,tobrien@discursive.com,03/Aug/03 21:57,16/May/06 12:36,07/Apr/19 20:37,16/May/06 12:36,,,,,2.0,,,,,0,,,,,,,,"It is sometimes useful to for the presence of a double within a given tolerance.
 For example, does this double[] array contain 3.054 +/- 0.001?

The patch attached adds new methods which use the DoubleRange test elements of
an array:

ArrayUtils.indexOf(double[] array, double valueToFind, double tolerance)

ArrayUtils.indexOf(double[] array, double valueToFind, int startIndex, double
tolerance);

ArrayUtils.lastIndexOf(double[] array, double valueToFind, int startIndex,
double tolerance);

ArrayUtils.contains(double[] array, double valueToFind, double tolerance);","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,03/Aug/03 21:58;tobrien@discursive.com;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12332444/ASF.LICENSE.NOT.GRANTED--patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,22091.0,,,2003-08-04 06:32:30.0,,,false,,,,,,,,,,,,,,147030,,,Mon Aug 04 06:32:30 UTC 2003,,,,,,0|i0d6yv:,74905,,,,,,,,"03/Aug/03 21:58;tobrien@discursive.com;Created an attachment (id=7631)
tolerance search and unit tests patch
","04/Aug/03 06:32;scolebourne@joda.org;Patch committed with changes, thanks.

(Please no tabs!)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] ToStringBuilder throws StackOverflowError when an Object cycle exists,LANG-69,12342442,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,garydgregory,maartenc,maartenc,07/Aug/05 05:14,10/Mar/11 22:27,07/Apr/19 20:37,06/Feb/07 21:10,2.1,,,,2.3,,,,,0,,,,,,,,"Hi,

The ToStringBuilder throws a StackOverflowError if you have a cycle in the
object graph. For instance, the following toString() method will cause a
StackOverflowError:

public class ObjectCycle {
    Object obj;
    	
    public String toString() {
        return new ToStringBuilder(this).append(obj).toString();
    }
}

public void testObjectCycle() {
    ObjectCycle a = new ObjectCycle();
    ObjectCycle b = new ObjectCycle();
    a.obj = b;
    b.obj = a;

    a.toString();  // ouch: StackOverflowError    	
}

I'll submit some patches that fixes this problem...

regards,
Maarten","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,03/May/06 11:58;bayard;ASF.LICENSE.NOT.GRANTED--15938.patch;https://issues.apache.org/jira/secure/attachment/12333695/ASF.LICENSE.NOT.GRANTED--15938.patch,03/May/06 12:25;bayard;ASF.LICENSE.NOT.GRANTED--36061.patch;https://issues.apache.org/jira/secure/attachment/12333696/ASF.LICENSE.NOT.GRANTED--36061.patch,07/Aug/05 05:32;maartenc;ASF.LICENSE.NOT.GRANTED--ReflectionToStringBuilder.java.patch;https://issues.apache.org/jira/secure/attachment/12333693/ASF.LICENSE.NOT.GRANTED--ReflectionToStringBuilder.java.patch,07/Aug/05 05:32;maartenc;ASF.LICENSE.NOT.GRANTED--ToStringBuilderTest.java.patch;https://issues.apache.org/jira/secure/attachment/12333694/ASF.LICENSE.NOT.GRANTED--ToStringBuilderTest.java.patch,07/Aug/05 05:30;maartenc;ASF.LICENSE.NOT.GRANTED--ToStringStyle.java.patch;https://issues.apache.org/jira/secure/attachment/12333692/ASF.LICENSE.NOT.GRANTED--ToStringStyle.java.patch,27/Jan/07 00:31;bayard;LANG-69-refactor.patch;https://issues.apache.org/jira/secure/attachment/12349716/LANG-69-refactor.patch,,,,,6.0,,,,,,,,,,,,,,,,36061.0,,,2006-04-19 11:46:02.0,,,false,,,,,,,,,,,,,,34117,,,Sat Jan 05 06:22:25 UTC 2008,,,,,,0|i0d6z3:,74906,,,,,,,,"07/Aug/05 05:30;maartenc;Created an attachment (id=15936)
Patch for ToStringStyle.java
","07/Aug/05 05:32;maartenc;Created an attachment (id=15937)
Patch for ReflectionToStringBuilder.java

The logic to check if a cycle occurs is moved to ToStringStyle, so there is no
need to keep it in this class any longer.","07/Aug/05 05:32;maartenc;Created an attachment (id=15938)
Patch for ToStringBuilderTest.java

Added a test case and renamed a method.","19/Apr/06 11:46;bayard;Hard part is applying the test without the fix - the fix changed the unit tests.
Does this mean it changed the API? Need to look further.","03/May/06 11:58;bayard;Created an attachment (id=18217)
Unit test showing the problem

Attaching a unit test that shows the problem prior to the fix. It's just a
slight modification of the last parts of the previously supplied unit test.","03/May/06 12:20;bayard;Unfortunately ReflectionToStringBuilder has had three substantial commits since
this patch was created and the patch tool gives up.

However, pretty confident that my by hand modifications were okay. An
ArrayUtils.toString test starts failing now though, so all is not happy.

Will check Lang out for the revision at which the patch was made and see if the
ArrayUtils class still fails.","03/May/06 12:24;bayard;Yep, fails on that revision (230560):

Testcase: testToString(org.apache.commons.lang.ArrayUtilsTest): FAILED
expected:<{}> but was:<[Ljava.lang.Object;@ed27e4>
junit.framework.ComparisonFailure: expected:<{}> but
was:<[Ljava.lang.Object;@ed27e4>
    at org.apache.commons.lang.ArrayUtilsTest.testToString(ArrayUtilsTest.java:80)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
 ","03/May/06 12:25;bayard;Created an attachment (id=18218)
Combined, up to date version of the original 3 patches

The ReflectionToStringBuilder patch had become stale",04/Jul/06 02:05;bayard;Pushing back to 2.3 as it needs quite a bit of investigation to determine the problem and write a new fix that passes all tests (without such a code change hopefully).,29/Sep/06 18:54;bayard;Assuming that Gary will fix this in the same way that he has fixed other bugs of this kind. The attached patch is not usable as it breaks other things.,03/Jan/07 06:18;ggregory@seagullsw.com;Reopening due to an incorrect note in the change history section about HashCodeBuilder bug [lang-279].,17/Jan/07 04:09;bayard;Unit test is already in the relevant Test file (just commented out). So no need to apply that patch.,17/Jan/07 04:12;bayard;Lots of duplicate code showing up in the *Builders for the registrys... Consider refactoring said code out into a package private class.,27/Jan/07 00:30;bayard;Patch attached with a refactoring of the code to pull the duplicated registry code out. Idea being that this would be easier to apply to the ToStringBuilder. ,"27/Jan/07 01:27;bayard;Still pounding on this issue... Not sure if my refactoring of the registries is worth it. 

Maarten's patch seems to hit the core of the problem. Pull the cyclic management out of the ReflectionToStringBuilder and down into the ToStringStyle that ToStringBuilder also shares. This is nice - it means the functionality is not being split between two classes and for the unit tests that exist it seems to work - EXCEPT for the ArrayUtils tests where ArrayUtils expects to be able to pass in an empty array and have it be printed nicely and not as an object reference.

This is due to the register(object) in appendStart (there are two points of registration in ToStringStyle, appendStart and appendInternal). Appending the start data indicator is flagging that the object is being printed (it's not, it's just the data indicator), so when we then hit append(..) in ArrayUtils.toString it is failing to iterate into the array because it believes it has already printed it.","27/Jan/07 01:57;bayard;I think the first step is to drop the register in appendStart, then in appendInternal the logic should be:

---
if registered, write identity and return.

register.
switch statement of different ones.
finally-unregister.
---

This seems to improve things. ArrayUtils passes and while there are still failures in ToStringBuilder, there are no longer stack overflows. Just incorrect values. As I said.. 'seems to' :) I'll take anything as a positive sign.","27/Jan/07 07:12;bayard; svn ci -m ""Applying a modified version of Maarten Coene's patch for #LANG-69. All unit tests pass; opinions would be very welcome though. ""              

Sending        src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java
Sending        src/java/org/apache/commons/lang/builder/ToStringStyle.java
Sending        src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java
Transmitting file data ...
Committed revision 500495.

Opinions very desired - I moved Maarten's register in appendStart into the appendClassName and appendIdentityHashCode and changed appendInternal as I mentioned above. ",06/Feb/07 21:10;bayard;No comments - so closing this as Fixed.,"04/Jan/08 20:26;kppatury;Hello,
Has anyone seen the StackOverflowError occur in version2.3 for the use of ReflectionToStringBuilder?

We have the following code using it in our application and it works fine in version 2.0. But when we upgrade to version 2.3 we are seeing a StackOverflowError . Cannot think of any other recursive calls which might cause this..
------------------------------------------------------------------------------------
public String toString() {
    return ReflectionToStringBuilder.toString(this);
}
------------------------------------------------------------------------------------
Any advise would be helpful..Thanks!","05/Jan/08 06:22;bayard;Hi Krishna,

I doubt you'll see much on a closed ticket - I'd suggest either mailing the user@ list to see if anyone else has had the problem; or if at all possible it would be great if you could chop away at your business objects a bit and create a reusable test case.

In either case - please feel free to open a new issue up rather than using the old one.",,,,,,,,,,,
[lang] Fraction 0 to the zeroth power should throw an ArithmeticException,LANG-68,12342537,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,elharo@metalab.unc.edu,elharo@metalab.unc.edu,07/Sep/05 06:28,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.1,,,,,,,,,0,,,,,,,,"0 to the zeroth power should throw an ArithmeticException. It should not return
1 as the API documentation currently says it does. This is just not
mathematically well-defined.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36529.0,,,2005-09-07 07:01:04.0,,,false,,,,,,,,,,,,,,147029,,,Sat Apr 15 05:06:43 UTC 2006,,,,,,0|i0d6zb:,74907,,,,,,,,"07/Sep/05 06:29;elharo@metalab.unc.edu;Sorry, I should have been clearer that I was again referring to the Fraction
class pow() method. ",07/Sep/05 07:01;scolebourne@joda.org;Comments from mathematicians please...,"07/Sep/05 11:39;brentworden;The OP is correct in stating that 0^0 is an indeterminate form.

However, in lang's defense, java.lang.Math.pow(0, 0) does return 1.0 based on 
the special case found in the javadoc comments:  If the second argument is 
positive or negative zero, then the result is 1.0.

","29/Mar/06 05:21;joni.salonen@gmail.com;Zero to the power of zero, though undefined, is often ""defined"" to be 1 for
several reasons. See this entry in the sci.math FAQ:
http://www.faqs.org/faqs/sci-math-faq/specialnumbers/0to0/

I would consider the current behaviour of returning 1 far more desirable than
what is requested. Change resolution to WONTFIX?","29/Mar/06 17:11;bayard;My gut says to stick with the JVM way of doing it as per Brent's comment. I
think it's better to not be surprising users with unexpected exceptions (and
differences from the JVM) than to be trying to pick an option in what seems to
be a grey area of mathematics.

Does that sound reasonable Elliotte? ","15/Apr/06 05:06;bayard;Going with WONTFIX. It seems a 50/50 call, so let's stick with the Sun one.",,,,,,,,,,,,,,,,,,,,,,,,,
[lang] NPE in EqualsBuilder when field in multiarray == null,LANG-67,12342153,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,lemval@zonnet.nl,lemval@zonnet.nl,04/Apr/05 20:17,17/May/06 00:47,07/Apr/19 20:37,17/May/06 00:47,2.0,,,,,,,,,1,,,,,,,,"The EqualsBuilder.append(Object[] lhs, Object[] rhs) gives a Nullpointer in 
cases of multi dimensional arrays with null fields when reflectEqual an object 
containing a 3D Object array.

Fix:
        <...>
        for (int i = 0; i < lhs.length && isEquals; ++i) {
        	// Fix when element is null
        	if ( lhs[i] != null ) {
	            Class lhsClass = lhs[i].getClass();
	            if (!lhsClass.isInstance(rhs[i])) {
	                isEquals = false; //If the types don't match, not equal
	                break;
	            }
        	}
            append(lhs[i], rhs[i]);
        }
        <...>","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,34284.0,,,2006-04-18 13:27:01.0,,,false,,,,,,,,,,,,,,147028,,,Wed May 17 00:47:11 UTC 2006,,,,,,0|i0d6zj:,74908,,,,,,,,"18/Apr/06 13:27;bayard;Index: src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java
===================================================================
--- src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java    
(revision 394830)
+++ src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java     (working
copy)
@@ -956,4 +956,25 @@
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067
         new EqualsBuilder().append(x1, x2);
     }
+
+    /**
+     * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=34284
+     */
+    public void testNpeForNullElement2() {
+        Object[][] x1 = new Object[2][2];
+        Object[][] x2 = new Object[2][2];
+
+        for (int i = 0; i < x1.length; ++i) {
+            for (int j = 0; j < x1[0].length; j++) {
+                x1[i][j] = new Object();
+                x2[i][j] = new Object();
+            }
+        }
+
+        x1[0][1] = null;
+
+        // causes an NPE in 2.0 according to:
+        // http://issues.apache.org/bugzilla/show_bug.cgi?id=34284
+        new EqualsBuilder().append(x1, x2);
+    }
 }                       ","18/Apr/06 13:28;bayard;I've tested this (see the above diff) and it appears to be fixed already. There
is already a unit test for this (well, basic array rather than multi array) that
refers to the issue that I'm declaring this issue a duplicate of.

*** This bug has been marked as a duplicate of 33067 ***",17/May/06 00:45;bayard;Closing this duplicate - hoping to see a notification on the list.,"17/May/06 00:46;bayard;Reopening so I can resolve it. Seen this happen occasionally in Jira, though only previously when the workflow was being mucked around with. Artifact of the migration I guess - having an issue that is closed but has an unresolved status.",17/May/06 00:47;bayard;Closing again.,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] StringEscaper.escapeXml() escapes characters > 0x7f,LANG-66,12342850,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sandor@magproductions.nl,sandor@magproductions.nl,10/Jan/06 18:18,17/Dec/09 05:41,07/Apr/19 20:37,19/Jul/09 18:30,2.1,,,,3.0,,lang.text.translate.*,,,2,,,,,,,,"StringEscaper.escapeXml() escapes characters > 0x7f. That's both undesired and
undocumented.","Operating System: All
Platform: All",,,,,,,,,,,,,,,LANG-515,LANG-505,LANG-448,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,38210.0,,,2006-04-15 08:02:41.0,,,false,,,,,,,,,,,,,,34074,,,Sun Jul 19 18:30:42 UTC 2009,,,,,,0|i0d6zr:,74909,,,,,,,,15/Apr/06 08:02;bayard;*** COM-2851 has been marked as a duplicate of this bug. ***,17/Apr/06 12:06;bayard;39167 not a dupe - it's at the other end of the character range.,27/Jun/06 07:29;bayard;Also means that the unescape should not happen.,30/Jun/06 02:19;bayard;2.2 - comment it.  change in 2.3/3.0.,"04/Jul/06 02:10;bayard;Commented for 2.2:

svn ci -m ""Added note in javadoc of issue reported in LANG-66"" src/java/org/apache/commons/
lang/StringEscapeUtils.java 
Sending        src/java/org/apache/commons/lang/StringEscapeUtils.java
Transmitting file data .
Committed revision 418831.",20/Oct/06 18:55;bayard;Setting 3.0 as the fix-version; I don't think we should change functionality to this level without a major change in release versioning.,03/Dec/06 23:03;yozh;escapeJava and escapeJavaScript also escapes characters > 0x7f. This is also undesired and undocumented.,"24/Jun/08 19:37;weaver;The correct implementation for this should be:

1.  Escape all known unicode values (already being done)
2.  Remove or mask all values OUTSIDE the following allowed values:
    Allowed Whitespace: 0x9  0xA  0xD  0x20
    Range 1: 0x21 - 0xD7FF
    Range 2: 0xE000 - 0xFFFD
    Range 3: 0x10000 - 0x10FFFF

Anything not matching the above values that hasn't already been escaped, should be masked or removed.  What I do is write the hex value in place of the actual character:

Example, the evil 0x13 that gets copied out of MS word all the friggin time would look something like this:

[Unicode: 0x13]

I feel this is better than completely removing the character or replacing it with a generic ""?"" or something like that as it can be debugged much quicker from a data standpoint.

Reference: XML Specification, section 2.2 http://www.w3.org/TR/REC-xml/#charsets","25/Jun/08 08:12;joehni;Note, that the valid charset is different for XML 1.1:
http://www.w3.org/TR/2006/REC-xml11-20060816/#charsets

Therefore escapeXml should be overloaded with something like:

{code:java}
class StringEscaper {
    String static escapeXml() {
        return escapeXml(XmlVersion.XML_1_0);
    }
}
{code}

and the real implementation should take both specs into account.","05/Jun/09 15:01;grexe;Unfortunately this bug is still in 2.4 and affects German Umlauts ö,ä,ü,ß,...
This is quite annoying as it escapes perfectly valid characters in my input string which leads to a wrong display in the target (backend) application (which does not support the entity notation).
escapeXml() should really only escape characters that are not allowed in Xml, as advertized in the javadoc, that is <, >, ', & and ""

This bug is really problematic when you use, e.g., unescapeHtml() to convert entities and later unescapeXml() to escape Xml-reserved characters...",25/Jun/09 04:35;bayard;Using unescapeHtml and then unescapeXml seems very odd. The latter should be a subset of the former.,"30/Jun/09 06:50;bayard;While we still need to define what the standard behaviour is, by having XML_1_0 and XML_1_1 etc, this would now be a user changing the 3.0 implementation of:

{code:java}
    public static final CharSequenceTranslator ESCAPE_XML =
        new AggregateTranslator(
            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),
            new LookupTranslator(EntityArrays.APOS_ESCAPE()),
            NumericEntityEscaper.above(0x7f)
        );
{code}

to their own custom:

{code:java}
    public static final CharSequenceTranslator ESCAPE_XML =
        new AggregateTranslator(
            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),
            new LookupTranslator(EntityArrays.APOS_ESCAPE())
        );
{code}","19/Jul/09 18:30;bayard;Rewrite in LANG-505 supports the user choosing not to do this easily.

LANG-515 to define how XML should be escaped by default.",,,,,,,,,,,,,,,,,,
Subclassing and EqualsBuilder is broken,LANG-64,12340611,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Incomplete,,kingdon@panix.com,kingdon@panix.com,14/Mar/03 15:02,16/Oct/13 08:54,07/Apr/19 20:37,06/Feb/07 23:47,,,,,,,,,,0,,,,,,,,"Add the following to EqualsBuilderTest:

    public void testSubclassing()
    {
        TestObject to2 = new TestObject(5);
        TestObject to1Ter = new TestSubObject(4, 10);
        TestObject to1Bis = new TestSubObject(4, 10);
        TestObject to1 = new TestObject(4);
        testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2,
new TestObject(), false);
    }

As you can see, the whole concept behind appendSuper
and such produces equals methods which are not symmetric
and thus do not fulfill the equals contract.

The two general solutions I'm aware of are: (1) Make the equals
method final, so that subclasses are required to all
use the same equals method as each other and the superclass,
or (2) Use foo.getClass() == bar.getClass() instead
of instanceOf, so that an instance of the superclass is
never equals to an instance of a subclass.

In particular situations there might be specific solutions (look at
the way equals is defined for List and Set for example).","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,17987.0,,,2003-03-15 02:07:08.0,,,false,,,,,,,,,,,,,,147027,,,Sat Mar 15 02:07:08 UTC 2003,,,,,,0|i0d6zz:,74910,,,,,,,,"14/Mar/03 15:28;kingdon@panix.com;No wait, I take it back.

I now see the code which checks for subclasses and
forces equals to false in the relevant cases.

The tests would probably be a bit clearer if they
were broken apart in a greater number of test methods,
with names which reflected the things they did.
For what it is worth, here's the test I wrote
which helped me see what was going on:

    public void testSubclassingIsCommutative()
    {
        TestObject superObj = new TestObject(4);
        TestSubObject subObj = new TestSubObject(4, 10);
        boolean superFirst = EqualsBuilder.reflectionEquals(superObj, subObj);
        boolean subFirst = EqualsBuilder.reflectionEquals(subObj, superObj);
        assertEquals(superFirst, subFirst);
    }

","15/Mar/03 02:07;ggregory@seagullsw.com;Thank you for your thoughts, making good unit tests is key! Perhaps better 
comments would help of course... ;-)

The reasons I implemented asserting equivalence relationships all in the one 
method testReflectionEqualsEquivalenceRelationship is to allow for the whole 
equals contract to be validated at once. If the method where broken up in its 
component tests (reflection, symetry, transitivity, and sanity checks), it 
would be possible for tests case methods to be written that only assert a 
portion of the equals contract. IOW, this is a case where refactoring could 
introduce some bugs in the future. In your example style, I would have to 
remember to write all of the testSubclassingIsXXX methods for a given object 
fixture in order to assert the contract. 

The test case methods can be written to call 
testReflectionEqualsEquivalenceRelationship and be named for what they kind of 
objects tree they test. So the test case writer can dream up some nasty object 
tree and create a test case for it. For this test case, you can consider that 
the focus is on writing test fixtures rather than new equals contract 
assertions.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] StringUtils javadoc and test enhancements,LANG-63,12340860,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,21/Jul/03 05:27,16/Oct/13 08:55,07/Apr/19 20:37,16/Dec/09 08:50,,,,,2.0,,lang.*,,,0,,,,,,,,"The attached patch fixes some javadoc typos and adds some more examples and test
cases for StringUtils.

It does include one code change -- isNotBlank is changed to return !isBlank
instead of including the negated search logic. Apologies if the intention is not
for isNotBlank <-> !isBlank.  The examples, tests and docs suggest that this
should be true now.  Of course, it is possible that I am missing something.

I also introduced (with no explanation) the * notation discussed on the list to
make the examples more expressive.  I will submit a replacement patch if we
don't want to use this.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,21/Jul/03 05:28;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--StringUtilsPatches.txt;https://issues.apache.org/jira/secure/attachment/12332417/ASF.LICENSE.NOT.GRANTED--StringUtilsPatches.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,21750.0,,,2003-07-21 07:45:45.0,,,false,,,,,,,,,,,,,,147026,,,Mon Jul 21 07:45:45 UTC 2003,,,,,,0|i0d707:,74911,,,,,,,,"21/Jul/03 05:28;phil@steitz.com;Created an attachment (id=7409)
Patches for StringUtils and tests
","21/Jul/03 07:45;scolebourne@joda.org;Patch applied, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
ArrayUtils.isEquals() throws ClassCastException when array1 and array2 are different dimension,LANG-62,12341655,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,koji.sekiguchi@bluemartini.com,koji.sekiguchi@bluemartini.com,24/Aug/04 10:50,16/May/06 12:22,07/Apr/19 20:37,16/May/06 12:22,2.0,,,,2.1,,,,,0,,,,,,,,"ArrayUtils.isEquals() throws ClassCastException when array1 and array2 are 
different dimension.

For example:

boolean[][] array1 = new boolean[][] { { true, false }, { true, false } };
boolean[] array2 = new boolean[] { false, true };
if( ArrayUtils.isEquals( array1, array2 ) ){       // <== ClassCastException
      :

How about the following implementation to avoid the exception?

public static boolean isEquals(final Object array1, final Object array2) {
    if( !isSameType( array1, array2 ) ) return false;
    return new EqualsBuilder().append(array1, array2).isEquals();
}","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,30815.0,,,2004-08-26 04:22:35.0,,,false,,,,,,,,,,,,,,34065,,,Wed Apr 26 13:11:00 UTC 2006,,,,,,0|i0d70f:,74912,,,,,,,,"26/Aug/04 04:22;ggregory@seagullsw.com;This bug is really in EqualsBuilder.append(Object, Object). Fixed in CVS.","26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Enum constructor validations,LANG-61,12340363,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,hlship,hlship,12/Oct/02 22:40,16/May/06 12:46,07/Apr/19 20:37,16/May/06 12:46,1.0,,,,1.0.1,,,,,0,,,,,,,,"I'm in the process of porting my home-brew Enum to commons-lang's Enum.

My test suite pointed out two gaps in Enum:

1) It is possible to pass null as the name of an Enum.
2) It is possible to define two different Enums with the same name (and class).","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,13568.0,,,2002-11-12 00:53:04.0,,,false,,,,,,,,,,,,,,147025,,,Sat Jul 12 10:13:57 UTC 2003,,,,,,0|i0d70n:,74913,,,,,,,,12/Nov/02 00:53;bayard;Stephen has these fixed.,12/Jul/03 10:13;bayard;Fixed in 1.0.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] PMD is out of date,LANG-60,12342710,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Incomplete,,elharo@metalab.unc.edu,elharo@metalab.unc.edu,11/Nov/05 03:20,16/Oct/13 08:54,07/Apr/19 20:37,06/Feb/07 23:47,,,,,,,,,,0,,,,,,,,"While building Commons-Lang 2.1 with ""maven site"" it attmepts to download PMD
1.9. This is quite old. I think the current versi0on is 3.2 or 3.3, Should be
easy enough to update.","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37453.0,,,2005-11-12 05:56:39.0,,,false,,,,,,,,,,,,,,147024,,,Sat Nov 12 05:56:39 UTC 2005,,,,,,0|i0d70v:,74914,,,,,,,,"12/Nov/05 05:56;dennisl@apache.org;This is not a commons-lang issue. Which version of PMD that Maven tries to
download is controlled by your installation of Maven. More specifically the
Maven PMD plug-in. If you upgrade that plug-in to the latest version (1.7) it
will use PMD 3.2.

You can find instructions on how to upgrade your plug-in here:
http://maven.apache.org/maven-1.x/reference/plugins/pmd/announcements/announcement-1.7.txt",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] DateUtils.truncate method is buggy when dealing with DST switching hours,LANG-59,12342659,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,li.zhang@aeso.ca,li.zhang@aeso.ca,26/Oct/05 07:22,27/Oct/10 04:22,07/Apr/19 20:37,21/Jul/06 05:15,2.1,,,,2.2,,,,,0,,,,,,,,"Try to truncate 2004-10-31 01:00:00 MDT by hour and you'll actually get 2004-10-
31 01:00:00 MST, which is one hour after the input hour.

    // truncate 2004-10-31 01:00:00 MDT
    Date oct31_01MDT = new Date(1099206000000L);    
    Date result = DateUtils.truncate(oct31_01MDT, Calendar.HOUR_OF_DAY);
    assertEquals(oct31_01MDT, result);","Operating System: Windows XP
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,16/Jul/06 05:19;niallp;lang_issue_59.txt;https://issues.apache.org/jira/secure/attachment/12336956/lang_issue_59.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,37243.0,,,2006-06-27 07:28:56.0,,,false,,,,,,,,,,,,,,34099,,,Thu Oct 21 02:31:12 UTC 2010,,,,,,0|i0d713:,74915,,,,,,,,27/Jun/06 07:28;bayard;Definitely a reproducable bug - not sure how to fix it though.,"04/Jul/06 02:19;bayard;Most frustatingly, sometimes the test passes and sometimes it fails. Possibly based on time of day the test is run.","05/Jul/06 01:43;li.zhang@aeso.ca;I did a little hack and found this bug could be fixed with the following modification on DateUtils.modify method:
    private static void modify(Calendar val, int field, boolean round) {   
        ...
            if (!offsetSet) {
                int min = val.getActualMinimum(fields[i][0]);
                int max = val.getActualMaximum(fields[i][0]);
                //Calculate the offset from the minimum allowed value
                offset = val.get(fields[i][0]) - min;
                //Set roundUp if this is more than half way between the minimum and maximum
                roundUp = offset > ((max - min) / 2);
            }
            //We need to remove this field - Do nothing if there is no change
            if (offset != 0) {     <--- add the check
            	val.set(fields[i][0], val.get(fields[i][0]) - offset);
  	    }
        }
        throw new IllegalArgumentException(""The field "" + field + "" is not supported"");
   }

Calendar.set method resets some fields (e.g., DST_OFFSET) even if the new value is the same as the old value.  We just need to add a check before setting the new value to a field. If there is no change on this field, do not call Calendar.set method.",05/Jul/06 01:58;bayard;Many thanks - any thoughts on why the test case only fails some of the time?,05/Jul/06 02:01;li.zhang@aeso.ca;Forget my previous post. The fix is broken. The problem is sometimes when you call Calendar.set method the DST_OFFSET field is reset to 0.,"16/Jul/06 05:19;niallp;The problem seems to be with java.util.Calendar - as soon as it re-calculates the milliseconds it adjusts the time - even if you set a field without actually changing the value(i.e. set it to the same value) the same thing happens - it adds an hour to the time (see test case which demonstrates this).

I'm attaching a pragmatic, but not very elegant solution that works for truncating (and rounding down) - rather than using the Calendar methods to adjust milliseconds, seconds and minutes it adjusts the Date's millisecond value directly. Its only fields down to the ""hour"" level that affect the date - so truncating milliseconds, seconds and minutes should work fine since they will still be the same date. Combined with Li Zhang's suggestion of only setting fields which have changed - this seems to work.
","16/Jul/06 05:35;bayard;Very, very cool. Patch applied locally and passes tests. Will run the tests a few times through the day tomorrow as they tend to pass in the evening (I think) anyway. If it survives tomorrow, I'll apply the fix.","21/Jul/06 05:15;bayard;Niall's fix seems to be working :) Passed tests in morning and evening which seemed to have some impact on the bug.

Please reopen if it's not working for you, Li.","21/Jul/06 05:46;bayard;Now I've actually done the commit. Doh.

 svn ci -m ""Adding Niall's fix for LANG-59 - an edge case in date truncation - and his enhancement for the unit test that was there. "" src/
Sending        src/java/org/apache/commons/lang/time/DateUtils.java
Sending        src/test/org/apache/commons/lang/time/DateUtilsTest.java
Transmitting file data ..
Committed revision 424192.

Should be in tonight's nightly build:

http://people.apache.org/repository/commons-lang/jars/commons-lang-20060721.jar  ","19/Oct/10 16:19;maximocapo;I can´t find http://people.apache.org/repository/commons-lang/jars/commons-lang-20060721.jar, the site doesn't exist. Anybody could said me which is the version that contains the fix ?? I've ran with versions 2.1, 2.2 and it still fails when I try to make truncated  dealing with DST switching hours.

UNTRUNCATED DATE 2010-10-10 05:16:14.0

After truncated date with :   DateUtils.truncate(scaTransaction.getFechaTrx(),
					Calendar.DATE);
The result is:

TRUNCATED DATE Sat Oct 09 23:00:00 CLT 2010","20/Oct/10 06:08;bayard;This change should have been fixed in 2.2, though it'd be best to test on 2.4 and then let us know if you're still having trouble in a new JIRA issue.","21/Oct/10 02:31;maximocapo;The problem persist in both versions: 2.4 and 2.5


DateUtils.trucate() does not work properly with daylight saving time.
e.g.:
Date: 2010/10/10 05:16:14.0

DateUtils.truncate(date, Calendar.DATE) : Sun Oct 10 01:00:00 CLST 2010

Instead of showing 10/10/2010, it shows 10/10/2010 01:00:00
",,,,,,,,,,,,,,,,,,,
[lang] HashCodeBuilder does not use the same values as Boolean for boolean.,LANG-58,12341596,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,garydgregory,,27/Jul/04 02:33,10/Mar/11 22:30,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,,,,,,0,,,,,,,,HashCodeBuilder uses 0 and 1 instead of the values used by Boolean (1231 and 1237).,"Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,30328.0,,,2004-07-27 14:48:05.0,,,false,,,,,,,,,,,,,,147023,,,Thu Sep 30 13:28:56 UTC 2004,,,,,,0|i0d71b:,74916,,,,,,,,"27/Jul/04 14:48;scolebourne@joda.org;The constants chosen are from the Joshua Bloch book Efective Java, as per the 
design of the class.

Unless this causes a real problem, I would say WONTFIX.","27/Jul/04 20:55;ggregory@seagullsw.com;Ok, fine w/ me. I suggest this implementation detail be documented in the code.","15/Aug/04 09:19;bayard;Added:

     * <p>This adds <code>iConstant * 1</code> to the <code>hashCode</code>
     * and not a <code>1231</code> or <code>1237</code> as done in
java.lang.Boolean.
     * This is in accordance with the Effective Java design. </p>

Leaving for you to okay this Gary and close the issue if I got it right.","17/Aug/04 01:03;ggregory@seagullsw.com;Just be be a little more precise ;-) I would replace:

Effective Java

with:

<quote>Effective Java</quote> by Joshua Block

",30/Sep/04 13:28;bayard;Issue is now javadoc'd and considered not a problem.,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] ClassCastException in Enum.equals(Object),LANG-57,12341236,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,schroeder@dakosy.de,schroeder@dakosy.de,03/Feb/04 04:39,02/May/13 02:28,07/Apr/19 20:37,16/May/06 12:29,2.0,,,,2.1,,,,,0,,,,,,,,"Getting a ClassCastException if i
runnig this snippet
 
ColorEnum.RED.equals(""test"")

Thanks","Operating System: Windows XP
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,10/Feb/04 07:08;brentworden;ASF.LICENSE.NOT.GRANTED--bug-26616-patch.txt;https://issues.apache.org/jira/secure/attachment/12332724/ASF.LICENSE.NOT.GRANTED--bug-26616-patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,26616.0,,,2004-02-10 07:08:29.0,,,false,,,,,,,,,,,,,,147022,,,Wed Apr 26 13:11:02 UTC 2006,,,,,,0|i0d71j:,74917,,,,,,,,"10/Feb/04 07:08;brentworden;Created an attachment (id=10289)
patch adds instanceof check to Enum.equals().
","12/Feb/04 04:28;ggregory@seagullsw.com;Does this patch work with the intended feature of the ""} catch
(ClassCastException ex) {"" block? Is there a unit test that checks the ""} catch
(ClassCastException ex) {"" behavior?","12/Feb/04 05:01;brentworden;I changed the Enum.equals method to avoid cast exceptions.  The thought being, 
an equality check between objects of different types should return false and 
not raise an exception.

The unit test assures a ClassCastException is not thrown when comparing objects 
of different types.

FYI, by different types I mean objects that fail an instanceof check.","12/Feb/04 06:38;ggregory@seagullsw.com;The issue is that it looks like the author of the code had clear intentions when
writting the catch block, which this patch seems to circumvent. What that last
else and catch blcok do is allow Enum instance to work even though they might
come  from different class loaders. I think your patch might break this feature.
I also do not think there is a unit test that validates this feature. So, that
would be the first thing to do: add a unit test that checks that Enums from
different class loaders can be tested.",12/Feb/04 08:46;ggregory@seagullsw.com;Fixed as a side effect of fixing 26876. Added a unit test for this case.,"26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.countMatches loops forever if substring empty,LANG-56,12340434,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tackline@tackline.demon.co.uk,tackline@tackline.demon.co.uk,27/Nov/02 15:06,15/Jul/14 09:33,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.0,,lang.*,,,0,,,,,,,,"If you do say StringUtils.countMatches(""x"", """"), then it goes into an infinite loop.

Also sub isn't checked for null if str is null also. For instance
StringUtils.countMatches(null, null) should throw an NPE instead of 0.

To fix both problems put the following code at the start of the method:

        if (sub.equals("""")) {
            return 0;
        }","Operating System: Linux
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14883.0,,,,,,false,,,,,,,,,,,,,,34045,,,2002-11-27 15:06:15.0,,,,,,0|i0d71r:,74918,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
RandomStringUtils infloops with length < 1,LANG-55,12340637,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,ville.skytta@iki.fi,ville.skytta@iki.fi,05/Apr/03 04:40,16/May/06 12:41,07/Apr/19 20:37,16/May/06 12:41,2.0,,,,2.0,,,,,0,,,,,,,,"The various random* methods in RandomStringUtils go into an infinite loop when
the length of the requested String is < 1.  I'll attach a patch.","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,05/Apr/03 04:42;ville.skytta@iki.fi;ASF.LICENSE.NOT.GRANTED--randomstring.patch;https://issues.apache.org/jira/secure/attachment/12332215/ASF.LICENSE.NOT.GRANTED--randomstring.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,18723.0,,,,,,false,,,,,,,,,,,,,,147021,,,Sat Apr 05 04:42:10 UTC 2003,,,,,,0|i0d71z:,74919,,,,,,,,"05/Apr/03 04:42;ville.skytta@iki.fi;Created an attachment (id=5652)
Fix for random strings with length < 1
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] [PATCH] NumberRange - adds inclusive and exclusive end points,LANG-54,12341030,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,tobrien@discursive.com,tobrien@discursive.com,12/Oct/03 06:34,16/Oct/13 08:55,07/Apr/19 20:37,06/Feb/07 23:47,,,,,,,,,,0,,,,,,,,"This patch updates Test cases for NumberRange and also adds exclusive and
inclusive endpoints to NumberRange.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,12/Oct/03 06:35;tobrien@discursive.com;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12332578/ASF.LICENSE.NOT.GRANTED--patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,23749.0,,,2003-11-29 21:59:47.0,,,false,,,,,,,,,,,,,,147020,,,Sun Jun 27 23:15:35 UTC 2004,,,,,,0|i0d727:,74920,,,,,,,,"12/Oct/03 06:35;tobrien@discursive.com;Created an attachment (id=8535)
patch for NumberRange.java and NumberRangeTest.java
","29/Nov/03 21:59;scolebourne@joda.org;This seems like a reasonable extension to the API, however it does add a level 
of complexity. Is this now covered by [math]?

Also, the patch would affect Serialization, so this needs to be thought about.","27/Jun/04 13:35;phil@steitz.com;In response to Stephen's comment, we have nothing like this in [math]. 

I am -0 on this change, however, for the following reasons.
First, as Stephen points out, the change would affect serialization. Second,
while the extension makes sense logically, I am not sure that is has tremendous
practical value.  For integer ranges, (a,b) is no different from [a+1, b-1] --
i.e., being able to specify ""inclusivity"" does not really buy you anything other
than convenience (at the expense of a more complicated API and some overhead). 
For floating point ranges, counting on the difference between (a,b) and [a,b]
would in most cases I can imagine be dangerous -- so here again, the extension
does not really buy you anything.  

I may of course be missing some important and valuable use cases, in which case
I will happily move to +0 once I know what they are.
","27/Jun/04 23:15;tobrien@discursive.com;I've marked this as WONTFIX.  I had a reason to use something like this, but 
in the meantime, I've solved this problem through other means.  I do agree 
with Phil that this adds unnecessary complexity in Math at a time when math 
should be reaching a point of stability.",,,,,,,,,,,,,,,,,,,,,,,,,,,
SystemUtils.IS_OS_OS2 Javadoc is wrong,LANG-53,12340857,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,18/Jul/03 23:48,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:37,,,,,2.0,,,,,0,,,,,,,,"The javadoc says ""Mac"" instead of ""OS/2"".","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,21715.0,,,2003-07-18 23:51:14.0,,,false,,,,,,,,,,,,,,147019,,,Fri Jul 18 23:51:14 UTC 2003,,,,,,0|i0d72f:,74921,,,,,,,,"18/Jul/03 23:51;ggregory@seagullsw.com;Source: 
-----Original Message-----
From: KANEUCHI Tetsuya [mailto:tetsuyak@ka2.so-net.ne.jp] 
Sent: Friday, July 18, 2003 08:12
To: commons-dev@jakarta.apache.org
Subject: [lang] 2.0RC SystemUtils.IS_OS_OS2's JavaDoc is wrong.

I found small mistake in Commons Lang 2.0RC1.
SystemUtils.IS_OS_OS2's javadoc says ""if this is Mac.""
It should be ""OS/2"".

RCS file: /home/cvspublic/jakarta-commons/lang/src/java/org/apache/commons/lang/
SystemUtils.java,v
retrieving revision 1.17
diff -u -r1.17 SystemUtils.java
--- SystemUtils.java    8 Jul 2003 05:59:58 -0000       1.17
+++ SystemUtils.java    18 Jul 2003 15:03:21 -0000
@@ -185,7 +185,7 @@
     public static final boolean IS_OS_MAC_OSX = getOSMatches(""Mac OS X"");
 
     /**
-     * <p>Is <code>true</code> if this is Mac.</p>
+     * <p>Is <code>true</code> if this is OS/2.</p>
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> 
is
      * <code>null</code>.</p>

--
KANEUCHI Tetsuya

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Validate.notNull should throw NullArgumentException,LANG-52,12342593,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Trivial,Won't Fix,,joerg@myndian.de,joerg@myndian.de,01/Oct/05 21:11,17/Dec/09 03:41,07/Apr/19 20:37,11/Aug/09 06:32,,,,,3.0,,lang.*,,,0,,,,,,,,"Validate.notNull throws a IllegalArgumentException but should throw a
NullArgumentException","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,24/Oct/06 21:31;bayard;LANG-52.patch;https://issues.apache.org/jira/secure/attachment/12343582/LANG-52.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,36886.0,,,2005-10-02 00:24:45.0,,,false,,,,,,,,,,,,,,147018,,,Tue Aug 11 06:32:59 UTC 2009,,,,,,0|i0d72n:,74922,,,,,,,,"01/Oct/05 22:22;joerg@myndian.de;Perhaps Validate.notEmpty should also throw NullArgumentException if the
Argument was null.",02/Oct/05 00:24;jwcarman;What is NullArgumentException?  Do you mean NullPointerException?,"02/Oct/05 00:29;jwcarman;Changing these methods to throw a different exception type could break existing
code that depends on the fact that they throw IllegalArgumentException.  What if
someone (even if it's not suggested) puts a try/catch around a call to
Validate.notNull() which catches IllegalArgumentException?  For most cases
you're not really supposed to catch runtime exceptions, but that doesn't mean
that it's not done.","02/Oct/05 02:49;joerg@myndian.de;For NullArgumentException see here:
http://jakarta.apache.org/commons/lang/api/org/apache/commons/lang/NullArgumentException.html

It's in the same package als Validate and a subclass of
IllegalArgumentException, so it is no Problem to change this.","02/Oct/05 11:20;jwcarman;Ahhh.  I was looking in the exception package and didn't see it.  This shouldn't
cause any problems, then, I wouldn't think.  Good idea!","03/Oct/05 02:38;joerg@myndian.de;Hm, but there would be little difference in the use of
Validate.notNull(Object,String) and the Methods notEmpty with take an message as
second argument. At the moment I write something like:

public void foo(Object bar){
  Validate.notNull(bar, ""bar was null"");
  //other code
}


But if notNull would throw an NullArgumentException you should write 

public void foo(Object bar){
  Validate.notNull(bar, ""bar"");
  //other code
}

Or you would get ""bar was null must not be null."" as message. :-)


BTW: Perhaps I want to provide some methods to this class (Validate). What do I
have to do? (Or should I create an issue for every new method?)","15/Apr/06 06:21;bayard;Sorry for lateness in replying Jörg. If you still wanted to do such, multiple
attachments to the one issue is fine. If the attachments started to involve
different classes, packages, or problems, then I'd be tempted to kick off a new
issue.","24/Apr/06 14:06;bayard;API change, so targetted for 3.0 (which hopefully will be pretty quickly after
2.2). ","24/Oct/06 21:30;bayard;The only problem with this is in the messages. The NullArgumentException automatically adds "" must not be null"" to the end of any message passed up to it (ACK). In Validate we receive the message to print out, so having "" must not be null"" on the end becomes very daft. Credit to whomever wrote the unit tests that failed; otherwise I wouldn't have noticed.

We should also change the noNullElements methods if we do change the notNull ones, but I think the gain here is not worth the pain.

I'm +1 to WONTFIX this.","24/Oct/06 21:31;bayard;In case we do do this, a patch with the changes to Validate.java.","29/Dec/06 18:20;scolebourne;Yes, this method probably should have thrown NullArgumentException, but it doesn't and its too late to fix now. Also, the JDK should have has a NullArgumentException, but there's not much we can do about that either.",14/Jul/07 08:45;bayard;Reopening this issue for 3.0 - backwards compatible changes might be acceptable then.,"14/Jul/07 23:43;pbenedict;This can be fixed in the 2.x line. Add a second constructor to NullArgumentException which accepts both the name of the offending field and the message. Because the name isn't provided by Validate, just pass in null for it, but if it exists you can append both messages together. ",03/Nov/07 08:11;bayard;Paul: Got patch? :),"03/Nov/07 11:09;scolebourne;Just so we are clear. This change could break compatibility:

try {
. Validate.notNull(obj);
. someMethodThatMightThrowNullArgumentException()
} catch (NullArgumentException ex) {
. System.out.println(""A"");
} catch (IllegalArgumentException ex) {
. System.out.println(""B"");
}

Making this change will cause the code to print A instead of B.
","05/Nov/07 08:21;pbenedict;Stephen, was that only an FYI or an objection? ","05/Nov/07 09:19;scolebourne;I won't block the change, but I personally disagree with it for compatibility reasons.","09/Nov/07 07:54;bayard;Pushing back up to 3.0. I'm glad we discussed this again - and I think while it's worth doing, there's no rush to do it before we hit the next major release.",11/May/08 05:07;bayard;Moving to LangTwo which will most likely be a different package structure. It's not a big enough deal to be a point of backwards incompatibility.,"16/Jun/08 15:45;pbenedict;I still vote for this to be in 3.0. You can achieve it by adding a new Validate.notNullArgument method which appropriately throws NullArgumentException. This way, you can keep both backwards compatibility, but also deprecate the current version.",11/Aug/09 06:32;bayard;Won't fix because we deleted NullArgumentException.,,,,,,,,,,
Typo in documentation,LANG-51,12340901,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,neil@k-state.edu,neil@k-state.edu,13/Aug/03 08:06,16/May/06 12:36,07/Apr/19 20:37,16/May/06 12:36,1.0.1,,,,2.0,,,,,0,,,,,,,,"There is a small typo in the documentation at the URL:
 
http://jakarta.apache.org/commons/lang/api/org/apache/commons/lang/SystemUtils.html

The description for the static boolean IS_JAVA_1_5 is ""True iff this is Java
version 1.3."".  I presume the version number really should be ""1.5"" rather than
""1.3"".","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,22367.0,,,2003-08-13 08:27:41.0,,,false,,,,,,,,,,,,,,147017,,,Wed Aug 13 08:27:41 UTC 2003,,,,,,0|i0d72v:,74923,,,,,,,,13/Aug/03 08:27;ggregory@seagullsw.com;This is fixed in the current nightly build.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Replace Clover with Cobertura,LANG-50,12342711,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,elharo@metalab.unc.edu,elharo@metalab.unc.edu,11/Nov/05 03:22,20/May/06 00:59,07/Apr/19 20:37,20/May/06 00:59,2.1,,,,2.2,,,,,1,,,,,,,,"I attempted to run ""maven site"" but it failed like this:

Attempting to download clover-ant-1.3_01.jar.
1303K downloaded
Attempting to download clover-30day-eval-1.0.license.
WARNING: Failed to download clover-30day-eval-1.0.license.

BUILD FAILED
File...... /Users/elharo/.maven/cache/maven-xdoc-plugin-1.8/plugin.jelly
Element... attainGoal
Line...... 687
Column.... 48
The build cannot continue because of the following unsatisfied dependency:

Clover is a nice tool, but it is closed source, and probably not available to
everyone. I suggest replacing it with Cobertura, whcih is open source and does
90% of what Clover does.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37454.0,,,2006-01-02 03:47:29.0,,,false,,,,,,,,,,,,,,147016,,,Sat May 20 00:59:22 UTC 2006,,,,,,0|i0d733:,74924,,,,,,,,02/Jan/06 03:47;scolebourne@joda.org;Switched to cobertura,20/May/06 00:59;bayard;Reopening then closing to deal with migration bug.,20/May/06 00:59;bayard;Reopening then closing to deal with migration bug.,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Specify initial size for Enum's HashMap.,LANG-49,12340529,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,03/Feb/03 15:35,16/May/06 12:43,07/Apr/19 20:37,16/May/06 12:43,2.0,,,,2.0,,,,,0,,,,,,,,"Default size of Enum's HashMap needs improvement.

http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=104316379302781&w=2","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16690.0,,,2003-02-05 02:42:38.0,,,false,,,,,,,,,,,,,,147015,,,Wed Feb 05 02:42:38 UTC 2003,,,,,,0|i0d73b:,74925,,,,,,,,"05/Feb/03 02:42;scolebourne@joda.org;I have applied the patch, however I have changed 89 to 61.

JDK1.4 uses powers of two internally and does not default to size 101. 61 
should scale in JDK1.4 to size 64, and yet is still a prime number for JDK1.2 
and 1.3.

Perhaps you could test this?
Stephen",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
static option for reversing the stacktrace,LANG-48,12340404,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,max@eos.dk,max@eos.dk,07/Nov/02 23:41,16/May/06 12:45,07/Apr/19 20:37,16/May/06 12:45,2.0,,,,2.0,,,,,0,,,,,,,,"The nestableDelegate dumps the stacktrace bottomup instead of topdown as is the custom in the JDK 
(especially in JDK 1.4's own chained exceptions).

Thus when using NestableException you 
will always see the first low-level exception (e.g. an Null Exception) and you'll have to go all the 
way to the bottom to see the highlevel exception (e.g. an HibernateQueryException: Error while 
parsing query at 's.count()')

This is not very friendly to users because hopefully the 
highlevel exception will be the best explanation in 9 out of 10 causes, it is only when debugging or 
in misbehaved exception handling one like to see the root causes - and THEN one can go down and read 
the bottom of the stack trace.

Thus, I would suggest that you make it possible to have 
NestableDelegate print the stacktrace in reverce so the highlevel exception get printed first 
and THEN the lower-levels.

And optimal one could set an 
NestableDelegate.printStackTraceTopDown=true as an system property so one could choose 
which strategy should be activated in the system. 

Am I making any sense ? :)","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,06/May/03 02:00;mohankishore@yahoo.com;ASF.LICENSE.NOT.GRANTED--Patch.txt;https://issues.apache.org/jira/secure/attachment/12332069/ASF.LICENSE.NOT.GRANTED--Patch.txt,11/Apr/03 09:30;mohankishore@yahoo.com;ASF.LICENSE.NOT.GRANTED--Patch.txt;https://issues.apache.org/jira/secure/attachment/12332068/ASF.LICENSE.NOT.GRANTED--Patch.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,14357.0,,,2003-03-31 00:26:21.0,,,false,,,,,,,,,,,,,,147014,,,Wed May 14 10:01:40 UTC 2003,,,,,,0|i0d73j:,74926,,,,,,,,"31/Mar/03 00:26;alex@apache.org;""This is not very friendly to users because hopefully the 
highlevel exception will be the best explanation in 9 out of 10 causes,""

This is contrary to my experience.  I find that the higher level exceptions 
usually cloud the issue, obscuring a low-level explanation (e.g. Disk Full) 
with an package-level explanation (e.g. StorageLayerException) that was layered 
on in order to satisfy Java's neurotic exception checking.  In addition, this 
high-level exception has the *wrong* stack trace, since it was thrown from a 
different line of code than the one that caused the error; so you *have* to 
scroll down and then seek back up again to find the start of the real stack 
trace.

""it is only when debugging or in misbehaved exception handling one like to see 
the root causes - and THEN one can go down and read the bottom of the stack 
trace.""

I disagree with this statement too.  While I do believe that users should be 
given information when something goes wrong, naive users should never be forced 
to read a stack trace or an exception message.  For them, *any* exception at 
all translates as ""Something bad happened (plus technical gobbledegook).""

That means that the *only* users interested in the content would presumably 
only be interested because they are debugging.

It sounds like the bug reporter needs to install a higher-level error handling 
routine in his application.  While throwables can be a nice way to signal 
application errors, there needs to be a different way for your application to 
figure out what message to present to the user.  This can be as simple as ""An 
error occured while X"" where X is ""Loading foo.xml"" or ""Communicating with the 
server"", and you can even generate these by looking at the high-level exception 
and having a mapping table of your own (StorageLayerException -> ""Accessing the 
local disk"") but displaying ""com.myapp.storage.StorageLayerException: ..."" to 
the user is already assuming she's technical enough to even bother reading it 
past the ""com.myapp."", let alone comprehend it.

After all that, however, I'm not sure what the correct default behavior is for 
lang.exception.  There is a very strong argument that it should behave just 
like JDK; if so, there's another argument that there should be an option to 
reverse it for people like me who prefer it upside-down.

All IMHO, of course... :-)","31/Mar/03 00:51;max@eos.dk;

""It sounds like the bug reporter needs to install a higher-level error handling 


routine in his application."" 




:)




I got a higher-level error handling routine which ""converts"" the correct message 
to end-users.




In my bug-report the word users was ment as ""developers"" which is the users of 
the NestedException.




And yes, I understand your viewpoint of the Disk full is better than 
StorageException.....but as I wrote, if the top-level exception isn't good 
enough then it is because of a ""mis-behaving"" application/exception hierachy.


Thus if you got a good exception hierachy you write the correct message in the 
top-level exception (e.g. DerefrenceException(""Could not derefence property 
'kitten' on Person"")) and embed the Nullpointer exception that indicated it 
inside the top-level exception.




In this case it is much more meaningfull to see the DereferenceException than 
the nullpointer exception. If the nullpointer exception is at the top, one 
thinks it is a nasty bug...if DereferenceExcpeiton is at the top you know what 
has happend and it is a valid exception (if you have tried to dereference 
'kitten' on Person at least :)




But I would also prefer to have it as an option :)










","11/Apr/03 09:30;mohankishore@yahoo.com;Created an attachment (id=5784)
Allows jdk1.4 like trace
","11/Apr/03 09:36;mohankishore@yahoo.com;Have attached a patch which allows one to simulate the stack trace in jdk1.4.

Added a couple of boolean attributes:
1) topDown - [true] prints the stack top down
2) trimStackFrames - [true] removes the repeated frames in nested exceptions

Also added a method to ExceptionUtils to detect if Throwable class has a 
getCause method. If so, the printStackTrace just uses that. 

The way it is implemented right now, the output looks very garbled in jdk1.4...","30/Apr/03 04:01;mohankishore@yahoo.com;The patch will cause the tests to fail. Please let me know if the basic idea is 
acceptable - can then go ahead with the test cases (will require a complete 
overhaul of the test cases). The test cases would have to run in both jre1.3 
and jre1.4...","06/May/03 02:00;mohankishore@yahoo.com;Created an attachment (id=6223)
Source and Test pacthes
",14/May/03 10:01;bayard;Mohan's patch applied. Tests succeed.,,,,,,,,,,,,,,,,,,,,,,,,
test.lang fails if compiled with non iso-8859-1 locales,LANG-47,12340649,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,mrsam@courier-mta.org,mrsam@courier-mta.org,09/Apr/03 09:47,16/May/06 12:41,07/Apr/19 20:37,16/May/06 12:41,2.0,,,,2.0,,,,,0,,,,,,,,"Linux platform JDK 1.4.1_02

$ export LANG=C ; ant clean && ant dist && ant test

test.lang:
     [echo] Running lang package tests ...
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] .........................................
     [java] ...........................F.F
     [java] Time: 0.402
     [java] There were 2 failures:
     [java] 1)
testEscapeHtml(org.apache.commons.lang.StringEscapeUtilsTest)junit.framework.ComparisonFailure:
languages expected:<...ccedil...> but was:<...#65533...>
     [java]     at
org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtml(StringEscapeUtilsTest.java:161)
     [java]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     [java]     at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
     [java]     at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
     [java] 2)
testHtmlunescape(org.apache.commons.lang.StringEscapeUtilsTest)junit.framework.ComparisonFailure:
languages expected:<...?...> but was:<...ç...>
     [java]     at
org.apache.commons.lang.StringEscapeUtilsTest.testHtmlunescape(StringEscapeUtilsTest.java:168)
     [java]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
     [java]     at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
     [java]     at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)

     [java] FAILURES!!!
     [java] Tests run: 192,  Failures: 2,  Errors: 0

$ export LANG=en_US ; ant clean && ant dist && ant test

[ this one works ]

$ export LANG=en_US.utf-8 ; ant clean && ant dist && ant test

[ fails, with a slightly different error #2: ]

     [java] 2)
testHtmlunescape(org.apache.commons.lang.StringEscapeUtilsTest)junit.framework.ComparisonFailure:
languages expected:<...ï¿½...> but was:<...Ã§...>

LANG's setting for ""ant test"" does not appear to matter.  If LANG=C for ""ant
dist"", ""ant test"" will fail even if LANG=en_US.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,18836.0,,,2003-04-09 21:35:18.0,,,false,,,,,,,,,,,,,,147013,,,Thu Apr 10 21:27:47 UTC 2003,,,,,,0|i0d73r:,74927,,,,,,,,09/Apr/03 21:35;bayard;Alex?,"10/Apr/03 00:33;alex@apache.org;Fixed.  Please confirm.

In case you're interested, it was actually a problem in the test, not in the 
code.  The test was passing in a string with non-ascii characters.  When the 
test was compiled on a non-US/non-ASCII system, it encoded it as a different 
char, which naturally escaped/unescaped to a different entity.  The fix was to 
escape the funky characters explicitly in the test.

The line I changed had the following comment:
        // should we unicode-escape the cedilla here, for 7-bit cleanliness?
:-)

","10/Apr/03 21:27;mrsam@courier-mta.org;Works now in build 20030410
",,,,,,,,,,,,,,,,,,,,,,,,,,,,
Bug in StringUtils.chomp,LANG-46,12341129,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Incomplete,,lpienia,lpienia,28/Nov/03 03:52,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,,,lang.*,,,0,,,,,,,,"The StringUtils.chomp function doesn't work.

Thanks","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,25058.0,,,2003-11-29 22:01:36.0,,,false,,,,,,,,,,,,,,34052,,,Tue Dec 02 21:10:34 UTC 2003,,,,,,0|i0d73z:,74928,,,,,,,,29/Nov/03 22:01;scolebourne@joda.org;You're going to have to do better than that if you want support :-),"01/Dec/03 00:19;lpienia;Sorry for the short comments, 

I have this example to show why it doesnÂ´t work.



import org.apache.commons.lang.StringUtils;

public class p {
  public static void main(String[] args) {
    String loc = ""es_AR"";
    System.out.println(StringUtils.chomp(loc, ""_""));
    System.out.println(StringUtils.prechomp(loc, ""_""));
  }
}

The result of that is:
es_AR
AR

when should be:
es
AR

Thanks
","02/Dec/03 01:46;amamment;Although this may not be what you expected, this behaviour is as documented in 
the Javadocs (see below).  chomp only removes the separator from the end of 
the string if it's there.  The proposed alternate - substringBeforeLast - may 
do more of what you are looking for.

--JAVADOC CLIPPING--

public static String chomp(String str,
                           String separator)

Removes separator from the end of str if it's there, otherwise leave it alone.

NOTE: This method changed in version 2.0. It now more closely matches Perl 
chomp. For the previous behavior, use substringBeforeLast(String, String). 
This method uses String.endsWith(String).
","02/Dec/03 21:10;lpienia;Thanks!

There is a problem reagarding that TAGLIB String 1.0.1 that users the chomp 
function like the older way.

How could change that TAG to work ok?

",,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] StrBuilderTest#testReplaceStringString fails.,LANG-45,12342427,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Blocker,Fixed,,garydgregory,,02/Aug/05 04:41,16/Oct/13 08:54,07/Apr/19 20:37,06/Feb/07 23:47,,,,,2.2,,,,,0,,,,,,,,The test StrBuilderTest#testReplaceStringString fails.,"Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,02/Aug/05 09:14;nbeyer;ASF.LICENSE.NOT.GRANTED--StrBuilder_replaceStringString_Fix.txt;https://issues.apache.org/jira/secure/attachment/12333654/ASF.LICENSE.NOT.GRANTED--StrBuilder_replaceStringString_Fix.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,35966.0,,,2005-08-02 09:14:36.0,,,false,,,,,,,,,,,,,,34085,,,Tue Aug 02 10:03:54 UTC 2005,,,,,,0|i0d747:,74929,,,,,,,,"02/Aug/05 09:14;nbeyer;Created an attachment (id=15842)
Bug fix patch.

The bug seems to have been a typo in the replace(int,int,String) method.",02/Aug/05 10:03;ggregory@seagullsw.com;Patch applied. Thank you.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] NullPointerException when passing null; not IllegalArgumentException,LANG-44,12342536,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,elharo@metalab.unc.edu,elharo@metalab.unc.edu,07/Sep/05 06:25,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.1,,,,,,,,,0,,,,,,,,"According to the JavaDoc the various methods in the Fraction class such as add()
throw an IllegalArgumentException when null is passed to them. This is very
unusual. They should throw a NullPointerException instead.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36528.0,,,2005-09-07 06:51:04.0,,,false,,,,,,,,,,,,,,147012,,,Wed Sep 07 06:51:04 UTC 2005,,,,,,0|i0d74f:,74930,,,,,,,,"07/Sep/05 06:51;scolebourne@joda.org;This is standard behaviour for commons-lang. It would also be a backwards
imcompatible change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] SystemUtils fails init on HP-UX,LANG-43,12341861,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,gritmaj@wyeth.com,gritmaj@wyeth.com,10/Nov/04 05:50,16/May/06 12:18,07/Apr/19 20:37,16/May/06 12:18,2.0,,,,2.1,,,,,0,,,,,,,,"The system property for java.version is returned in HP-UX as JavaVM-1.3.0.01 
rather than the standard 1.3.0.01.  This causes the following Exception to be 
thrown in SystemUtils:

java.lang.NumberFormatException: JavV
at java.lang.FloatingDecimal.readJavaFormatString(Unknown Source)
        at java.lang.Float.parseFloat(Unknown Source)
        at org.apache.commons.lang.SystemUtils.getJavaVersionAsFloat
(SystemUtils.java:756)
        at org.apache.commons.lang.SystemUtils.<clinit>(SystemUtils.java:469)

The class should be modified to check if the VM is a valid number before 
peforming the parseFloat() operation.","Operating System: HP-UX
Platform: HP",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,32133.0,,,2004-11-12 08:51:26.0,,,false,,,,,,,,,,,,,,147011,,,Wed Apr 26 13:10:42 UTC 2006,,,,,,0|i0d74n:,74931,,,,,,,,"10/Nov/04 06:10;gritmaj@wyeth.com;I changed the following three methods to fix the issue:

    private static float getJavaVersionAsFloat() {
        if (JAVA_VERSION == null) {
            return 0f;
        }
        String trimmedVersion = trimJavaVersion();
        String str = trimmedVersion.substring(0, 3);
        if (trimmedVersion.length() >= 5) {
            str = str + trimmedVersion.substring(4, 5);
        }
        return Float.parseFloat(str);
    }
    
    private static int getJavaVersionAsInt() {
        if (JAVA_VERSION == null) {
            return 0;
        }
        String trimmedVersion = trimJavaVersion();
        String str = JAVA_VERSION.substring(0, 1);
        str = str + JAVA_VERSION.substring(2, 3);
        if (JAVA_VERSION.length() >= 5) {
            str = str + JAVA_VERSION.substring(4, 5);
        } else {
            str = str + ""0"";
        }
        return Integer.parseInt(str);
    }

    private static String trimJavaVersion()
    {
        if (Character.isDigit(JAVA_VERSION.charAt(0)))
        {
            return JAVA_VERSION.substring(
                    StringUtils.indexOf(JAVA_VERSION, ""0123456789""));
            
        }
        else
        {
            return JAVA_VERSION;
        }
    }","12/Nov/04 08:51;scolebourne@joda.org;Added code to handle text prefixes, based on code supplied. Please retest CVS
code on HP-UX, as its not a platform we have ready access to ;-)","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] EqualsBuilder.append(Object[], Object[]) crashes with a NullPointerException if an element of the first array is null",LANG-42,12341994,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,,andrew@terracottatech.com,andrew@terracottatech.com,13/Jan/05 02:51,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,2.2,,,,,0,,,,,,,,"If you use EqualsBuilder.append(Object[], Object[]), and the first array contains an element that is null 
(and before any other mismatches between the arrays are present), then EqualsBuilder will throw a 
NullPointerException at line 513.

Steps to reproduce:

  Object[] x1 = new Object[] { new Integer(1), null, new Integer(3) };
  Object[] x2 = new Object[] { new Integer(1), new Integer(2), new Integer(3) };

  new EqualsBuilder().append(x1, x2);

The third line of this program will crash.

Attached is a patch that fixes this bug and adds code to an existing unit-test case that proves it's fixed 
(i.e., the test fails without the source patch, and passes with it, and is a valid test).

This patch also fixes another bug related to exact types of objects in an array (which I'm about to enter, 
and which I will relate to this bug if I figure out how :-).","Operating System: Mac OS X 10.3
Platform: Macintosh",,,,,,,,,,,,,,,,,,,,,,,,,13/Jan/05 02:52;andrew@terracottatech.com;ASF.LICENSE.NOT.GRANTED--commons-lang-2.0-src.patch;https://issues.apache.org/jira/secure/attachment/12333344/ASF.LICENSE.NOT.GRANTED--commons-lang-2.0-src.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,33067.0,,,2005-01-17 11:00:51.0,,,false,,,,,,,,,,,,,,34089,,,Tue Apr 18 13:28:23 UTC 2006,,,,,,0|i0d74v:,74932,,,,,,,,"13/Jan/05 02:52;andrew@terracottatech.com;Created an attachment (id=13983)
Patch includes a testcase that proves existence of the bug / that it's fixed,
and fixes the bug in the source.
",13/Jan/05 03:03;andrew@terracottatech.com;See also COM-1843.,"17/Jan/05 11:00;ggregory@seagullsw.com;This appears to be already fixed in CVS and should be in the nightly build. I've
added the test case in a new method testNpeForNullElement().",18/Apr/06 13:28;bayard;*** COM-2001 has been marked as a duplicate of this bug. ***,,,,,,,,,,,,,,,,,,,,,,,,,,,
"last substring returned by StringUtils.split( String, String, int ) is too long",LANG-41,12341111,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,hotfusionman@yahoo.com,hotfusionman@yahoo.com,22/Nov/03 15:08,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,,,,,2.1,,lang.*,,,0,,,,,,,,"My expectations for the behavior of the split( *, ..., int max ) methods don't
match their actual behavior.  I expected to get a maximum of ""max"" substrings,
all of which were delimited in the parent string by the specified delimiters. 
Instead, what you get is ""max - 1"" such substrings, plus the rest of the parent
string as the final result substring.  This behavior seems counter to what
StringTokenizer would do, which is surprising, given the Javadoc comments about
using the split methods as alternatives to StringTokenizer.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,22/Nov/03 15:10;hotfusionman@yahoo.com;ASF.LICENSE.NOT.GRANTED--StringUtils.java.diff_max.zip;https://issues.apache.org/jira/secure/attachment/12332629/ASF.LICENSE.NOT.GRANTED--StringUtils.java.diff_max.zip,,,,,,,,,,1.0,,,,,,,,,,,,,,,,24911.0,,,2003-11-23 07:52:49.0,,,false,,,,,,,,,,,,,,147010,,,Wed Apr 26 13:10:43 UTC 2006,,,,,,0|i0d753:,74933,,,,,,,,"22/Nov/03 15:10;hotfusionman@yahoo.com;Created an attachment (id=9238)
tests to demonstrate desired behavior and patch to implement it
","23/Nov/03 06:55;hotfusionman@yahoo.com;Most likely my zipped patch files won't be readable.  That's just as well, given
that they patch the current contents of CVS rather than the state I would expect
to exist if my patch for COM-960 is committed.  I'll re-diff and resubmit a
patch if/when that's desired.","23/Nov/03 07:52;phil@steitz.com;I don't understand what the problem is.  The following tests (taken from your
patch, eliminating the added boolean parameter) succeed with the current code:

String stringToSplitOnNulls = ""ab   de fg"" ;
        String[] splitOnNullExpectedResults = { ""ab"", ""de"", ""fg"" };
        
        String[] splitOnNullResults = StringUtils.split( ""ab   de fg"", null);
        assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length);
        for (int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1) {
            assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]);
        }
        
        String[] expectedResults = { ""ab"", ""de fg"" };
        splitOnNullResults = StringUtils.split( ""ab   de fg"", null, 2);
        assertEquals(expectedResults.length, splitOnNullResults.length);
        for ( int i = 0 ; i < expectedResults.length ; i+= 1 ) {
            assertEquals(expectedResults[i], splitOnNullResults[i]);
        }

Looks to me like the current code is functioning as advertised. See the example
in the javadoc:

StringUtils.split(""ab:cd:ef"", "":"", 2)    = [""ab"", ""cdef""]

Probably should add your example, which shows that in the case of a whitspace
delimiter, the delimiter is not stripped from the terminal segment.

I would not support changing this behavior, since this would change the
contract.  It might be a good idea, however, to drop the javadoc reference to
the StringTokenizer.","23/Nov/03 15:42;hotfusionman@yahoo.com;Sorry, the patch was too big to easily pinpoint the changes to the tests that
demonstrate my desired behavior for the existing methods.  They're actually in
innerTestSplit():

-        assertEquals(msg, str, res[0]);
+        assertEquals(msg, ""a"", res[0]);

-        assertEquals(msg, str.substring(2), res[1]);
+        assertEquals(msg, ""b"", res[1]);

I agree the above is a change to the contract of these methods; I wanted to
raise the question as to whether the existing contract is the most
useful/sensible one.  It sure surprised me that the last substring returned by
the method had different properties from the others.  It doesn't make sense to
me, but maybe it does to other people.  If so, that's fine.


Furthermore, the Javadoc example

StringUtils.split(""ab:cd:ef"", "":"", 2)    = [""ab"", ""cdef""]

should read

StringUtils.split(""ab:cd:ef"", "":"", 2)    = [""ab"", ""cd:ef""]

in order to reflect what the code currently does (what it does is in some sense
sensible, though not what I would expect).  What the Javadoc says is just plain
weird, but I assume it was a typo.","24/Nov/03 04:46;phil@steitz.com;You are correct.  There was an error in the javadoc.  I have fixed the error and
added test cases to verify current behavior.","29/Nov/03 22:00;scolebourne@joda.org;Closing this for now, as the javadoc has been fixed","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,
"[lang] Validate.noNullEmelents(Object[], String) does not use message if Object[] == null",LANG-40,12341462,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Won't Fix,,joost@cassee.net,joost@cassee.net,19/May/04 19:13,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,,,,,,0,,,,,,,,"The first statement in Validate.noNullEmelents(Object[], String) is 
Validate.notNull(array). This should be Validate.notNull(array, message). 
Because of this, the message is not used when the array is null itself. This 
also applies to Validate.noNullEmelents(Collection, String).","Operating System: Linux
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,29084.0,,,2004-06-02 04:29:44.0,,,false,,,,,,,,,,,,,,147009,,,Wed Jun 02 04:29:44 UTC 2004,,,,,,0|i0d75b:,74934,,,,,,,,"02/Jun/04 04:29;scolebourne@joda.org;Although perhaps unexpected, this is documented in the Javadoc. A change here would be, in a minor 
way, incompatible. Am closing as wontfix.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No Javadoc for NestableDelegate,LANG-39,12340506,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,23/Jan/03 02:41,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:43,2.0,,,,2.0,,,,,0,,,,,,,,"Despite the large number of @authors :-) there is no class comment for 
org.apache.commons.lang.exception.NestableDelegate","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16341.0,,,2003-01-25 21:08:39.0,,,false,,,,,,,,,,,,,,147008,,,Sat Jan 25 21:08:39 UTC 2003,,,,,,0|i0d75j:,74935,,,,,,,,"25/Jan/03 21:08;scolebourne@joda.org;Javadoc added, thanks for the spot.
Stephen",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Rationalize StringUtils slice functions,LANG-38,12340871,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,24/Jul/03 10:38,16/Oct/13 08:54,07/Apr/19 20:37,16/Dec/09 08:50,,,,,2.0,,lang.*,,,0,,,,,,,,"The attached patch modifies the behavior of StringUtils.sliceFirst and
StringUtils.sliceFirstRemainder to consistently handle <string, delimiter> pairs
where the delimiter is null, empty or does not occur in the string, as discussed
on the list.

The patch also refactors the slice functions to take advantage of
StringUtils.indexOf and StringUtils.lastIndexOf.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,24/Jul/03 10:39;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--slicePatches.txt;https://issues.apache.org/jira/secure/attachment/12332433/ASF.LICENSE.NOT.GRANTED--slicePatches.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,21841.0,,,2003-07-25 07:55:49.0,,,false,,,,,,,,,,,,,,147007,,,Fri Jul 25 07:55:49 UTC 2003,,,,,,0|i0d75r:,74936,,,,,,,,"24/Jul/03 10:39;phil@steitz.com;Created an attachment (id=7483)
patch to StringUtils, StringUtilsTest
","25/Jul/03 07:55;scolebourne@joda.org;Patch applied with changes. Thanks.

I decided not to use the StringUtils.indexOf etc functions.
I currently prefer each method doing its own stuff in StringUtils, to maximise 
performance. This could change in the future as an internal refactoring if 
someone performance tests the methods.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] unit test for org.apache.commons.lang.text.StrBuilder,LANG-37,12342221,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,heuermh@acm.org,heuermh@acm.org,03/May/05 06:32,16/Oct/13 08:55,07/Apr/19 20:37,06/Feb/07 23:47,,,,,2.2,,,,,0,,,,,,,,"Gary Gregory wrote:

I hate to put a damper on things so late in the game but Clover reports
that we have 0% code coverage for three new 2.1 classes
(MappedMessageFormat, StrBuilder, StrTokenizer.StringMatcher) in the new
to 2.1 package:

http://people.apache.org/~stevencaswell/commons-lang-2.1/docs/clover/org
/apache/commons/lang/text/pkg-summary.html

Sadly, this makes the coverage for this new package the lowest % in all
of [lang].

Did someone forget to commit unit tests? This surely must be an omission
of some kind. I cannot see us releasing without unit tests for this new
code.

Gary


Attached is the start of a unit test for StrBuilder.  Sorry it is not complete -- I ran out of steam.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,03/May/05 06:33;heuermh@acm.org;ASF.LICENSE.NOT.GRANTED--StrBuilderTest.java;https://issues.apache.org/jira/secure/attachment/12333503/ASF.LICENSE.NOT.GRANTED--StrBuilderTest.java,13/Jul/05 05:29;heuermh@acm.org;ASF.LICENSE.NOT.GRANTED--diff.txt;https://issues.apache.org/jira/secure/attachment/12333504/ASF.LICENSE.NOT.GRANTED--diff.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,34715.0,,,2005-05-03 09:11:05.0,,,false,,,,,,,,,,,,,,147006,,,Fri Jul 15 06:56:54 UTC 2005,,,,,,0|i0d75z:,74937,,,,,,,,"03/May/05 06:33;heuermh@acm.org;Created an attachment (id=14912)
StrBuilderTest.java
","03/May/05 09:11;ggregory@seagullsw.com;Patch applied and tweaked a bit. 
Thank you Michael.
Clover now reports 46% instead of 0%.
","13/Jul/05 05:29;heuermh@acm.org;Created an attachment (id=15659)
svn diff src/

svn commit r209943 causes two tests to fail for me:
	  
---
Testsuite: org.apache.commons.lang.text.TextTestSuite
Tests run: 65, Failures: 1, Errors: 1, Time elapsed: 2.531 sec
   
Testcase:    
testAppendFixedWidthPadLeft(org.apache.commons.lang.text.StrBuilderTest):
FAILED
expected:<-null> but was:<null->
junit.framework.ComparisonFailure: expected:<-null> but was:<null->
	at
org.apache.commons.lang.text.StrBuilderTest.testAppendFixedWidthPadLeft(StrBuilderTest.java:571)

	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)



Testcase:
testAppendWithSeparators_Iterator(org.apache.commons.lang.text.StrBuilderTest):

Caused an ERROR
null
java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:427)
	at
org.apache.commons.lang.text.StrBuilder.appendWithSeparators(StrBuilder.java:614)

	at
org.apache.commons.lang.text.StrBuilderTest.testAppendWithSeparators_Iterator(StrBuilderTest.java:727)

	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)


diff attached.","15/Jul/05 04:53;ggregory@seagullsw.com;Patch applied, thank you.",15/Jul/05 06:56;scolebourne@joda.org;Further tests can go in a new or reopened call,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] patch and test case fixing problem with RandomStringUtils.random(),LANG-36,12340707,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,phil@steitz.com,phil@steitz.com,13/May/03 14:08,16/May/06 12:40,07/Apr/19 20:37,16/May/06 12:40,2.0,,,,2.0,,,,,0,,,,,,,,"When a set of characters is supplied to RandomStringUtils.random(), the last
character in the set never appears in generated strings.  

Attaching patch and test case showing failure.

The test case generates 100 6-character strings from a 3-character set and
compares the observed frequency of occurrence of each of the characters in the
set with expectation assuming purely random selection.  Uses a chi-square test.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,13/May/03 14:09;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--RandomStringUtilsPatch.txt;https://issues.apache.org/jira/secure/attachment/12332267/ASF.LICENSE.NOT.GRANTED--RandomStringUtilsPatch.txt,13/May/03 14:27;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--RandomStringUtilsTestPatch.txt;https://issues.apache.org/jira/secure/attachment/12332269/ASF.LICENSE.NOT.GRANTED--RandomStringUtilsTestPatch.txt,13/May/03 14:10;phil@steitz.com;ASF.LICENSE.NOT.GRANTED--RandomStringUtilsTestPatch.txt;https://issues.apache.org/jira/secure/attachment/12332268/ASF.LICENSE.NOT.GRANTED--RandomStringUtilsTestPatch.txt,,,,,,,,3.0,,,,,,,,,,,,,,,,19880.0,,,2003-05-14 09:53:17.0,,,false,,,,,,,,,,,,,,147005,,,Wed May 14 09:53:17 UTC 2003,,,,,,0|i0d767:,74938,,,,,,,,"13/May/03 14:09;phil@steitz.com;Created an attachment (id=6338)
Patch for RandomStringUtils
","13/May/03 14:10;phil@steitz.com;Created an attachment (id=6339)
Patch to add test case to RandomStringUtilsTest
","13/May/03 14:27;phil@steitz.com;Created an attachment (id=6340)
Revised patch of RandomStringUtilsTest -- removed System.out displaying chi-square stat
",14/May/03 09:53;bayard;Patched with Phil's fix/unit test.,,,,,,,,,,,,,,,,,,,,,,,,,,,
[Lang] Should ToStringBuilder.reflectionToString handle arrays?,LANG-35,12340565,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,21/Feb/03 01:29,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:42,2.0,,,,2.0,,,,,0,,,,,,,,"Right now, when you pass an array (a String[] for example), the 
ToStringBuilder.reflectionToString does not display the individual elements. 
Should it?","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,14/Mar/03 02:37;ASF.LICENSE.NOT.GRANTED--ToStringBuilderTest-patch-1.4.txt;https://issues.apache.org/jira/secure/attachment/12332150/ASF.LICENSE.NOT.GRANTED--ToStringBuilderTest-patch-1.4.txt,14/Mar/03 02:34;ASF.LICENSE.NOT.GRANTED--ToStringStyle-1.14-patch.txt;https://issues.apache.org/jira/secure/attachment/12332149/ASF.LICENSE.NOT.GRANTED--ToStringStyle-1.14-patch.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,17250.0,,,2003-03-14 02:34:56.0,,,false,,,,,,,,,,,,,,147004,,,Thu Mar 20 14:36:30 UTC 2003,,,,,,0|i0d76f:,74939,,,,,,,,"14/Mar/03 02:34;ggregory@seagullsw.com;Created an attachment (id=5317)
Patch for ToStringBuilder.java version 1.14
","14/Mar/03 02:37;ggregory@seagullsw.com;Created an attachment (id=5318)
Patch for ToStringBuilderTest.java version 1.4
",14/Mar/03 02:38;ggregory@seagullsw.com;These patches add support for arrays to ToStringBuilder.reflectionToString().,20/Mar/03 14:36;ggregory@seagullsw.com;Applied patches.,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Add support in ToStringStyle for DateFormat.,LANG-34,12340854,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,garydgregory,,17/Jul/03 01:48,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:37,1.0.1,,,,2.1,,,,,0,,,,,,,,"This stems from a discussion on commons-user.

The basic idea is that ToStringStyle could be customized to include an optional
java.text DataFormat object. If the attched patch were in (mod some formatting
and unit tests which I can do), user could write code like this:

import java.lang.reflect.Field;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.lang.builder.ReflectionToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

public class TestRTSB {

    static class MyToStringStyle extends ToStringStyle {
        MyToStringStyle() {
            this.setDateFormat(new SimpleDateFormat(""yyyy-MM-dd""));
        }
    }

    public static void main(String[] arguments) {
        System.out.println(new TestRTSB());
    }
    
    private int foo = 22;

    private Date myDate = new Date();

    public String toString() {
        return new ReflectionToStringBuilder(this, new
MyToStringStyle()).toString();
    }

// Use ToStringStyle.setDateFormat instead of:
//
//    public String toString0() {
//        return (new ReflectionToStringBuilder(this) {
//            protected Object getValue(Field field) throws
IllegalArgumentException, IllegalAccessException {
//                Object value = super.getValue(field);
//                if (""myDate"".equals(field.getName())) {
//                    return new SimpleDateFormat(""yyyy-MM-dd"").format(value);
//                } else {
//                    return value;
//                }
//            }
//        }).toString();
//    }
}

Any thoughts?","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,17/Jul/03 01:50;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12332414/ASF.LICENSE.NOT.GRANTED--patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,21663.0,,,2003-07-17 01:50:58.0,,,false,,,,,,,,,,,,,,147003,,,Wed Apr 26 13:10:49 UTC 2006,,,,,,0|i0d76n:,74940,,,,,,,,"17/Jul/03 01:50;ggregory@seagullsw.com;Created an attachment (id=7332)
ToStringBuilder.java
","17/Jul/03 14:45;bbuckley;Rather than adding support for just java.util.Date, consider adding support to 
allow a user to custom format any type of field.  Something like this:

1. Create an interface called say ToStringer

    public class ToStringer{
          String toString(Object objectToFormat);
    }

2. Add a method to ToStringStyle called say addToStringer to add custom 
formatters for specific field types.  Add a map field to hold the formatters.

    public void addToStringer(Class type, ToStringer formatter){
       formatters.put(type,formatter);
    }

3. Then a client will use/configure ToStringStyle like this to custom format 
say fields of type Dates, Doubles and Foos:

        ToStringStyle t = new ToStringStyle();
        t.addToStringer(java.util.Date.class,new ToStringer(){
            String toString(Object date){
                Date d = (Date date);
                return new SimpleDateFormat(""yyyy-MM-dd"").format(d);
            }
        });
        t.addToStringer(Double.class,new ToStringer(){
              String toString(Object decimal){
                  return new DecimalFormat(""#,000.0000"").format(decimal);
              }
          });
        t.addToStringer(Foo.class,new ToStringer(){
              String toString(Object foo){
                  Foo f = (Foo)foo;
                  return ""Foo object #"" + f.getId();
              }
          });
        }

-Brian","18/Jul/03 00:01;ggregory@seagullsw.com;If we do something like that the interface function could also be (presumably
for internal efficiency):

append(Object object, StringBuffer buffer);

We can discuss the 3 approaches and see what people think.","22/Jul/03 06:45;scolebourne@joda.org;A full converter approach is the right one if a change is to be made.

This should wait until after 2.0 though.","27/Jun/04 11:21;bayard;Dropping this from 2.1 aims. Commons-Convert does seem the better choice if
people want this to be of a lot of use.","17/Oct/04 01:25;scolebourne@joda.org;I have added some javadoc to ToStringStyle to demonstrate how to format fields.

The rest of this goes beyond lang at the moment into the realms of convert and 
the text package. The idea is not invalid though, so it may yet come back.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,
Method enums.Enum.equals(Object o) doesn't work correctly.,LANG-33,12341384,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,demitsch@freenet.de,demitsch@freenet.de,04/Apr/04 05:04,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:26,,,,,2.1,,,,,0,,,,,,,,"equals considers self equal to any Object that has an accessible public getName
() method which returns a string that is the same than the internal name iName. 
So if you compare two objects of subclasses of Enum that are not related 
otherwise, but incidentally have the same name iName the equals method returns 
true. 

But even worse, it's also possible to compare a subclass of Enum to an object 
of a totally unrelated class and to consider the objects equal if the totally 
unrelated class provides a getName method that returns a string equal to iName. 
If the getName method of the other object isn't accessible, an 
IllegalAccessException is thrown and caught in the equals method and false is 
returned which in this case seems to be correct.

The root of the problem is the use of reflection without checking first whether 
the names of the classes (via other.getClass().getName().equals(this.getClass
().getName())) are the same (not the classes themselves, this is tested by the 
equals method) before invoking the getName method on the other object via 
reflection. If the names of the classes aren't equal, false can be returned 
immediately instead of using reflection. Only if the classnames are equal 
reflection should be used to determine equality.

Note: The old implementation of Enums.equals in the commons-lang 2.0 
distribution seems to work ok in the first case with both objects being 
subclasses of Enum. In the second case of the totally unrelated class, a 
ClassCastException is thrown, but according to Joshua Bloch (Effective Java) 
and the SDK-API-Documentation for Object.equals this violates the contract for 
equals because equals is supposed to deliver true or false for any two non null 
references.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,04/Apr/04 05:08;demitsch@freenet.de;ASF.LICENSE.NOT.GRANTED--lang-enums-Enum-equals.txt;https://issues.apache.org/jira/secure/attachment/12332857/ASF.LICENSE.NOT.GRANTED--lang-enums-Enum-equals.txt,04/Apr/04 05:10;demitsch@freenet.de;ASF.LICENSE.NOT.GRANTED--testcase.txt;https://issues.apache.org/jira/secure/attachment/12332858/ASF.LICENSE.NOT.GRANTED--testcase.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,28180.0,,,2004-06-02 04:01:00.0,,,false,,,,,,,,,,,,,,147002,,,Wed Apr 26 13:10:42 UTC 2006,,,,,,0|i0d76v:,74941,,,,,,,,"04/Apr/04 05:08;demitsch@freenet.de;Created an attachment (id=11116)
proposed Patch for Enum.equals
","04/Apr/04 05:10;demitsch@freenet.de;Created an attachment (id=11117)
Testcase File contains source for four java classes
","02/Jun/04 04:01;scolebourne@joda.org;Patch applied, thanks for the spot and fix.

Related change 26876.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] Error in JavaDoc for StringUtils.chomp(String, String)",LANG-32,12341866,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,ronald@finalist.com,ronald@finalist.com,12/Nov/04 17:03,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.1,,lang.*,,,0,,,,,,,,"There's an error in the JavaDoc for the StringUtils.chomp(String, String)
method. One of the examples says:

StringUtils.chomp(""foo "", ""foo"") = ""foo""

This should be:

StringUtils.chomp(""foo "", ""foo"")   = ""foo ""","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,32198.0,,,2004-12-18 11:48:08.0,,,false,,,,,,,,,,,,,,147001,,,Wed Apr 26 13:10:51 UTC 2006,,,,,,0|i0d773:,74942,,,,,,,,"18/Dec/04 11:48;bayard;Yep, unit test has it correctly, so just a bug in the javadoc. Fixed.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] ExceptionUtils.addCauseMethodName(String) does not check for duplicates.,LANG-31,12342077,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,25/Feb/05 05:25,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:16,,,,,2.1,,,,,0,,,,,,,,"[lang] ExceptionUtils.addCauseMethodName(String) does not check for duplicates.

Will be fixed in SVN shortly.

Fix adds:
 ExceptionUtils.removeCauseMethodName(String)
 ExceptionUtils.isCauseMethodName(String)","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,33737.0,,,2005-02-25 05:44:07.0,,,false,,,,,,,,,,,,,,147000,,,Wed Apr 26 13:10:52 UTC 2006,,,,,,0|i0d77b:,74943,,,,,,,,25/Feb/05 05:44;ggregory@seagullsw.com;Fixed in SVN.,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] buffer under/overrun on Strings.strip, stripStart & stripEnd",LANG-30,12340232,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,reed.esau@pobox.com,reed.esau@pobox.com,27/May/02 14:55,16/May/06 12:49,07/Apr/19 20:37,16/May/06 12:49,,,,,2.1,,,,,0,,,,,,,,"Example:

   stripStart(""   "", null); 

fails with a buffer overrun.   Here's a patch:

--- Strings.java	Mon May 27 00:41:41 2002
+++ Strings.java.patched	Mon May 27 00:41:51 2002
@@ -1151,16 +1151,16 @@
         int end = str.length();
 
         if(ch == null) {
-            while( Character.isWhitespace( str.charAt(end-1) ) ) {
+            while( end > 0 && Character.isWhitespace( str.charAt(end-1) ) ) {
                 end--;
             }
         } else {
             char chr = ch.charAt(0);
-            while( str.charAt(end-1) == chr ) {
+            while( end > 0 && str.charAt(end-1) == chr ) {
                 end--;
             }
         }
-        return str.substring(0, end);
+        return (end > 0) ? str.substring(0, end) : """";
     }
 
     /**
@@ -1168,18 +1168,19 @@
      */
     static public String stripStart(String str, String ch) {
         int start = 0;
+        int end = str.length();
 
         if(ch == null) {
-            while( Character.isWhitespace( str.charAt(start) ) ) {
+            while( start < end && Character.isWhitespace( str.charAt
(start) ) ) {
                 start++;
             }
         } else {
             char chr = ch.charAt(0);
-            while( str.charAt(start) == chr ) {
+            while( start < end && str.charAt(start) == chr ) {
                 start++;
             }
         }
-        return str.substring(start);
+        return (start < end) ? str.substring(start) : """";
     }
 
     /**","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,9433.0,,,2006-04-26 13:11:05.0,,,false,,,,,,,,,,,,,,146999,,,Wed Apr 26 13:11:05 UTC 2006,,,,,,0|i0d77j:,74944,,,,,,,,"26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Fraction compareTo is inconsistent with equals,LANG-29,12342535,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,elharo@metalab.unc.edu,elharo@metalab.unc.edu,07/Sep/05 06:13,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.1,,,,,,,,,0,,,,,,,,"The ordering of the compareTo method method in the Fraction class is
inconsistent with equals() because 1/2 is not equal to 2/4. However
1/2.compareTo(2/4) is 0. 

My gut feeling is that the equals method is broken and should be fixed. 1/2 ==
2/4. However if there are good reasons for keeping the current behavior, then at
a minimum the inconsistency shoudl be called out in the JavaDoc, and users
should be warned against using fractions in hash tables and sorted maps and the
like. 

For background see http://java.sun.com/j2se/1.3/docs/api/java/lang/Comparable.html","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36527.0,,,2005-09-07 06:59:51.0,,,false,,,,,,,,,,,,,,146998,,,Fri Nov 11 08:12:31 UTC 2005,,,,,,0|i0d77r:,74945,,,,,,,,"07/Sep/05 06:59;scolebourne@joda.org;This is correct behaviour for this class.
The commons-lang Fraction class represents a general purpose fraction
implementation where fractions such as 2/4 may be stored. Equals thus performs
correctly and treats 1/2 and 2/4 as different as they have different state.

For an alternative Fraction implementation see commons-math (upcoming v1.1?).
There the fraction is always reduced, and may be more in line with a
mathematicians thought processes.

Extra javadoc added to compareTo in line with Comparable.","07/Sep/05 07:19;elharo@metalab.unc.edu;The fact that the internal state is different does not in itself imply that the
equals() method should return false. Two objects with different field values can
be considered equal. There's nothing in the contract for equality that says two
equal objects must have bit-per-bit identical representations.

Here I think there are two strong reasons to make 1/2.equals(2/4). The first is
the obvious natural mathemtical reason. Users naturally expect that 1/2 equals 2/4.

The second is the consistency with compareTo. Breaking this shouldn't be done
without a really good reason. Is there such a reason? i.e. is there some use
case that depends on 1/2 != 2/4? If not, or if the use case is not compelling
enough, I think we shoudl consider revising the behavior of the equals() method.

If there is such a use-case, then we need to consider revising the behavior of
the compareTo() method to make it consistent. Perhaps we could consistently
resolve conflicts based on the size of the denominator. For instance, 3/6 > 2/4
> 1/2. However, that's pretty weird and I'd really prefer to fix equals instead.
 (Plus something's tickling the back of my brain, saying there's some deep
mathematical reason that scheme isn't going to work. I'll have to pull out my
old number theory books and look up well-ordering.)


","10/Sep/05 18:52;scolebourne@joda.org;There are cases in the JDK where compareTo and equals do not match. eg.
BigDecimal, where 1.000 != 1.0, but they compareTo to 0. And whats more (in
JDK1.4 at least) they don't use the correct wording from Comparable.

And yes, in my opinion, equals does represent a comparison on state. (This is
really a discussion about the weaknesses in some core JDK definitions.)

Use case wise, it is perfectly reasonable for someone to want to store a
fraction of the form 2/4. This may have a particular meaning in an engineering
or teaching domain for example. 

If you want reduced fractions, simply use the dedicated factory method, or call
te reduce method before using equals.

Finally, backwards compatability really does mean we can't fix this. Lang has
high standards on compatability, and this would be a clear semantic break.
","11/Nov/05 00:09;elharo@metalab.unc.edu;I didn't mean a use case where one should store 2/4. I accept that there are
such use cases. I was asking for a use case where one would want 1/2 and 2/4 to
compare unequal. Barring such a use case, I might believe that backwards
compatibility prevents you from fixing this bug, but I still maintain it's a bug. ","11/Nov/05 08:12;scolebourne@joda.org;In coding 1/2 not equal to 2/4, I believe that we followed established JDK
practice of equals() representing state.

My use case is that two objects that are equal() should be capable of being
swapped in a program with no adverse effects on subsequent code. In this case
swapping 2/4 with 1/2 could definitely affect subsequent code.

As I said before, there is more than one possible contract for equals, and so we
chose one.",,,,,,,,,,,,,,,,,,,,,,,,,,
[lang][patch] ClassUtils.primitivesToWrappers method,LANG-28,12341330,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,alban,alban,14/Mar/04 03:08,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:27,,,,,2.1,,,,,0,,,,,,,,"A simple method which provides the same service than the primitiveToWrapper
method but for a whole Class array :

 ClassUtils.primitivesToWrappers(Class[]) : Class[]","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,14/Mar/04 03:09;alban;ASF.LICENSE.NOT.GRANTED--lang-ClassUtils.primitivesToWrappers.patch;https://issues.apache.org/jira/secure/attachment/12332798/ASF.LICENSE.NOT.GRANTED--lang-ClassUtils.primitivesToWrappers.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,27640.0,,,2004-06-27 11:44:07.0,,,false,,,,,,,,,,,,,,146997,,,Wed Apr 26 13:11:00 UTC 2006,,,,,,0|i0d77z:,74946,,,,,,,,"14/Mar/04 03:09;alban;Created an attachment (id=10774)
Add the ClassUtils.primitivesToWrappers method and the related test case
","27/Jun/04 11:44;bayard;Modified somewhat. The patch does some optimising in that if none of the
elements are primitive classes, then it returns the original array. It's not
what a user would expect, so I've simplified it to always return a new array,
regardless. Also a few style and javadoc changes.","26/Apr/06 13:11;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Add SystemUtils.AWT_TOOLKIT and others.,LANG-27,12341260,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,12/Feb/04 09:57,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:29,2.0,,,,2.1,,,,,0,,,,,,,,"Add SystemUtils.AWT_TOOLKIT, which is useful to detect whether or not the JRE is
running on a headless platform.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,26877.0,,,2004-02-14 08:25:38.0,,,false,,,,,,,,,,,,,,146996,,,Wed Apr 26 13:10:56 UTC 2006,,,,,,0|i0d787:,74947,,,,,,,,"14/Feb/04 08:25;ggregory@seagullsw.com;Added JAVA_AWT_FONTS, JAVA_AWT_GRAPHICSENV, JAVA_AWT_PRINTERJOB,
JAVA_UTIL_PREFS_PREFERENCES_FACTORY, USER_TIMEZONE.

Not a system property per se, but IS_OS_UNIX is new to 2.1.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
NumberRange.getMaximum returns minimum,LANG-26,12340419,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Critical,Fixed,,bayard,bayard,15/Nov/02 04:37,16/May/06 12:45,07/Apr/19 20:37,16/May/06 12:45,1.0,,,,1.0.1,,,,,0,,,,,,,,NumberRange.getMaximum returns the minimum value and not the max.,"Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14566.0,,,,,,false,,,,,,,,,,,,,,146995,,,Sat Jul 12 10:13:41 UTC 2003,,,,,,0|i0d78f:,74948,,,,,,,,15/Nov/02 04:38;bayard;This is now fixed in CVS HEAD.,12/Jul/03 10:13;bayard;Fixed in 1.0.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] DurationFormatUtils.formatDurationISO() javadoc is missing T in duration string between date and time part,LANG-25,12342718,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,hack,hack,15/Nov/05 19:44,16/Dec/09 08:51,07/Apr/19 20:37,16/Dec/09 08:51,2.1,,,,2.2,,lang.time.*,,,0,,,,,,,,"The javadoc says: ""This method formats durations using the days and lower fields
of the ISO format pattern, such as P7D6H5M4.321S."" the example duration is
missing a T between the date part 7D and the time part 6H5M4.321S. The format is
P1M for 1 month and PT1M for one minute.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,37507.0,,,2006-03-06 15:18:24.0,,,false,,,,,,,,,,,,,,146994,,,Mon Mar 06 15:18:24 UTC 2006,,,,,,0|i0d78n:,74949,,,,,,,,06/Mar/06 15:18;bayard; P7D6H5M4.321S changed to P7D6TH5M4.321S.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] DateUtils.truncate oddity at the far end of the Date spectrum,LANG-24,12341747,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,mpo@apache.org,mpo@apache.org,24/Sep/04 14:17,16/Dec/09 08:51,07/Apr/19 20:37,16/Dec/09 08:51,2.0,,,,2.1,,lang.time.*,,,0,,,,,,,,"I'm assuming that the goal of the truncate() method in
org.apache.commons.lang.time.DateUtils is to be a shorthand for the otherwise
cumbersome java.util.Calendar operations of setting all lower fields to 0.

In other words, the following 2 methods are (by me) expected to yield the same:

    private Date commonsTruncate(Date date)
    {
        return DateUtils.truncate(date, Calendar.DATE);
    }

    private Date truncate(Date date)
    {
        Calendar c = Calendar.getInstance();
        c.setTime(date);
        c.set(Calendar.HOUR_OF_DAY, 0);
        c.set(Calendar.MINUTE, 0);
        c.set(Calendar.SECOND, 0);
        c.set(Calendar.MILLISECOND, 0);
        return c.getTime();
    }

This is generally the case, except for the very pathological case of the
ultimate biggest date Java allows you to make:

    Date endOfTime = new Date(Long.MAX_VALUE); 
    // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis

commons-result:  Sun Aug 17 02:00:00 CEST 292278994 
                 // commonsTruncate(endOfTime)
handmade-result: Sun Aug 17 00:00:00 CEST 292278994 
                 // truncate(endOfTime)
(mind the 2h difference)

Another odd observation concerning this special date is that the commons-result
WILL match the other one if we allow the commons truncate to operate on the
result again:

commons-double-truncate-result: 
                 Sun Aug 17 00:00:00 CEST 292278994   
                 // truncate(truncate(endOfTime))

(which is somewhat another surprise: one would expect truncation not to change a
Date that was already truncated)

my (totally wild) guess is that this is related to timezone and DST issues
fact being that similar effects are seen on all Date's pointing to a moment in
the last 2hours of the Date spectrum.

I understand that this is a very hypothetical issue, nevertheless.

kind regards,
-marc=","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,31395.0,,,2004-09-30 13:26:37.0,,,false,,,,,,,,,,,,,,34047,,,Wed Apr 26 13:10:57 UTC 2006,,,,,,0|i0d78v:,74950,,,,,,,,30/Sep/04 13:26;bayard;I'm going to push this back to 3.0.,17/Oct/04 00:45;scolebourne@joda.org;Error checking added,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] String StringUtils.leftPad(String str, int size, char padChar) NoSuchMethodError",LANG-23,12342854,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Incomplete,,andreas@nikem.de,andreas@nikem.de,14/Jan/06 03:34,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.1,,,,,,lang.*,,,0,,,,,,,,"When I use StringUtils.leftPad(String str, int size, char padChar) I get an Error:
java.lang.NoSuchMethodError:
org.apache.commons.lang.StringUtils.leftPad(Ljava/lang/String;IC)Ljava/lang/String;

Try this code:
String a = StringUtils.leftPad(""abcd"", 10, '0');","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,38265.0,,,2006-01-14 03:54:30.0,,,false,,,,,,,,,,,,,,34072,,,Mon Mar 06 15:50:04 UTC 2006,,,,,,0|i0d793:,74951,,,,,,,,"14/Jan/06 03:43;andreas@nikem.de;I used 
String a = StringUtils.leftPad(""abcd"", 10, ""0"");
instead and it worked (a pad string and not a pad character)",14/Jan/06 03:54;ggregory@seagullsw.com;Could you be compiling and runing with two different versions of the jar?,"06/Mar/06 15:50;bayard;I can't see this being anything other than Gary's suggestion of a
compile/runtime mismatch between jars.",,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Enum.equals() is too fragile,LANG-22,12342207,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,kennym@kizoom.com,kennym@kizoom.com,25/Apr/05 20:56,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,2.0,,,,,,,,,0,,,,,,,,"The equals() method of the Enum class in Commons Lang 2.0 is too fragile.  If
the ""Other"" argument is a non-null abject of any other type than Enum, then a
ClassCastException is thrown.

The offending line code is:

  if (other == this) {
    return true;
  } else if (other == null) {
    return false;
  } else if (other.getClass() == this.getClass()) {
    // shouldn't happen, but...
    return iName.equals(((Enum) other).iName);
  } else if (((Enum)
other).getEnumClass().getName().equals(getEnumClass().getName())) {

If ""other"" is, say, a String, then the last else-if clause will throw an
exception when it tries to cast it to Enum.

This method should be more robust, and tolerate ANY argument, regardless of type.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,34600.0,,,2005-05-23 08:29:15.0,,,false,,,,,,,,,,,,,,146993,,,Mon May 23 08:29:15 UTC 2005,,,,,,0|i0d79b:,74952,,,,,,,,"23/May/05 08:29;scolebourne@joda.org;Fixed already

*** This bug has been marked as a duplicate of 26876 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] escapeXML() -> Not escaping low characters,LANG-21,12343003,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,daviti,daviti,31/Mar/06 19:16,06/Feb/07 23:47,07/Apr/19 20:37,06/Jun/06 02:59,2.1,,,,2.2,,,,,0,,,,,,,,"Low characters such as #18 are not escaped, and therefore are mixed together 
with other characteres as if there were normal characteres such as 'a', '1' etc.

Possibly solved in other versions?","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,39167.0,,,2006-04-15 08:02:41.0,,,false,,,,,,,,,,,,,,146992,,,Tue Jun 06 02:59:46 UTC 2006,,,,,,0|i0d79j:,74953,,,,,,,,"15/Apr/06 08:02;bayard;

*** This bug has been marked as a duplicate of 38210 ***","17/Apr/06 12:05;bayard;Oops, not a dupe. It's at the opposite end of the spectrum.",29/Apr/06 13:54;bayard;There's been discussion on this on the user mailing list.,"06/Jun/06 02:59;bayard;We have two reports currently, one that we don't escape low characters and should do; and one that we do escape high characters and shouldn't do.

I'm marking this as WONTFIX based on Phil's thoughts on the commons-user mailing list. It's easier to add the code to escape than it would be to undo it.

The escaping high characters issue will be fixed to not escape.",,,,,,,,,,,,,,,,,,,,,,,,,,,
Infinite loop in ToStringBuilder.reflectionToString for inner classes,LANG-20,12340483,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Blocker,Fixed,,per@velschow.com,per@velschow.com,11/Jan/03 13:27,16/May/06 12:44,07/Apr/19 20:37,16/May/06 12:44,2.0,,,,2.0,,,,,0,,,,,,,,"ToStringBuilder.reflectionToString() enters an infinite loop when used with the 
following example:

/////////////////////////////
public class Outer {
  Inner inner = new Inner();
  class Inner {
    public String toString() {
      return ToStringBuilder.reflectionToString(this);
    }
  }
  public String toString() {
    return ToStringBuilder.reflectionToString(this);
  }
  public static void main(String[] args) {
    Outer outer = new Outer();
    System.out.println(outer);
  }
}
/////////////////////////////

The reason is that the two classes refer to each other via the explicit field 
inner and the implicit field Outer.this. 

The bug can be resolved by skipping the implicit fields. Is there any good 
reason for printing those anyway?

I am not sure what is the best way to detect if a field is an implicit field. 
But I patched the code myself in a way that seemed to work:

/////////////////////////////
public static String reflectionToString(Object object, ToStringStyle style, 
        boolean outputTransients) {
    if (object == null) {
        throw new IllegalArgumentException(""The object must not be null"");
    }
    if (style == null) {
        style = getDefaultStyle();
    }
    Field[] fields = object.getClass().getDeclaredFields();
    Field.setAccessible(fields, true);
    ToStringBuilder builder = new ToStringBuilder(object, style);
    for (int i = 0; i < fields.length; ++i) {
        Field f = fields[i];
        if (!f.getName().startsWith(""this$"")) {
          if (outputTransients || !Modifier.isTransient(f.getModifiers())) {
              if (!Modifier.isStatic(f.getModifiers())) {
                  try {
                      builder.append(f.getName(), f.get(object));
                      
                  } catch (IllegalAccessException ex) {
                      //this can't happen. Would get a Security exception 
instead
                      //throw a runtime exception in case the impossible 
happens.
                      throw new InternalError(""Unexpected 
IllegalAccessException"");
                  }
              }
          }
        }
    }
    return builder.toString();
}
/////////////////////////////

Notice the extra if statement that tests for field names starting with ""this$"". 
I don't know if this is guaranteed to work always, though.","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,15986.0,,,2003-01-20 02:51:15.0,,,false,,,,,,,,,,,,,,34102,,,Mon Jan 20 03:10:04 UTC 2003,,,,,,0|i0d79r:,74954,,,,,,,,"20/Jan/03 02:51;scolebourne@joda.org;Change made which should deal with this situation.
Thanks for the report and test.
Stephen","20/Jan/03 03:10;per@velschow.com;I just checked the changes in CVS. If I read the code correctly, it will now 
discard any field name containing a '$' character. This may be too restrictive 
since '$' is a legal identifier part AFAIK.

Also, I have thought a bit more about the problem. It is actually a more 
general problem than the one I reported. Inner classes are not the only way you 
could have mutually recursive data structures. So perhaps we should think of a 
more general way of preventing this infinite loop. I have not made any solution 
yet, but I think it might be solved using a Set of references to already 
traversed instances and then avoid traversing an instance if it has already 
been traversed.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] ToStringStyle.setArrayEnd(String) doesn't replace null with empty string.,LANG-19,12341837,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tezukam@mm.neweb.ne.jp,tezukam@mm.neweb.ne.jp,28/Oct/04 12:48,16/May/06 12:19,07/Apr/19 20:37,16/May/06 12:19,2.0,,,,2.1,,,,,0,,,,,,,,"According to the javadoc of the ToStringStyle.setArrayEnd(String) method,  
null is accepted, but will be converted to an empty String.

But, in actual this method does not convert null.

attached are a fix and a junit test.","Operating System: All
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,28/Oct/04 12:49;tezukam@mm.neweb.ne.jp;ASF.LICENSE.NOT.GRANTED--patch.txt;https://issues.apache.org/jira/secure/attachment/12333196/ASF.LICENSE.NOT.GRANTED--patch.txt,28/Oct/04 12:50;tezukam@mm.neweb.ne.jp;ASF.LICENSE.NOT.GRANTED--patch2.txt;https://issues.apache.org/jira/secure/attachment/12333197/ASF.LICENSE.NOT.GRANTED--patch2.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,31933.0,,,2004-12-29 08:13:58.0,,,false,,,,,,,,,,,,,,34092,,,Wed Apr 26 13:10:58 UTC 2006,,,,,,0|i0d79z:,74955,,,,,,,,"28/Oct/04 12:49;tezukam@mm.neweb.ne.jp;Created an attachment (id=13239)
patch for ToStringStyle
","28/Oct/04 12:50;tezukam@mm.neweb.ne.jp;Created an attachment (id=13240)
patch for ToStringStyleTest
","29/Dec/04 08:13;scolebourne@joda.org;Thanks for this bug report, and a textbook example of a unit test and fix.

Stephen","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] BitSetUtils class, toIndexArray and fromIndexArray",LANG-18,12341219,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Won't Fix,,heuermh@acm.org,heuermh@acm.org,21/Jan/04 07:10,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,,,,,,,,,,0,,,,,,,,"Attached is a new clas BitSetUtils, with methods

/**
 * Return an int array of the indicies of set bits in the
 * specified bit set.
 *
 * @param bitSet bit set, must not be null
 */
public static final int[] toIndexArray(final BitSet bitSet)

and

/**
 * Return a bit set of the specified size with the indices specified
 * in <code>indexArray</code> set to true.
 *
 * @param size initial size of the bit set
 * @param indexArray array of indices to set to true, must not be null
 */
public static final BitSet fromIndexArray(final int size,
                                          final int[] indexArray)

for possible inclusion in [collections] post-3.0-release","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,03/Feb/04 05:14;heuermh@acm.org;ASF.LICENSE.NOT.GRANTED--BitSetUtils.java;https://issues.apache.org/jira/secure/attachment/12332713/ASF.LICENSE.NOT.GRANTED--BitSetUtils.java,21/Jan/04 07:11;heuermh@acm.org;ASF.LICENSE.NOT.GRANTED--BitSetUtils.java;https://issues.apache.org/jira/secure/attachment/12332711/ASF.LICENSE.NOT.GRANTED--BitSetUtils.java,03/Feb/04 05:15;heuermh@acm.org;ASF.LICENSE.NOT.GRANTED--TestBitSetUtils.java;https://issues.apache.org/jira/secure/attachment/12332714/ASF.LICENSE.NOT.GRANTED--TestBitSetUtils.java,21/Jan/04 07:12;heuermh@acm.org;ASF.LICENSE.NOT.GRANTED--TestBitSetUtils.java;https://issues.apache.org/jira/secure/attachment/12332712/ASF.LICENSE.NOT.GRANTED--TestBitSetUtils.java,,,,,,,4.0,,,,,,,,,,,,,,,,26297.0,,,2004-01-26 04:28:19.0,,,false,,,,,,,,,,,,,,146991,,,Sun Oct 17 00:55:26 UTC 2004,,,,,,0|i0d7a7:,74956,,,,,,,,"21/Jan/04 07:11;heuermh@acm.org;Created an attachment (id=10038)
BitSetUtils.java
","21/Jan/04 07:12;heuermh@acm.org;Created an attachment (id=10039)
TestBitSetUtils.java
","21/Jan/04 07:18;heuermh@acm.org;or on second thought, perhaps this fits better in [lang]?",26/Jan/04 04:28;scolebourne@joda.org;Reassign to lang as it already has a BitSet class,"03/Feb/04 05:13;heuermh@acm.org;changed summary title from [collections] to [lang], attaching new versions of
BitSetUtils and TestBitSetUtils in package org.apache.commons.lang with Apache
license version 2.0 and javadoc improvements.","03/Feb/04 05:14;heuermh@acm.org;Created an attachment (id=10192)
updated BitSetUtils.java
","03/Feb/04 05:15;heuermh@acm.org;Created an attachment (id=10193)
updated TestBitSetUtils.java
","15/Aug/04 08:44;bayard;Sorry it's been so long, looking at as a part of releasing Lang 2.1. 

Negative view on this is that it really doesn't do much. Just a helper for a
couple of for loops. These methods are in themselves fine, but I don't think it
justifies adding a BitSetUtils.

Not too sure what Stephen meant by Lang has a BitSet below. It does have a
BitField, but I think that's a different concept to BitSet (pretty sure it is,
just don't recall why right now).","17/Oct/04 00:55;scolebourne@joda.org;I concur that this doesn't seem that useful, nor good for lang inclusion. 
(Also, the proposed implementation is JDK1.4 specific) The main problem is that 
BitSet is not a class that is used to the same degree as Number , Boolean and 
String.",,,,,,,,,,,,,,,,,,,,,,
AdaptorRegistry,LANG-17,12340530,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Duplicate,,bayard,bayard,03/Feb/03 15:39,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,,,,,,,,,,0,,,,,,,,http://marc.theaimsgroup.com/?l=jakarta-commons-dev&m=104335042930627&w=2,"Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16691.0,,,,,,false,,,,,,,,,,,,,,146990,,,Tue Mar 18 06:49:46 UTC 2003,,,,,,0|i0d7af:,74957,,,,,,,,"18/Mar/03 06:49;bayard;

*** This bug has been marked as a duplicate of 17770 ***",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"NumberRange inaccurate for Long, etc.",LANG-16,12340435,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,tackline@tackline.demon.co.uk,tackline@tackline.demon.co.uk,27/Nov/02 15:30,16/May/06 12:45,07/Apr/19 20:37,16/May/06 12:45,2.0,,,,2.0,,,,,0,,,,,,,,"NumberRange assumes everything is representable by a double. This is not the
case. In particular the classes Long, BigInteger and BigDecimal are standard
parts of J2SE that do not obey to assumption. As an example the following test
fails.

        assertFalse(new NumberRange(new Long(Long.MAX_VALUE)).includesNumber(new
Long(Long.MAX_VALUE-1)));

I guess this bug is really a problem with the design of the class. You could
check the exact class and take appropriate action, but that would be long,
complicated and quite possibly pointless. I would suggest that the class is
replaced with one that assumes doubles instead of Number.","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,14884.0,,,2002-12-23 07:21:53.0,,,false,,,,,,,,,,,,,,146989,,,Mon Dec 23 07:21:53 UTC 2002,,,,,,0|i0d7an:,74958,,,,,,,,"23/Dec/02 07:21;scolebourne@joda.org;I agree with you. The NumberRange class is broken. 

I have commented the original as being broken, and created a subpackage of math 
with specific range implementations for Number, and primitive types.

Check it out and see if it meets your requirements.
Stephen",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"Infinite loop in StringUtils.replace(text, repl, with) + FIX",LANG-15,12340493,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,holger.krauth@danet.de,holger.krauth@danet.de,17/Jan/03 22:44,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.0,,lang.*,,,0,,,,,,,,"Hopefully I can give back a little after having had so much
benefit of your work.

I will refer to the sources from commons-lang-1.0.1-src.zip, downloaded
the 17 January 2003.

Detail:
=======
In org.apache.commons.lang.StringUtils: If you invoke
public static String replace(String text, String repl, String with)
with arguments:
   text  !=  null
   repl.equals("""")
   with  anything

you get an infinite loop as ""FOO"".indexOf("""") == 0.

Demo:
=====
To demonstrate the bug, please add the following lines in
org.apache.commons.lang.StringUtilsTest in the body of
testReplaceFunctions(), line 194:

    public void testReplaceFunctions() {

      //... existing code

      //-- bug demonstration, added by HoKr
      assertEquals(""replace(String, String, String) failed"",
          ""FOO"", StringUtils.replace(""FOO"", """", ""any""));
    }

I got an OutOfMemoryException then.

Fix:
====
My suggestion to fix this in StringUtils.replace(String, String, String),
line 593:

    public static String replace(String text, String repl, String with,
                                 int max) {
        if (text == null) {
            return null;
        }

        //-- FIX SUGGESTION START >>>
        //-- added by HoKr for infinite loop avoidance
        //-- keeps on throwing NullPointerException if repl == null
        //-- -->> this is faster than """".equals(repl); NPE allowed.
        if (repl.length() == 0) {
           return text;
        }
        //-- <<< FIX SUGGESTION END

        StringBuffer buf = new StringBuffer(text.length());
        int start = 0, end = 0;
        while ((end = text.indexOf(repl, start)) != -1) {
            buf.append(text.substring(start, end)).append(with);
            start = end + repl.length();

            if (--max == 0) {
                break;
            }
        }
        buf.append(text.substring(start));
        return buf.toString();
    }

Further:
========
Further I suggest instead of throwing NullPointerExceptions
if (repl == null || with == null) to return the parameter text then.

It would meet closer the expectation of what the method should perform from
my point of view in these cases.

This behaviour would be payed with 2 extra comparisons to null
(before the while-loop) in 'normal' operation mode though.

The Code would be:

    public static String replace(String text, String repl, String with,
                                 int max) {
        if (text == null) {
            return null;
        }

        //-- START >>>
        //-- suggestion by HoKr, BUT would CHANGE outside behaviour:
        //-- not throwing NPE any more!
        if (repl == null || with == null) {
            return text;
        }
        //-- added by HoKr for infinite loop avoidance
        //-- keeps on throwing NullPointerException if repl == null
        if (repl.length() == 0) {
            return text;
        }
        //-- <<< END

        StringBuffer buf = new StringBuffer(text.length());
        int start = 0, end = 0;
        while ((end = text.indexOf(repl, start)) != -1) {
            buf.append(text.substring(start, end)).append(with);
            start = end + repl.length();

            if (--max == 0) {
                break;
            }
        }
        buf.append(text.substring(start));
        return buf.toString();
    }



Regards,
Holger Krauth","Operating System: Linux
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16204.0,,,2003-01-20 02:17:53.0,,,false,,,,,,,,,,,,,,146988,,,Mon Jan 20 02:17:53 UTC 2003,,,,,,0|i0d7av:,74959,,,,,,,,"20/Jan/03 02:17;scolebourne@joda.org;Changes made as suggested, thanks
Stephen",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Throwable cause for NotImplementedException,LANG-14,12341275,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,alban,alban,16/Feb/04 00:29,16/May/06 12:29,07/Apr/19 20:37,16/May/06 12:29,3.0,,,,2.1,,,,,0,,,,,,,,"The objective is to be able to signal a unsupported catch block :

 try {
    ...
 } catch (... e) {
    throw new NotImplentedException(""... <case description> ..."", e);
 }","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,25/Feb/04 15:46;alban;ASF.LICENSE.NOT.GRANTED--lang-NotImplementedException-cause.patch;https://issues.apache.org/jira/secure/attachment/12332745/ASF.LICENSE.NOT.GRANTED--lang-NotImplementedException-cause.patch,16/Feb/04 00:30;alban;ASF.LICENSE.NOT.GRANTED--lang-NotImplementedException-cause.patch;https://issues.apache.org/jira/secure/attachment/12332744/ASF.LICENSE.NOT.GRANTED--lang-NotImplementedException-cause.patch,,,,,,,,,2.0,,,,,,,,,,,,,,,,26954.0,,,2004-03-04 08:12:44.0,,,false,,,,,,,,,,,,,,146987,,,Wed Apr 26 13:10:49 UTC 2006,,,,,,0|i0d7b3:,74960,,,,,,,,"16/Feb/04 00:30;alban;Created an attachment (id=10365)
Adds a Throwable cause support to NotImplementedException
","25/Feb/04 15:46;alban;Created an attachment (id=10540)
Complete patch with unit tests
","04/Mar/04 08:12;scolebourne@joda.org;I have checked in a change to NotImplementedException that makes full use of 
the Nestable interface and structure that we already have in [lang]. If 
committers agree, this should be extended to other exceptions in the base of 
lang.","14/Mar/04 03:01;alban;NotImplementedException seems to be modified. The bug is fixed, isn'it ?","16/Mar/04 10:03;ggregory@seagullsw.com;There is now a constructor NotImplementedException(String msg, Throwable cause)
so the ticket is ""fixed"". Stephen could you add @since tags to the new stuff?
Then we can close this ticket. Thanks!",17/Mar/04 06:47;scolebourne@joda.org;@since done,"26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,
[lang] DateUtils.truncate() is off by one hour when using a date in DST switch 'zone',LANG-13,12341159,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,joachim.hagger@netcetera.ch,joachim.hagger@netcetera.ch,16/Dec/03 18:44,16/Dec/09 08:51,07/Apr/19 20:37,16/Dec/09 08:51,2.0,,,,2.1,,lang.time.*,,,0,,,,,,,,"Try this using a Central European TimeZone:

import java.util.Calendar;
import org.apache.commons.lang.time.DateUtils;

Calendar cal = Calendar.getInstance();
cal.set(Calendar.MONTH, Calendar.MARCH);
cal.set(Calendar.YEAR, 2003);
cal.set(Calendar.DAY_OF_MONTH, 30);
cal.set(Calendar.HOUR_OF_DAY, 5);
cal.set(Calendar.MINUTE, 0);
cal.set(Calendar.SECOND, 0);
Date date_20030330 = cal.getTime();

Date expDate = DateUtils.truncate(date_20030330, Calendar.DATE);
System.out.println(expDate.toString());

-> Sat Mar 29 23:00:00 MET 2003 instead of Sun Mar 30 00:00:00 MET 2003

If the calendar instance represents a date AFTER the daylight savings time
switch and will be truncated to a time BEFORE the daylight savings time switch,
then the resulting date is wrong. (Daylight savings time was Sun Mar 30 02:00:00
resetting to 01:00.00.) Might also happen when rounding up dates over the
daylight savings time switch...","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,25560.0,,,2004-07-05 04:20:09.0,,,false,,,,,,,,,,,,,,34133,,,Wed Apr 26 13:10:57 UTC 2006,,,,,,0|i0d7bb:,74961,,,,,,,,"05/Jul/04 04:20;stevencaswell@apache.org;The appears to be fixable with a minor change to the DateUtils.modify method,
replacing the val.add call with a val.set call, doing the calculation external
to the Calendar instance. For some reason, the Calendar.add method subtracts an
additional hour in the particular test scenario mentioned in the bug report, but
doesn't with other timezones I tested (such as US/Eastern). So I think the
easiest fix is to do the calculation in our code.

I have changed the DateUtils.modify method and the existing tests pass. I've
written one test to verify the fix works with the above scenario, and I plan to
write some additional tests for rounding.","05/Jul/04 04:34;stevencaswell@apache.org;After some more testing, the light bulb came on as to why the Calendar.add
method seemed to be overshooting the correct date and subtracting 6 hours
instead of five. This is probably a ""duh"" for most everyone else, but it took me
a few minutes to see it. The DateUtils.modify method, which does the gruntwork
of the round and truncate methods, was subtracting the number of hours from the
date being rounded/truncated. In this paricular case, it was subtracting 5 hours
to get from 05:00 to 00:00. However, since the scenario happened to cause this
across a DST enablement, Calendar.add was treating the time between 02:00 and
03:00 as non-existing, so subtracting 5 hours from 05:00 was giving 23:00 on the
previous day, which is technically correct. But for a rounding/truncation
method, this is not appropriate, so my earlier solution of calculating the
desired hour value and using set does appear to be appropriate.

Note that I did a few tests on rounding across the 02:00/03:00 barrier, and the
rounding also ""ignores"" the missing hour. So for example, rounding 01:40 gives
03:00, and rounding 02:40 give 04:00, which IMHO are both correct, since the
02:00-03:00 hour does not exist.","12/Jul/04 00:04;stevencaswell@apache.org;The truncate/round logic was adding a negative value to the current hours (using
Calendar.add) to move the hours back to zero. When this is done across the
beginning of daylight saving time, it has the affect of moving to 23:00 of the
previous day, because the hour skipped when daylight saving time doesn't exist.
For example, if daylight saving time begins at 02:00, and -5 is added to 05:00,
the result is 23:00 of yesterday, because the hour between 02:00 and 03:00
doesn't exist. The fix was to do the calculation in the truncate/round code, and
use Calendar.set to set the new hour value.","04/Apr/05 04:20;apa3a@yahoo.com;Just hit this bug using 2.0.
This is what happens to those who work on Sundays :-).
Very delighted that fix exists. I'm about to give my app to the client and don't
want to use current CVS or custom-patched library. Found a workaround:

DateUtils.truncate(date, Calendar.DATE)

use:

DateUtils.round(
        DateUtils.truncate(date, Calendar.DATE),
        Calendar.DATE)

Call to round eliminates any 1-hour discrepancy which may exist.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,
Example in Javadoc for ToStringBuilder wrong for append.,LANG-12,12340488,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,schrader005@yahoo.com,schrader005@yahoo.com,15/Jan/03 04:48,16/May/06 12:44,07/Apr/19 20:37,16/May/06 12:44,2.0,,,,2.0,,,,,0,,,,,,,,"The following is directly from the Javadoc page. Please see inline notes.

*** Begin Quote ***
To use this class write code as follows: 

 public class Person {
   String name;
   int age;
   boolean isSmoker;
 
   ...
 
   public String toString() {
     return new ToStringBuilder(this).
       append(name, ""name"").     //!! should be - append(""name"", name).
       append(age, ""age"").       //!! should be - append(""age"", age).
       append(smoker, ""smoker""). //!! should be - append(""smoker"", smoker).
       toString();
   }
 }
*** End Quote ***

In short, the order of arguments to the append method in the example have been 
reversed.

Thank you.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,16076.0,,,2003-01-17 03:50:31.0,,,false,,,,,,,,,,,,,,146986,,,Fri Jan 17 03:50:31 UTC 2003,,,,,,0|i0d7bj:,74962,,,,,,,,17/Jan/03 03:50;bayard;Fixed by Stephen(scolebourne) on 30th October in CVS HEAD.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Depend on JDK 1.5+,LANG-11,12343027,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,bayard,bayard,17/Apr/06 11:52,17/Dec/09 03:42,07/Apr/19 20:37,01/Mar/09 20:59,3.0,,,,3.0,,General,,,0,,,,,,,,"Compile under Java 5.

Or go straight to 6?","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,39322.0,,,,,,false,,,,,,,,,,,,,,41554,,,Sun Mar 01 20:59:20 UTC 2009,,,,,,0|i0d7br:,74963,,,,,,,,01/Mar/09 20:59;bayard;Probably 1.5. 1.6 wasn't that special.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] [patch] ClassUtils.primitiveToWrapper and Void,LANG-10,12342160,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,alban,alban,06/Apr/05 22:02,06/Feb/07 23:47,07/Apr/19 20:37,06/Feb/07 23:47,,,,,2.2,,,,,0,,,,,,,,"ClassUtils.primitiveToWrapper returns null when the specified Class is
Void.TYPE. Because Void.TYPE is primitive but not present into
primitiveWrapperMap. Should return Void.TYPE instead.","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,06/Apr/05 22:34;alban;ASF.LICENSE.NOT.GRANTED--lang-ClassUtils-primitivesToWrappers-Void.patch;https://issues.apache.org/jira/secure/attachment/12333445/ASF.LICENSE.NOT.GRANTED--lang-ClassUtils-primitivesToWrappers-Void.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,34327.0,,,2005-07-15 07:22:07.0,,,false,,,,,,,,,,,,,,146985,,,Fri Jul 15 07:22:07 UTC 2005,,,,,,0|i0d7bz:,74964,,,,,,,,"06/Apr/05 22:34;alban;Created an attachment (id=14631)
possible patch
","15/Jul/05 07:22;scolebourne@joda.org;Patch applied, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] lang.builder classes javadoc edits (mostly typo fixes),LANG-9,12340861,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,pgieser@tampabay.rr.com,pgieser@tampabay.rr.com,21/Jul/03 11:16,16/Oct/13 08:55,07/Apr/19 20:37,16/May/06 12:37,,,,,2.0,,,,,0,,,,,,,,,"Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,21/Jul/03 11:18;pgieser@tampabay.rr.com;ASF.LICENSE.NOT.GRANTED--lang_doc_patch.txt;https://issues.apache.org/jira/secure/attachment/12332418/ASF.LICENSE.NOT.GRANTED--lang_doc_patch.txt,,,,,,,,,,1.0,,,,,,,,,,,,,,,,21758.0,,,,,,false,,,,,,,,,,,,,,146984,,,Mon Jul 21 11:18:40 UTC 2003,,,,,,0|i0d7c7:,74965,,,,,,,,"21/Jul/03 11:18;pgieser@tampabay.rr.com;Created an attachment (id=7413)
[PATCH] fixes typos in the javadocs for lang.builder classes
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
No usage of org.apache.commons.lang.exception.NestableException is untrue!,LANG-8,12341099,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Incomplete,,paul-apache@mansfield.co.uk,paul-apache@mansfield.co.uk,17/Nov/03 23:56,16/Oct/13 08:55,07/Apr/19 20:37,06/Feb/07 23:47,,,,,,,,,,0,,,,,,,,"My program manages to generate this exception
javac PsiStatus.java
PsiStatus.java:59: cannot access org.apache.commons.lang.exception.
NestableException
file org/apache/commons/lang/exception/NestableException.class not found
        Connection con = Torque.getConnection(""mypsi"");

here's a snippet of source:

package org.apache.jetspeed.portal.portlets;

import org.apache.jetspeed.portal.portlets.AbstractInstancePortlet;
import org.apache.turbine.util.RunData;
import org.apache.turbine.om.security.*;
import org.apache.ecs.ConcreteElement;
import org.apache.ecs.StringElement;
import org.apache.torque.*;
import javax.servlet.*;
import java.sql.*;
import javax.sql.*;
import java.text.*;
import java.util.*;

public class MyClass extends AbstractInstancePortlet
{
    public ConcreteElement getContent (RunData runData)
    {
        Connection con = Torque.getConnection(""mypsi"");
    }
}","Operating System: Linux
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,24755.0,,,2003-11-18 01:06:51.0,,,false,,,,,,,,,,,,,,146983,,,Sat Nov 29 23:06:18 UTC 2003,,,,,,0|i0d7cf:,74966,,,,,,,,"18/Nov/03 01:06;apernoud@sopragroup.com;javac PsiStatus.java

PsiStatus.java:59: cannot access org.apache.commons.lang.exception.

I don't get how this is related to jetspeed, what is PsiStatus.java ?","21/Nov/03 07:30;paul-apache@mansfield.co.uk;Hi,
PsiStatus was my class; it's irrelevant, what matters is the function I was 
calling which showed that the documentation of apache commons NestableException 
is incorrect.

regards
Paul",21/Nov/03 15:48;apernoud@sopragroup.com;What's the link with jetspeed ???,"21/Nov/03 17:04;paul-apache@mansfield.co.uk;oops, was in the wrong bug list... I was working on jetspeed when I discovered 
this.","29/Nov/03 23:06;scolebourne@joda.org;Closed, see jetspeed",,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Documentation error in StringUtils.replace,LANG-7,12341051,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,russelldittmar@charter.net,russelldittmar@charter.net,23/Oct/03 20:19,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.0,,,,2.1,,lang.*,,,0,,,,,,,,"The following example from the javadoc is incorrect.

StringUtils.replace(""aba"", ""a"", """")    = ""aba""

it should be:

StringUtils.replace(""aba"", ""a"", """")    = ""b""","Operating System: All
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,24056.0,,,2003-10-24 03:46:47.0,,,false,,,,,,,,,,,,,,146982,,,Wed Apr 26 13:10:57 UTC 2006,,,,,,0|i0d7cn:,74967,,,,,,,,"24/Oct/03 03:46;scolebourne@joda.org;Well spotted, thanks. Change made.","17/Mar/05 06:05;nospam_apacheorg@scovetta.com;As per the online javadocs:
http://jakarta.apache.org/commons/lang/api/org/apache/commons/lang/StringUtils.html#replace(java.lang.String,%20java.lang.String,%20java.lang.String)

This seems to have not been fixed:

 StringUtils.replace(null, *, *)        = null
 StringUtils.replace("""", *, *)          = """"
 StringUtils.replace(""aba"", null, null) = ""aba""
 StringUtils.replace(""aba"", null, null) = ""aba""
 StringUtils.replace(""aba"", ""a"", null)  = ""aba"" 
 StringUtils.replace(""aba"", ""a"", """")    = ""aba"" <-- here
 StringUtils.replace(""aba"", ""a"", ""z"")   = ""zbz""","10/Apr/05 23:56;fredrik.westermarck@mdh.se;Changing this to 'fixed' since this issue has been addressed in the source
repository.

The javadoc available at http://jakarta.apache.org/commons/lang/api/index.html
reflects the latest released version (2.0) of commons-lang. In that version the
issue were present. The online javadoc will however be updated when the next
version of commons-lang is released.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,
"[lang] EqualsBuilder.append(Object[], Object[]) incorrectly checks that rhs[i] is instance of lhs[i]'s class",LANG-6,12341995,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,andrew@terracottatech.com,andrew@terracottatech.com,13/Jan/05 03:02,16/May/06 12:16,07/Apr/19 20:37,16/May/06 12:16,2.0,,,,2.1,,,,,0,,,,,,,,"Append two arrays of any object type to an EqualsBuilder using EqualsBuilder.append(Object[], 
Object[]) -- we'll call the first 'lhs' and the second 'rhs'. If, for any i, lhs[i] is not null, rhs[i] is not null, 
and rhs[i] is not of the same type as, or a subtype of, lhs[i], then the EqualsBuilder will return false.

However, this behavior is incorrect. While rare, it is perfectly valid in Java to define an equals() method 
on a class A that will return true when passed in an object of some class B, where B is not the same as A 
nor a subtype of A. (A conceptual example is comparing a RGBColor to a CMYKColor, where RGBColor is 
not a subclass of CMYKColor, nor vice-versa. In this example, the EqualsBuilder will return false, 
whether the equals() method is defined on RGBColor to explicitly check CMYKColors, or even if you 
define a base-class Color.equals() method that does an abstract comparison.)

To reproduce:

public static class A {
  private int a;
  public A(int a) { this.a = a; }
  public boolean equals(Object o) {
    if (o == this) return true;
    if (o instanceof A) return this.a = ((A) o).getA();
    if (o instanceof B) return this.a = ((B) o).getB();
    return false;
  }
  public int getA() { return this.a; }
}

public static class B {
  private int b;
  public B(int b) { this.b = b; }
  public boolean equals(Object o) {
    if (o == this) return true;
    if (o instanceof A) return this.b = ((A) o).getA();
    if (o instanceof B) return this.b = ((B) o).getB();
    return false;
  }
  public int getB() { return this.b; }
}

Object[] x = new Object[] { new A(1) };
Object[] y = new Object[] { new B(1) };

System.err.println(""x[0].equals(y[0])? "" + x[0].equals(y[0]));
System.err.println(""Does EqualsBuilder think the arrays are equal? "" + (new EqualsBuilder().append(x, 
y).isEquals()));

This program will output:

true
false

The attached patch adds to an existing unit-test case some code that proves the existence of this bug, 
and also fixes it. (It also fixes COM-1842.)","Operating System: All
Platform: All",,,,,,,,,,,,,,,,,,,,,,,,,13/Jan/05 03:02;andrew@terracottatech.com;ASF.LICENSE.NOT.GRANTED--commons-lang-2.0-src.patch;https://issues.apache.org/jira/secure/attachment/12333345/ASF.LICENSE.NOT.GRANTED--commons-lang-2.0-src.patch,,,,,,,,,,1.0,,,,,,,,,,,,,,,,33069.0,,,2005-01-17 04:37:23.0,,,false,,,,,,,,,,,,,,34035,,,Wed Apr 26 13:10:58 UTC 2006,,,,,,0|i0d7cv:,74968,,,,,,,,"13/Jan/05 03:02;andrew@terracottatech.com;Created an attachment (id=13984)
This patch introduces testcases for, and fixes, bugs 33067 and 33069.
",13/Jan/05 03:03;andrew@terracottatech.com;See also COM-1842.,"17/Jan/05 04:37;ggregory@seagullsw.com;This issue is already fixed in CVS and should be the current nightly build. I
have added a unit test EqualsBuilderTest.testUnrelatedClasses() which is almost
identical to the example in this ticket.","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,,,,,,,,,,,,,,,,
StringUtils.split ignores empty items,LANG-5,12340929,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,ludwig@riege.com,ludwig@riege.com,25/Aug/03 19:16,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,1.0.1,,,,2.1,,lang.*,,,0,,,,,,,,"StringUtils.split ignores empty items (eg. delimiter at the beginning of the 
string, 2 delimiters directly after another)

Eg.

String[] l = StringUtils.split(""X,DE,Germany"", "","");
results in 
l[0] = ""X""
l[1] = ""DE""
l[2] = ""Germany""

String[] l = StringUtils.split("",DE,Germany"", "","");
results in
l[0] = ""DE""
l[1] = ""Germany""
expected : 
l[0] = """" (or null ?)
l[1] = ""DE""
l[2] = ""Germany""

The current behaviour makes it impossible to detect the ""column"" (eg. for 
parsing .csv files).","Operating System: other
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,19/Nov/03 23:02;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java;https://issues.apache.org/jira/secure/attachment/12332484/ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java,15/Nov/03 07:29;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java;https://issues.apache.org/jira/secure/attachment/12332483/ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java,15/Nov/03 07:06;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java;https://issues.apache.org/jira/secure/attachment/12332480/ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java,12/Nov/03 22:56;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java;https://issues.apache.org/jira/secure/attachment/12332479/ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java,12/Nov/03 21:20;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java;https://issues.apache.org/jira/secure/attachment/12332477/ASF.LICENSE.NOT.GRANTED--DelimitedTokenizer.java,15/Nov/03 07:28;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--DelimitedTokenizerTest.java;https://issues.apache.org/jira/secure/attachment/12332482/ASF.LICENSE.NOT.GRANTED--DelimitedTokenizerTest.java,15/Nov/03 07:07;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--DelimitedTokenizerTest.java;https://issues.apache.org/jira/secure/attachment/12332481/ASF.LICENSE.NOT.GRANTED--DelimitedTokenizerTest.java,12/Nov/03 21:21;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--DelimitedTokenizerTest.java;https://issues.apache.org/jira/secure/attachment/12332478/ASF.LICENSE.NOT.GRANTED--DelimitedTokenizerTest.java,25/Nov/03 08:13;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--Tokenizer.java.patch;https://issues.apache.org/jira/secure/attachment/12332485/ASF.LICENSE.NOT.GRANTED--Tokenizer.java.patch,25/Nov/03 08:14;mattinger@yahoo.com;ASF.LICENSE.NOT.GRANTED--TokenizerTest.java.patch;https://issues.apache.org/jira/secure/attachment/12332486/ASF.LICENSE.NOT.GRANTED--TokenizerTest.java.patch,10.0,,,,,,,,,,,,,,,,22692.0,,,2003-08-29 14:41:26.0,,,false,,,,,,,,,,,,,,34073,,,Wed Apr 26 13:10:47 UTC 2006,,,,,,0|i0d7d3:,74969,,,,,,,,"29/Aug/03 14:41;scolebourne@joda.org;We could do with writing a new StringTokeniser replacement class in [lang] for 
this. Does anyone know of one to use as a starting point?","12/Nov/03 21:20;mattinger@yahoo.com;Created an attachment (id=9068)
Source file for the DelimitedTokenizer class
","12/Nov/03 21:21;mattinger@yahoo.com;Created an attachment (id=9069)
TestCase for the DelimitedTokenizer class
","12/Nov/03 21:22;mattinger@yahoo.com;I have created a new class called DelimitedTokenizer which tokenizes strings 
according to a delimited format, such as CSV.  There are certain properties 
which are configurable, including the delimiter character, the quote character, 
ignoring leading whitespace, ignoring trailing whitesapce, and treating zero 
length strings as nulls.  Also enclosed is a small testcase for this class.
","12/Nov/03 22:56;mattinger@yahoo.com;Created an attachment (id=9070)
Delimited Tokenizer source code
",12/Nov/03 22:59;mattinger@yahoo.com;The attachment uploaded at 14:56 supercedes the one uploaded at 13:20,"15/Nov/03 07:06;mattinger@yahoo.com;Created an attachment (id=9116)
DelimitedTokenizer source [ supercedes attachments 11/12/03 13:20 and 11/12/03 14:56]
","15/Nov/03 07:07;mattinger@yahoo.com;Created an attachment (id=9117)
DelimitedTokenizerTest source [ supercedes attachment 11/12/03 13:21]
","15/Nov/03 07:28;mattinger@yahoo.com;Created an attachment (id=9118)
DelimitedTokenizerTest [supercedes 11/14/03 23:07]
","15/Nov/03 07:29;mattinger@yahoo.com;Created an attachment (id=9119)
DelimitedTokenizer [ supercedes 11/14/03 23:06 ]
",18/Nov/03 07:02;scolebourne@joda.org;Initial version now checked in.,"19/Nov/03 23:02;mattinger@yahoo.com;Created an attachment (id=9192)
DelimitedTokenizer [ supercedes 11/14/03 23:29]
","20/Nov/03 06:23;scolebourne@joda.org;Have you had a look at the CVS version? I adapted it a bit before I checked it 
in...",25/Nov/03 07:44;mattinger@yahoo.com;I can't find the cvs version.,"25/Nov/03 08:13;mattinger@yahoo.com;Created an attachment (id=9273)
PatchFile for Tokenizer.java to add reset methods
","25/Nov/03 08:14;mattinger@yahoo.com;Created an attachment (id=9274)
Patch file for TokenizerTest.java to fix expected output
","10/May/04 19:18;weberjn;""Adjacent separators are treated as one separator.""

I think this should not be so. Rather it should behave as 1.4 String.split().
Merging the separators makes having optional parts between delimeters difficult,
e.g. in corbaloc:iiop:my.host.net:4812/MyName the iiop is optional and can be
written as corbaloc::my.host.net:4812/MyName. This is easy to parse with
String.split() but not with StringUtils.split().","11/Jul/04 23:52;stevencaswell@apache.org;Created new methods splitPreserveAllTokens to mirror the existing split methods,
adding the functionality of preserving empty tokens indicated by adjacent separators","26/Apr/06 13:10;bayard;2.1 released, closing.",,,,,,,,,,,,
Hierarchy support in ToStringBuilder.reflectionToString(),LANG-4,12340456,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,garydgregory,,11/Dec/02 08:42,10/Mar/11 22:30,07/Apr/19 20:37,16/May/06 12:44,2.0,,,,2.0,,,,,0,,,,,,,,"I just discovered that the method ToStringBuilder.reflectionToString() does not 
work in a class hierarchy.

For example:

class A defines inst var a.
class B extends A defines inst var b.

new A().toString returns ""a=...""
new B().toString returns ""b=...""

when I expected new B().toString to return ""a=...,b=...""

Can I use reflectionToString() to accomplish this?

Thank you for considering this request.

Gary","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,13/Dec/02 12:22;ASF.LICENSE.NOT.GRANTED--ToStringBuilder.patch-1.9.java;https://issues.apache.org/jira/secure/attachment/12332089/ASF.LICENSE.NOT.GRANTED--ToStringBuilder.patch-1.9.java,13/Dec/02 12:23;ASF.LICENSE.NOT.GRANTED--ToStringBuilderTest.patch-1.2.java;https://issues.apache.org/jira/secure/attachment/12332090/ASF.LICENSE.NOT.GRANTED--ToStringBuilderTest.patch-1.2.java,,,,,,,,,2.0,,,,,,,,,,,,,,,,15257.0,,,2002-12-13 12:22:55.0,,,false,,,,,,,,,,,,,,146981,,,Sat Jan 18 06:50:03 UTC 2003,,,,,,0|i0d7db:,74970,,,,,,,,"13/Dec/02 12:22;ggregory@seagullsw.com;Created an attachment (id=4154)
Patch to version 1.9
","13/Dec/02 12:23;ggregory@seagullsw.com;Created an attachment (id=4155)
Patch to version 1.2
","01/Jan/03 04:23;scolebourne@joda.org;Patch applied with some modifications. Please check CVS to confirm.

I would appreciate further patches for Equals, HashCode and CompareTo builders 
if you have a chance ;-)","15/Jan/03 02:46;ggregory@seagullsw.com;I have looked at the mods to my patch and find that all is well with the 
exception of the mismatch between the code and the in-line comment:

//throw a runtime exception in case the impossible happens.

This comment is not followed by a throw. Either the comment should be removed 
or the throw re-inserted.","15/Jan/03 02:47;ggregory@seagullsw.com;I will try to take a look at Equals, HashCode and CompareTo sometimes this 
week.",17/Jan/03 09:58;ggregory@seagullsw.com;Please bug id 16193 for hierarchy support in EqualsBuilder.reflectionEquals().,"18/Jan/03 06:50;ggregory@seagullsw.com;Please bug id 16227 for hierarchy support in CompareToBuilder.reflectionCompare
().
Please bug id 16228 for hierarchy support in hashCodeBuilder.reflectionHashCode
().
",,,,,,,,,,,,,,,,,,,,,,,,
[lang] PADDING array in StringUtils overflows on '\uffff',LANG-3,12342376,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,sw@reubensivan.com,sw@reubensivan.com,15/Jul/05 22:16,16/Dec/09 08:50,07/Apr/19 20:37,16/Dec/09 08:50,2.1,,,,2.2,,lang.*,,,0,,,,,,,,"The PADDING array in class StringUtils is one entry too short.
As declared, it overflows on '\uffff'.
To test, run:
 StringUtils.leftPad(""abcd"", 10, '\ufffe') // no exception
 StringUtils.leftPad(""abcd"", 10, '\uffff') // ArrayIndexOutOfBoundsException

Current code:
    private static final String[] PADDING = new String[Character.MAX_VALUE];
Suggested fix: 
    private static final String[] PADDING = new String[Character.MAX_VALUE + 1];","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,35756.0,,,2005-08-27 22:41:29.0,,,false,,,,,,,,,,,,,,34101,,,Sat Aug 27 22:41:29 UTC 2005,,,,,,0|i0d7dj:,74971,,,,,,,,"27/Aug/05 22:41;scolebourne@joda.org;Patch applied, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] javadoc example for StringUtils.splitByWholeSeparator incorrect,LANG-2,12342586,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Major,Fixed,,maartenc,maartenc,29/Sep/05 05:17,16/Oct/13 08:54,07/Apr/19 20:37,16/Dec/09 08:50,,,,,2.2,,lang.*,,,0,,,,,,,,"Hi,

the javadoc examples for the StringUtils.splitByWholeSeparator(...) methods 
are not correct.

- The examples of splitByWholeSeperator(String,String) are illustrating the 
usage of the StringUtils.split(String,String) method.
- The 6th example of splitByWholeSeperator(String,String,int) is not correct 
and should be removed.

regards,
Maarten","Operating System: other
Platform: Other",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,36850.0,,,2006-01-02 03:30:58.0,,,false,,,,,,,,,,,,,,146980,,,Mon Jan 02 03:30:58 UTC 2006,,,,,,0|i0d7dr:,74972,,,,,,,,"02/Jan/06 03:30;scolebourne@joda.org;Examples fixed, thanks",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
[lang] Patch for javadocs,LANG-1,12340914,Bug,Closed,LANG,Commons Lang,software,issues@commons.apache.org,"<h4>RELEASE PLAN</h4>

<ul>
<li>Lang 3.8 - Next release from 3.x branch. </li>
<li>Lang 3.x - Items proposed for a subsequent release; will be backwards compatible with 3.0. </li>
<li>Lang 4.0 - Items that require binary incompatible changes. Will not be compatible with 3.x.</li>
</ul>",http://commons.apache.org/lang/,Minor,Fixed,,pgieser@tampabay.rr.com,pgieser@tampabay.rr.com,16/Aug/03 12:27,16/Oct/13 08:54,07/Apr/19 20:37,16/May/06 12:36,,,,,2.0,,,,,0,,,,,,,,"Adding 2 patches. 

One includes a comprehensive review of the builder package, both style and 
syntax along with just syntax fixes for the other packages.

The other fixes minor typos in the builder test package.","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,,,,,,,,,,,,,16/Aug/03 12:29;pgieser@tampabay.rr.com;ASF.LICENSE.NOT.GRANTED--java_patch.txt;https://issues.apache.org/jira/secure/attachment/12332464/ASF.LICENSE.NOT.GRANTED--java_patch.txt,16/Aug/03 12:30;pgieser@tampabay.rr.com;ASF.LICENSE.NOT.GRANTED--test_patch.txt;https://issues.apache.org/jira/secure/attachment/12332465/ASF.LICENSE.NOT.GRANTED--test_patch.txt,,,,,,,,,2.0,,,,,,,,,,,,,,,,22480.0,,,2003-08-16 20:12:54.0,,,false,,,,,,,,,,,,,,146979,,,Fri Oct 24 03:55:24 UTC 2003,,,,,,0|i0d7dz:,74973,,,,,,,,"16/Aug/03 12:29;pgieser@tampabay.rr.com;Created an attachment (id=7847)
Javadoc patch for lang
","16/Aug/03 12:30;pgieser@tampabay.rr.com;Created an attachment (id=7848)
Fix typos patch
","16/Aug/03 20:12;scolebourne@joda.org;I have applied all of the testing patch.

For the main patch, I have applied as much as I can. This includes everything 
except the builder package and StringUtils.

Unfortunately, the main patch was really too large, and contained too many 
changes. You have put a lot of work into the builder package, however I found 
some mistakes in the changes, and also a serious problem where a method was 
renamed. This shook my confidence in applying the patch.

I applied changes for CompareToBuilder manually, agreeing with some of your 
changes, disagreeing with others. This took about 2 hours for the one class, so 
I cannot procede to the others at present.

I don't want to dishearten you, as javadoc patches are very useful. For the 
future however I suggest contacting the mailing list first. I would also 
suggest separating javadoc fixes (eg.missing @param/@return) from javadoc text 
changes (better/different description) from javadoc style (html tags etc.). For 
me, each patch should take less than 30 mins (preferably 15mins) and be about 
one thing and one thing only.

thanks

","16/Aug/03 21:21;pgieser@tampabay.rr.com;I understand your perspective and agree that it was too large.  I guess I was
trying to get it all in before 2.0, but perhaps that was optimistic.

I don't remember the instance of a changed method name.  But I do remember
running the lang tests numerous times and never got an failure.  Did I change
the test too?

As for the other minor errors, did the tests not cover them?

Anyway, lesson learned. I will be more proactive asking about things on the list
before making changes.

Thanks for looking at it!","16/Aug/03 21:44;scolebourne@joda.org;The changed method name was in ToStringStyle (isShortClassName).

The 'other errors' referred to a couple of places in the new javadoc that 
didn't describe the classes functionality accurately. Can't remember where.",24/Oct/03 03:55;scolebourne@joda.org;Closed IIRC,,,,,,,,,,,,,,,,,,,,,,,,,
